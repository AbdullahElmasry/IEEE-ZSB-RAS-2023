
Electronic_Switches.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003590  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  00003590  00003604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002bbc  00000000  00000000  0000367c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000df3  00000000  00000000  00006238  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000702b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000718b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000731a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000935f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000a460  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000b3e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000b564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000b826  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c0b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3d       	cpi	r26, 0xD6	; 214
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ed 15 	call	0x2bda	; 0x2bda <main>
      7a:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 eb       	ldi	r26, 0xB6	; 182
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 eb       	ldi	r24, 0xB6	; 182
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	66 eb       	ldi	r22, 0xB6	; 182
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_voidInit>:
#include "DIO_config.h"



void DIO_voidInit(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
     c96:	ea e3       	ldi	r30, 0x3A	; 58
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	8f e7       	ldi	r24, 0x7F	; 127
     c9c:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 e3       	ldi	r24, 0x30	; 48
     ca4:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
     ca6:	e4 e3       	ldi	r30, 0x34	; 52
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8f e0       	ldi	r24, 0x0F	; 15
     cac:	80 83       	st	Z, r24

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
     cae:	e1 e3       	ldi	r30, 0x31	; 49
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	80 83       	st	Z, r24
	/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA0_INITIAL_VALUE);
     cb6:	eb e3       	ldi	r30, 0x3B	; 59
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	88 e7       	ldi	r24, 0x78	; 120
     cbc:	80 83       	st	Z, r24

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB0_INITIAL_VALUE);
     cbe:	e8 e3       	ldi	r30, 0x38	; 56
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	8f e0       	ldi	r24, 0x0F	; 15
     cc4:	80 83       	st	Z, r24

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC0_INITIAL_VALUE);
     cc6:	e5 e3       	ldi	r30, 0x35	; 53
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	8f e0       	ldi	r24, 0x0F	; 15
     ccc:	80 83       	st	Z, r24

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD0_INITIAL_VALUE);
     cce:	e2 e3       	ldi	r30, 0x32	; 50
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	10 82       	st	Z, r1

}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <DIO_u8SetPinDirection>:




u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	2e 97       	sbiw	r28, 0x0e	; 14
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	8a 83       	std	Y+2, r24	; 0x02
     cf0:	6b 83       	std	Y+3, r22	; 0x03
     cf2:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	84 30       	cpi	r24, 0x04	; 4
     cfc:	08 f0       	brcs	.+2      	; 0xd00 <DIO_u8SetPinDirection+0x26>
     cfe:	0d c1       	rjmp	.+538    	; 0xf1a <DIO_u8SetPinDirection+0x240>
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	88 30       	cpi	r24, 0x08	; 8
     d04:	08 f0       	brcs	.+2      	; 0xd08 <DIO_u8SetPinDirection+0x2e>
     d06:	09 c1       	rjmp	.+530    	; 0xf1a <DIO_u8SetPinDirection+0x240>
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	88 23       	and	r24, r24
     d0c:	21 f0       	breq	.+8      	; 0xd16 <DIO_u8SetPinDirection+0x3c>
     d0e:	8c 81       	ldd	r24, Y+4	; 0x04
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	09 f0       	breq	.+2      	; 0xd16 <DIO_u8SetPinDirection+0x3c>
     d14:	02 c1       	rjmp	.+516    	; 0xf1a <DIO_u8SetPinDirection+0x240>
	{

		switch (Copy_u8PortId)
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	3e 87       	std	Y+14, r19	; 0x0e
     d1e:	2d 87       	std	Y+13, r18	; 0x0d
     d20:	8d 85       	ldd	r24, Y+13	; 0x0d
     d22:	9e 85       	ldd	r25, Y+14	; 0x0e
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	91 05       	cpc	r25, r1
     d28:	09 f4       	brne	.+2      	; 0xd2c <DIO_u8SetPinDirection+0x52>
     d2a:	4f c0       	rjmp	.+158    	; 0xdca <DIO_u8SetPinDirection+0xf0>
     d2c:	2d 85       	ldd	r18, Y+13	; 0x0d
     d2e:	3e 85       	ldd	r19, Y+14	; 0x0e
     d30:	22 30       	cpi	r18, 0x02	; 2
     d32:	31 05       	cpc	r19, r1
     d34:	2c f4       	brge	.+10     	; 0xd40 <DIO_u8SetPinDirection+0x66>
     d36:	8d 85       	ldd	r24, Y+13	; 0x0d
     d38:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	71 f0       	breq	.+28     	; 0xd5a <DIO_u8SetPinDirection+0x80>
     d3e:	ee c0       	rjmp	.+476    	; 0xf1c <DIO_u8SetPinDirection+0x242>
     d40:	2d 85       	ldd	r18, Y+13	; 0x0d
     d42:	3e 85       	ldd	r19, Y+14	; 0x0e
     d44:	22 30       	cpi	r18, 0x02	; 2
     d46:	31 05       	cpc	r19, r1
     d48:	09 f4       	brne	.+2      	; 0xd4c <DIO_u8SetPinDirection+0x72>
     d4a:	77 c0       	rjmp	.+238    	; 0xe3a <DIO_u8SetPinDirection+0x160>
     d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d50:	83 30       	cpi	r24, 0x03	; 3
     d52:	91 05       	cpc	r25, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <DIO_u8SetPinDirection+0x7e>
     d56:	a9 c0       	rjmp	.+338    	; 0xeaa <DIO_u8SetPinDirection+0x1d0>
     d58:	e1 c0       	rjmp	.+450    	; 0xf1c <DIO_u8SetPinDirection+0x242>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	3c 87       	std	Y+12, r19	; 0x0c
     d62:	2b 87       	std	Y+11, r18	; 0x0b
     d64:	8b 85       	ldd	r24, Y+11	; 0x0b
     d66:	9c 85       	ldd	r25, Y+12	; 0x0c
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	31 f0       	breq	.+12     	; 0xd78 <DIO_u8SetPinDirection+0x9e>
     d6c:	2b 85       	ldd	r18, Y+11	; 0x0b
     d6e:	3c 85       	ldd	r19, Y+12	; 0x0c
     d70:	21 30       	cpi	r18, 0x01	; 1
     d72:	31 05       	cpc	r19, r1
     d74:	a9 f0       	breq	.+42     	; 0xda0 <DIO_u8SetPinDirection+0xc6>
     d76:	d2 c0       	rjmp	.+420    	; 0xf1c <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
     d78:	aa e3       	ldi	r26, 0x3A	; 58
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	ea e3       	ldi	r30, 0x3A	; 58
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	48 2f       	mov	r20, r24
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 2e       	mov	r0, r18
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <DIO_u8SetPinDirection+0xbc>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	0a 94       	dec	r0
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <DIO_u8SetPinDirection+0xb8>
     d9a:	84 2b       	or	r24, r20
     d9c:	8c 93       	st	X, r24
     d9e:	be c0       	rjmp	.+380    	; 0xf1c <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
     da0:	aa e3       	ldi	r26, 0x3A	; 58
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	ea e3       	ldi	r30, 0x3A	; 58
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	48 2f       	mov	r20, r24
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	02 2e       	mov	r0, r18
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <DIO_u8SetPinDirection+0xe4>
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	0a 94       	dec	r0
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <DIO_u8SetPinDirection+0xe0>
     dc2:	80 95       	com	r24
     dc4:	84 23       	and	r24, r20
     dc6:	8c 93       	st	X, r24
     dc8:	a9 c0       	rjmp	.+338    	; 0xf1c <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	3a 87       	std	Y+10, r19	; 0x0a
     dd2:	29 87       	std	Y+9, r18	; 0x09
     dd4:	89 85       	ldd	r24, Y+9	; 0x09
     dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	31 f0       	breq	.+12     	; 0xde8 <DIO_u8SetPinDirection+0x10e>
     ddc:	29 85       	ldd	r18, Y+9	; 0x09
     dde:	3a 85       	ldd	r19, Y+10	; 0x0a
     de0:	21 30       	cpi	r18, 0x01	; 1
     de2:	31 05       	cpc	r19, r1
     de4:	a9 f0       	breq	.+42     	; 0xe10 <DIO_u8SetPinDirection+0x136>
     de6:	9a c0       	rjmp	.+308    	; 0xf1c <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
     de8:	a7 e3       	ldi	r26, 0x37	; 55
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e7 e3       	ldi	r30, 0x37	; 55
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 2e       	mov	r0, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <DIO_u8SetPinDirection+0x12c>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <DIO_u8SetPinDirection+0x128>
     e0a:	84 2b       	or	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	86 c0       	rjmp	.+268    	; 0xf1c <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
     e10:	a7 e3       	ldi	r26, 0x37	; 55
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e7 e3       	ldi	r30, 0x37	; 55
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_u8SetPinDirection+0x154>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_u8SetPinDirection+0x150>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	71 c0       	rjmp	.+226    	; 0xf1c <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
     e3a:	8c 81       	ldd	r24, Y+4	; 0x04
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	38 87       	std	Y+8, r19	; 0x08
     e42:	2f 83       	std	Y+7, r18	; 0x07
     e44:	8f 81       	ldd	r24, Y+7	; 0x07
     e46:	98 85       	ldd	r25, Y+8	; 0x08
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	31 f0       	breq	.+12     	; 0xe58 <DIO_u8SetPinDirection+0x17e>
     e4c:	2f 81       	ldd	r18, Y+7	; 0x07
     e4e:	38 85       	ldd	r19, Y+8	; 0x08
     e50:	21 30       	cpi	r18, 0x01	; 1
     e52:	31 05       	cpc	r19, r1
     e54:	a9 f0       	breq	.+42     	; 0xe80 <DIO_u8SetPinDirection+0x1a6>
     e56:	62 c0       	rjmp	.+196    	; 0xf1c <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
     e58:	a4 e3       	ldi	r26, 0x34	; 52
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e4 e3       	ldi	r30, 0x34	; 52
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	48 2f       	mov	r20, r24
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 2e       	mov	r0, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_u8SetPinDirection+0x19c>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_u8SetPinDirection+0x198>
     e7a:	84 2b       	or	r24, r20
     e7c:	8c 93       	st	X, r24
     e7e:	4e c0       	rjmp	.+156    	; 0xf1c <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
     e80:	a4 e3       	ldi	r26, 0x34	; 52
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e4 e3       	ldi	r30, 0x34	; 52
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 2e       	mov	r0, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_u8SetPinDirection+0x1c4>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	0a 94       	dec	r0
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_u8SetPinDirection+0x1c0>
     ea2:	80 95       	com	r24
     ea4:	84 23       	and	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	39 c0       	rjmp	.+114    	; 0xf1c <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	3e 83       	std	Y+6, r19	; 0x06
     eb2:	2d 83       	std	Y+5, r18	; 0x05
     eb4:	8d 81       	ldd	r24, Y+5	; 0x05
     eb6:	9e 81       	ldd	r25, Y+6	; 0x06
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	31 f0       	breq	.+12     	; 0xec8 <DIO_u8SetPinDirection+0x1ee>
     ebc:	2d 81       	ldd	r18, Y+5	; 0x05
     ebe:	3e 81       	ldd	r19, Y+6	; 0x06
     ec0:	21 30       	cpi	r18, 0x01	; 1
     ec2:	31 05       	cpc	r19, r1
     ec4:	a9 f0       	breq	.+42     	; 0xef0 <DIO_u8SetPinDirection+0x216>
     ec6:	2a c0       	rjmp	.+84     	; 0xf1c <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
     ec8:	a1 e3       	ldi	r26, 0x31	; 49
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e1 e3       	ldi	r30, 0x31	; 49
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_u8SetPinDirection+0x20c>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_u8SetPinDirection+0x208>
     eea:	84 2b       	or	r24, r20
     eec:	8c 93       	st	X, r24
     eee:	16 c0       	rjmp	.+44     	; 0xf1c <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
     ef0:	a1 e3       	ldi	r26, 0x31	; 49
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e1 e3       	ldi	r30, 0x31	; 49
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 2e       	mov	r0, r18
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <DIO_u8SetPinDirection+0x234>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	0a 94       	dec	r0
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <DIO_u8SetPinDirection+0x230>
     f12:	80 95       	com	r24
     f14:	84 23       	and	r24, r20
     f16:	8c 93       	st	X, r24
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <DIO_u8SetPinDirection+0x242>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f1a:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1e:	2e 96       	adiw	r28, 0x0e	; 14
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	2e 97       	sbiw	r28, 0x0e	; 14
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	8a 83       	std	Y+2, r24	; 0x02
     f46:	6b 83       	std	Y+3, r22	; 0x03
     f48:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	84 30       	cpi	r24, 0x04	; 4
     f52:	08 f0       	brcs	.+2      	; 0xf56 <DIO_u8SetPinValue+0x26>
     f54:	13 c1       	rjmp	.+550    	; 0x117c <DIO_u8SetPinValue+0x24c>
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	88 30       	cpi	r24, 0x08	; 8
     f5a:	08 f0       	brcs	.+2      	; 0xf5e <DIO_u8SetPinValue+0x2e>
     f5c:	0f c1       	rjmp	.+542    	; 0x117c <DIO_u8SetPinValue+0x24c>
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	88 23       	and	r24, r24
     f62:	21 f0       	breq	.+8      	; 0xf6c <DIO_u8SetPinValue+0x3c>
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	09 f0       	breq	.+2      	; 0xf6c <DIO_u8SetPinValue+0x3c>
     f6a:	08 c1       	rjmp	.+528    	; 0x117c <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	3e 87       	std	Y+14, r19	; 0x0e
     f74:	2d 87       	std	Y+13, r18	; 0x0d
     f76:	8d 85       	ldd	r24, Y+13	; 0x0d
     f78:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7a:	81 30       	cpi	r24, 0x01	; 1
     f7c:	91 05       	cpc	r25, r1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <DIO_u8SetPinValue+0x52>
     f80:	50 c0       	rjmp	.+160    	; 0x1022 <DIO_u8SetPinValue+0xf2>
     f82:	2d 85       	ldd	r18, Y+13	; 0x0d
     f84:	3e 85       	ldd	r19, Y+14	; 0x0e
     f86:	22 30       	cpi	r18, 0x02	; 2
     f88:	31 05       	cpc	r19, r1
     f8a:	2c f4       	brge	.+10     	; 0xf96 <DIO_u8SetPinValue+0x66>
     f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	71 f0       	breq	.+28     	; 0xfb0 <DIO_u8SetPinValue+0x80>
     f94:	f4 c0       	rjmp	.+488    	; 0x117e <DIO_u8SetPinValue+0x24e>
     f96:	2d 85       	ldd	r18, Y+13	; 0x0d
     f98:	3e 85       	ldd	r19, Y+14	; 0x0e
     f9a:	22 30       	cpi	r18, 0x02	; 2
     f9c:	31 05       	cpc	r19, r1
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <DIO_u8SetPinValue+0x72>
     fa0:	79 c0       	rjmp	.+242    	; 0x1094 <DIO_u8SetPinValue+0x164>
     fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa6:	83 30       	cpi	r24, 0x03	; 3
     fa8:	91 05       	cpc	r25, r1
     faa:	09 f4       	brne	.+2      	; 0xfae <DIO_u8SetPinValue+0x7e>
     fac:	ad c0       	rjmp	.+346    	; 0x1108 <DIO_u8SetPinValue+0x1d8>
     fae:	e7 c0       	rjmp	.+462    	; 0x117e <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
     fb0:	8c 81       	ldd	r24, Y+4	; 0x04
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	3c 87       	std	Y+12, r19	; 0x0c
     fb8:	2b 87       	std	Y+11, r18	; 0x0b
     fba:	8b 85       	ldd	r24, Y+11	; 0x0b
     fbc:	9c 85       	ldd	r25, Y+12	; 0x0c
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	c9 f0       	breq	.+50     	; 0xff4 <DIO_u8SetPinValue+0xc4>
     fc2:	2b 85       	ldd	r18, Y+11	; 0x0b
     fc4:	3c 85       	ldd	r19, Y+12	; 0x0c
     fc6:	21 30       	cpi	r18, 0x01	; 1
     fc8:	31 05       	cpc	r19, r1
     fca:	49 f5       	brne	.+82     	; 0x101e <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
     fcc:	ab e3       	ldi	r26, 0x3B	; 59
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	eb e3       	ldi	r30, 0x3B	; 59
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_u8SetPinValue+0xba>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <DIO_u8SetPinValue+0xb6>
     fee:	84 2b       	or	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	c5 c0       	rjmp	.+394    	; 0x117e <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
     ff4:	ab e3       	ldi	r26, 0x3B	; 59
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	eb e3       	ldi	r30, 0x3B	; 59
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_u8SetPinValue+0xe2>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_u8SetPinValue+0xde>
    1016:	80 95       	com	r24
    1018:	84 23       	and	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	b0 c0       	rjmp	.+352    	; 0x117e <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    101e:	19 82       	std	Y+1, r1	; 0x01
    1020:	ae c0       	rjmp	.+348    	; 0x117e <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	3a 87       	std	Y+10, r19	; 0x0a
    102a:	29 87       	std	Y+9, r18	; 0x09
    102c:	89 85       	ldd	r24, Y+9	; 0x09
    102e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	c9 f0       	breq	.+50     	; 0x1066 <DIO_u8SetPinValue+0x136>
    1034:	29 85       	ldd	r18, Y+9	; 0x09
    1036:	3a 85       	ldd	r19, Y+10	; 0x0a
    1038:	21 30       	cpi	r18, 0x01	; 1
    103a:	31 05       	cpc	r19, r1
    103c:	49 f5       	brne	.+82     	; 0x1090 <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    103e:	a8 e3       	ldi	r26, 0x38	; 56
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e8 e3       	ldi	r30, 0x38	; 56
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_u8SetPinValue+0x12c>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_u8SetPinValue+0x128>
    1060:	84 2b       	or	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	8c c0       	rjmp	.+280    	; 0x117e <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1066:	a8 e3       	ldi	r26, 0x38	; 56
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e8 e3       	ldi	r30, 0x38	; 56
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_u8SetPinValue+0x154>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_u8SetPinValue+0x150>
    1088:	80 95       	com	r24
    108a:	84 23       	and	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	77 c0       	rjmp	.+238    	; 0x117e <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1090:	19 82       	std	Y+1, r1	; 0x01
    1092:	75 c0       	rjmp	.+234    	; 0x117e <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	38 87       	std	Y+8, r19	; 0x08
    109c:	2f 83       	std	Y+7, r18	; 0x07
    109e:	8f 81       	ldd	r24, Y+7	; 0x07
    10a0:	98 85       	ldd	r25, Y+8	; 0x08
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	31 f0       	breq	.+12     	; 0x10b2 <DIO_u8SetPinValue+0x182>
    10a6:	2f 81       	ldd	r18, Y+7	; 0x07
    10a8:	38 85       	ldd	r19, Y+8	; 0x08
    10aa:	21 30       	cpi	r18, 0x01	; 1
    10ac:	31 05       	cpc	r19, r1
    10ae:	b1 f0       	breq	.+44     	; 0x10dc <DIO_u8SetPinValue+0x1ac>
    10b0:	29 c0       	rjmp	.+82     	; 0x1104 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    10b2:	a5 e3       	ldi	r26, 0x35	; 53
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e5 e3       	ldi	r30, 0x35	; 53
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_u8SetPinValue+0x1a0>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_u8SetPinValue+0x19c>
    10d4:	80 95       	com	r24
    10d6:	84 23       	and	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	51 c0       	rjmp	.+162    	; 0x117e <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    10dc:	a5 e3       	ldi	r26, 0x35	; 53
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e5 e3       	ldi	r30, 0x35	; 53
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <DIO_u8SetPinValue+0x1ca>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <DIO_u8SetPinValue+0x1c6>
    10fe:	84 2b       	or	r24, r20
    1100:	8c 93       	st	X, r24
    1102:	3d c0       	rjmp	.+122    	; 0x117e <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1104:	19 82       	std	Y+1, r1	; 0x01
    1106:	3b c0       	rjmp	.+118    	; 0x117e <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	3e 83       	std	Y+6, r19	; 0x06
    1110:	2d 83       	std	Y+5, r18	; 0x05
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	31 f0       	breq	.+12     	; 0x1126 <DIO_u8SetPinValue+0x1f6>
    111a:	2d 81       	ldd	r18, Y+5	; 0x05
    111c:	3e 81       	ldd	r19, Y+6	; 0x06
    111e:	21 30       	cpi	r18, 0x01	; 1
    1120:	31 05       	cpc	r19, r1
    1122:	b1 f0       	breq	.+44     	; 0x1150 <DIO_u8SetPinValue+0x220>
    1124:	29 c0       	rjmp	.+82     	; 0x1178 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1126:	a5 e3       	ldi	r26, 0x35	; 53
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e5 e3       	ldi	r30, 0x35	; 53
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_u8SetPinValue+0x214>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_u8SetPinValue+0x210>
    1148:	80 95       	com	r24
    114a:	84 23       	and	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	17 c0       	rjmp	.+46     	; 0x117e <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1150:	a2 e3       	ldi	r26, 0x32	; 50
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e2 e3       	ldi	r30, 0x32	; 50
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_u8SetPinValue+0x23e>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_u8SetPinValue+0x23a>
    1172:	84 2b       	or	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	03 c0       	rjmp	.+6      	; 0x117e <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1178:	19 82       	std	Y+1, r1	; 0x01
    117a:	01 c0       	rjmp	.+2      	; 0x117e <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		 Local_u8ErrorState = STD_TYPES_NOK;
    117c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    117e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1180:	2e 96       	adiw	r28, 0x0e	; 14
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	28 97       	sbiw	r28, 0x08	; 8
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	8b 83       	std	Y+3, r24	; 0x03
    11a8:	6c 83       	std	Y+4, r22	; 0x04
    11aa:	5e 83       	std	Y+6, r21	; 0x06
    11ac:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	84 30       	cpi	r24, 0x04	; 4
    11b6:	08 f0       	brcs	.+2      	; 0x11ba <DIO_u8GetPinValue+0x28>
    11b8:	9f c0       	rjmp	.+318    	; 0x12f8 <DIO_u8GetPinValue+0x166>
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	88 30       	cpi	r24, 0x08	; 8
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <DIO_u8GetPinValue+0x30>
    11c0:	9b c0       	rjmp	.+310    	; 0x12f8 <DIO_u8GetPinValue+0x166>
    11c2:	8d 81       	ldd	r24, Y+5	; 0x05
    11c4:	9e 81       	ldd	r25, Y+6	; 0x06
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	09 f4       	brne	.+2      	; 0x11cc <DIO_u8GetPinValue+0x3a>
    11ca:	96 c0       	rjmp	.+300    	; 0x12f8 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	38 87       	std	Y+8, r19	; 0x08
    11d4:	2f 83       	std	Y+7, r18	; 0x07
    11d6:	4f 81       	ldd	r20, Y+7	; 0x07
    11d8:	58 85       	ldd	r21, Y+8	; 0x08
    11da:	41 30       	cpi	r20, 0x01	; 1
    11dc:	51 05       	cpc	r21, r1
    11de:	a9 f1       	breq	.+106    	; 0x124a <DIO_u8GetPinValue+0xb8>
    11e0:	8f 81       	ldd	r24, Y+7	; 0x07
    11e2:	98 85       	ldd	r25, Y+8	; 0x08
    11e4:	82 30       	cpi	r24, 0x02	; 2
    11e6:	91 05       	cpc	r25, r1
    11e8:	34 f4       	brge	.+12     	; 0x11f6 <DIO_u8GetPinValue+0x64>
    11ea:	2f 81       	ldd	r18, Y+7	; 0x07
    11ec:	38 85       	ldd	r19, Y+8	; 0x08
    11ee:	21 15       	cp	r18, r1
    11f0:	31 05       	cpc	r19, r1
    11f2:	71 f0       	breq	.+28     	; 0x1210 <DIO_u8GetPinValue+0x7e>
    11f4:	82 c0       	rjmp	.+260    	; 0x12fa <DIO_u8GetPinValue+0x168>
    11f6:	4f 81       	ldd	r20, Y+7	; 0x07
    11f8:	58 85       	ldd	r21, Y+8	; 0x08
    11fa:	42 30       	cpi	r20, 0x02	; 2
    11fc:	51 05       	cpc	r21, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <DIO_u8GetPinValue+0x70>
    1200:	41 c0       	rjmp	.+130    	; 0x1284 <DIO_u8GetPinValue+0xf2>
    1202:	8f 81       	ldd	r24, Y+7	; 0x07
    1204:	98 85       	ldd	r25, Y+8	; 0x08
    1206:	83 30       	cpi	r24, 0x03	; 3
    1208:	91 05       	cpc	r25, r1
    120a:	09 f4       	brne	.+2      	; 0x120e <DIO_u8GetPinValue+0x7c>
    120c:	58 c0       	rjmp	.+176    	; 0x12be <DIO_u8GetPinValue+0x12c>
    120e:	75 c0       	rjmp	.+234    	; 0x12fa <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    1210:	e9 e3       	ldi	r30, 0x39	; 57
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	88 2f       	mov	r24, r24
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a9 01       	movw	r20, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_u8GetPinValue+0x96>
    1224:	55 95       	asr	r21
    1226:	47 95       	ror	r20
    1228:	8a 95       	dec	r24
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_u8GetPinValue+0x92>
    122c:	ca 01       	movw	r24, r20
    122e:	81 70       	andi	r24, 0x01	; 1
    1230:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	88 23       	and	r24, r24
    1236:	21 f4       	brne	.+8      	; 0x1240 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1238:	ed 81       	ldd	r30, Y+5	; 0x05
    123a:	fe 81       	ldd	r31, Y+6	; 0x06
    123c:	10 82       	st	Z, r1
    123e:	5d c0       	rjmp	.+186    	; 0x12fa <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1240:	ed 81       	ldd	r30, Y+5	; 0x05
    1242:	fe 81       	ldd	r31, Y+6	; 0x06
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	80 83       	st	Z, r24
    1248:	58 c0       	rjmp	.+176    	; 0x12fa <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    124a:	e6 e3       	ldi	r30, 0x36	; 54
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
    1256:	88 2f       	mov	r24, r24
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a9 01       	movw	r20, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_u8GetPinValue+0xd0>
    125e:	55 95       	asr	r21
    1260:	47 95       	ror	r20
    1262:	8a 95       	dec	r24
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_u8GetPinValue+0xcc>
    1266:	ca 01       	movw	r24, r20
    1268:	81 70       	andi	r24, 0x01	; 1
    126a:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	88 23       	and	r24, r24
    1270:	21 f4       	brne	.+8      	; 0x127a <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1272:	ed 81       	ldd	r30, Y+5	; 0x05
    1274:	fe 81       	ldd	r31, Y+6	; 0x06
    1276:	10 82       	st	Z, r1
    1278:	40 c0       	rjmp	.+128    	; 0x12fa <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    127a:	ed 81       	ldd	r30, Y+5	; 0x05
    127c:	fe 81       	ldd	r31, Y+6	; 0x06
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	80 83       	st	Z, r24
    1282:	3b c0       	rjmp	.+118    	; 0x12fa <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    1284:	e3 e3       	ldi	r30, 0x33	; 51
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	a9 01       	movw	r20, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <DIO_u8GetPinValue+0x10a>
    1298:	55 95       	asr	r21
    129a:	47 95       	ror	r20
    129c:	8a 95       	dec	r24
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <DIO_u8GetPinValue+0x106>
    12a0:	ca 01       	movw	r24, r20
    12a2:	81 70       	andi	r24, 0x01	; 1
    12a4:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	88 23       	and	r24, r24
    12aa:	21 f4       	brne	.+8      	; 0x12b4 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12ac:	ed 81       	ldd	r30, Y+5	; 0x05
    12ae:	fe 81       	ldd	r31, Y+6	; 0x06
    12b0:	10 82       	st	Z, r1
    12b2:	23 c0       	rjmp	.+70     	; 0x12fa <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12b4:	ed 81       	ldd	r30, Y+5	; 0x05
    12b6:	fe 81       	ldd	r31, Y+6	; 0x06
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	80 83       	st	Z, r24
    12bc:	1e c0       	rjmp	.+60     	; 0x12fa <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    12be:	e0 e3       	ldi	r30, 0x30	; 48
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	88 2f       	mov	r24, r24
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	a9 01       	movw	r20, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_u8GetPinValue+0x144>
    12d2:	55 95       	asr	r21
    12d4:	47 95       	ror	r20
    12d6:	8a 95       	dec	r24
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <DIO_u8GetPinValue+0x140>
    12da:	ca 01       	movw	r24, r20
    12dc:	81 70       	andi	r24, 0x01	; 1
    12de:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	88 23       	and	r24, r24
    12e4:	21 f4       	brne	.+8      	; 0x12ee <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12e6:	ed 81       	ldd	r30, Y+5	; 0x05
    12e8:	fe 81       	ldd	r31, Y+6	; 0x06
    12ea:	10 82       	st	Z, r1
    12ec:	06 c0       	rjmp	.+12     	; 0x12fa <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12ee:	ed 81       	ldd	r30, Y+5	; 0x05
    12f0:	fe 81       	ldd	r31, Y+6	; 0x06
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	80 83       	st	Z, r24
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12f8:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12fc:	28 96       	adiw	r28, 0x08	; 8
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	2d 97       	sbiw	r28, 0x0d	; 13
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3d 87       	std	Y+13, r19	; 0x0d
    132e:	2c 87       	std	Y+12, r18	; 0x0c
    1330:	8c 85       	ldd	r24, Y+12	; 0x0c
    1332:	9d 85       	ldd	r25, Y+13	; 0x0d
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	91 05       	cpc	r25, r1
    1338:	71 f1       	breq	.+92     	; 0x1396 <DIO_u8SetPortDirection+0x88>
    133a:	2c 85       	ldd	r18, Y+12	; 0x0c
    133c:	3d 85       	ldd	r19, Y+13	; 0x0d
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	2c f4       	brge	.+10     	; 0x134e <DIO_u8SetPortDirection+0x40>
    1344:	8c 85       	ldd	r24, Y+12	; 0x0c
    1346:	9d 85       	ldd	r25, Y+13	; 0x0d
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	69 f0       	breq	.+26     	; 0x1366 <DIO_u8SetPortDirection+0x58>
    134c:	69 c0       	rjmp	.+210    	; 0x1420 <DIO_u8SetPortDirection+0x112>
    134e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1350:	3d 85       	ldd	r19, Y+13	; 0x0d
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	b1 f1       	breq	.+108    	; 0x13c4 <DIO_u8SetPortDirection+0xb6>
    1358:	8c 85       	ldd	r24, Y+12	; 0x0c
    135a:	9d 85       	ldd	r25, Y+13	; 0x0d
    135c:	83 30       	cpi	r24, 0x03	; 3
    135e:	91 05       	cpc	r25, r1
    1360:	09 f4       	brne	.+2      	; 0x1364 <DIO_u8SetPortDirection+0x56>
    1362:	47 c0       	rjmp	.+142    	; 0x13f2 <DIO_u8SetPortDirection+0xe4>
    1364:	5d c0       	rjmp	.+186    	; 0x1420 <DIO_u8SetPortDirection+0x112>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	3b 87       	std	Y+11, r19	; 0x0b
    136e:	2a 87       	std	Y+10, r18	; 0x0a
    1370:	8a 85       	ldd	r24, Y+10	; 0x0a
    1372:	9b 85       	ldd	r25, Y+11	; 0x0b
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	51 f0       	breq	.+20     	; 0x138c <DIO_u8SetPortDirection+0x7e>
    1378:	2a 85       	ldd	r18, Y+10	; 0x0a
    137a:	3b 85       	ldd	r19, Y+11	; 0x0b
    137c:	21 30       	cpi	r18, 0x01	; 1
    137e:	31 05       	cpc	r19, r1
    1380:	09 f0       	breq	.+2      	; 0x1384 <DIO_u8SetPortDirection+0x76>
    1382:	50 c0       	rjmp	.+160    	; 0x1424 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    1384:	ea e3       	ldi	r30, 0x3A	; 58
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	10 82       	st	Z, r1
    138a:	4c c0       	rjmp	.+152    	; 0x1424 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    138c:	ea e3       	ldi	r30, 0x3A	; 58
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	8f ef       	ldi	r24, 0xFF	; 255
    1392:	80 83       	st	Z, r24
    1394:	47 c0       	rjmp	.+142    	; 0x1424 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	39 87       	std	Y+9, r19	; 0x09
    139e:	28 87       	std	Y+8, r18	; 0x08
    13a0:	88 85       	ldd	r24, Y+8	; 0x08
    13a2:	99 85       	ldd	r25, Y+9	; 0x09
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	49 f0       	breq	.+18     	; 0x13ba <DIO_u8SetPortDirection+0xac>
    13a8:	28 85       	ldd	r18, Y+8	; 0x08
    13aa:	39 85       	ldd	r19, Y+9	; 0x09
    13ac:	21 30       	cpi	r18, 0x01	; 1
    13ae:	31 05       	cpc	r19, r1
    13b0:	c9 f5       	brne	.+114    	; 0x1424 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    13b2:	e7 e3       	ldi	r30, 0x37	; 55
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	10 82       	st	Z, r1
    13b8:	35 c0       	rjmp	.+106    	; 0x1424 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    13ba:	e7 e3       	ldi	r30, 0x37	; 55
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	80 83       	st	Z, r24
    13c2:	30 c0       	rjmp	.+96     	; 0x1424 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3f 83       	std	Y+7, r19	; 0x07
    13cc:	2e 83       	std	Y+6, r18	; 0x06
    13ce:	8e 81       	ldd	r24, Y+6	; 0x06
    13d0:	9f 81       	ldd	r25, Y+7	; 0x07
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	49 f0       	breq	.+18     	; 0x13e8 <DIO_u8SetPortDirection+0xda>
    13d6:	2e 81       	ldd	r18, Y+6	; 0x06
    13d8:	3f 81       	ldd	r19, Y+7	; 0x07
    13da:	21 30       	cpi	r18, 0x01	; 1
    13dc:	31 05       	cpc	r19, r1
    13de:	11 f5       	brne	.+68     	; 0x1424 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    13e0:	e4 e3       	ldi	r30, 0x34	; 52
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	10 82       	st	Z, r1
    13e6:	1e c0       	rjmp	.+60     	; 0x1424 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    13e8:	e4 e3       	ldi	r30, 0x34	; 52
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	8f ef       	ldi	r24, 0xFF	; 255
    13ee:	80 83       	st	Z, r24
    13f0:	19 c0       	rjmp	.+50     	; 0x1424 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	3d 83       	std	Y+5, r19	; 0x05
    13fa:	2c 83       	std	Y+4, r18	; 0x04
    13fc:	8c 81       	ldd	r24, Y+4	; 0x04
    13fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	49 f0       	breq	.+18     	; 0x1416 <DIO_u8SetPortDirection+0x108>
    1404:	2c 81       	ldd	r18, Y+4	; 0x04
    1406:	3d 81       	ldd	r19, Y+5	; 0x05
    1408:	21 30       	cpi	r18, 0x01	; 1
    140a:	31 05       	cpc	r19, r1
    140c:	59 f4       	brne	.+22     	; 0x1424 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    140e:	e1 e3       	ldi	r30, 0x31	; 49
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	10 82       	st	Z, r1
    1414:	07 c0       	rjmp	.+14     	; 0x1424 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    1416:	e1 e3       	ldi	r30, 0x31	; 49
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	8f ef       	ldi	r24, 0xFF	; 255
    141c:	80 83       	st	Z, r24
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;
		default:
			return STD_TYPES_NOK;
    1420:	1b 82       	std	Y+3, r1	; 0x03
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_u8SetPortDirection+0x11a>
			break;
	}
	return STD_TYPES_OK;
    1424:	31 e0       	ldi	r19, 0x01	; 1
    1426:	3b 83       	std	Y+3, r19	; 0x03
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
}
    142a:	2d 96       	adiw	r28, 0x0d	; 13
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <DIO_u8SetPortValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortVlaue)
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <DIO_u8SetPortValue+0x6>
    1442:	00 d0       	rcall	.+0      	; 0x1444 <DIO_u8SetPortValue+0x8>
    1444:	0f 92       	push	r0
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId){
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	3d 83       	std	Y+5, r19	; 0x05
    1456:	2c 83       	std	Y+4, r18	; 0x04
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	9d 81       	ldd	r25, Y+5	; 0x05
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	91 05       	cpc	r25, r1
    1460:	d1 f0       	breq	.+52     	; 0x1496 <DIO_u8SetPortValue+0x5a>
    1462:	2c 81       	ldd	r18, Y+4	; 0x04
    1464:	3d 81       	ldd	r19, Y+5	; 0x05
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	2c f4       	brge	.+10     	; 0x1476 <DIO_u8SetPortValue+0x3a>
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	9d 81       	ldd	r25, Y+5	; 0x05
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	61 f0       	breq	.+24     	; 0x148c <DIO_u8SetPortValue+0x50>
    1474:	1f c0       	rjmp	.+62     	; 0x14b4 <DIO_u8SetPortValue+0x78>
    1476:	2c 81       	ldd	r18, Y+4	; 0x04
    1478:	3d 81       	ldd	r19, Y+5	; 0x05
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	31 05       	cpc	r19, r1
    147e:	81 f0       	breq	.+32     	; 0x14a0 <DIO_u8SetPortValue+0x64>
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	9d 81       	ldd	r25, Y+5	; 0x05
    1484:	83 30       	cpi	r24, 0x03	; 3
    1486:	91 05       	cpc	r25, r1
    1488:	81 f0       	breq	.+32     	; 0x14aa <DIO_u8SetPortValue+0x6e>
    148a:	14 c0       	rjmp	.+40     	; 0x14b4 <DIO_u8SetPortValue+0x78>
	case DIO_u8_PORTA:
		DIO_u8_PORTA_REG = Copy_u8PortVlaue;
    148c:	eb e3       	ldi	r30, 0x3B	; 59
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	80 83       	st	Z, r24
    1494:	11 c0       	rjmp	.+34     	; 0x14b8 <DIO_u8SetPortValue+0x7c>
		break;
	case DIO_u8_PORTB:
		DIO_u8_PORTB_REG = Copy_u8PortVlaue;
    1496:	e8 e3       	ldi	r30, 0x38	; 56
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	80 83       	st	Z, r24
    149e:	0c c0       	rjmp	.+24     	; 0x14b8 <DIO_u8SetPortValue+0x7c>
		break;
	case DIO_u8_PORTC:
		DIO_u8_PORTC_REG = Copy_u8PortVlaue;
    14a0:	e5 e3       	ldi	r30, 0x35	; 53
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	80 83       	st	Z, r24
    14a8:	07 c0       	rjmp	.+14     	; 0x14b8 <DIO_u8SetPortValue+0x7c>
		break;
	case DIO_u8_PORTD:
		DIO_u8_PORTD_REG = Copy_u8PortVlaue;
    14aa:	e2 e3       	ldi	r30, 0x32	; 50
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	80 83       	st	Z, r24
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <DIO_u8SetPortValue+0x7c>
		break;
	default:
		return STD_TYPES_NOK;
    14b4:	1b 82       	std	Y+3, r1	; 0x03
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <DIO_u8SetPortValue+0x80>
		break;
	}
	return 1;
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	9b 83       	std	Y+3, r25	; 0x03
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_u8GetPortValue+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <DIO_u8GetPortValue+0x8>
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <DIO_u8GetPortValue+0xa>
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	7c 83       	std	Y+4, r23	; 0x04
    14e0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	84 30       	cpi	r24, 0x04	; 4
    14ea:	08 f0       	brcs	.+2      	; 0x14ee <DIO_u8GetPortValue+0x20>
    14ec:	3f c0       	rjmp	.+126    	; 0x156c <DIO_u8GetPortValue+0x9e>
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	d9 f1       	breq	.+118    	; 0x156c <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	3e 83       	std	Y+6, r19	; 0x06
    14fe:	2d 83       	std	Y+5, r18	; 0x05
    1500:	8d 81       	ldd	r24, Y+5	; 0x05
    1502:	9e 81       	ldd	r25, Y+6	; 0x06
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	91 05       	cpc	r25, r1
    1508:	e1 f0       	breq	.+56     	; 0x1542 <DIO_u8GetPortValue+0x74>
    150a:	2d 81       	ldd	r18, Y+5	; 0x05
    150c:	3e 81       	ldd	r19, Y+6	; 0x06
    150e:	22 30       	cpi	r18, 0x02	; 2
    1510:	31 05       	cpc	r19, r1
    1512:	2c f4       	brge	.+10     	; 0x151e <DIO_u8GetPortValue+0x50>
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	61 f0       	breq	.+24     	; 0x1534 <DIO_u8GetPortValue+0x66>
    151c:	28 c0       	rjmp	.+80     	; 0x156e <DIO_u8GetPortValue+0xa0>
    151e:	2d 81       	ldd	r18, Y+5	; 0x05
    1520:	3e 81       	ldd	r19, Y+6	; 0x06
    1522:	22 30       	cpi	r18, 0x02	; 2
    1524:	31 05       	cpc	r19, r1
    1526:	a1 f0       	breq	.+40     	; 0x1550 <DIO_u8GetPortValue+0x82>
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	9e 81       	ldd	r25, Y+6	; 0x06
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	91 05       	cpc	r25, r1
    1530:	b1 f0       	breq	.+44     	; 0x155e <DIO_u8GetPortValue+0x90>
    1532:	1d c0       	rjmp	.+58     	; 0x156e <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    1534:	e9 e3       	ldi	r30, 0x39	; 57
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	eb 81       	ldd	r30, Y+3	; 0x03
    153c:	fc 81       	ldd	r31, Y+4	; 0x04
    153e:	80 83       	st	Z, r24
    1540:	16 c0       	rjmp	.+44     	; 0x156e <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    1542:	e6 e3       	ldi	r30, 0x36	; 54
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	eb 81       	ldd	r30, Y+3	; 0x03
    154a:	fc 81       	ldd	r31, Y+4	; 0x04
    154c:	80 83       	st	Z, r24
    154e:	0f c0       	rjmp	.+30     	; 0x156e <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    1550:	e3 e3       	ldi	r30, 0x33	; 51
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	eb 81       	ldd	r30, Y+3	; 0x03
    1558:	fc 81       	ldd	r31, Y+4	; 0x04
    155a:	80 83       	st	Z, r24
    155c:	08 c0       	rjmp	.+16     	; 0x156e <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    155e:	e0 e3       	ldi	r30, 0x30	; 48
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	eb 81       	ldd	r30, Y+3	; 0x03
    1566:	fc 81       	ldd	r31, Y+4	; 0x04
    1568:	80 83       	st	Z, r24
    156a:	01 c0       	rjmp	.+2      	; 0x156e <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    156c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    156e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1570:	26 96       	adiw	r28, 0x06	; 6
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <STM_u8_Rotate_CW>:
#include "STM_interface.h"
#include "STM_config.h"


u8 STM_u8_Rotate_CW()
{
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	e8 97       	sbiw	r28, 0x38	; 56
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
	// FIRST STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_LOW);
    1596:	82 e0       	ldi	r24, 0x02	; 2
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    15a0:	82 e0       	ldi	r24, 0x02	; 2
    15a2:	61 e0       	ldi	r22, 0x01	; 1
    15a4:	41 e0       	ldi	r20, 0x01	; 1
    15a6:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	62 e0       	ldi	r22, 0x02	; 2
    15ae:	41 e0       	ldi	r20, 0x01	; 1
    15b0:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	63 e0       	ldi	r22, 0x03	; 3
    15b8:	41 e0       	ldi	r20, 0x01	; 1
    15ba:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	a0 e2       	ldi	r26, 0x20	; 32
    15c4:	b1 e4       	ldi	r27, 0x41	; 65
    15c6:	8d ab       	std	Y+53, r24	; 0x35
    15c8:	9e ab       	std	Y+54, r25	; 0x36
    15ca:	af ab       	std	Y+55, r26	; 0x37
    15cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ce:	6d a9       	ldd	r22, Y+53	; 0x35
    15d0:	7e a9       	ldd	r23, Y+54	; 0x36
    15d2:	8f a9       	ldd	r24, Y+55	; 0x37
    15d4:	98 ad       	ldd	r25, Y+56	; 0x38
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	4a ef       	ldi	r20, 0xFA	; 250
    15dc:	54 e4       	ldi	r21, 0x44	; 68
    15de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	89 ab       	std	Y+49, r24	; 0x31
    15e8:	9a ab       	std	Y+50, r25	; 0x32
    15ea:	ab ab       	std	Y+51, r26	; 0x33
    15ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15ee:	69 a9       	ldd	r22, Y+49	; 0x31
    15f0:	7a a9       	ldd	r23, Y+50	; 0x32
    15f2:	8b a9       	ldd	r24, Y+51	; 0x33
    15f4:	9c a9       	ldd	r25, Y+52	; 0x34
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e8       	ldi	r20, 0x80	; 128
    15fc:	5f e3       	ldi	r21, 0x3F	; 63
    15fe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1602:	88 23       	and	r24, r24
    1604:	2c f4       	brge	.+10     	; 0x1610 <STM_u8_Rotate_CW+0x8e>
		__ticks = 1;
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	98 ab       	std	Y+48, r25	; 0x30
    160c:	8f a7       	std	Y+47, r24	; 0x2f
    160e:	3f c0       	rjmp	.+126    	; 0x168e <STM_u8_Rotate_CW+0x10c>
	else if (__tmp > 65535)
    1610:	69 a9       	ldd	r22, Y+49	; 0x31
    1612:	7a a9       	ldd	r23, Y+50	; 0x32
    1614:	8b a9       	ldd	r24, Y+51	; 0x33
    1616:	9c a9       	ldd	r25, Y+52	; 0x34
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	3f ef       	ldi	r19, 0xFF	; 255
    161c:	4f e7       	ldi	r20, 0x7F	; 127
    161e:	57 e4       	ldi	r21, 0x47	; 71
    1620:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1624:	18 16       	cp	r1, r24
    1626:	4c f5       	brge	.+82     	; 0x167a <STM_u8_Rotate_CW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1628:	6d a9       	ldd	r22, Y+53	; 0x35
    162a:	7e a9       	ldd	r23, Y+54	; 0x36
    162c:	8f a9       	ldd	r24, Y+55	; 0x37
    162e:	98 ad       	ldd	r25, Y+56	; 0x38
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e2       	ldi	r20, 0x20	; 32
    1636:	51 e4       	ldi	r21, 0x41	; 65
    1638:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	bc 01       	movw	r22, r24
    1642:	cd 01       	movw	r24, r26
    1644:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	98 ab       	std	Y+48, r25	; 0x30
    164e:	8f a7       	std	Y+47, r24	; 0x2f
    1650:	0f c0       	rjmp	.+30     	; 0x1670 <STM_u8_Rotate_CW+0xee>
    1652:	88 ec       	ldi	r24, 0xC8	; 200
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	9e a7       	std	Y+46, r25	; 0x2e
    1658:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    165a:	8d a5       	ldd	r24, Y+45	; 0x2d
    165c:	9e a5       	ldd	r25, Y+46	; 0x2e
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <STM_u8_Rotate_CW+0xdc>
    1662:	9e a7       	std	Y+46, r25	; 0x2e
    1664:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1666:	8f a5       	ldd	r24, Y+47	; 0x2f
    1668:	98 a9       	ldd	r25, Y+48	; 0x30
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	98 ab       	std	Y+48, r25	; 0x30
    166e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1670:	8f a5       	ldd	r24, Y+47	; 0x2f
    1672:	98 a9       	ldd	r25, Y+48	; 0x30
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	69 f7       	brne	.-38     	; 0x1652 <STM_u8_Rotate_CW+0xd0>
    1678:	14 c0       	rjmp	.+40     	; 0x16a2 <STM_u8_Rotate_CW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167a:	69 a9       	ldd	r22, Y+49	; 0x31
    167c:	7a a9       	ldd	r23, Y+50	; 0x32
    167e:	8b a9       	ldd	r24, Y+51	; 0x33
    1680:	9c a9       	ldd	r25, Y+52	; 0x34
    1682:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	98 ab       	std	Y+48, r25	; 0x30
    168c:	8f a7       	std	Y+47, r24	; 0x2f
    168e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1690:	98 a9       	ldd	r25, Y+48	; 0x30
    1692:	9c a7       	std	Y+44, r25	; 0x2c
    1694:	8b a7       	std	Y+43, r24	; 0x2b
    1696:	8b a5       	ldd	r24, Y+43	; 0x2b
    1698:	9c a5       	ldd	r25, Y+44	; 0x2c
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	f1 f7       	brne	.-4      	; 0x169a <STM_u8_Rotate_CW+0x118>
    169e:	9c a7       	std	Y+44, r25	; 0x2c
    16a0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	// SECOND STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    16a2:	82 e0       	ldi	r24, 0x02	; 2
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	41 e0       	ldi	r20, 0x01	; 1
    16a8:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_LOW);
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	62 e0       	ldi	r22, 0x02	; 2
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	63 e0       	ldi	r22, 0x03	; 3
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	a0 e2       	ldi	r26, 0x20	; 32
    16d0:	b1 e4       	ldi	r27, 0x41	; 65
    16d2:	8f a3       	std	Y+39, r24	; 0x27
    16d4:	98 a7       	std	Y+40, r25	; 0x28
    16d6:	a9 a7       	std	Y+41, r26	; 0x29
    16d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16da:	6f a1       	ldd	r22, Y+39	; 0x27
    16dc:	78 a5       	ldd	r23, Y+40	; 0x28
    16de:	89 a5       	ldd	r24, Y+41	; 0x29
    16e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	4a ef       	ldi	r20, 0xFA	; 250
    16e8:	54 e4       	ldi	r21, 0x44	; 68
    16ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	8b a3       	std	Y+35, r24	; 0x23
    16f4:	9c a3       	std	Y+36, r25	; 0x24
    16f6:	ad a3       	std	Y+37, r26	; 0x25
    16f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16fa:	6b a1       	ldd	r22, Y+35	; 0x23
    16fc:	7c a1       	ldd	r23, Y+36	; 0x24
    16fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1700:	9e a1       	ldd	r25, Y+38	; 0x26
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e8       	ldi	r20, 0x80	; 128
    1708:	5f e3       	ldi	r21, 0x3F	; 63
    170a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    170e:	88 23       	and	r24, r24
    1710:	2c f4       	brge	.+10     	; 0x171c <STM_u8_Rotate_CW+0x19a>
		__ticks = 1;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	9a a3       	std	Y+34, r25	; 0x22
    1718:	89 a3       	std	Y+33, r24	; 0x21
    171a:	3f c0       	rjmp	.+126    	; 0x179a <STM_u8_Rotate_CW+0x218>
	else if (__tmp > 65535)
    171c:	6b a1       	ldd	r22, Y+35	; 0x23
    171e:	7c a1       	ldd	r23, Y+36	; 0x24
    1720:	8d a1       	ldd	r24, Y+37	; 0x25
    1722:	9e a1       	ldd	r25, Y+38	; 0x26
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	3f ef       	ldi	r19, 0xFF	; 255
    1728:	4f e7       	ldi	r20, 0x7F	; 127
    172a:	57 e4       	ldi	r21, 0x47	; 71
    172c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1730:	18 16       	cp	r1, r24
    1732:	4c f5       	brge	.+82     	; 0x1786 <STM_u8_Rotate_CW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1734:	6f a1       	ldd	r22, Y+39	; 0x27
    1736:	78 a5       	ldd	r23, Y+40	; 0x28
    1738:	89 a5       	ldd	r24, Y+41	; 0x29
    173a:	9a a5       	ldd	r25, Y+42	; 0x2a
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e2       	ldi	r20, 0x20	; 32
    1742:	51 e4       	ldi	r21, 0x41	; 65
    1744:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	9a a3       	std	Y+34, r25	; 0x22
    175a:	89 a3       	std	Y+33, r24	; 0x21
    175c:	0f c0       	rjmp	.+30     	; 0x177c <STM_u8_Rotate_CW+0x1fa>
    175e:	88 ec       	ldi	r24, 0xC8	; 200
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	98 a3       	std	Y+32, r25	; 0x20
    1764:	8f 8f       	std	Y+31, r24	; 0x1f
    1766:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1768:	98 a1       	ldd	r25, Y+32	; 0x20
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <STM_u8_Rotate_CW+0x1e8>
    176e:	98 a3       	std	Y+32, r25	; 0x20
    1770:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1772:	89 a1       	ldd	r24, Y+33	; 0x21
    1774:	9a a1       	ldd	r25, Y+34	; 0x22
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	9a a3       	std	Y+34, r25	; 0x22
    177a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177c:	89 a1       	ldd	r24, Y+33	; 0x21
    177e:	9a a1       	ldd	r25, Y+34	; 0x22
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	69 f7       	brne	.-38     	; 0x175e <STM_u8_Rotate_CW+0x1dc>
    1784:	14 c0       	rjmp	.+40     	; 0x17ae <STM_u8_Rotate_CW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1786:	6b a1       	ldd	r22, Y+35	; 0x23
    1788:	7c a1       	ldd	r23, Y+36	; 0x24
    178a:	8d a1       	ldd	r24, Y+37	; 0x25
    178c:	9e a1       	ldd	r25, Y+38	; 0x26
    178e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9a a3       	std	Y+34, r25	; 0x22
    1798:	89 a3       	std	Y+33, r24	; 0x21
    179a:	89 a1       	ldd	r24, Y+33	; 0x21
    179c:	9a a1       	ldd	r25, Y+34	; 0x22
    179e:	9e 8f       	std	Y+30, r25	; 0x1e
    17a0:	8d 8f       	std	Y+29, r24	; 0x1d
    17a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <STM_u8_Rotate_CW+0x224>
    17aa:	9e 8f       	std	Y+30, r25	; 0x1e
    17ac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	// FOURTH STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    17b4:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    17b8:	82 e0       	ldi	r24, 0x02	; 2
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	41 e0       	ldi	r20, 0x01	; 1
    17be:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_LOW);
    17c2:	82 e0       	ldi	r24, 0x02	; 2
    17c4:	62 e0       	ldi	r22, 0x02	; 2
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	63 e0       	ldi	r22, 0x03	; 3
    17d0:	41 e0       	ldi	r20, 0x01	; 1
    17d2:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 e2       	ldi	r26, 0x20	; 32
    17dc:	b1 e4       	ldi	r27, 0x41	; 65
    17de:	89 8f       	std	Y+25, r24	; 0x19
    17e0:	9a 8f       	std	Y+26, r25	; 0x1a
    17e2:	ab 8f       	std	Y+27, r26	; 0x1b
    17e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e6:	69 8d       	ldd	r22, Y+25	; 0x19
    17e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	4a ef       	ldi	r20, 0xFA	; 250
    17f4:	54 e4       	ldi	r21, 0x44	; 68
    17f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8d 8b       	std	Y+21, r24	; 0x15
    1800:	9e 8b       	std	Y+22, r25	; 0x16
    1802:	af 8b       	std	Y+23, r26	; 0x17
    1804:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1806:	6d 89       	ldd	r22, Y+21	; 0x15
    1808:	7e 89       	ldd	r23, Y+22	; 0x16
    180a:	8f 89       	ldd	r24, Y+23	; 0x17
    180c:	98 8d       	ldd	r25, Y+24	; 0x18
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e8       	ldi	r20, 0x80	; 128
    1814:	5f e3       	ldi	r21, 0x3F	; 63
    1816:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    181a:	88 23       	and	r24, r24
    181c:	2c f4       	brge	.+10     	; 0x1828 <STM_u8_Rotate_CW+0x2a6>
		__ticks = 1;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	9c 8b       	std	Y+20, r25	; 0x14
    1824:	8b 8b       	std	Y+19, r24	; 0x13
    1826:	3f c0       	rjmp	.+126    	; 0x18a6 <STM_u8_Rotate_CW+0x324>
	else if (__tmp > 65535)
    1828:	6d 89       	ldd	r22, Y+21	; 0x15
    182a:	7e 89       	ldd	r23, Y+22	; 0x16
    182c:	8f 89       	ldd	r24, Y+23	; 0x17
    182e:	98 8d       	ldd	r25, Y+24	; 0x18
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	3f ef       	ldi	r19, 0xFF	; 255
    1834:	4f e7       	ldi	r20, 0x7F	; 127
    1836:	57 e4       	ldi	r21, 0x47	; 71
    1838:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    183c:	18 16       	cp	r1, r24
    183e:	4c f5       	brge	.+82     	; 0x1892 <STM_u8_Rotate_CW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1840:	69 8d       	ldd	r22, Y+25	; 0x19
    1842:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1844:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1846:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	40 e2       	ldi	r20, 0x20	; 32
    184e:	51 e4       	ldi	r21, 0x41	; 65
    1850:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	bc 01       	movw	r22, r24
    185a:	cd 01       	movw	r24, r26
    185c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	9c 8b       	std	Y+20, r25	; 0x14
    1866:	8b 8b       	std	Y+19, r24	; 0x13
    1868:	0f c0       	rjmp	.+30     	; 0x1888 <STM_u8_Rotate_CW+0x306>
    186a:	88 ec       	ldi	r24, 0xC8	; 200
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	9a 8b       	std	Y+18, r25	; 0x12
    1870:	89 8b       	std	Y+17, r24	; 0x11
    1872:	89 89       	ldd	r24, Y+17	; 0x11
    1874:	9a 89       	ldd	r25, Y+18	; 0x12
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <STM_u8_Rotate_CW+0x2f4>
    187a:	9a 8b       	std	Y+18, r25	; 0x12
    187c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187e:	8b 89       	ldd	r24, Y+19	; 0x13
    1880:	9c 89       	ldd	r25, Y+20	; 0x14
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	9c 8b       	std	Y+20, r25	; 0x14
    1886:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1888:	8b 89       	ldd	r24, Y+19	; 0x13
    188a:	9c 89       	ldd	r25, Y+20	; 0x14
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	69 f7       	brne	.-38     	; 0x186a <STM_u8_Rotate_CW+0x2e8>
    1890:	14 c0       	rjmp	.+40     	; 0x18ba <STM_u8_Rotate_CW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1892:	6d 89       	ldd	r22, Y+21	; 0x15
    1894:	7e 89       	ldd	r23, Y+22	; 0x16
    1896:	8f 89       	ldd	r24, Y+23	; 0x17
    1898:	98 8d       	ldd	r25, Y+24	; 0x18
    189a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	9c 8b       	std	Y+20, r25	; 0x14
    18a4:	8b 8b       	std	Y+19, r24	; 0x13
    18a6:	8b 89       	ldd	r24, Y+19	; 0x13
    18a8:	9c 89       	ldd	r25, Y+20	; 0x14
    18aa:	98 8b       	std	Y+16, r25	; 0x10
    18ac:	8f 87       	std	Y+15, r24	; 0x0f
    18ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b0:	98 89       	ldd	r25, Y+16	; 0x10
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <STM_u8_Rotate_CW+0x330>
    18b6:	98 8b       	std	Y+16, r25	; 0x10
    18b8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	// FOURTH STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	60 e0       	ldi	r22, 0x00	; 0
    18be:	41 e0       	ldi	r20, 0x01	; 1
    18c0:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    18c4:	82 e0       	ldi	r24, 0x02	; 2
    18c6:	61 e0       	ldi	r22, 0x01	; 1
    18c8:	41 e0       	ldi	r20, 0x01	; 1
    18ca:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    18ce:	82 e0       	ldi	r24, 0x02	; 2
    18d0:	62 e0       	ldi	r22, 0x02	; 2
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_LOW);
    18d8:	82 e0       	ldi	r24, 0x02	; 2
    18da:	63 e0       	ldi	r22, 0x03	; 3
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a0 e2       	ldi	r26, 0x20	; 32
    18e8:	b1 e4       	ldi	r27, 0x41	; 65
    18ea:	8b 87       	std	Y+11, r24	; 0x0b
    18ec:	9c 87       	std	Y+12, r25	; 0x0c
    18ee:	ad 87       	std	Y+13, r26	; 0x0d
    18f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	4a ef       	ldi	r20, 0xFA	; 250
    1900:	54 e4       	ldi	r21, 0x44	; 68
    1902:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	8f 83       	std	Y+7, r24	; 0x07
    190c:	98 87       	std	Y+8, r25	; 0x08
    190e:	a9 87       	std	Y+9, r26	; 0x09
    1910:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1912:	6f 81       	ldd	r22, Y+7	; 0x07
    1914:	78 85       	ldd	r23, Y+8	; 0x08
    1916:	89 85       	ldd	r24, Y+9	; 0x09
    1918:	9a 85       	ldd	r25, Y+10	; 0x0a
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e8       	ldi	r20, 0x80	; 128
    1920:	5f e3       	ldi	r21, 0x3F	; 63
    1922:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1926:	88 23       	and	r24, r24
    1928:	2c f4       	brge	.+10     	; 0x1934 <STM_u8_Rotate_CW+0x3b2>
		__ticks = 1;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	9e 83       	std	Y+6, r25	; 0x06
    1930:	8d 83       	std	Y+5, r24	; 0x05
    1932:	3f c0       	rjmp	.+126    	; 0x19b2 <STM_u8_Rotate_CW+0x430>
	else if (__tmp > 65535)
    1934:	6f 81       	ldd	r22, Y+7	; 0x07
    1936:	78 85       	ldd	r23, Y+8	; 0x08
    1938:	89 85       	ldd	r24, Y+9	; 0x09
    193a:	9a 85       	ldd	r25, Y+10	; 0x0a
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	3f ef       	ldi	r19, 0xFF	; 255
    1940:	4f e7       	ldi	r20, 0x7F	; 127
    1942:	57 e4       	ldi	r21, 0x47	; 71
    1944:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1948:	18 16       	cp	r1, r24
    194a:	4c f5       	brge	.+82     	; 0x199e <STM_u8_Rotate_CW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194c:	6b 85       	ldd	r22, Y+11	; 0x0b
    194e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1950:	8d 85       	ldd	r24, Y+13	; 0x0d
    1952:	9e 85       	ldd	r25, Y+14	; 0x0e
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e2       	ldi	r20, 0x20	; 32
    195a:	51 e4       	ldi	r21, 0x41	; 65
    195c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	bc 01       	movw	r22, r24
    1966:	cd 01       	movw	r24, r26
    1968:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	8d 83       	std	Y+5, r24	; 0x05
    1974:	0f c0       	rjmp	.+30     	; 0x1994 <STM_u8_Rotate_CW+0x412>
    1976:	88 ec       	ldi	r24, 0xC8	; 200
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	9c 83       	std	Y+4, r25	; 0x04
    197c:	8b 83       	std	Y+3, r24	; 0x03
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	9c 81       	ldd	r25, Y+4	; 0x04
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <STM_u8_Rotate_CW+0x400>
    1986:	9c 83       	std	Y+4, r25	; 0x04
    1988:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	9e 83       	std	Y+6, r25	; 0x06
    1992:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1994:	8d 81       	ldd	r24, Y+5	; 0x05
    1996:	9e 81       	ldd	r25, Y+6	; 0x06
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	69 f7       	brne	.-38     	; 0x1976 <STM_u8_Rotate_CW+0x3f4>
    199c:	14 c0       	rjmp	.+40     	; 0x19c6 <STM_u8_Rotate_CW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199e:	6f 81       	ldd	r22, Y+7	; 0x07
    19a0:	78 85       	ldd	r23, Y+8	; 0x08
    19a2:	89 85       	ldd	r24, Y+9	; 0x09
    19a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	9e 83       	std	Y+6, r25	; 0x06
    19b0:	8d 83       	std	Y+5, r24	; 0x05
    19b2:	8d 81       	ldd	r24, Y+5	; 0x05
    19b4:	9e 81       	ldd	r25, Y+6	; 0x06
    19b6:	9a 83       	std	Y+2, r25	; 0x02
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	9a 81       	ldd	r25, Y+2	; 0x02
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <STM_u8_Rotate_CW+0x43c>
    19c2:	9a 83       	std	Y+2, r25	; 0x02
    19c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);


	return STD_TYPES_OK;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
}
    19c8:	e8 96       	adiw	r28, 0x38	; 56
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <STM_u8_Rotate_CCW>:

u8 STM_u8_Rotate_CCW()
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	e8 97       	sbiw	r28, 0x38	; 56
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
	// FIRST STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	60 e0       	ldi	r22, 0x00	; 0
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    19f8:	82 e0       	ldi	r24, 0x02	; 2
    19fa:	61 e0       	ldi	r22, 0x01	; 1
    19fc:	41 e0       	ldi	r20, 0x01	; 1
    19fe:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	62 e0       	ldi	r22, 0x02	; 2
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_LOW);
    1a0c:	82 e0       	ldi	r24, 0x02	; 2
    1a0e:	63 e0       	ldi	r22, 0x03	; 3
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	a0 e2       	ldi	r26, 0x20	; 32
    1a1c:	b1 e4       	ldi	r27, 0x41	; 65
    1a1e:	8d ab       	std	Y+53, r24	; 0x35
    1a20:	9e ab       	std	Y+54, r25	; 0x36
    1a22:	af ab       	std	Y+55, r26	; 0x37
    1a24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a26:	6d a9       	ldd	r22, Y+53	; 0x35
    1a28:	7e a9       	ldd	r23, Y+54	; 0x36
    1a2a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a2c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	4a ef       	ldi	r20, 0xFA	; 250
    1a34:	54 e4       	ldi	r21, 0x44	; 68
    1a36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	89 ab       	std	Y+49, r24	; 0x31
    1a40:	9a ab       	std	Y+50, r25	; 0x32
    1a42:	ab ab       	std	Y+51, r26	; 0x33
    1a44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a46:	69 a9       	ldd	r22, Y+49	; 0x31
    1a48:	7a a9       	ldd	r23, Y+50	; 0x32
    1a4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a5a:	88 23       	and	r24, r24
    1a5c:	2c f4       	brge	.+10     	; 0x1a68 <STM_u8_Rotate_CCW+0x8e>
		__ticks = 1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	98 ab       	std	Y+48, r25	; 0x30
    1a64:	8f a7       	std	Y+47, r24	; 0x2f
    1a66:	3f c0       	rjmp	.+126    	; 0x1ae6 <STM_u8_Rotate_CCW+0x10c>
	else if (__tmp > 65535)
    1a68:	69 a9       	ldd	r22, Y+49	; 0x31
    1a6a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a6c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a6e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	3f ef       	ldi	r19, 0xFF	; 255
    1a74:	4f e7       	ldi	r20, 0x7F	; 127
    1a76:	57 e4       	ldi	r21, 0x47	; 71
    1a78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a7c:	18 16       	cp	r1, r24
    1a7e:	4c f5       	brge	.+82     	; 0x1ad2 <STM_u8_Rotate_CCW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a80:	6d a9       	ldd	r22, Y+53	; 0x35
    1a82:	7e a9       	ldd	r23, Y+54	; 0x36
    1a84:	8f a9       	ldd	r24, Y+55	; 0x37
    1a86:	98 ad       	ldd	r25, Y+56	; 0x38
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	98 ab       	std	Y+48, r25	; 0x30
    1aa6:	8f a7       	std	Y+47, r24	; 0x2f
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <STM_u8_Rotate_CCW+0xee>
    1aaa:	88 ec       	ldi	r24, 0xC8	; 200
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9e a7       	std	Y+46, r25	; 0x2e
    1ab0:	8d a7       	std	Y+45, r24	; 0x2d
    1ab2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ab4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <STM_u8_Rotate_CCW+0xdc>
    1aba:	9e a7       	std	Y+46, r25	; 0x2e
    1abc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ac0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	98 ab       	std	Y+48, r25	; 0x30
    1ac6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aca:	98 a9       	ldd	r25, Y+48	; 0x30
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	69 f7       	brne	.-38     	; 0x1aaa <STM_u8_Rotate_CCW+0xd0>
    1ad0:	14 c0       	rjmp	.+40     	; 0x1afa <STM_u8_Rotate_CCW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad8:	9c a9       	ldd	r25, Y+52	; 0x34
    1ada:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	98 ab       	std	Y+48, r25	; 0x30
    1ae4:	8f a7       	std	Y+47, r24	; 0x2f
    1ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae8:	98 a9       	ldd	r25, Y+48	; 0x30
    1aea:	9c a7       	std	Y+44, r25	; 0x2c
    1aec:	8b a7       	std	Y+43, r24	; 0x2b
    1aee:	8b a5       	ldd	r24, Y+43	; 0x2b
    1af0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <STM_u8_Rotate_CCW+0x118>
    1af6:	9c a7       	std	Y+44, r25	; 0x2c
    1af8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	// SECOND STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    1afa:	82 e0       	ldi	r24, 0x02	; 2
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	41 e0       	ldi	r20, 0x01	; 1
    1b00:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    1b04:	82 e0       	ldi	r24, 0x02	; 2
    1b06:	61 e0       	ldi	r22, 0x01	; 1
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_LOW);
    1b0e:	82 e0       	ldi	r24, 0x02	; 2
    1b10:	62 e0       	ldi	r22, 0x02	; 2
    1b12:	40 e0       	ldi	r20, 0x00	; 0
    1b14:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	63 e0       	ldi	r22, 0x03	; 3
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	a0 e2       	ldi	r26, 0x20	; 32
    1b28:	b1 e4       	ldi	r27, 0x41	; 65
    1b2a:	8f a3       	std	Y+39, r24	; 0x27
    1b2c:	98 a7       	std	Y+40, r25	; 0x28
    1b2e:	a9 a7       	std	Y+41, r26	; 0x29
    1b30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b32:	6f a1       	ldd	r22, Y+39	; 0x27
    1b34:	78 a5       	ldd	r23, Y+40	; 0x28
    1b36:	89 a5       	ldd	r24, Y+41	; 0x29
    1b38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4a ef       	ldi	r20, 0xFA	; 250
    1b40:	54 e4       	ldi	r21, 0x44	; 68
    1b42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	8b a3       	std	Y+35, r24	; 0x23
    1b4c:	9c a3       	std	Y+36, r25	; 0x24
    1b4e:	ad a3       	std	Y+37, r26	; 0x25
    1b50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b52:	6b a1       	ldd	r22, Y+35	; 0x23
    1b54:	7c a1       	ldd	r23, Y+36	; 0x24
    1b56:	8d a1       	ldd	r24, Y+37	; 0x25
    1b58:	9e a1       	ldd	r25, Y+38	; 0x26
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e8       	ldi	r20, 0x80	; 128
    1b60:	5f e3       	ldi	r21, 0x3F	; 63
    1b62:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b66:	88 23       	and	r24, r24
    1b68:	2c f4       	brge	.+10     	; 0x1b74 <STM_u8_Rotate_CCW+0x19a>
		__ticks = 1;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9a a3       	std	Y+34, r25	; 0x22
    1b70:	89 a3       	std	Y+33, r24	; 0x21
    1b72:	3f c0       	rjmp	.+126    	; 0x1bf2 <STM_u8_Rotate_CCW+0x218>
	else if (__tmp > 65535)
    1b74:	6b a1       	ldd	r22, Y+35	; 0x23
    1b76:	7c a1       	ldd	r23, Y+36	; 0x24
    1b78:	8d a1       	ldd	r24, Y+37	; 0x25
    1b7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	3f ef       	ldi	r19, 0xFF	; 255
    1b80:	4f e7       	ldi	r20, 0x7F	; 127
    1b82:	57 e4       	ldi	r21, 0x47	; 71
    1b84:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	4c f5       	brge	.+82     	; 0x1bde <STM_u8_Rotate_CCW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b8e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b90:	89 a5       	ldd	r24, Y+41	; 0x29
    1b92:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e4       	ldi	r21, 0x41	; 65
    1b9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9a a3       	std	Y+34, r25	; 0x22
    1bb2:	89 a3       	std	Y+33, r24	; 0x21
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <STM_u8_Rotate_CCW+0x1fa>
    1bb6:	88 ec       	ldi	r24, 0xC8	; 200
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	98 a3       	std	Y+32, r25	; 0x20
    1bbc:	8f 8f       	std	Y+31, r24	; 0x1f
    1bbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bc0:	98 a1       	ldd	r25, Y+32	; 0x20
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <STM_u8_Rotate_CCW+0x1e8>
    1bc6:	98 a3       	std	Y+32, r25	; 0x20
    1bc8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bca:	89 a1       	ldd	r24, Y+33	; 0x21
    1bcc:	9a a1       	ldd	r25, Y+34	; 0x22
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	9a a3       	std	Y+34, r25	; 0x22
    1bd2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	69 f7       	brne	.-38     	; 0x1bb6 <STM_u8_Rotate_CCW+0x1dc>
    1bdc:	14 c0       	rjmp	.+40     	; 0x1c06 <STM_u8_Rotate_CCW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bde:	6b a1       	ldd	r22, Y+35	; 0x23
    1be0:	7c a1       	ldd	r23, Y+36	; 0x24
    1be2:	8d a1       	ldd	r24, Y+37	; 0x25
    1be4:	9e a1       	ldd	r25, Y+38	; 0x26
    1be6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9a a3       	std	Y+34, r25	; 0x22
    1bf0:	89 a3       	std	Y+33, r24	; 0x21
    1bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf6:	9e 8f       	std	Y+30, r25	; 0x1e
    1bf8:	8d 8f       	std	Y+29, r24	; 0x1d
    1bfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <STM_u8_Rotate_CCW+0x224>
    1c02:	9e 8f       	std	Y+30, r25	; 0x1e
    1c04:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	// THIRD STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    1c06:	82 e0       	ldi	r24, 0x02	; 2
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	41 e0       	ldi	r20, 0x01	; 1
    1c0c:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_LOW);
    1c10:	82 e0       	ldi	r24, 0x02	; 2
    1c12:	61 e0       	ldi	r22, 0x01	; 1
    1c14:	40 e0       	ldi	r20, 0x00	; 0
    1c16:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    1c1a:	82 e0       	ldi	r24, 0x02	; 2
    1c1c:	62 e0       	ldi	r22, 0x02	; 2
    1c1e:	41 e0       	ldi	r20, 0x01	; 1
    1c20:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    1c24:	82 e0       	ldi	r24, 0x02	; 2
    1c26:	63 e0       	ldi	r22, 0x03	; 3
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	a0 e2       	ldi	r26, 0x20	; 32
    1c34:	b1 e4       	ldi	r27, 0x41	; 65
    1c36:	89 8f       	std	Y+25, r24	; 0x19
    1c38:	9a 8f       	std	Y+26, r25	; 0x1a
    1c3a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	4a ef       	ldi	r20, 0xFA	; 250
    1c4c:	54 e4       	ldi	r21, 0x44	; 68
    1c4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	8d 8b       	std	Y+21, r24	; 0x15
    1c58:	9e 8b       	std	Y+22, r25	; 0x16
    1c5a:	af 8b       	std	Y+23, r26	; 0x17
    1c5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c60:	7e 89       	ldd	r23, Y+22	; 0x16
    1c62:	8f 89       	ldd	r24, Y+23	; 0x17
    1c64:	98 8d       	ldd	r25, Y+24	; 0x18
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e8       	ldi	r20, 0x80	; 128
    1c6c:	5f e3       	ldi	r21, 0x3F	; 63
    1c6e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c72:	88 23       	and	r24, r24
    1c74:	2c f4       	brge	.+10     	; 0x1c80 <STM_u8_Rotate_CCW+0x2a6>
		__ticks = 1;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	9c 8b       	std	Y+20, r25	; 0x14
    1c7c:	8b 8b       	std	Y+19, r24	; 0x13
    1c7e:	3f c0       	rjmp	.+126    	; 0x1cfe <STM_u8_Rotate_CCW+0x324>
	else if (__tmp > 65535)
    1c80:	6d 89       	ldd	r22, Y+21	; 0x15
    1c82:	7e 89       	ldd	r23, Y+22	; 0x16
    1c84:	8f 89       	ldd	r24, Y+23	; 0x17
    1c86:	98 8d       	ldd	r25, Y+24	; 0x18
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	3f ef       	ldi	r19, 0xFF	; 255
    1c8c:	4f e7       	ldi	r20, 0x7F	; 127
    1c8e:	57 e4       	ldi	r21, 0x47	; 71
    1c90:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c94:	18 16       	cp	r1, r24
    1c96:	4c f5       	brge	.+82     	; 0x1cea <STM_u8_Rotate_CCW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c98:	69 8d       	ldd	r22, Y+25	; 0x19
    1c9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e2       	ldi	r20, 0x20	; 32
    1ca6:	51 e4       	ldi	r21, 0x41	; 65
    1ca8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	bc 01       	movw	r22, r24
    1cb2:	cd 01       	movw	r24, r26
    1cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	9c 8b       	std	Y+20, r25	; 0x14
    1cbe:	8b 8b       	std	Y+19, r24	; 0x13
    1cc0:	0f c0       	rjmp	.+30     	; 0x1ce0 <STM_u8_Rotate_CCW+0x306>
    1cc2:	88 ec       	ldi	r24, 0xC8	; 200
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	9a 8b       	std	Y+18, r25	; 0x12
    1cc8:	89 8b       	std	Y+17, r24	; 0x11
    1cca:	89 89       	ldd	r24, Y+17	; 0x11
    1ccc:	9a 89       	ldd	r25, Y+18	; 0x12
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <STM_u8_Rotate_CCW+0x2f4>
    1cd2:	9a 8b       	std	Y+18, r25	; 0x12
    1cd4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	9c 8b       	std	Y+20, r25	; 0x14
    1cde:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	69 f7       	brne	.-38     	; 0x1cc2 <STM_u8_Rotate_CCW+0x2e8>
    1ce8:	14 c0       	rjmp	.+40     	; 0x1d12 <STM_u8_Rotate_CCW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cea:	6d 89       	ldd	r22, Y+21	; 0x15
    1cec:	7e 89       	ldd	r23, Y+22	; 0x16
    1cee:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	9c 8b       	std	Y+20, r25	; 0x14
    1cfc:	8b 8b       	std	Y+19, r24	; 0x13
    1cfe:	8b 89       	ldd	r24, Y+19	; 0x13
    1d00:	9c 89       	ldd	r25, Y+20	; 0x14
    1d02:	98 8b       	std	Y+16, r25	; 0x10
    1d04:	8f 87       	std	Y+15, r24	; 0x0f
    1d06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d08:	98 89       	ldd	r25, Y+16	; 0x10
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <STM_u8_Rotate_CCW+0x330>
    1d0e:	98 8b       	std	Y+16, r25	; 0x10
    1d10:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	// FORTH STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_LOW);
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	61 e0       	ldi	r22, 0x01	; 1
    1d20:	41 e0       	ldi	r20, 0x01	; 1
    1d22:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	62 e0       	ldi	r22, 0x02	; 2
    1d2a:	41 e0       	ldi	r20, 0x01	; 1
    1d2c:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    1d30:	82 e0       	ldi	r24, 0x02	; 2
    1d32:	63 e0       	ldi	r22, 0x03	; 3
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	a0 e2       	ldi	r26, 0x20	; 32
    1d40:	b1 e4       	ldi	r27, 0x41	; 65
    1d42:	8b 87       	std	Y+11, r24	; 0x0b
    1d44:	9c 87       	std	Y+12, r25	; 0x0c
    1d46:	ad 87       	std	Y+13, r26	; 0x0d
    1d48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	4a ef       	ldi	r20, 0xFA	; 250
    1d58:	54 e4       	ldi	r21, 0x44	; 68
    1d5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	8f 83       	std	Y+7, r24	; 0x07
    1d64:	98 87       	std	Y+8, r25	; 0x08
    1d66:	a9 87       	std	Y+9, r26	; 0x09
    1d68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6c:	78 85       	ldd	r23, Y+8	; 0x08
    1d6e:	89 85       	ldd	r24, Y+9	; 0x09
    1d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e8       	ldi	r20, 0x80	; 128
    1d78:	5f e3       	ldi	r21, 0x3F	; 63
    1d7a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d7e:	88 23       	and	r24, r24
    1d80:	2c f4       	brge	.+10     	; 0x1d8c <STM_u8_Rotate_CCW+0x3b2>
		__ticks = 1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9e 83       	std	Y+6, r25	; 0x06
    1d88:	8d 83       	std	Y+5, r24	; 0x05
    1d8a:	3f c0       	rjmp	.+126    	; 0x1e0a <STM_u8_Rotate_CCW+0x430>
	else if (__tmp > 65535)
    1d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8e:	78 85       	ldd	r23, Y+8	; 0x08
    1d90:	89 85       	ldd	r24, Y+9	; 0x09
    1d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	3f ef       	ldi	r19, 0xFF	; 255
    1d98:	4f e7       	ldi	r20, 0x7F	; 127
    1d9a:	57 e4       	ldi	r21, 0x47	; 71
    1d9c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1da0:	18 16       	cp	r1, r24
    1da2:	4c f5       	brge	.+82     	; 0x1df6 <STM_u8_Rotate_CCW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1daa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e2       	ldi	r20, 0x20	; 32
    1db2:	51 e4       	ldi	r21, 0x41	; 65
    1db4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	bc 01       	movw	r22, r24
    1dbe:	cd 01       	movw	r24, r26
    1dc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	8d 83       	std	Y+5, r24	; 0x05
    1dcc:	0f c0       	rjmp	.+30     	; 0x1dec <STM_u8_Rotate_CCW+0x412>
    1dce:	88 ec       	ldi	r24, 0xC8	; 200
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	9c 83       	std	Y+4, r25	; 0x04
    1dd4:	8b 83       	std	Y+3, r24	; 0x03
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <STM_u8_Rotate_CCW+0x400>
    1dde:	9c 83       	std	Y+4, r25	; 0x04
    1de0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de2:	8d 81       	ldd	r24, Y+5	; 0x05
    1de4:	9e 81       	ldd	r25, Y+6	; 0x06
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	9e 83       	std	Y+6, r25	; 0x06
    1dea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dec:	8d 81       	ldd	r24, Y+5	; 0x05
    1dee:	9e 81       	ldd	r25, Y+6	; 0x06
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	69 f7       	brne	.-38     	; 0x1dce <STM_u8_Rotate_CCW+0x3f4>
    1df4:	14 c0       	rjmp	.+40     	; 0x1e1e <STM_u8_Rotate_CCW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df6:	6f 81       	ldd	r22, Y+7	; 0x07
    1df8:	78 85       	ldd	r23, Y+8	; 0x08
    1dfa:	89 85       	ldd	r24, Y+9	; 0x09
    1dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	9e 83       	std	Y+6, r25	; 0x06
    1e08:	8d 83       	std	Y+5, r24	; 0x05
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0e:	9a 83       	std	Y+2, r25	; 0x02
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	9a 81       	ldd	r25, Y+2	; 0x02
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <STM_u8_Rotate_CCW+0x43c>
    1e1a:	9a 83       	std	Y+2, r25	; 0x02
    1e1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	return STD_TYPES_OK;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
}
    1e20:	e8 96       	adiw	r28, 0x38	; 56
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <STM_u8_STOP>:

u8 STM_u8_STOP()
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	2e 97       	sbiw	r28, 0x0e	; 14
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	cd bf       	out	0x3d, r28	; 61
	// STOP STEPPER MOTOR
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    1e46:	82 e0       	ldi	r24, 0x02	; 2
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	41 e0       	ldi	r20, 0x01	; 1
    1e4c:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    1e50:	82 e0       	ldi	r24, 0x02	; 2
    1e52:	61 e0       	ldi	r22, 0x01	; 1
    1e54:	41 e0       	ldi	r20, 0x01	; 1
    1e56:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	62 e0       	ldi	r22, 0x02	; 2
    1e5e:	41 e0       	ldi	r20, 0x01	; 1
    1e60:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	63 e0       	ldi	r22, 0x03	; 3
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a0 e2       	ldi	r26, 0x20	; 32
    1e74:	b1 e4       	ldi	r27, 0x41	; 65
    1e76:	8b 87       	std	Y+11, r24	; 0x0b
    1e78:	9c 87       	std	Y+12, r25	; 0x0c
    1e7a:	ad 87       	std	Y+13, r26	; 0x0d
    1e7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a ef       	ldi	r20, 0xFA	; 250
    1e8c:	54 e4       	ldi	r21, 0x44	; 68
    1e8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8f 83       	std	Y+7, r24	; 0x07
    1e98:	98 87       	std	Y+8, r25	; 0x08
    1e9a:	a9 87       	std	Y+9, r26	; 0x09
    1e9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea0:	78 85       	ldd	r23, Y+8	; 0x08
    1ea2:	89 85       	ldd	r24, Y+9	; 0x09
    1ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	5f e3       	ldi	r21, 0x3F	; 63
    1eae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1eb2:	88 23       	and	r24, r24
    1eb4:	2c f4       	brge	.+10     	; 0x1ec0 <STM_u8_STOP+0x8e>
		__ticks = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
    1ebe:	3f c0       	rjmp	.+126    	; 0x1f3e <STM_u8_STOP+0x10c>
	else if (__tmp > 65535)
    1ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec2:	78 85       	ldd	r23, Y+8	; 0x08
    1ec4:	89 85       	ldd	r24, Y+9	; 0x09
    1ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	3f ef       	ldi	r19, 0xFF	; 255
    1ecc:	4f e7       	ldi	r20, 0x7F	; 127
    1ece:	57 e4       	ldi	r21, 0x47	; 71
    1ed0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ed4:	18 16       	cp	r1, r24
    1ed6:	4c f5       	brge	.+82     	; 0x1f2a <STM_u8_STOP+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e2       	ldi	r20, 0x20	; 32
    1ee6:	51 e4       	ldi	r21, 0x41	; 65
    1ee8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9e 83       	std	Y+6, r25	; 0x06
    1efe:	8d 83       	std	Y+5, r24	; 0x05
    1f00:	0f c0       	rjmp	.+30     	; 0x1f20 <STM_u8_STOP+0xee>
    1f02:	88 ec       	ldi	r24, 0xC8	; 200
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9c 83       	std	Y+4, r25	; 0x04
    1f08:	8b 83       	std	Y+3, r24	; 0x03
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <STM_u8_STOP+0xdc>
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	9e 83       	std	Y+6, r25	; 0x06
    1f1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	69 f7       	brne	.-38     	; 0x1f02 <STM_u8_STOP+0xd0>
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <STM_u8_STOP+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2c:	78 85       	ldd	r23, Y+8	; 0x08
    1f2e:	89 85       	ldd	r24, Y+9	; 0x09
    1f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <STM_u8_STOP+0x118>
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	return STD_TYPES_OK;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
}
    1f54:	2e 96       	adiw	r28, 0x0e	; 14
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_voidInit(void)
{
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	cc 54       	subi	r28, 0x4C	; 76
    1f74:	d0 40       	sbci	r29, 0x00	; 0
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	fe 01       	movw	r30, r28
    1f82:	e7 5b       	subi	r30, 0xB7	; 183
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	ac e0       	ldi	r26, 0x0C	; 12
    1f8c:	b2 e4       	ldi	r27, 0x42	; 66
    1f8e:	80 83       	st	Z, r24
    1f90:	91 83       	std	Z+1, r25	; 0x01
    1f92:	a2 83       	std	Z+2, r26	; 0x02
    1f94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f96:	8e 01       	movw	r16, r28
    1f98:	0b 5b       	subi	r16, 0xBB	; 187
    1f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e7 5b       	subi	r30, 0xB7	; 183
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	60 81       	ld	r22, Z
    1fa4:	71 81       	ldd	r23, Z+1	; 0x01
    1fa6:	82 81       	ldd	r24, Z+2	; 0x02
    1fa8:	93 81       	ldd	r25, Z+3	; 0x03
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	4a ef       	ldi	r20, 0xFA	; 250
    1fb0:	54 e4       	ldi	r21, 0x44	; 68
    1fb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	f8 01       	movw	r30, r16
    1fbc:	80 83       	st	Z, r24
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	a2 83       	std	Z+2, r26	; 0x02
    1fc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	eb 5b       	subi	r30, 0xBB	; 187
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	60 81       	ld	r22, Z
    1fcc:	71 81       	ldd	r23, Z+1	; 0x01
    1fce:	82 81       	ldd	r24, Z+2	; 0x02
    1fd0:	93 81       	ldd	r25, Z+3	; 0x03
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e8       	ldi	r20, 0x80	; 128
    1fd8:	5f e3       	ldi	r21, 0x3F	; 63
    1fda:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fde:	88 23       	and	r24, r24
    1fe0:	44 f4       	brge	.+16     	; 0x1ff2 <LCD_voidInit+0x8c>
		__ticks = 1;
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	ed 5b       	subi	r30, 0xBD	; 189
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	80 83       	st	Z, r24
    1ff0:	64 c0       	rjmp	.+200    	; 0x20ba <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	eb 5b       	subi	r30, 0xBB	; 187
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	60 81       	ld	r22, Z
    1ffa:	71 81       	ldd	r23, Z+1	; 0x01
    1ffc:	82 81       	ldd	r24, Z+2	; 0x02
    1ffe:	93 81       	ldd	r25, Z+3	; 0x03
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	3f ef       	ldi	r19, 0xFF	; 255
    2004:	4f e7       	ldi	r20, 0x7F	; 127
    2006:	57 e4       	ldi	r21, 0x47	; 71
    2008:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    200c:	18 16       	cp	r1, r24
    200e:	0c f0       	brlt	.+2      	; 0x2012 <LCD_voidInit+0xac>
    2010:	43 c0       	rjmp	.+134    	; 0x2098 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2012:	fe 01       	movw	r30, r28
    2014:	e7 5b       	subi	r30, 0xB7	; 183
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	60 81       	ld	r22, Z
    201a:	71 81       	ldd	r23, Z+1	; 0x01
    201c:	82 81       	ldd	r24, Z+2	; 0x02
    201e:	93 81       	ldd	r25, Z+3	; 0x03
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e2       	ldi	r20, 0x20	; 32
    2026:	51 e4       	ldi	r21, 0x41	; 65
    2028:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	8e 01       	movw	r16, r28
    2032:	0d 5b       	subi	r16, 0xBD	; 189
    2034:	1f 4f       	sbci	r17, 0xFF	; 255
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	f8 01       	movw	r30, r16
    2044:	91 83       	std	Z+1, r25	; 0x01
    2046:	80 83       	st	Z, r24
    2048:	1f c0       	rjmp	.+62     	; 0x2088 <LCD_voidInit+0x122>
    204a:	fe 01       	movw	r30, r28
    204c:	ef 5b       	subi	r30, 0xBF	; 191
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	88 ec       	ldi	r24, 0xC8	; 200
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	91 83       	std	Z+1, r25	; 0x01
    2056:	80 83       	st	Z, r24
    2058:	fe 01       	movw	r30, r28
    205a:	ef 5b       	subi	r30, 0xBF	; 191
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	80 81       	ld	r24, Z
    2060:	91 81       	ldd	r25, Z+1	; 0x01
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_voidInit+0xfc>
    2066:	fe 01       	movw	r30, r28
    2068:	ef 5b       	subi	r30, 0xBF	; 191
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2070:	de 01       	movw	r26, r28
    2072:	ad 5b       	subi	r26, 0xBD	; 189
    2074:	bf 4f       	sbci	r27, 0xFF	; 255
    2076:	fe 01       	movw	r30, r28
    2078:	ed 5b       	subi	r30, 0xBD	; 189
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	80 81       	ld	r24, Z
    207e:	91 81       	ldd	r25, Z+1	; 0x01
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	11 96       	adiw	r26, 0x01	; 1
    2084:	9c 93       	st	X, r25
    2086:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2088:	fe 01       	movw	r30, r28
    208a:	ed 5b       	subi	r30, 0xBD	; 189
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	80 81       	ld	r24, Z
    2090:	91 81       	ldd	r25, Z+1	; 0x01
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	d1 f6       	brne	.-76     	; 0x204a <LCD_voidInit+0xe4>
    2096:	24 c0       	rjmp	.+72     	; 0x20e0 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2098:	8e 01       	movw	r16, r28
    209a:	0d 5b       	subi	r16, 0xBD	; 189
    209c:	1f 4f       	sbci	r17, 0xFF	; 255
    209e:	fe 01       	movw	r30, r28
    20a0:	eb 5b       	subi	r30, 0xBB	; 187
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	60 81       	ld	r22, Z
    20a6:	71 81       	ldd	r23, Z+1	; 0x01
    20a8:	82 81       	ldd	r24, Z+2	; 0x02
    20aa:	93 81       	ldd	r25, Z+3	; 0x03
    20ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	f8 01       	movw	r30, r16
    20b6:	91 83       	std	Z+1, r25	; 0x01
    20b8:	80 83       	st	Z, r24
    20ba:	fe 01       	movw	r30, r28
    20bc:	ed 5b       	subi	r30, 0xBD	; 189
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	80 81       	ld	r24, Z
    20c2:	91 81       	ldd	r25, Z+1	; 0x01
    20c4:	fe 01       	movw	r30, r28
    20c6:	ff 96       	adiw	r30, 0x3f	; 63
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	80 83       	st	Z, r24
    20cc:	fe 01       	movw	r30, r28
    20ce:	ff 96       	adiw	r30, 0x3f	; 63
    20d0:	80 81       	ld	r24, Z
    20d2:	91 81       	ldd	r25, Z+1	; 0x01
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <LCD_voidInit+0x16e>
    20d8:	fe 01       	movw	r30, r28
    20da:	ff 96       	adiw	r30, 0x3f	; 63
    20dc:	91 83       	std	Z+1, r25	; 0x01
    20de:	80 83       	st	Z, r24
	_delay_ms(35);
	/* Function Set Cmnd */
	LCD_voidSendCmnd(0b00111000);
    20e0:	88 e3       	ldi	r24, 0x38	; 56
    20e2:	0e 94 76 12 	call	0x24ec	; 0x24ec <LCD_voidSendCmnd>
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a0 e2       	ldi	r26, 0x20	; 32
    20ec:	b2 e4       	ldi	r27, 0x42	; 66
    20ee:	8b af       	std	Y+59, r24	; 0x3b
    20f0:	9c af       	std	Y+60, r25	; 0x3c
    20f2:	ad af       	std	Y+61, r26	; 0x3d
    20f4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20f6:	6b ad       	ldd	r22, Y+59	; 0x3b
    20f8:	7c ad       	ldd	r23, Y+60	; 0x3c
    20fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    20fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    20fe:	2b ea       	ldi	r18, 0xAB	; 171
    2100:	3a ea       	ldi	r19, 0xAA	; 170
    2102:	4a e2       	ldi	r20, 0x2A	; 42
    2104:	50 e4       	ldi	r21, 0x40	; 64
    2106:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	8f ab       	std	Y+55, r24	; 0x37
    2110:	98 af       	std	Y+56, r25	; 0x38
    2112:	a9 af       	std	Y+57, r26	; 0x39
    2114:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2116:	6f a9       	ldd	r22, Y+55	; 0x37
    2118:	78 ad       	ldd	r23, Y+56	; 0x38
    211a:	89 ad       	ldd	r24, Y+57	; 0x39
    211c:	9a ad       	ldd	r25, Y+58	; 0x3a
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e8       	ldi	r20, 0x80	; 128
    2124:	5f e3       	ldi	r21, 0x3F	; 63
    2126:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    212a:	88 23       	and	r24, r24
    212c:	1c f4       	brge	.+6      	; 0x2134 <LCD_voidInit+0x1ce>
		__ticks = 1;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	8e ab       	std	Y+54, r24	; 0x36
    2132:	91 c0       	rjmp	.+290    	; 0x2256 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    2134:	6f a9       	ldd	r22, Y+55	; 0x37
    2136:	78 ad       	ldd	r23, Y+56	; 0x38
    2138:	89 ad       	ldd	r24, Y+57	; 0x39
    213a:	9a ad       	ldd	r25, Y+58	; 0x3a
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	53 e4       	ldi	r21, 0x43	; 67
    2144:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	0c f0       	brlt	.+2      	; 0x214e <LCD_voidInit+0x1e8>
    214c:	7b c0       	rjmp	.+246    	; 0x2244 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    214e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2150:	7c ad       	ldd	r23, Y+60	; 0x3c
    2152:	8d ad       	ldd	r24, Y+61	; 0x3d
    2154:	9e ad       	ldd	r25, Y+62	; 0x3e
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	4a e7       	ldi	r20, 0x7A	; 122
    215c:	54 e4       	ldi	r21, 0x44	; 68
    215e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	8a ab       	std	Y+50, r24	; 0x32
    2168:	9b ab       	std	Y+51, r25	; 0x33
    216a:	ac ab       	std	Y+52, r26	; 0x34
    216c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216e:	6a a9       	ldd	r22, Y+50	; 0x32
    2170:	7b a9       	ldd	r23, Y+51	; 0x33
    2172:	8c a9       	ldd	r24, Y+52	; 0x34
    2174:	9d a9       	ldd	r25, Y+53	; 0x35
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	4a ef       	ldi	r20, 0xFA	; 250
    217c:	54 e4       	ldi	r21, 0x44	; 68
    217e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	8e a7       	std	Y+46, r24	; 0x2e
    2188:	9f a7       	std	Y+47, r25	; 0x2f
    218a:	a8 ab       	std	Y+48, r26	; 0x30
    218c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    218e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2190:	7f a5       	ldd	r23, Y+47	; 0x2f
    2192:	88 a9       	ldd	r24, Y+48	; 0x30
    2194:	99 a9       	ldd	r25, Y+49	; 0x31
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e8       	ldi	r20, 0x80	; 128
    219c:	5f e3       	ldi	r21, 0x3F	; 63
    219e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21a2:	88 23       	and	r24, r24
    21a4:	2c f4       	brge	.+10     	; 0x21b0 <LCD_voidInit+0x24a>
		__ticks = 1;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9d a7       	std	Y+45, r25	; 0x2d
    21ac:	8c a7       	std	Y+44, r24	; 0x2c
    21ae:	3f c0       	rjmp	.+126    	; 0x222e <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    21b0:	6e a5       	ldd	r22, Y+46	; 0x2e
    21b2:	7f a5       	ldd	r23, Y+47	; 0x2f
    21b4:	88 a9       	ldd	r24, Y+48	; 0x30
    21b6:	99 a9       	ldd	r25, Y+49	; 0x31
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	3f ef       	ldi	r19, 0xFF	; 255
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	57 e4       	ldi	r21, 0x47	; 71
    21c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21c4:	18 16       	cp	r1, r24
    21c6:	4c f5       	brge	.+82     	; 0x221a <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c8:	6a a9       	ldd	r22, Y+50	; 0x32
    21ca:	7b a9       	ldd	r23, Y+51	; 0x33
    21cc:	8c a9       	ldd	r24, Y+52	; 0x34
    21ce:	9d a9       	ldd	r25, Y+53	; 0x35
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e2       	ldi	r20, 0x20	; 32
    21d6:	51 e4       	ldi	r21, 0x41	; 65
    21d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	bc 01       	movw	r22, r24
    21e2:	cd 01       	movw	r24, r26
    21e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	9d a7       	std	Y+45, r25	; 0x2d
    21ee:	8c a7       	std	Y+44, r24	; 0x2c
    21f0:	0f c0       	rjmp	.+30     	; 0x2210 <LCD_voidInit+0x2aa>
    21f2:	88 ec       	ldi	r24, 0xC8	; 200
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	9b a7       	std	Y+43, r25	; 0x2b
    21f8:	8a a7       	std	Y+42, r24	; 0x2a
    21fa:	8a a5       	ldd	r24, Y+42	; 0x2a
    21fc:	9b a5       	ldd	r25, Y+43	; 0x2b
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <LCD_voidInit+0x298>
    2202:	9b a7       	std	Y+43, r25	; 0x2b
    2204:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2206:	8c a5       	ldd	r24, Y+44	; 0x2c
    2208:	9d a5       	ldd	r25, Y+45	; 0x2d
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	9d a7       	std	Y+45, r25	; 0x2d
    220e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2210:	8c a5       	ldd	r24, Y+44	; 0x2c
    2212:	9d a5       	ldd	r25, Y+45	; 0x2d
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	69 f7       	brne	.-38     	; 0x21f2 <LCD_voidInit+0x28c>
    2218:	24 c0       	rjmp	.+72     	; 0x2262 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221a:	6e a5       	ldd	r22, Y+46	; 0x2e
    221c:	7f a5       	ldd	r23, Y+47	; 0x2f
    221e:	88 a9       	ldd	r24, Y+48	; 0x30
    2220:	99 a9       	ldd	r25, Y+49	; 0x31
    2222:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	9d a7       	std	Y+45, r25	; 0x2d
    222c:	8c a7       	std	Y+44, r24	; 0x2c
    222e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2230:	9d a5       	ldd	r25, Y+45	; 0x2d
    2232:	99 a7       	std	Y+41, r25	; 0x29
    2234:	88 a7       	std	Y+40, r24	; 0x28
    2236:	88 a5       	ldd	r24, Y+40	; 0x28
    2238:	99 a5       	ldd	r25, Y+41	; 0x29
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <LCD_voidInit+0x2d4>
    223e:	99 a7       	std	Y+41, r25	; 0x29
    2240:	88 a7       	std	Y+40, r24	; 0x28
    2242:	0f c0       	rjmp	.+30     	; 0x2262 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2244:	6f a9       	ldd	r22, Y+55	; 0x37
    2246:	78 ad       	ldd	r23, Y+56	; 0x38
    2248:	89 ad       	ldd	r24, Y+57	; 0x39
    224a:	9a ad       	ldd	r25, Y+58	; 0x3a
    224c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	8e ab       	std	Y+54, r24	; 0x36
    2256:	8e a9       	ldd	r24, Y+54	; 0x36
    2258:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    225a:	8f a1       	ldd	r24, Y+39	; 0x27
    225c:	8a 95       	dec	r24
    225e:	f1 f7       	brne	.-4      	; 0x225c <LCD_voidInit+0x2f6>
    2260:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmnd(0b00001111);
    2262:	8f e0       	ldi	r24, 0x0F	; 15
    2264:	0e 94 76 12 	call	0x24ec	; 0x24ec <LCD_voidSendCmnd>
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	a0 e2       	ldi	r26, 0x20	; 32
    226e:	b2 e4       	ldi	r27, 0x42	; 66
    2270:	8b a3       	std	Y+35, r24	; 0x23
    2272:	9c a3       	std	Y+36, r25	; 0x24
    2274:	ad a3       	std	Y+37, r26	; 0x25
    2276:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2278:	6b a1       	ldd	r22, Y+35	; 0x23
    227a:	7c a1       	ldd	r23, Y+36	; 0x24
    227c:	8d a1       	ldd	r24, Y+37	; 0x25
    227e:	9e a1       	ldd	r25, Y+38	; 0x26
    2280:	2b ea       	ldi	r18, 0xAB	; 171
    2282:	3a ea       	ldi	r19, 0xAA	; 170
    2284:	4a e2       	ldi	r20, 0x2A	; 42
    2286:	50 e4       	ldi	r21, 0x40	; 64
    2288:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	8f 8f       	std	Y+31, r24	; 0x1f
    2292:	98 a3       	std	Y+32, r25	; 0x20
    2294:	a9 a3       	std	Y+33, r26	; 0x21
    2296:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2298:	6f 8d       	ldd	r22, Y+31	; 0x1f
    229a:	78 a1       	ldd	r23, Y+32	; 0x20
    229c:	89 a1       	ldd	r24, Y+33	; 0x21
    229e:	9a a1       	ldd	r25, Y+34	; 0x22
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e8       	ldi	r20, 0x80	; 128
    22a6:	5f e3       	ldi	r21, 0x3F	; 63
    22a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22ac:	88 23       	and	r24, r24
    22ae:	1c f4       	brge	.+6      	; 0x22b6 <LCD_voidInit+0x350>
		__ticks = 1;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	8e 8f       	std	Y+30, r24	; 0x1e
    22b4:	91 c0       	rjmp	.+290    	; 0x23d8 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    22b6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22b8:	78 a1       	ldd	r23, Y+32	; 0x20
    22ba:	89 a1       	ldd	r24, Y+33	; 0x21
    22bc:	9a a1       	ldd	r25, Y+34	; 0x22
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	4f e7       	ldi	r20, 0x7F	; 127
    22c4:	53 e4       	ldi	r21, 0x43	; 67
    22c6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22ca:	18 16       	cp	r1, r24
    22cc:	0c f0       	brlt	.+2      	; 0x22d0 <LCD_voidInit+0x36a>
    22ce:	7b c0       	rjmp	.+246    	; 0x23c6 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    22d0:	6b a1       	ldd	r22, Y+35	; 0x23
    22d2:	7c a1       	ldd	r23, Y+36	; 0x24
    22d4:	8d a1       	ldd	r24, Y+37	; 0x25
    22d6:	9e a1       	ldd	r25, Y+38	; 0x26
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	4a e7       	ldi	r20, 0x7A	; 122
    22de:	54 e4       	ldi	r21, 0x44	; 68
    22e0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	8a 8f       	std	Y+26, r24	; 0x1a
    22ea:	9b 8f       	std	Y+27, r25	; 0x1b
    22ec:	ac 8f       	std	Y+28, r26	; 0x1c
    22ee:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22f2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    22f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	4a ef       	ldi	r20, 0xFA	; 250
    22fe:	54 e4       	ldi	r21, 0x44	; 68
    2300:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	8e 8b       	std	Y+22, r24	; 0x16
    230a:	9f 8b       	std	Y+23, r25	; 0x17
    230c:	a8 8f       	std	Y+24, r26	; 0x18
    230e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2310:	6e 89       	ldd	r22, Y+22	; 0x16
    2312:	7f 89       	ldd	r23, Y+23	; 0x17
    2314:	88 8d       	ldd	r24, Y+24	; 0x18
    2316:	99 8d       	ldd	r25, Y+25	; 0x19
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e8       	ldi	r20, 0x80	; 128
    231e:	5f e3       	ldi	r21, 0x3F	; 63
    2320:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2324:	88 23       	and	r24, r24
    2326:	2c f4       	brge	.+10     	; 0x2332 <LCD_voidInit+0x3cc>
		__ticks = 1;
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	9d 8b       	std	Y+21, r25	; 0x15
    232e:	8c 8b       	std	Y+20, r24	; 0x14
    2330:	3f c0       	rjmp	.+126    	; 0x23b0 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    2332:	6e 89       	ldd	r22, Y+22	; 0x16
    2334:	7f 89       	ldd	r23, Y+23	; 0x17
    2336:	88 8d       	ldd	r24, Y+24	; 0x18
    2338:	99 8d       	ldd	r25, Y+25	; 0x19
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	3f ef       	ldi	r19, 0xFF	; 255
    233e:	4f e7       	ldi	r20, 0x7F	; 127
    2340:	57 e4       	ldi	r21, 0x47	; 71
    2342:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2346:	18 16       	cp	r1, r24
    2348:	4c f5       	brge	.+82     	; 0x239c <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    234c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    234e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2350:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e2       	ldi	r20, 0x20	; 32
    2358:	51 e4       	ldi	r21, 0x41	; 65
    235a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	bc 01       	movw	r22, r24
    2364:	cd 01       	movw	r24, r26
    2366:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	9d 8b       	std	Y+21, r25	; 0x15
    2370:	8c 8b       	std	Y+20, r24	; 0x14
    2372:	0f c0       	rjmp	.+30     	; 0x2392 <LCD_voidInit+0x42c>
    2374:	88 ec       	ldi	r24, 0xC8	; 200
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9b 8b       	std	Y+19, r25	; 0x13
    237a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    237c:	8a 89       	ldd	r24, Y+18	; 0x12
    237e:	9b 89       	ldd	r25, Y+19	; 0x13
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <LCD_voidInit+0x41a>
    2384:	9b 8b       	std	Y+19, r25	; 0x13
    2386:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2388:	8c 89       	ldd	r24, Y+20	; 0x14
    238a:	9d 89       	ldd	r25, Y+21	; 0x15
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	9d 8b       	std	Y+21, r25	; 0x15
    2390:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2392:	8c 89       	ldd	r24, Y+20	; 0x14
    2394:	9d 89       	ldd	r25, Y+21	; 0x15
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	69 f7       	brne	.-38     	; 0x2374 <LCD_voidInit+0x40e>
    239a:	24 c0       	rjmp	.+72     	; 0x23e4 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239c:	6e 89       	ldd	r22, Y+22	; 0x16
    239e:	7f 89       	ldd	r23, Y+23	; 0x17
    23a0:	88 8d       	ldd	r24, Y+24	; 0x18
    23a2:	99 8d       	ldd	r25, Y+25	; 0x19
    23a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9d 8b       	std	Y+21, r25	; 0x15
    23ae:	8c 8b       	std	Y+20, r24	; 0x14
    23b0:	8c 89       	ldd	r24, Y+20	; 0x14
    23b2:	9d 89       	ldd	r25, Y+21	; 0x15
    23b4:	99 8b       	std	Y+17, r25	; 0x11
    23b6:	88 8b       	std	Y+16, r24	; 0x10
    23b8:	88 89       	ldd	r24, Y+16	; 0x10
    23ba:	99 89       	ldd	r25, Y+17	; 0x11
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <LCD_voidInit+0x456>
    23c0:	99 8b       	std	Y+17, r25	; 0x11
    23c2:	88 8b       	std	Y+16, r24	; 0x10
    23c4:	0f c0       	rjmp	.+30     	; 0x23e4 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23c6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23c8:	78 a1       	ldd	r23, Y+32	; 0x20
    23ca:	89 a1       	ldd	r24, Y+33	; 0x21
    23cc:	9a a1       	ldd	r25, Y+34	; 0x22
    23ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	8e 8f       	std	Y+30, r24	; 0x1e
    23d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23da:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23de:	8a 95       	dec	r24
    23e0:	f1 f7       	brne	.-4      	; 0x23de <LCD_voidInit+0x478>
    23e2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmnd(0b00000001);
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	0e 94 76 12 	call	0x24ec	; 0x24ec <LCD_voidSendCmnd>
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	a0 e0       	ldi	r26, 0x00	; 0
    23f0:	b0 e4       	ldi	r27, 0x40	; 64
    23f2:	8b 87       	std	Y+11, r24	; 0x0b
    23f4:	9c 87       	std	Y+12, r25	; 0x0c
    23f6:	ad 87       	std	Y+13, r26	; 0x0d
    23f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    23fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2400:	9e 85       	ldd	r25, Y+14	; 0x0e
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	4a ef       	ldi	r20, 0xFA	; 250
    2408:	54 e4       	ldi	r21, 0x44	; 68
    240a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	8f 83       	std	Y+7, r24	; 0x07
    2414:	98 87       	std	Y+8, r25	; 0x08
    2416:	a9 87       	std	Y+9, r26	; 0x09
    2418:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    241a:	6f 81       	ldd	r22, Y+7	; 0x07
    241c:	78 85       	ldd	r23, Y+8	; 0x08
    241e:	89 85       	ldd	r24, Y+9	; 0x09
    2420:	9a 85       	ldd	r25, Y+10	; 0x0a
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e8       	ldi	r20, 0x80	; 128
    2428:	5f e3       	ldi	r21, 0x3F	; 63
    242a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    242e:	88 23       	and	r24, r24
    2430:	2c f4       	brge	.+10     	; 0x243c <LCD_voidInit+0x4d6>
		__ticks = 1;
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	9e 83       	std	Y+6, r25	; 0x06
    2438:	8d 83       	std	Y+5, r24	; 0x05
    243a:	3f c0       	rjmp	.+126    	; 0x24ba <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    243c:	6f 81       	ldd	r22, Y+7	; 0x07
    243e:	78 85       	ldd	r23, Y+8	; 0x08
    2440:	89 85       	ldd	r24, Y+9	; 0x09
    2442:	9a 85       	ldd	r25, Y+10	; 0x0a
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	3f ef       	ldi	r19, 0xFF	; 255
    2448:	4f e7       	ldi	r20, 0x7F	; 127
    244a:	57 e4       	ldi	r21, 0x47	; 71
    244c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2450:	18 16       	cp	r1, r24
    2452:	4c f5       	brge	.+82     	; 0x24a6 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2454:	6b 85       	ldd	r22, Y+11	; 0x0b
    2456:	7c 85       	ldd	r23, Y+12	; 0x0c
    2458:	8d 85       	ldd	r24, Y+13	; 0x0d
    245a:	9e 85       	ldd	r25, Y+14	; 0x0e
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e2       	ldi	r20, 0x20	; 32
    2462:	51 e4       	ldi	r21, 0x41	; 65
    2464:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	bc 01       	movw	r22, r24
    246e:	cd 01       	movw	r24, r26
    2470:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	9e 83       	std	Y+6, r25	; 0x06
    247a:	8d 83       	std	Y+5, r24	; 0x05
    247c:	0f c0       	rjmp	.+30     	; 0x249c <LCD_voidInit+0x536>
    247e:	88 ec       	ldi	r24, 0xC8	; 200
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9c 83       	std	Y+4, r25	; 0x04
    2484:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	9c 81       	ldd	r25, Y+4	; 0x04
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <LCD_voidInit+0x524>
    248e:	9c 83       	std	Y+4, r25	; 0x04
    2490:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2492:	8d 81       	ldd	r24, Y+5	; 0x05
    2494:	9e 81       	ldd	r25, Y+6	; 0x06
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	9e 83       	std	Y+6, r25	; 0x06
    249a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	69 f7       	brne	.-38     	; 0x247e <LCD_voidInit+0x518>
    24a4:	14 c0       	rjmp	.+40     	; 0x24ce <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a6:	6f 81       	ldd	r22, Y+7	; 0x07
    24a8:	78 85       	ldd	r23, Y+8	; 0x08
    24aa:	89 85       	ldd	r24, Y+9	; 0x09
    24ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	9e 83       	std	Y+6, r25	; 0x06
    24b8:	8d 83       	std	Y+5, r24	; 0x05
    24ba:	8d 81       	ldd	r24, Y+5	; 0x05
    24bc:	9e 81       	ldd	r25, Y+6	; 0x06
    24be:	9a 83       	std	Y+2, r25	; 0x02
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <LCD_voidInit+0x560>
    24ca:	9a 83       	std	Y+2, r25	; 0x02
    24cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmnd(0b00000110);
    24ce:	86 e0       	ldi	r24, 0x06	; 6
    24d0:	0e 94 76 12 	call	0x24ec	; 0x24ec <LCD_voidSendCmnd>
}
    24d4:	c4 5b       	subi	r28, 0xB4	; 180
    24d6:	df 4f       	sbci	r29, 0xFF	; 255
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	08 95       	ret

000024ec <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	69 97       	sbiw	r28, 0x19	; 25
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	89 8f       	std	Y+25, r24	; 0x19
		//  Rs = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rs_PIN ,DIO_u8_LOW); // portA, Pin0 ,LOW
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	60 e0       	ldi	r22, 0x00	; 0
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
		//  Rw = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rw_PIN ,DIO_u8_LOW); // portA, Pin1 ,LOW
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	61 e0       	ldi	r22, 0x01	; 1
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
		/* Write Cmnd */
		DIO_u8SetPortValue(LCD_u8_DATA_PORT , Copy_u8Cmnd); // Port D
    2516:	83 e0       	ldi	r24, 0x03	; 3
    2518:	69 8d       	ldd	r22, Y+25	; 0x19
    251a:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_u8SetPortValue>
		// E = 1
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_HIGH); // portA, Pin2 ,HIGH
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	62 e0       	ldi	r22, 0x02	; 2
    2522:	41 e0       	ldi	r20, 0x01	; 1
    2524:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	a0 e8       	ldi	r26, 0x80	; 128
    252e:	bf e3       	ldi	r27, 0x3F	; 63
    2530:	8d 8b       	std	Y+21, r24	; 0x15
    2532:	9e 8b       	std	Y+22, r25	; 0x16
    2534:	af 8b       	std	Y+23, r26	; 0x17
    2536:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2538:	6d 89       	ldd	r22, Y+21	; 0x15
    253a:	7e 89       	ldd	r23, Y+22	; 0x16
    253c:	8f 89       	ldd	r24, Y+23	; 0x17
    253e:	98 8d       	ldd	r25, Y+24	; 0x18
    2540:	2b ea       	ldi	r18, 0xAB	; 171
    2542:	3a ea       	ldi	r19, 0xAA	; 170
    2544:	4a e2       	ldi	r20, 0x2A	; 42
    2546:	50 e4       	ldi	r21, 0x40	; 64
    2548:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	89 8b       	std	Y+17, r24	; 0x11
    2552:	9a 8b       	std	Y+18, r25	; 0x12
    2554:	ab 8b       	std	Y+19, r26	; 0x13
    2556:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2558:	69 89       	ldd	r22, Y+17	; 0x11
    255a:	7a 89       	ldd	r23, Y+18	; 0x12
    255c:	8b 89       	ldd	r24, Y+19	; 0x13
    255e:	9c 89       	ldd	r25, Y+20	; 0x14
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    256c:	88 23       	and	r24, r24
    256e:	1c f4       	brge	.+6      	; 0x2576 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	88 8b       	std	Y+16, r24	; 0x10
    2574:	91 c0       	rjmp	.+290    	; 0x2698 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    2576:	69 89       	ldd	r22, Y+17	; 0x11
    2578:	7a 89       	ldd	r23, Y+18	; 0x12
    257a:	8b 89       	ldd	r24, Y+19	; 0x13
    257c:	9c 89       	ldd	r25, Y+20	; 0x14
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	53 e4       	ldi	r21, 0x43	; 67
    2586:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	0c f0       	brlt	.+2      	; 0x2590 <LCD_voidSendCmnd+0xa4>
    258e:	7b c0       	rjmp	.+246    	; 0x2686 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2590:	6d 89       	ldd	r22, Y+21	; 0x15
    2592:	7e 89       	ldd	r23, Y+22	; 0x16
    2594:	8f 89       	ldd	r24, Y+23	; 0x17
    2596:	98 8d       	ldd	r25, Y+24	; 0x18
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	4a e7       	ldi	r20, 0x7A	; 122
    259e:	54 e4       	ldi	r21, 0x44	; 68
    25a0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	8c 87       	std	Y+12, r24	; 0x0c
    25aa:	9d 87       	std	Y+13, r25	; 0x0d
    25ac:	ae 87       	std	Y+14, r26	; 0x0e
    25ae:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b0:	6c 85       	ldd	r22, Y+12	; 0x0c
    25b2:	7d 85       	ldd	r23, Y+13	; 0x0d
    25b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    25b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	4a ef       	ldi	r20, 0xFA	; 250
    25be:	54 e4       	ldi	r21, 0x44	; 68
    25c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	88 87       	std	Y+8, r24	; 0x08
    25ca:	99 87       	std	Y+9, r25	; 0x09
    25cc:	aa 87       	std	Y+10, r26	; 0x0a
    25ce:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    25d0:	68 85       	ldd	r22, Y+8	; 0x08
    25d2:	79 85       	ldd	r23, Y+9	; 0x09
    25d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e8       	ldi	r20, 0x80	; 128
    25de:	5f e3       	ldi	r21, 0x3F	; 63
    25e0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25e4:	88 23       	and	r24, r24
    25e6:	2c f4       	brge	.+10     	; 0x25f2 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	9f 83       	std	Y+7, r25	; 0x07
    25ee:	8e 83       	std	Y+6, r24	; 0x06
    25f0:	3f c0       	rjmp	.+126    	; 0x2670 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    25f2:	68 85       	ldd	r22, Y+8	; 0x08
    25f4:	79 85       	ldd	r23, Y+9	; 0x09
    25f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	3f ef       	ldi	r19, 0xFF	; 255
    25fe:	4f e7       	ldi	r20, 0x7F	; 127
    2600:	57 e4       	ldi	r21, 0x47	; 71
    2602:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2606:	18 16       	cp	r1, r24
    2608:	4c f5       	brge	.+82     	; 0x265c <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260a:	6c 85       	ldd	r22, Y+12	; 0x0c
    260c:	7d 85       	ldd	r23, Y+13	; 0x0d
    260e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2610:	9f 85       	ldd	r25, Y+15	; 0x0f
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e2       	ldi	r20, 0x20	; 32
    2618:	51 e4       	ldi	r21, 0x41	; 65
    261a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	bc 01       	movw	r22, r24
    2624:	cd 01       	movw	r24, r26
    2626:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	9f 83       	std	Y+7, r25	; 0x07
    2630:	8e 83       	std	Y+6, r24	; 0x06
    2632:	0f c0       	rjmp	.+30     	; 0x2652 <LCD_voidSendCmnd+0x166>
    2634:	88 ec       	ldi	r24, 0xC8	; 200
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	9d 83       	std	Y+5, r25	; 0x05
    263a:	8c 83       	std	Y+4, r24	; 0x04
    263c:	8c 81       	ldd	r24, Y+4	; 0x04
    263e:	9d 81       	ldd	r25, Y+5	; 0x05
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <LCD_voidSendCmnd+0x154>
    2644:	9d 83       	std	Y+5, r25	; 0x05
    2646:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2648:	8e 81       	ldd	r24, Y+6	; 0x06
    264a:	9f 81       	ldd	r25, Y+7	; 0x07
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	9f 83       	std	Y+7, r25	; 0x07
    2650:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2652:	8e 81       	ldd	r24, Y+6	; 0x06
    2654:	9f 81       	ldd	r25, Y+7	; 0x07
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	69 f7       	brne	.-38     	; 0x2634 <LCD_voidSendCmnd+0x148>
    265a:	24 c0       	rjmp	.+72     	; 0x26a4 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265c:	68 85       	ldd	r22, Y+8	; 0x08
    265e:	79 85       	ldd	r23, Y+9	; 0x09
    2660:	8a 85       	ldd	r24, Y+10	; 0x0a
    2662:	9b 85       	ldd	r25, Y+11	; 0x0b
    2664:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	9f 83       	std	Y+7, r25	; 0x07
    266e:	8e 83       	std	Y+6, r24	; 0x06
    2670:	8e 81       	ldd	r24, Y+6	; 0x06
    2672:	9f 81       	ldd	r25, Y+7	; 0x07
    2674:	9b 83       	std	Y+3, r25	; 0x03
    2676:	8a 83       	std	Y+2, r24	; 0x02
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	9b 81       	ldd	r25, Y+3	; 0x03
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <LCD_voidSendCmnd+0x190>
    2680:	9b 83       	std	Y+3, r25	; 0x03
    2682:	8a 83       	std	Y+2, r24	; 0x02
    2684:	0f c0       	rjmp	.+30     	; 0x26a4 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2686:	69 89       	ldd	r22, Y+17	; 0x11
    2688:	7a 89       	ldd	r23, Y+18	; 0x12
    268a:	8b 89       	ldd	r24, Y+19	; 0x13
    268c:	9c 89       	ldd	r25, Y+20	; 0x14
    268e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	88 8b       	std	Y+16, r24	; 0x10
    2698:	88 89       	ldd	r24, Y+16	; 0x10
    269a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	8a 95       	dec	r24
    26a0:	f1 f7       	brne	.-4      	; 0x269e <LCD_voidSendCmnd+0x1b2>
    26a2:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		// E = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_LOW); // portA, Pin2 ,LOW
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	62 e0       	ldi	r22, 0x02	; 2
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
}
    26ae:	69 96       	adiw	r28, 0x19	; 25
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	69 97       	sbiw	r28, 0x19	; 25
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	89 8f       	std	Y+25, r24	; 0x19
		// STEP 1 Rs = 1
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rs_PIN ,DIO_u8_HIGH); // portA, Pin0 , HIGH
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	60 e0       	ldi	r22, 0x00	; 0
    26da:	41 e0       	ldi	r20, 0x01	; 1
    26dc:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
		// step 2 Rw = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rw_PIN ,DIO_u8_LOW); // portA, Pin1 , LOW
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	61 e0       	ldi	r22, 0x01	; 1
    26e4:	40 e0       	ldi	r20, 0x00	; 0
    26e6:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
		/* Write Char */
		DIO_u8SetPortValue(LCD_u8_DATA_PORT , Copy_u8Char); // Port D
    26ea:	83 e0       	ldi	r24, 0x03	; 3
    26ec:	69 8d       	ldd	r22, Y+25	; 0x19
    26ee:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_u8SetPortValue>
		// E = 1
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_HIGH); // portA, Pin2 , HIGH
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	62 e0       	ldi	r22, 0x02	; 2
    26f6:	41 e0       	ldi	r20, 0x01	; 1
    26f8:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	a0 e8       	ldi	r26, 0x80	; 128
    2702:	bf e3       	ldi	r27, 0x3F	; 63
    2704:	8d 8b       	std	Y+21, r24	; 0x15
    2706:	9e 8b       	std	Y+22, r25	; 0x16
    2708:	af 8b       	std	Y+23, r26	; 0x17
    270a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    270c:	6d 89       	ldd	r22, Y+21	; 0x15
    270e:	7e 89       	ldd	r23, Y+22	; 0x16
    2710:	8f 89       	ldd	r24, Y+23	; 0x17
    2712:	98 8d       	ldd	r25, Y+24	; 0x18
    2714:	2b ea       	ldi	r18, 0xAB	; 171
    2716:	3a ea       	ldi	r19, 0xAA	; 170
    2718:	4a e2       	ldi	r20, 0x2A	; 42
    271a:	50 e4       	ldi	r21, 0x40	; 64
    271c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	89 8b       	std	Y+17, r24	; 0x11
    2726:	9a 8b       	std	Y+18, r25	; 0x12
    2728:	ab 8b       	std	Y+19, r26	; 0x13
    272a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    272c:	69 89       	ldd	r22, Y+17	; 0x11
    272e:	7a 89       	ldd	r23, Y+18	; 0x12
    2730:	8b 89       	ldd	r24, Y+19	; 0x13
    2732:	9c 89       	ldd	r25, Y+20	; 0x14
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e8       	ldi	r20, 0x80	; 128
    273a:	5f e3       	ldi	r21, 0x3F	; 63
    273c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2740:	88 23       	and	r24, r24
    2742:	1c f4       	brge	.+6      	; 0x274a <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	88 8b       	std	Y+16, r24	; 0x10
    2748:	91 c0       	rjmp	.+290    	; 0x286c <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    274a:	69 89       	ldd	r22, Y+17	; 0x11
    274c:	7a 89       	ldd	r23, Y+18	; 0x12
    274e:	8b 89       	ldd	r24, Y+19	; 0x13
    2750:	9c 89       	ldd	r25, Y+20	; 0x14
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	4f e7       	ldi	r20, 0x7F	; 127
    2758:	53 e4       	ldi	r21, 0x43	; 67
    275a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    275e:	18 16       	cp	r1, r24
    2760:	0c f0       	brlt	.+2      	; 0x2764 <LCD_voidSendChar+0xa4>
    2762:	7b c0       	rjmp	.+246    	; 0x285a <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2764:	6d 89       	ldd	r22, Y+21	; 0x15
    2766:	7e 89       	ldd	r23, Y+22	; 0x16
    2768:	8f 89       	ldd	r24, Y+23	; 0x17
    276a:	98 8d       	ldd	r25, Y+24	; 0x18
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	4a e7       	ldi	r20, 0x7A	; 122
    2772:	54 e4       	ldi	r21, 0x44	; 68
    2774:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	8c 87       	std	Y+12, r24	; 0x0c
    277e:	9d 87       	std	Y+13, r25	; 0x0d
    2780:	ae 87       	std	Y+14, r26	; 0x0e
    2782:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2784:	6c 85       	ldd	r22, Y+12	; 0x0c
    2786:	7d 85       	ldd	r23, Y+13	; 0x0d
    2788:	8e 85       	ldd	r24, Y+14	; 0x0e
    278a:	9f 85       	ldd	r25, Y+15	; 0x0f
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	4a ef       	ldi	r20, 0xFA	; 250
    2792:	54 e4       	ldi	r21, 0x44	; 68
    2794:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	88 87       	std	Y+8, r24	; 0x08
    279e:	99 87       	std	Y+9, r25	; 0x09
    27a0:	aa 87       	std	Y+10, r26	; 0x0a
    27a2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27a4:	68 85       	ldd	r22, Y+8	; 0x08
    27a6:	79 85       	ldd	r23, Y+9	; 0x09
    27a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    27aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e8       	ldi	r20, 0x80	; 128
    27b2:	5f e3       	ldi	r21, 0x3F	; 63
    27b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27b8:	88 23       	and	r24, r24
    27ba:	2c f4       	brge	.+10     	; 0x27c6 <LCD_voidSendChar+0x106>
		__ticks = 1;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	9f 83       	std	Y+7, r25	; 0x07
    27c2:	8e 83       	std	Y+6, r24	; 0x06
    27c4:	3f c0       	rjmp	.+126    	; 0x2844 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    27c6:	68 85       	ldd	r22, Y+8	; 0x08
    27c8:	79 85       	ldd	r23, Y+9	; 0x09
    27ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    27cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	3f ef       	ldi	r19, 0xFF	; 255
    27d2:	4f e7       	ldi	r20, 0x7F	; 127
    27d4:	57 e4       	ldi	r21, 0x47	; 71
    27d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27da:	18 16       	cp	r1, r24
    27dc:	4c f5       	brge	.+82     	; 0x2830 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27de:	6c 85       	ldd	r22, Y+12	; 0x0c
    27e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    27e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    27e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	40 e2       	ldi	r20, 0x20	; 32
    27ec:	51 e4       	ldi	r21, 0x41	; 65
    27ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	bc 01       	movw	r22, r24
    27f8:	cd 01       	movw	r24, r26
    27fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9f 83       	std	Y+7, r25	; 0x07
    2804:	8e 83       	std	Y+6, r24	; 0x06
    2806:	0f c0       	rjmp	.+30     	; 0x2826 <LCD_voidSendChar+0x166>
    2808:	88 ec       	ldi	r24, 0xC8	; 200
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9d 83       	std	Y+5, r25	; 0x05
    280e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2810:	8c 81       	ldd	r24, Y+4	; 0x04
    2812:	9d 81       	ldd	r25, Y+5	; 0x05
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	f1 f7       	brne	.-4      	; 0x2814 <LCD_voidSendChar+0x154>
    2818:	9d 83       	std	Y+5, r25	; 0x05
    281a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281c:	8e 81       	ldd	r24, Y+6	; 0x06
    281e:	9f 81       	ldd	r25, Y+7	; 0x07
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	9f 83       	std	Y+7, r25	; 0x07
    2824:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2826:	8e 81       	ldd	r24, Y+6	; 0x06
    2828:	9f 81       	ldd	r25, Y+7	; 0x07
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	69 f7       	brne	.-38     	; 0x2808 <LCD_voidSendChar+0x148>
    282e:	24 c0       	rjmp	.+72     	; 0x2878 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2830:	68 85       	ldd	r22, Y+8	; 0x08
    2832:	79 85       	ldd	r23, Y+9	; 0x09
    2834:	8a 85       	ldd	r24, Y+10	; 0x0a
    2836:	9b 85       	ldd	r25, Y+11	; 0x0b
    2838:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	9f 83       	std	Y+7, r25	; 0x07
    2842:	8e 83       	std	Y+6, r24	; 0x06
    2844:	8e 81       	ldd	r24, Y+6	; 0x06
    2846:	9f 81       	ldd	r25, Y+7	; 0x07
    2848:	9b 83       	std	Y+3, r25	; 0x03
    284a:	8a 83       	std	Y+2, r24	; 0x02
    284c:	8a 81       	ldd	r24, Y+2	; 0x02
    284e:	9b 81       	ldd	r25, Y+3	; 0x03
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	f1 f7       	brne	.-4      	; 0x2850 <LCD_voidSendChar+0x190>
    2854:	9b 83       	std	Y+3, r25	; 0x03
    2856:	8a 83       	std	Y+2, r24	; 0x02
    2858:	0f c0       	rjmp	.+30     	; 0x2878 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    285a:	69 89       	ldd	r22, Y+17	; 0x11
    285c:	7a 89       	ldd	r23, Y+18	; 0x12
    285e:	8b 89       	ldd	r24, Y+19	; 0x13
    2860:	9c 89       	ldd	r25, Y+20	; 0x14
    2862:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	88 8b       	std	Y+16, r24	; 0x10
    286c:	88 89       	ldd	r24, Y+16	; 0x10
    286e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	8a 95       	dec	r24
    2874:	f1 f7       	brne	.-4      	; 0x2872 <LCD_voidSendChar+0x1b2>
    2876:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		// E = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_LOW); // portA, Pin2 , LOW
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	62 e0       	ldi	r22, 0x02	; 2
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
}
    2882:	69 96       	adiw	r28, 0x19	; 25
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	f8 94       	cli
    2888:	de bf       	out	0x3e, r29	; 62
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	cd bf       	out	0x3d, r28	; 61
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <LCD_u8GoToXY>:

u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	00 d0       	rcall	.+0      	; 0x289a <LCD_u8GoToXY+0x6>
    289a:	00 d0       	rcall	.+0      	; 0x289c <LCD_u8GoToXY+0x8>
    289c:	0f 92       	push	r0
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	8a 83       	std	Y+2, r24	; 0x02
    28a4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    28aa:	8b 81       	ldd	r24, Y+3	; 0x03
    28ac:	88 32       	cpi	r24, 0x28	; 40
    28ae:	e0 f4       	brcc	.+56     	; 0x28e8 <LCD_u8GoToXY+0x54>
	{
		switch (Copy_u8LineNum)
    28b0:	8a 81       	ldd	r24, Y+2	; 0x02
    28b2:	28 2f       	mov	r18, r24
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	3d 83       	std	Y+5, r19	; 0x05
    28b8:	2c 83       	std	Y+4, r18	; 0x04
    28ba:	8c 81       	ldd	r24, Y+4	; 0x04
    28bc:	9d 81       	ldd	r25, Y+5	; 0x05
    28be:	81 30       	cpi	r24, 0x01	; 1
    28c0:	91 05       	cpc	r25, r1
    28c2:	31 f0       	breq	.+12     	; 0x28d0 <LCD_u8GoToXY+0x3c>
    28c4:	2c 81       	ldd	r18, Y+4	; 0x04
    28c6:	3d 81       	ldd	r19, Y+5	; 0x05
    28c8:	22 30       	cpi	r18, 0x02	; 2
    28ca:	31 05       	cpc	r19, r1
    28cc:	31 f0       	breq	.+12     	; 0x28da <LCD_u8GoToXY+0x46>
    28ce:	0a c0       	rjmp	.+20     	; 0x28e4 <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1 : LCD_voidSendCmnd(0x80+Copy_u8Location);break;
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	80 58       	subi	r24, 0x80	; 128
    28d4:	0e 94 76 12 	call	0x24ec	; 0x24ec <LCD_voidSendCmnd>
    28d8:	08 c0       	rjmp	.+16     	; 0x28ea <LCD_u8GoToXY+0x56>
			case LCD_u8_LINE2 : LCD_voidSendCmnd(0xc0+Copy_u8Location);break;
    28da:	8b 81       	ldd	r24, Y+3	; 0x03
    28dc:	80 54       	subi	r24, 0x40	; 64
    28de:	0e 94 76 12 	call	0x24ec	; 0x24ec <LCD_voidSendCmnd>
    28e2:	03 c0       	rjmp	.+6      	; 0x28ea <LCD_u8GoToXY+0x56>
			default : Local_u8ErrorState = STD_TYPES_NOK;
    28e4:	19 82       	std	Y+1, r1	; 0x01
    28e6:	01 c0       	rjmp	.+2      	; 0x28ea <LCD_u8GoToXY+0x56>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    28e8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	cf 91       	pop	r28
    28f8:	df 91       	pop	r29
    28fa:	08 95       	ret

000028fc <LCD_SendString>:

u8 LCD_SendString(u8 * Copy_pu8_String){
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	00 d0       	rcall	.+0      	; 0x2902 <LCD_SendString+0x6>
    2902:	0f 92       	push	r0
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	9b 83       	std	Y+3, r25	; 0x03
    290a:	8a 83       	std	Y+2, r24	; 0x02
    for(u8 i=0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    290c:	19 82       	std	Y+1, r1	; 0x01
    290e:	0e c0       	rjmp	.+28     	; 0x292c <LCD_SendString+0x30>
    	LCD_voidSendChar(Copy_pu8_String[i]);
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	9b 81       	ldd	r25, Y+3	; 0x03
    291a:	fc 01       	movw	r30, r24
    291c:	e2 0f       	add	r30, r18
    291e:	f3 1f       	adc	r31, r19
    2920:	80 81       	ld	r24, Z
    2922:	0e 94 60 13 	call	0x26c0	; 0x26c0 <LCD_voidSendChar>
	}
	return Local_u8ErrorState;
}

u8 LCD_SendString(u8 * Copy_pu8_String){
    for(u8 i=0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    2926:	89 81       	ldd	r24, Y+1	; 0x01
    2928:	8f 5f       	subi	r24, 0xFF	; 255
    292a:	89 83       	std	Y+1, r24	; 0x01
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	28 2f       	mov	r18, r24
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	9b 81       	ldd	r25, Y+3	; 0x03
    2936:	fc 01       	movw	r30, r24
    2938:	e2 0f       	add	r30, r18
    293a:	f3 1f       	adc	r31, r19
    293c:	80 81       	ld	r24, Z
    293e:	88 23       	and	r24, r24
    2940:	39 f7       	brne	.-50     	; 0x2910 <LCD_SendString+0x14>
    	LCD_voidSendChar(Copy_pu8_String[i]);
    }
    return STD_TYPES_OK;
    2942:	81 e0       	ldi	r24, 0x01	; 1
}
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret

00002950 <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};


u8 KPD_u8GetKeyState(u8 * Copy_pu8ReturnedKey)
{
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
    2958:	65 97       	sbiw	r28, 0x15	; 21
    295a:	0f b6       	in	r0, 0x3f	; 63
    295c:	f8 94       	cli
    295e:	de bf       	out	0x3e, r29	; 62
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	cd bf       	out	0x3d, r28	; 61
    2964:	9d 8b       	std	Y+21, r25	; 0x15
    2966:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
    296c:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey != NULL)
    296e:	8c 89       	ldd	r24, Y+20	; 0x14
    2970:	9d 89       	ldd	r25, Y+21	; 0x15
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	09 f4       	brne	.+2      	; 0x2978 <KPD_u8GetKeyState+0x28>
    2976:	f0 c0       	rjmp	.+480    	; 0x2b58 <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    2978:	ec 89       	ldd	r30, Y+20	; 0x14
    297a:	fd 89       	ldd	r31, Y+21	; 0x15
    297c:	8f ef       	ldi	r24, 0xFF	; 255
    297e:	80 83       	st	Z, r24
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    2980:	19 8a       	std	Y+17, r1	; 0x11
    2982:	e5 c0       	rjmp	.+458    	; 0x2b4e <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_R_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    2984:	89 89       	ldd	r24, Y+17	; 0x11
    2986:	88 2f       	mov	r24, r24
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	fc 01       	movw	r30, r24
    298c:	e2 53       	subi	r30, 0x32	; 50
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	90 81       	ld	r25, Z
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	69 2f       	mov	r22, r25
    2996:	40 e0       	ldi	r20, 0x00	; 0
    2998:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
			/* Check Which Input Pin Has Zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    299c:	18 8a       	std	Y+16, r1	; 0x10
    299e:	c1 c0       	rjmp	.+386    	; 0x2b22 <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    29a0:	88 89       	ldd	r24, Y+16	; 0x10
    29a2:	88 2f       	mov	r24, r24
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	fc 01       	movw	r30, r24
    29a8:	ee 52       	subi	r30, 0x2E	; 46
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	90 81       	ld	r25, Z
    29ae:	9e 01       	movw	r18, r28
    29b0:	2d 5e       	subi	r18, 0xED	; 237
    29b2:	3f 4f       	sbci	r19, 0xFF	; 255
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	69 2f       	mov	r22, r25
    29b8:	a9 01       	movw	r20, r18
    29ba:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)/* Switch is Pressed */
    29be:	8b 89       	ldd	r24, Y+19	; 0x13
    29c0:	88 23       	and	r24, r24
    29c2:	09 f0       	breq	.+2      	; 0x29c6 <KPD_u8GetKeyState+0x76>
    29c4:	ab c0       	rjmp	.+342    	; 0x2b1c <KPD_u8GetKeyState+0x1cc>
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	a0 ea       	ldi	r26, 0xA0	; 160
    29cc:	b1 e4       	ldi	r27, 0x41	; 65
    29ce:	8b 87       	std	Y+11, r24	; 0x0b
    29d0:	9c 87       	std	Y+12, r25	; 0x0c
    29d2:	ad 87       	std	Y+13, r26	; 0x0d
    29d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29da:	8d 85       	ldd	r24, Y+13	; 0x0d
    29dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	4a ef       	ldi	r20, 0xFA	; 250
    29e4:	54 e4       	ldi	r21, 0x44	; 68
    29e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	8f 83       	std	Y+7, r24	; 0x07
    29f0:	98 87       	std	Y+8, r25	; 0x08
    29f2:	a9 87       	std	Y+9, r26	; 0x09
    29f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29f6:	6f 81       	ldd	r22, Y+7	; 0x07
    29f8:	78 85       	ldd	r23, Y+8	; 0x08
    29fa:	89 85       	ldd	r24, Y+9	; 0x09
    29fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e8       	ldi	r20, 0x80	; 128
    2a04:	5f e3       	ldi	r21, 0x3F	; 63
    2a06:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a0a:	88 23       	and	r24, r24
    2a0c:	2c f4       	brge	.+10     	; 0x2a18 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	9e 83       	std	Y+6, r25	; 0x06
    2a14:	8d 83       	std	Y+5, r24	; 0x05
    2a16:	3f c0       	rjmp	.+126    	; 0x2a96 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    2a18:	6f 81       	ldd	r22, Y+7	; 0x07
    2a1a:	78 85       	ldd	r23, Y+8	; 0x08
    2a1c:	89 85       	ldd	r24, Y+9	; 0x09
    2a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	3f ef       	ldi	r19, 0xFF	; 255
    2a24:	4f e7       	ldi	r20, 0x7F	; 127
    2a26:	57 e4       	ldi	r21, 0x47	; 71
    2a28:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a2c:	18 16       	cp	r1, r24
    2a2e:	4c f5       	brge	.+82     	; 0x2a82 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e2       	ldi	r20, 0x20	; 32
    2a3e:	51 e4       	ldi	r21, 0x41	; 65
    2a40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	bc 01       	movw	r22, r24
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	9e 83       	std	Y+6, r25	; 0x06
    2a56:	8d 83       	std	Y+5, r24	; 0x05
    2a58:	0f c0       	rjmp	.+30     	; 0x2a78 <KPD_u8GetKeyState+0x128>
    2a5a:	88 ec       	ldi	r24, 0xC8	; 200
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	9c 83       	std	Y+4, r25	; 0x04
    2a60:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a62:	8b 81       	ldd	r24, Y+3	; 0x03
    2a64:	9c 81       	ldd	r25, Y+4	; 0x04
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <KPD_u8GetKeyState+0x116>
    2a6a:	9c 83       	std	Y+4, r25	; 0x04
    2a6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a70:	9e 81       	ldd	r25, Y+6	; 0x06
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	9e 83       	std	Y+6, r25	; 0x06
    2a76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a78:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7c:	00 97       	sbiw	r24, 0x00	; 0
    2a7e:	69 f7       	brne	.-38     	; 0x2a5a <KPD_u8GetKeyState+0x10a>
    2a80:	14 c0       	rjmp	.+40     	; 0x2aaa <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a82:	6f 81       	ldd	r22, Y+7	; 0x07
    2a84:	78 85       	ldd	r23, Y+8	; 0x08
    2a86:	89 85       	ldd	r24, Y+9	; 0x09
    2a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	9e 83       	std	Y+6, r25	; 0x06
    2a94:	8d 83       	std	Y+5, r24	; 0x05
    2a96:	8d 81       	ldd	r24, Y+5	; 0x05
    2a98:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9a:	9a 83       	std	Y+2, r25	; 0x02
    2a9c:	89 83       	std	Y+1, r24	; 0x01
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <KPD_u8GetKeyState+0x152>
    2aa6:	9a 83       	std	Y+2, r25	; 0x02
    2aa8:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    2aaa:	88 89       	ldd	r24, Y+16	; 0x10
    2aac:	88 2f       	mov	r24, r24
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	ee 52       	subi	r30, 0x2E	; 46
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	90 81       	ld	r25, Z
    2ab8:	9e 01       	movw	r18, r28
    2aba:	2d 5e       	subi	r18, 0xED	; 237
    2abc:	3f 4f       	sbci	r19, 0xFF	; 255
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	69 2f       	mov	r22, r25
    2ac2:	a9 01       	movw	r20, r18
    2ac4:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_u8GetPinValue>
    2ac8:	0f c0       	rjmp	.+30     	; 0x2ae8 <KPD_u8GetKeyState+0x198>
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    2aca:	88 89       	ldd	r24, Y+16	; 0x10
    2acc:	88 2f       	mov	r24, r24
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	ee 52       	subi	r30, 0x2E	; 46
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	90 81       	ld	r25, Z
    2ad8:	9e 01       	movw	r18, r28
    2ada:	2d 5e       	subi	r18, 0xED	; 237
    2adc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	69 2f       	mov	r22, r25
    2ae2:	a9 01       	movw	r20, r18
    2ae4:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_u8GetPinValue>
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
    2ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aea:	88 23       	and	r24, r24
    2aec:	71 f3       	breq	.-36     	; 0x2aca <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    2aee:	89 89       	ldd	r24, Y+17	; 0x11
    2af0:	48 2f       	mov	r20, r24
    2af2:	50 e0       	ldi	r21, 0x00	; 0
    2af4:	88 89       	ldd	r24, Y+16	; 0x10
    2af6:	28 2f       	mov	r18, r24
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	ca 01       	movw	r24, r20
    2afc:	88 0f       	add	r24, r24
    2afe:	99 1f       	adc	r25, r25
    2b00:	88 0f       	add	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	82 0f       	add	r24, r18
    2b06:	93 1f       	adc	r25, r19
    2b08:	fc 01       	movw	r30, r24
    2b0a:	e2 54       	subi	r30, 0x42	; 66
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	80 81       	ld	r24, Z
    2b10:	ec 89       	ldd	r30, Y+20	; 0x14
    2b12:	fd 89       	ldd	r31, Y+21	; 0x15
    2b14:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	8f 87       	std	Y+15, r24	; 0x0f
    2b1a:	07 c0       	rjmp	.+14     	; 0x2b2a <KPD_u8GetKeyState+0x1da>
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
		{
			DIO_u8SetPinValue(KPD_u8_R_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
			/* Check Which Input Pin Has Zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    2b1c:	88 89       	ldd	r24, Y+16	; 0x10
    2b1e:	8f 5f       	subi	r24, 0xFF	; 255
    2b20:	88 8b       	std	Y+16, r24	; 0x10
    2b22:	88 89       	ldd	r24, Y+16	; 0x10
    2b24:	84 30       	cpi	r24, 0x04	; 4
    2b26:	08 f4       	brcc	.+2      	; 0x2b2a <KPD_u8GetKeyState+0x1da>
    2b28:	3b cf       	rjmp	.-394    	; 0x29a0 <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;						
				}
			}
			/* Deactivate Row */
			DIO_u8SetPinValue(KPD_u8_R_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    2b2a:	89 89       	ldd	r24, Y+17	; 0x11
    2b2c:	88 2f       	mov	r24, r24
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	fc 01       	movw	r30, r24
    2b32:	e2 53       	subi	r30, 0x32	; 50
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	90 81       	ld	r25, Z
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	69 2f       	mov	r22, r25
    2b3c:	41 e0       	ldi	r20, 0x01	; 1
    2b3e:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
			if(Local_u8Flag == 1)
    2b42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b44:	81 30       	cpi	r24, 0x01	; 1
    2b46:	49 f0       	breq	.+18     	; 0x2b5a <KPD_u8GetKeyState+0x20a>
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    2b48:	89 89       	ldd	r24, Y+17	; 0x11
    2b4a:	8f 5f       	subi	r24, 0xFF	; 255
    2b4c:	89 8b       	std	Y+17, r24	; 0x11
    2b4e:	89 89       	ldd	r24, Y+17	; 0x11
    2b50:	84 30       	cpi	r24, 0x04	; 4
    2b52:	08 f4       	brcc	.+2      	; 0x2b56 <KPD_u8GetKeyState+0x206>
    2b54:	17 cf       	rjmp	.-466    	; 0x2984 <KPD_u8GetKeyState+0x34>
    2b56:	01 c0       	rjmp	.+2      	; 0x2b5a <KPD_u8GetKeyState+0x20a>
			}
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2b58:	1a 8a       	std	Y+18, r1	; 0x12
	}
	return Local_u8ErrorState;
    2b5a:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2b5c:	65 96       	adiw	r28, 0x15	; 21
    2b5e:	0f b6       	in	r0, 0x3f	; 63
    2b60:	f8 94       	cli
    2b62:	de bf       	out	0x3e, r29	; 62
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	cd bf       	out	0x3d, r28	; 61
    2b68:	cf 91       	pop	r28
    2b6a:	df 91       	pop	r29
    2b6c:	08 95       	ret

00002b6e <DCM_u8_ROTATE_CW>:
#include "DCM_interface.h"
#include "DCM_private.h"
#include "DCM_config.h"

u8 DCM_u8_ROTATE_CW()
{
    2b6e:	df 93       	push	r29
    2b70:	cf 93       	push	r28
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_IN1_PORT,MOTOR_IN1_PIN,DIO_u8_HIGH);
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	64 e0       	ldi	r22, 0x04	; 4
    2b7a:	41 e0       	ldi	r20, 0x01	; 1
    2b7c:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_IN2_PORT,MOTOR_IN2_PIN,DIO_u8_LOW);
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	65 e0       	ldi	r22, 0x05	; 5
    2b84:	40 e0       	ldi	r20, 0x00	; 0
    2b86:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
}
    2b8c:	cf 91       	pop	r28
    2b8e:	df 91       	pop	r29
    2b90:	08 95       	ret

00002b92 <DCM_u8_ROTATE_CCW>:

u8 DCM_u8_ROTATE_CCW()
{
    2b92:	df 93       	push	r29
    2b94:	cf 93       	push	r28
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_IN1_PORT,MOTOR_IN1_PIN,DIO_u8_LOW);
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	64 e0       	ldi	r22, 0x04	; 4
    2b9e:	40 e0       	ldi	r20, 0x00	; 0
    2ba0:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_IN2_PORT,MOTOR_IN2_PIN,DIO_u8_HIGH);
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	65 e0       	ldi	r22, 0x05	; 5
    2ba8:	41 e0       	ldi	r20, 0x01	; 1
    2baa:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    2bae:	81 e0       	ldi	r24, 0x01	; 1
}
    2bb0:	cf 91       	pop	r28
    2bb2:	df 91       	pop	r29
    2bb4:	08 95       	ret

00002bb6 <DCM_u8_ROTATE_STOP>:

u8 DCM_u8_ROTATE_STOP()
{
    2bb6:	df 93       	push	r29
    2bb8:	cf 93       	push	r28
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
		DIO_u8SetPinValue(MOTOR_IN1_PORT,MOTOR_IN1_PIN,DIO_u8_LOW);
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	64 e0       	ldi	r22, 0x04	; 4
    2bc2:	40 e0       	ldi	r20, 0x00	; 0
    2bc4:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(MOTOR_IN2_PORT,MOTOR_IN2_PIN,DIO_u8_LOW);
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	65 e0       	ldi	r22, 0x05	; 5
    2bcc:	40 e0       	ldi	r20, 0x00	; 0
    2bce:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>

		return STD_TYPES_OK;
    2bd2:	81 e0       	ldi	r24, 0x01	; 1

}
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	08 95       	ret

00002bda <main>:
#define WRONG 1
#define pass "5000"
#define pass_L 4

u8 main(void)
{
    2bda:	0f 93       	push	r16
    2bdc:	1f 93       	push	r17
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	cd b7       	in	r28, 0x3d	; 61
    2be4:	de b7       	in	r29, 0x3e	; 62
    2be6:	cc 56       	subi	r28, 0x6C	; 108
    2be8:	d0 40       	sbci	r29, 0x00	; 0
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	de bf       	out	0x3e, r29	; 62
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	cd bf       	out	0x3d, r28	; 61
	// CLEAR SCREEEN
	LCD_voidSendCmnd(0x01);
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	0e 94 76 12 	call	0x24ec	; 0x24ec <LCD_voidSendCmnd>
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e1 5a       	subi	r30, 0xA1	; 161
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	a0 e0       	ldi	r26, 0x00	; 0
    2c06:	b0 e4       	ldi	r27, 0x40	; 64
    2c08:	80 83       	st	Z, r24
    2c0a:	91 83       	std	Z+1, r25	; 0x01
    2c0c:	a2 83       	std	Z+2, r26	; 0x02
    2c0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c10:	8e 01       	movw	r16, r28
    2c12:	05 5a       	subi	r16, 0xA5	; 165
    2c14:	1f 4f       	sbci	r17, 0xFF	; 255
    2c16:	fe 01       	movw	r30, r28
    2c18:	e1 5a       	subi	r30, 0xA1	; 161
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	60 81       	ld	r22, Z
    2c1e:	71 81       	ldd	r23, Z+1	; 0x01
    2c20:	82 81       	ldd	r24, Z+2	; 0x02
    2c22:	93 81       	ldd	r25, Z+3	; 0x03
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	4a ef       	ldi	r20, 0xFA	; 250
    2c2a:	54 e4       	ldi	r21, 0x44	; 68
    2c2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	f8 01       	movw	r30, r16
    2c36:	80 83       	st	Z, r24
    2c38:	91 83       	std	Z+1, r25	; 0x01
    2c3a:	a2 83       	std	Z+2, r26	; 0x02
    2c3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e5 5a       	subi	r30, 0xA5	; 165
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	60 81       	ld	r22, Z
    2c46:	71 81       	ldd	r23, Z+1	; 0x01
    2c48:	82 81       	ldd	r24, Z+2	; 0x02
    2c4a:	93 81       	ldd	r25, Z+3	; 0x03
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e8       	ldi	r20, 0x80	; 128
    2c52:	5f e3       	ldi	r21, 0x3F	; 63
    2c54:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c58:	88 23       	and	r24, r24
    2c5a:	44 f4       	brge	.+16     	; 0x2c6c <main+0x92>
		__ticks = 1;
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	e7 5a       	subi	r30, 0xA7	; 167
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	91 83       	std	Z+1, r25	; 0x01
    2c68:	80 83       	st	Z, r24
    2c6a:	64 c0       	rjmp	.+200    	; 0x2d34 <main+0x15a>
	else if (__tmp > 65535)
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	e5 5a       	subi	r30, 0xA5	; 165
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	60 81       	ld	r22, Z
    2c74:	71 81       	ldd	r23, Z+1	; 0x01
    2c76:	82 81       	ldd	r24, Z+2	; 0x02
    2c78:	93 81       	ldd	r25, Z+3	; 0x03
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	3f ef       	ldi	r19, 0xFF	; 255
    2c7e:	4f e7       	ldi	r20, 0x7F	; 127
    2c80:	57 e4       	ldi	r21, 0x47	; 71
    2c82:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c86:	18 16       	cp	r1, r24
    2c88:	0c f0       	brlt	.+2      	; 0x2c8c <main+0xb2>
    2c8a:	43 c0       	rjmp	.+134    	; 0x2d12 <main+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	e1 5a       	subi	r30, 0xA1	; 161
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	60 81       	ld	r22, Z
    2c94:	71 81       	ldd	r23, Z+1	; 0x01
    2c96:	82 81       	ldd	r24, Z+2	; 0x02
    2c98:	93 81       	ldd	r25, Z+3	; 0x03
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e2       	ldi	r20, 0x20	; 32
    2ca0:	51 e4       	ldi	r21, 0x41	; 65
    2ca2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	8e 01       	movw	r16, r28
    2cac:	07 5a       	subi	r16, 0xA7	; 167
    2cae:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	cd 01       	movw	r24, r26
    2cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	f8 01       	movw	r30, r16
    2cbe:	91 83       	std	Z+1, r25	; 0x01
    2cc0:	80 83       	st	Z, r24
    2cc2:	1f c0       	rjmp	.+62     	; 0x2d02 <main+0x128>
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	e9 5a       	subi	r30, 0xA9	; 169
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	88 ec       	ldi	r24, 0xC8	; 200
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	91 83       	std	Z+1, r25	; 0x01
    2cd0:	80 83       	st	Z, r24
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e9 5a       	subi	r30, 0xA9	; 169
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	80 81       	ld	r24, Z
    2cda:	91 81       	ldd	r25, Z+1	; 0x01
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	f1 f7       	brne	.-4      	; 0x2cdc <main+0x102>
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	e9 5a       	subi	r30, 0xA9	; 169
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	91 83       	std	Z+1, r25	; 0x01
    2ce8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cea:	de 01       	movw	r26, r28
    2cec:	a7 5a       	subi	r26, 0xA7	; 167
    2cee:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e7 5a       	subi	r30, 0xA7	; 167
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	80 81       	ld	r24, Z
    2cf8:	91 81       	ldd	r25, Z+1	; 0x01
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	11 96       	adiw	r26, 0x01	; 1
    2cfe:	9c 93       	st	X, r25
    2d00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d02:	fe 01       	movw	r30, r28
    2d04:	e7 5a       	subi	r30, 0xA7	; 167
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	80 81       	ld	r24, Z
    2d0a:	91 81       	ldd	r25, Z+1	; 0x01
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	d1 f6       	brne	.-76     	; 0x2cc4 <main+0xea>
    2d10:	27 c0       	rjmp	.+78     	; 0x2d60 <main+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d12:	8e 01       	movw	r16, r28
    2d14:	07 5a       	subi	r16, 0xA7	; 167
    2d16:	1f 4f       	sbci	r17, 0xFF	; 255
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e5 5a       	subi	r30, 0xA5	; 165
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	93 81       	ldd	r25, Z+3	; 0x03
    2d26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	f8 01       	movw	r30, r16
    2d30:	91 83       	std	Z+1, r25	; 0x01
    2d32:	80 83       	st	Z, r24
    2d34:	de 01       	movw	r26, r28
    2d36:	ab 5a       	subi	r26, 0xAB	; 171
    2d38:	bf 4f       	sbci	r27, 0xFF	; 255
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e7 5a       	subi	r30, 0xA7	; 167
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	80 81       	ld	r24, Z
    2d42:	91 81       	ldd	r25, Z+1	; 0x01
    2d44:	8d 93       	st	X+, r24
    2d46:	9c 93       	st	X, r25
    2d48:	fe 01       	movw	r30, r28
    2d4a:	eb 5a       	subi	r30, 0xAB	; 171
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	80 81       	ld	r24, Z
    2d50:	91 81       	ldd	r25, Z+1	; 0x01
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	f1 f7       	brne	.-4      	; 0x2d52 <main+0x178>
    2d56:	fe 01       	movw	r30, r28
    2d58:	eb 5a       	subi	r30, 0xAB	; 171
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	91 83       	std	Z+1, r25	; 0x01
    2d5e:	80 83       	st	Z, r24
	_delay_ms(2);
	LCD_u8GoToXY(LCD_u8_LINE1,0);
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	0e 94 4a 14 	call	0x2894	; 0x2894 <LCD_u8GoToXY>

	u8 password_is = 0;
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e9 59       	subi	r30, 0x99	; 153
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	10 82       	st	Z, r1
	u8 counter = 0;
    2d70:	fe 01       	movw	r30, r28
    2d72:	ea 59       	subi	r30, 0x9A	; 154
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	10 82       	st	Z, r1
	u8 index = 0;
    2d78:	fe 01       	movw	r30, r28
    2d7a:	eb 59       	subi	r30, 0x9B	; 155
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	10 82       	st	Z, r1
	u8 Local_u8key;
	u8 pressed_keys[pass_L];

	// initialization of DIO
	DIO_voidInit();
    2d80:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidInit>
	// initialization of LCD
	LCD_voidInit();
    2d84:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_voidInit>

	LCD_SendString("ENTER YOUR PASS");
    2d88:	80 e6       	ldi	r24, 0x60	; 96
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LCD_SendString>
	LCD_u8GoToXY(LCD_u8_LINE2,0);
    2d90:	82 e0       	ldi	r24, 0x02	; 2
    2d92:	60 e0       	ldi	r22, 0x00	; 0
    2d94:	0e 94 4a 14 	call	0x2894	; 0x2894 <LCD_u8GoToXY>


	while(505)
	{
		KPD_u8GetKeyState(&Local_u8key);
    2d98:	ce 01       	movw	r24, r28
    2d9a:	88 59       	subi	r24, 0x98	; 152
    2d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d9e:	0e 94 a8 14 	call	0x2950	; 0x2950 <KPD_u8GetKeyState>
		if(Local_u8key != NO_KEY_PRESSED)
    2da2:	fe 01       	movw	r30, r28
    2da4:	e8 59       	subi	r30, 0x98	; 152
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	80 81       	ld	r24, Z
    2daa:	8f 3f       	cpi	r24, 0xFF	; 255
    2dac:	31 f1       	breq	.+76     	; 0x2dfa <main+0x220>
		{
			LCD_voidSendChar('*');
    2dae:	8a e2       	ldi	r24, 0x2A	; 42
    2db0:	0e 94 60 13 	call	0x26c0	; 0x26c0 <LCD_voidSendChar>
			counter++;
    2db4:	de 01       	movw	r26, r28
    2db6:	aa 59       	subi	r26, 0x9A	; 154
    2db8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dba:	fe 01       	movw	r30, r28
    2dbc:	ea 59       	subi	r30, 0x9A	; 154
    2dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc0:	80 81       	ld	r24, Z
    2dc2:	8f 5f       	subi	r24, 0xFF	; 255
    2dc4:	8c 93       	st	X, r24
			pressed_keys[index] = Local_u8key;   //edited
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	eb 59       	subi	r30, 0x9B	; 155
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	80 81       	ld	r24, Z
    2dce:	28 2f       	mov	r18, r24
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	e8 59       	subi	r30, 0x98	; 152
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	40 81       	ld	r20, Z
    2dda:	ce 01       	movw	r24, r28
    2ddc:	87 59       	subi	r24, 0x97	; 151
    2dde:	9f 4f       	sbci	r25, 0xFF	; 255
    2de0:	fc 01       	movw	r30, r24
    2de2:	e2 0f       	add	r30, r18
    2de4:	f3 1f       	adc	r31, r19
    2de6:	40 83       	st	Z, r20
			index++;
    2de8:	de 01       	movw	r26, r28
    2dea:	ab 59       	subi	r26, 0x9B	; 155
    2dec:	bf 4f       	sbci	r27, 0xFF	; 255
    2dee:	fe 01       	movw	r30, r28
    2df0:	eb 59       	subi	r30, 0x9B	; 155
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	80 81       	ld	r24, Z
    2df6:	8f 5f       	subi	r24, 0xFF	; 255
    2df8:	8c 93       	st	X, r24
		}
		if(counter == pass_L)
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	ea 59       	subi	r30, 0x9A	; 154
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	80 81       	ld	r24, Z
    2e02:	84 30       	cpi	r24, 0x04	; 4
    2e04:	49 f6       	brne	.-110    	; 0x2d98 <main+0x1be>
		{
			for(int x = 0 ; x < pass_L ; x++ ){
    2e06:	fe 01       	movw	r30, r28
    2e08:	ed 59       	subi	r30, 0x9D	; 157
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	11 82       	std	Z+1, r1	; 0x01
    2e0e:	10 82       	st	Z, r1
    2e10:	29 c0       	rjmp	.+82     	; 0x2e64 <main+0x28a>
				if(pass[x] != pressed_keys[x])
    2e12:	fe 01       	movw	r30, r28
    2e14:	ed 59       	subi	r30, 0x9D	; 157
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	80 81       	ld	r24, Z
    2e1a:	91 81       	ldd	r25, Z+1	; 0x01
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	ef 54       	subi	r30, 0x4F	; 79
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	40 81       	ld	r20, Z
    2e24:	fe 01       	movw	r30, r28
    2e26:	ed 59       	subi	r30, 0x9D	; 157
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	20 81       	ld	r18, Z
    2e2c:	31 81       	ldd	r19, Z+1	; 0x01
    2e2e:	ce 01       	movw	r24, r28
    2e30:	87 59       	subi	r24, 0x97	; 151
    2e32:	9f 4f       	sbci	r25, 0xFF	; 255
    2e34:	fc 01       	movw	r30, r24
    2e36:	e2 0f       	add	r30, r18
    2e38:	f3 1f       	adc	r31, r19
    2e3a:	80 81       	ld	r24, Z
    2e3c:	48 17       	cp	r20, r24
    2e3e:	31 f0       	breq	.+12     	; 0x2e4c <main+0x272>
				{
					password_is = WRONG;
    2e40:	fe 01       	movw	r30, r28
    2e42:	e9 59       	subi	r30, 0x99	; 153
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	80 83       	st	Z, r24
    2e4a:	14 c0       	rjmp	.+40     	; 0x2e74 <main+0x29a>
			pressed_keys[index] = Local_u8key;   //edited
			index++;
		}
		if(counter == pass_L)
		{
			for(int x = 0 ; x < pass_L ; x++ ){
    2e4c:	de 01       	movw	r26, r28
    2e4e:	ad 59       	subi	r26, 0x9D	; 157
    2e50:	bf 4f       	sbci	r27, 0xFF	; 255
    2e52:	fe 01       	movw	r30, r28
    2e54:	ed 59       	subi	r30, 0x9D	; 157
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	80 81       	ld	r24, Z
    2e5a:	91 81       	ldd	r25, Z+1	; 0x01
    2e5c:	01 96       	adiw	r24, 0x01	; 1
    2e5e:	11 96       	adiw	r26, 0x01	; 1
    2e60:	9c 93       	st	X, r25
    2e62:	8e 93       	st	-X, r24
    2e64:	fe 01       	movw	r30, r28
    2e66:	ed 59       	subi	r30, 0x9D	; 157
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	80 81       	ld	r24, Z
    2e6c:	91 81       	ldd	r25, Z+1	; 0x01
    2e6e:	84 30       	cpi	r24, 0x04	; 4
    2e70:	91 05       	cpc	r25, r1
    2e72:	7c f2       	brlt	.-98     	; 0x2e12 <main+0x238>
				{
					password_is = WRONG;
					break;
				}
			}
			if(password_is) // WRONG
    2e74:	fe 01       	movw	r30, r28
    2e76:	e9 59       	subi	r30, 0x99	; 153
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	80 81       	ld	r24, Z
    2e7c:	88 23       	and	r24, r24
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <main+0x2a8>
    2e80:	d9 c1       	rjmp	.+946    	; 0x3234 <main+0x65a>
			{
				index =0;
    2e82:	fe 01       	movw	r30, r28
    2e84:	eb 59       	subi	r30, 0x9B	; 155
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	10 82       	st	Z, r1
				counter=0;
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	ea 59       	subi	r30, 0x9A	; 154
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	10 82       	st	Z, r1
				password_is =0;
    2e92:	fe 01       	movw	r30, r28
    2e94:	e9 59       	subi	r30, 0x99	; 153
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	10 82       	st	Z, r1
				// CLEAR SCREEEN
				LCD_voidSendCmnd(0x01);
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	0e 94 76 12 	call	0x24ec	; 0x24ec <LCD_voidSendCmnd>
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	ef 5a       	subi	r30, 0xAF	; 175
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	a0 e0       	ldi	r26, 0x00	; 0
    2eac:	b0 e4       	ldi	r27, 0x40	; 64
    2eae:	80 83       	st	Z, r24
    2eb0:	91 83       	std	Z+1, r25	; 0x01
    2eb2:	a2 83       	std	Z+2, r26	; 0x02
    2eb4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb6:	8e 01       	movw	r16, r28
    2eb8:	03 5b       	subi	r16, 0xB3	; 179
    2eba:	1f 4f       	sbci	r17, 0xFF	; 255
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	ef 5a       	subi	r30, 0xAF	; 175
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	60 81       	ld	r22, Z
    2ec4:	71 81       	ldd	r23, Z+1	; 0x01
    2ec6:	82 81       	ldd	r24, Z+2	; 0x02
    2ec8:	93 81       	ldd	r25, Z+3	; 0x03
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	4a ef       	ldi	r20, 0xFA	; 250
    2ed0:	54 e4       	ldi	r21, 0x44	; 68
    2ed2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	f8 01       	movw	r30, r16
    2edc:	80 83       	st	Z, r24
    2ede:	91 83       	std	Z+1, r25	; 0x01
    2ee0:	a2 83       	std	Z+2, r26	; 0x02
    2ee2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	e3 5b       	subi	r30, 0xB3	; 179
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	60 81       	ld	r22, Z
    2eec:	71 81       	ldd	r23, Z+1	; 0x01
    2eee:	82 81       	ldd	r24, Z+2	; 0x02
    2ef0:	93 81       	ldd	r25, Z+3	; 0x03
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	40 e8       	ldi	r20, 0x80	; 128
    2ef8:	5f e3       	ldi	r21, 0x3F	; 63
    2efa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2efe:	88 23       	and	r24, r24
    2f00:	44 f4       	brge	.+16     	; 0x2f12 <main+0x338>
		__ticks = 1;
    2f02:	fe 01       	movw	r30, r28
    2f04:	e5 5b       	subi	r30, 0xB5	; 181
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	91 83       	std	Z+1, r25	; 0x01
    2f0e:	80 83       	st	Z, r24
    2f10:	64 c0       	rjmp	.+200    	; 0x2fda <main+0x400>
	else if (__tmp > 65535)
    2f12:	fe 01       	movw	r30, r28
    2f14:	e3 5b       	subi	r30, 0xB3	; 179
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	60 81       	ld	r22, Z
    2f1a:	71 81       	ldd	r23, Z+1	; 0x01
    2f1c:	82 81       	ldd	r24, Z+2	; 0x02
    2f1e:	93 81       	ldd	r25, Z+3	; 0x03
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	3f ef       	ldi	r19, 0xFF	; 255
    2f24:	4f e7       	ldi	r20, 0x7F	; 127
    2f26:	57 e4       	ldi	r21, 0x47	; 71
    2f28:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f2c:	18 16       	cp	r1, r24
    2f2e:	0c f0       	brlt	.+2      	; 0x2f32 <main+0x358>
    2f30:	43 c0       	rjmp	.+134    	; 0x2fb8 <main+0x3de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f32:	fe 01       	movw	r30, r28
    2f34:	ef 5a       	subi	r30, 0xAF	; 175
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	60 81       	ld	r22, Z
    2f3a:	71 81       	ldd	r23, Z+1	; 0x01
    2f3c:	82 81       	ldd	r24, Z+2	; 0x02
    2f3e:	93 81       	ldd	r25, Z+3	; 0x03
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	40 e2       	ldi	r20, 0x20	; 32
    2f46:	51 e4       	ldi	r21, 0x41	; 65
    2f48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	8e 01       	movw	r16, r28
    2f52:	05 5b       	subi	r16, 0xB5	; 181
    2f54:	1f 4f       	sbci	r17, 0xFF	; 255
    2f56:	bc 01       	movw	r22, r24
    2f58:	cd 01       	movw	r24, r26
    2f5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	f8 01       	movw	r30, r16
    2f64:	91 83       	std	Z+1, r25	; 0x01
    2f66:	80 83       	st	Z, r24
    2f68:	1f c0       	rjmp	.+62     	; 0x2fa8 <main+0x3ce>
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	e7 5b       	subi	r30, 0xB7	; 183
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	88 ec       	ldi	r24, 0xC8	; 200
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	91 83       	std	Z+1, r25	; 0x01
    2f76:	80 83       	st	Z, r24
    2f78:	fe 01       	movw	r30, r28
    2f7a:	e7 5b       	subi	r30, 0xB7	; 183
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	80 81       	ld	r24, Z
    2f80:	91 81       	ldd	r25, Z+1	; 0x01
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	f1 f7       	brne	.-4      	; 0x2f82 <main+0x3a8>
    2f86:	fe 01       	movw	r30, r28
    2f88:	e7 5b       	subi	r30, 0xB7	; 183
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	91 83       	std	Z+1, r25	; 0x01
    2f8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f90:	de 01       	movw	r26, r28
    2f92:	a5 5b       	subi	r26, 0xB5	; 181
    2f94:	bf 4f       	sbci	r27, 0xFF	; 255
    2f96:	fe 01       	movw	r30, r28
    2f98:	e5 5b       	subi	r30, 0xB5	; 181
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	80 81       	ld	r24, Z
    2f9e:	91 81       	ldd	r25, Z+1	; 0x01
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	11 96       	adiw	r26, 0x01	; 1
    2fa4:	9c 93       	st	X, r25
    2fa6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e5 5b       	subi	r30, 0xB5	; 181
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	80 81       	ld	r24, Z
    2fb0:	91 81       	ldd	r25, Z+1	; 0x01
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	d1 f6       	brne	.-76     	; 0x2f6a <main+0x390>
    2fb6:	27 c0       	rjmp	.+78     	; 0x3006 <main+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb8:	8e 01       	movw	r16, r28
    2fba:	05 5b       	subi	r16, 0xB5	; 181
    2fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	e3 5b       	subi	r30, 0xB3	; 179
    2fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc4:	60 81       	ld	r22, Z
    2fc6:	71 81       	ldd	r23, Z+1	; 0x01
    2fc8:	82 81       	ldd	r24, Z+2	; 0x02
    2fca:	93 81       	ldd	r25, Z+3	; 0x03
    2fcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	f8 01       	movw	r30, r16
    2fd6:	91 83       	std	Z+1, r25	; 0x01
    2fd8:	80 83       	st	Z, r24
    2fda:	de 01       	movw	r26, r28
    2fdc:	a9 5b       	subi	r26, 0xB9	; 185
    2fde:	bf 4f       	sbci	r27, 0xFF	; 255
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	e5 5b       	subi	r30, 0xB5	; 181
    2fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe6:	80 81       	ld	r24, Z
    2fe8:	91 81       	ldd	r25, Z+1	; 0x01
    2fea:	8d 93       	st	X+, r24
    2fec:	9c 93       	st	X, r25
    2fee:	fe 01       	movw	r30, r28
    2ff0:	e9 5b       	subi	r30, 0xB9	; 185
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	80 81       	ld	r24, Z
    2ff6:	91 81       	ldd	r25, Z+1	; 0x01
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	f1 f7       	brne	.-4      	; 0x2ff8 <main+0x41e>
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	e9 5b       	subi	r30, 0xB9	; 185
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	91 83       	std	Z+1, r25	; 0x01
    3004:	80 83       	st	Z, r24
				 _delay_ms(2);
				LCD_u8GoToXY(LCD_u8_LINE1,0);
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	60 e0       	ldi	r22, 0x00	; 0
    300a:	0e 94 4a 14 	call	0x2894	; 0x2894 <LCD_u8GoToXY>
				LCD_SendString("Wrong Password");
    300e:	80 e7       	ldi	r24, 0x70	; 112
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LCD_SendString>
				LCD_u8GoToXY(LCD_u8_LINE2,0);
    3016:	82 e0       	ldi	r24, 0x02	; 2
    3018:	60 e0       	ldi	r22, 0x00	; 0
    301a:	0e 94 4a 14 	call	0x2894	; 0x2894 <LCD_u8GoToXY>
				LCD_SendString("Try Again");
    301e:	8f e7       	ldi	r24, 0x7F	; 127
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LCD_SendString>
    3026:	fe 01       	movw	r30, r28
    3028:	ed 5b       	subi	r30, 0xBD	; 189
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e4       	ldi	r25, 0x40	; 64
    3030:	ac e1       	ldi	r26, 0x1C	; 28
    3032:	b5 e4       	ldi	r27, 0x45	; 69
    3034:	80 83       	st	Z, r24
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	a2 83       	std	Z+2, r26	; 0x02
    303a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303c:	8e 01       	movw	r16, r28
    303e:	01 5c       	subi	r16, 0xC1	; 193
    3040:	1f 4f       	sbci	r17, 0xFF	; 255
    3042:	fe 01       	movw	r30, r28
    3044:	ed 5b       	subi	r30, 0xBD	; 189
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	60 81       	ld	r22, Z
    304a:	71 81       	ldd	r23, Z+1	; 0x01
    304c:	82 81       	ldd	r24, Z+2	; 0x02
    304e:	93 81       	ldd	r25, Z+3	; 0x03
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a ef       	ldi	r20, 0xFA	; 250
    3056:	54 e4       	ldi	r21, 0x44	; 68
    3058:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	f8 01       	movw	r30, r16
    3062:	80 83       	st	Z, r24
    3064:	91 83       	std	Z+1, r25	; 0x01
    3066:	a2 83       	std	Z+2, r26	; 0x02
    3068:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    306a:	fe 01       	movw	r30, r28
    306c:	ff 96       	adiw	r30, 0x3f	; 63
    306e:	60 81       	ld	r22, Z
    3070:	71 81       	ldd	r23, Z+1	; 0x01
    3072:	82 81       	ldd	r24, Z+2	; 0x02
    3074:	93 81       	ldd	r25, Z+3	; 0x03
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	40 e8       	ldi	r20, 0x80	; 128
    307c:	5f e3       	ldi	r21, 0x3F	; 63
    307e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3082:	88 23       	and	r24, r24
    3084:	2c f4       	brge	.+10     	; 0x3090 <main+0x4b6>
		__ticks = 1;
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	9e af       	std	Y+62, r25	; 0x3e
    308c:	8d af       	std	Y+61, r24	; 0x3d
    308e:	46 c0       	rjmp	.+140    	; 0x311c <main+0x542>
	else if (__tmp > 65535)
    3090:	fe 01       	movw	r30, r28
    3092:	ff 96       	adiw	r30, 0x3f	; 63
    3094:	60 81       	ld	r22, Z
    3096:	71 81       	ldd	r23, Z+1	; 0x01
    3098:	82 81       	ldd	r24, Z+2	; 0x02
    309a:	93 81       	ldd	r25, Z+3	; 0x03
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	3f ef       	ldi	r19, 0xFF	; 255
    30a0:	4f e7       	ldi	r20, 0x7F	; 127
    30a2:	57 e4       	ldi	r21, 0x47	; 71
    30a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30a8:	18 16       	cp	r1, r24
    30aa:	64 f5       	brge	.+88     	; 0x3104 <main+0x52a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ac:	fe 01       	movw	r30, r28
    30ae:	ed 5b       	subi	r30, 0xBD	; 189
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	60 81       	ld	r22, Z
    30b4:	71 81       	ldd	r23, Z+1	; 0x01
    30b6:	82 81       	ldd	r24, Z+2	; 0x02
    30b8:	93 81       	ldd	r25, Z+3	; 0x03
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	40 e2       	ldi	r20, 0x20	; 32
    30c0:	51 e4       	ldi	r21, 0x41	; 65
    30c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	bc 01       	movw	r22, r24
    30cc:	cd 01       	movw	r24, r26
    30ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	9e af       	std	Y+62, r25	; 0x3e
    30d8:	8d af       	std	Y+61, r24	; 0x3d
    30da:	0f c0       	rjmp	.+30     	; 0x30fa <main+0x520>
    30dc:	88 ec       	ldi	r24, 0xC8	; 200
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	9c af       	std	Y+60, r25	; 0x3c
    30e2:	8b af       	std	Y+59, r24	; 0x3b
    30e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    30e6:	9c ad       	ldd	r25, Y+60	; 0x3c
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	f1 f7       	brne	.-4      	; 0x30e8 <main+0x50e>
    30ec:	9c af       	std	Y+60, r25	; 0x3c
    30ee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    30f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    30f4:	01 97       	sbiw	r24, 0x01	; 1
    30f6:	9e af       	std	Y+62, r25	; 0x3e
    30f8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    30fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    30fe:	00 97       	sbiw	r24, 0x00	; 0
    3100:	69 f7       	brne	.-38     	; 0x30dc <main+0x502>
    3102:	16 c0       	rjmp	.+44     	; 0x3130 <main+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3104:	fe 01       	movw	r30, r28
    3106:	ff 96       	adiw	r30, 0x3f	; 63
    3108:	60 81       	ld	r22, Z
    310a:	71 81       	ldd	r23, Z+1	; 0x01
    310c:	82 81       	ldd	r24, Z+2	; 0x02
    310e:	93 81       	ldd	r25, Z+3	; 0x03
    3110:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	9e af       	std	Y+62, r25	; 0x3e
    311a:	8d af       	std	Y+61, r24	; 0x3d
    311c:	8d ad       	ldd	r24, Y+61	; 0x3d
    311e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3120:	9a af       	std	Y+58, r25	; 0x3a
    3122:	89 af       	std	Y+57, r24	; 0x39
    3124:	89 ad       	ldd	r24, Y+57	; 0x39
    3126:	9a ad       	ldd	r25, Y+58	; 0x3a
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <main+0x54e>
    312c:	9a af       	std	Y+58, r25	; 0x3a
    312e:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(2500);
				// CLEAR SCREEEN
				LCD_voidSendCmnd(0x01);
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	0e 94 76 12 	call	0x24ec	; 0x24ec <LCD_voidSendCmnd>
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	a0 e0       	ldi	r26, 0x00	; 0
    313c:	b0 e4       	ldi	r27, 0x40	; 64
    313e:	8d ab       	std	Y+53, r24	; 0x35
    3140:	9e ab       	std	Y+54, r25	; 0x36
    3142:	af ab       	std	Y+55, r26	; 0x37
    3144:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3146:	6d a9       	ldd	r22, Y+53	; 0x35
    3148:	7e a9       	ldd	r23, Y+54	; 0x36
    314a:	8f a9       	ldd	r24, Y+55	; 0x37
    314c:	98 ad       	ldd	r25, Y+56	; 0x38
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	4a ef       	ldi	r20, 0xFA	; 250
    3154:	54 e4       	ldi	r21, 0x44	; 68
    3156:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	89 ab       	std	Y+49, r24	; 0x31
    3160:	9a ab       	std	Y+50, r25	; 0x32
    3162:	ab ab       	std	Y+51, r26	; 0x33
    3164:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3166:	69 a9       	ldd	r22, Y+49	; 0x31
    3168:	7a a9       	ldd	r23, Y+50	; 0x32
    316a:	8b a9       	ldd	r24, Y+51	; 0x33
    316c:	9c a9       	ldd	r25, Y+52	; 0x34
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	40 e8       	ldi	r20, 0x80	; 128
    3174:	5f e3       	ldi	r21, 0x3F	; 63
    3176:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    317a:	88 23       	and	r24, r24
    317c:	2c f4       	brge	.+10     	; 0x3188 <main+0x5ae>
		__ticks = 1;
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	98 ab       	std	Y+48, r25	; 0x30
    3184:	8f a7       	std	Y+47, r24	; 0x2f
    3186:	3f c0       	rjmp	.+126    	; 0x3206 <main+0x62c>
	else if (__tmp > 65535)
    3188:	69 a9       	ldd	r22, Y+49	; 0x31
    318a:	7a a9       	ldd	r23, Y+50	; 0x32
    318c:	8b a9       	ldd	r24, Y+51	; 0x33
    318e:	9c a9       	ldd	r25, Y+52	; 0x34
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	3f ef       	ldi	r19, 0xFF	; 255
    3194:	4f e7       	ldi	r20, 0x7F	; 127
    3196:	57 e4       	ldi	r21, 0x47	; 71
    3198:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    319c:	18 16       	cp	r1, r24
    319e:	4c f5       	brge	.+82     	; 0x31f2 <main+0x618>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a0:	6d a9       	ldd	r22, Y+53	; 0x35
    31a2:	7e a9       	ldd	r23, Y+54	; 0x36
    31a4:	8f a9       	ldd	r24, Y+55	; 0x37
    31a6:	98 ad       	ldd	r25, Y+56	; 0x38
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	40 e2       	ldi	r20, 0x20	; 32
    31ae:	51 e4       	ldi	r21, 0x41	; 65
    31b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	bc 01       	movw	r22, r24
    31ba:	cd 01       	movw	r24, r26
    31bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	98 ab       	std	Y+48, r25	; 0x30
    31c6:	8f a7       	std	Y+47, r24	; 0x2f
    31c8:	0f c0       	rjmp	.+30     	; 0x31e8 <main+0x60e>
    31ca:	88 ec       	ldi	r24, 0xC8	; 200
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	9e a7       	std	Y+46, r25	; 0x2e
    31d0:	8d a7       	std	Y+45, r24	; 0x2d
    31d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    31d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    31d6:	01 97       	sbiw	r24, 0x01	; 1
    31d8:	f1 f7       	brne	.-4      	; 0x31d6 <main+0x5fc>
    31da:	9e a7       	std	Y+46, r25	; 0x2e
    31dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31de:	8f a5       	ldd	r24, Y+47	; 0x2f
    31e0:	98 a9       	ldd	r25, Y+48	; 0x30
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	98 ab       	std	Y+48, r25	; 0x30
    31e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    31ea:	98 a9       	ldd	r25, Y+48	; 0x30
    31ec:	00 97       	sbiw	r24, 0x00	; 0
    31ee:	69 f7       	brne	.-38     	; 0x31ca <main+0x5f0>
    31f0:	14 c0       	rjmp	.+40     	; 0x321a <main+0x640>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f2:	69 a9       	ldd	r22, Y+49	; 0x31
    31f4:	7a a9       	ldd	r23, Y+50	; 0x32
    31f6:	8b a9       	ldd	r24, Y+51	; 0x33
    31f8:	9c a9       	ldd	r25, Y+52	; 0x34
    31fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	98 ab       	std	Y+48, r25	; 0x30
    3204:	8f a7       	std	Y+47, r24	; 0x2f
    3206:	8f a5       	ldd	r24, Y+47	; 0x2f
    3208:	98 a9       	ldd	r25, Y+48	; 0x30
    320a:	9c a7       	std	Y+44, r25	; 0x2c
    320c:	8b a7       	std	Y+43, r24	; 0x2b
    320e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3210:	9c a5       	ldd	r25, Y+44	; 0x2c
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	f1 f7       	brne	.-4      	; 0x3212 <main+0x638>
    3216:	9c a7       	std	Y+44, r25	; 0x2c
    3218:	8b a7       	std	Y+43, r24	; 0x2b
				 _delay_ms(2);
				LCD_u8GoToXY(LCD_u8_LINE1,0);
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	60 e0       	ldi	r22, 0x00	; 0
    321e:	0e 94 4a 14 	call	0x2894	; 0x2894 <LCD_u8GoToXY>
				LCD_SendString("ENTER YOUR PASS");
    3222:	80 e6       	ldi	r24, 0x60	; 96
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LCD_SendString>
				LCD_u8GoToXY(LCD_u8_LINE2,0);
    322a:	82 e0       	ldi	r24, 0x02	; 2
    322c:	60 e0       	ldi	r22, 0x00	; 0
    322e:	0e 94 4a 14 	call	0x2894	; 0x2894 <LCD_u8GoToXY>
    3232:	b2 cd       	rjmp	.-1180   	; 0x2d98 <main+0x1be>

			}
			else // CORRECT
			{
				// CLEAR SCREEEN
				LCD_voidSendCmnd(0x01);
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	0e 94 76 12 	call	0x24ec	; 0x24ec <LCD_voidSendCmnd>
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	a0 e0       	ldi	r26, 0x00	; 0
    3240:	b0 e4       	ldi	r27, 0x40	; 64
    3242:	8f a3       	std	Y+39, r24	; 0x27
    3244:	98 a7       	std	Y+40, r25	; 0x28
    3246:	a9 a7       	std	Y+41, r26	; 0x29
    3248:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    324a:	6f a1       	ldd	r22, Y+39	; 0x27
    324c:	78 a5       	ldd	r23, Y+40	; 0x28
    324e:	89 a5       	ldd	r24, Y+41	; 0x29
    3250:	9a a5       	ldd	r25, Y+42	; 0x2a
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	4a ef       	ldi	r20, 0xFA	; 250
    3258:	54 e4       	ldi	r21, 0x44	; 68
    325a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	8b a3       	std	Y+35, r24	; 0x23
    3264:	9c a3       	std	Y+36, r25	; 0x24
    3266:	ad a3       	std	Y+37, r26	; 0x25
    3268:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    326a:	6b a1       	ldd	r22, Y+35	; 0x23
    326c:	7c a1       	ldd	r23, Y+36	; 0x24
    326e:	8d a1       	ldd	r24, Y+37	; 0x25
    3270:	9e a1       	ldd	r25, Y+38	; 0x26
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	40 e8       	ldi	r20, 0x80	; 128
    3278:	5f e3       	ldi	r21, 0x3F	; 63
    327a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    327e:	88 23       	and	r24, r24
    3280:	2c f4       	brge	.+10     	; 0x328c <main+0x6b2>
		__ticks = 1;
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	9a a3       	std	Y+34, r25	; 0x22
    3288:	89 a3       	std	Y+33, r24	; 0x21
    328a:	3f c0       	rjmp	.+126    	; 0x330a <main+0x730>
	else if (__tmp > 65535)
    328c:	6b a1       	ldd	r22, Y+35	; 0x23
    328e:	7c a1       	ldd	r23, Y+36	; 0x24
    3290:	8d a1       	ldd	r24, Y+37	; 0x25
    3292:	9e a1       	ldd	r25, Y+38	; 0x26
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	3f ef       	ldi	r19, 0xFF	; 255
    3298:	4f e7       	ldi	r20, 0x7F	; 127
    329a:	57 e4       	ldi	r21, 0x47	; 71
    329c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    32a0:	18 16       	cp	r1, r24
    32a2:	4c f5       	brge	.+82     	; 0x32f6 <main+0x71c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a4:	6f a1       	ldd	r22, Y+39	; 0x27
    32a6:	78 a5       	ldd	r23, Y+40	; 0x28
    32a8:	89 a5       	ldd	r24, Y+41	; 0x29
    32aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	40 e2       	ldi	r20, 0x20	; 32
    32b2:	51 e4       	ldi	r21, 0x41	; 65
    32b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	bc 01       	movw	r22, r24
    32be:	cd 01       	movw	r24, r26
    32c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	9a a3       	std	Y+34, r25	; 0x22
    32ca:	89 a3       	std	Y+33, r24	; 0x21
    32cc:	0f c0       	rjmp	.+30     	; 0x32ec <main+0x712>
    32ce:	88 ec       	ldi	r24, 0xC8	; 200
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	98 a3       	std	Y+32, r25	; 0x20
    32d4:	8f 8f       	std	Y+31, r24	; 0x1f
    32d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32d8:	98 a1       	ldd	r25, Y+32	; 0x20
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	f1 f7       	brne	.-4      	; 0x32da <main+0x700>
    32de:	98 a3       	std	Y+32, r25	; 0x20
    32e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e2:	89 a1       	ldd	r24, Y+33	; 0x21
    32e4:	9a a1       	ldd	r25, Y+34	; 0x22
    32e6:	01 97       	sbiw	r24, 0x01	; 1
    32e8:	9a a3       	std	Y+34, r25	; 0x22
    32ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ec:	89 a1       	ldd	r24, Y+33	; 0x21
    32ee:	9a a1       	ldd	r25, Y+34	; 0x22
    32f0:	00 97       	sbiw	r24, 0x00	; 0
    32f2:	69 f7       	brne	.-38     	; 0x32ce <main+0x6f4>
    32f4:	14 c0       	rjmp	.+40     	; 0x331e <main+0x744>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f6:	6b a1       	ldd	r22, Y+35	; 0x23
    32f8:	7c a1       	ldd	r23, Y+36	; 0x24
    32fa:	8d a1       	ldd	r24, Y+37	; 0x25
    32fc:	9e a1       	ldd	r25, Y+38	; 0x26
    32fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	9a a3       	std	Y+34, r25	; 0x22
    3308:	89 a3       	std	Y+33, r24	; 0x21
    330a:	89 a1       	ldd	r24, Y+33	; 0x21
    330c:	9a a1       	ldd	r25, Y+34	; 0x22
    330e:	9e 8f       	std	Y+30, r25	; 0x1e
    3310:	8d 8f       	std	Y+29, r24	; 0x1d
    3312:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3314:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	f1 f7       	brne	.-4      	; 0x3316 <main+0x73c>
    331a:	9e 8f       	std	Y+30, r25	; 0x1e
    331c:	8d 8f       	std	Y+29, r24	; 0x1d
				 _delay_ms(2);
				LCD_u8GoToXY(LCD_u8_LINE1,0);
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	60 e0       	ldi	r22, 0x00	; 0
    3322:	0e 94 4a 14 	call	0x2894	; 0x2894 <LCD_u8GoToXY>
				LCD_SendString("CORRECT PASSWORD");
    3326:	89 e8       	ldi	r24, 0x89	; 137
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LCD_SendString>
    332e:	80 e0       	ldi	r24, 0x00	; 0
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	aa ef       	ldi	r26, 0xFA	; 250
    3334:	b3 e4       	ldi	r27, 0x43	; 67
    3336:	89 8f       	std	Y+25, r24	; 0x19
    3338:	9a 8f       	std	Y+26, r25	; 0x1a
    333a:	ab 8f       	std	Y+27, r26	; 0x1b
    333c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    333e:	69 8d       	ldd	r22, Y+25	; 0x19
    3340:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3342:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3344:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	4a ef       	ldi	r20, 0xFA	; 250
    334c:	54 e4       	ldi	r21, 0x44	; 68
    334e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	8d 8b       	std	Y+21, r24	; 0x15
    3358:	9e 8b       	std	Y+22, r25	; 0x16
    335a:	af 8b       	std	Y+23, r26	; 0x17
    335c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    335e:	6d 89       	ldd	r22, Y+21	; 0x15
    3360:	7e 89       	ldd	r23, Y+22	; 0x16
    3362:	8f 89       	ldd	r24, Y+23	; 0x17
    3364:	98 8d       	ldd	r25, Y+24	; 0x18
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	40 e8       	ldi	r20, 0x80	; 128
    336c:	5f e3       	ldi	r21, 0x3F	; 63
    336e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3372:	88 23       	and	r24, r24
    3374:	2c f4       	brge	.+10     	; 0x3380 <main+0x7a6>
		__ticks = 1;
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	9c 8b       	std	Y+20, r25	; 0x14
    337c:	8b 8b       	std	Y+19, r24	; 0x13
    337e:	3f c0       	rjmp	.+126    	; 0x33fe <main+0x824>
	else if (__tmp > 65535)
    3380:	6d 89       	ldd	r22, Y+21	; 0x15
    3382:	7e 89       	ldd	r23, Y+22	; 0x16
    3384:	8f 89       	ldd	r24, Y+23	; 0x17
    3386:	98 8d       	ldd	r25, Y+24	; 0x18
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	3f ef       	ldi	r19, 0xFF	; 255
    338c:	4f e7       	ldi	r20, 0x7F	; 127
    338e:	57 e4       	ldi	r21, 0x47	; 71
    3390:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3394:	18 16       	cp	r1, r24
    3396:	4c f5       	brge	.+82     	; 0x33ea <main+0x810>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3398:	69 8d       	ldd	r22, Y+25	; 0x19
    339a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    339c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    339e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	40 e2       	ldi	r20, 0x20	; 32
    33a6:	51 e4       	ldi	r21, 0x41	; 65
    33a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	bc 01       	movw	r22, r24
    33b2:	cd 01       	movw	r24, r26
    33b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	9c 8b       	std	Y+20, r25	; 0x14
    33be:	8b 8b       	std	Y+19, r24	; 0x13
    33c0:	0f c0       	rjmp	.+30     	; 0x33e0 <main+0x806>
    33c2:	88 ec       	ldi	r24, 0xC8	; 200
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	9a 8b       	std	Y+18, r25	; 0x12
    33c8:	89 8b       	std	Y+17, r24	; 0x11
    33ca:	89 89       	ldd	r24, Y+17	; 0x11
    33cc:	9a 89       	ldd	r25, Y+18	; 0x12
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	f1 f7       	brne	.-4      	; 0x33ce <main+0x7f4>
    33d2:	9a 8b       	std	Y+18, r25	; 0x12
    33d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d6:	8b 89       	ldd	r24, Y+19	; 0x13
    33d8:	9c 89       	ldd	r25, Y+20	; 0x14
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	9c 8b       	std	Y+20, r25	; 0x14
    33de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e0:	8b 89       	ldd	r24, Y+19	; 0x13
    33e2:	9c 89       	ldd	r25, Y+20	; 0x14
    33e4:	00 97       	sbiw	r24, 0x00	; 0
    33e6:	69 f7       	brne	.-38     	; 0x33c2 <main+0x7e8>
    33e8:	14 c0       	rjmp	.+40     	; 0x3412 <main+0x838>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ea:	6d 89       	ldd	r22, Y+21	; 0x15
    33ec:	7e 89       	ldd	r23, Y+22	; 0x16
    33ee:	8f 89       	ldd	r24, Y+23	; 0x17
    33f0:	98 8d       	ldd	r25, Y+24	; 0x18
    33f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	9c 8b       	std	Y+20, r25	; 0x14
    33fc:	8b 8b       	std	Y+19, r24	; 0x13
    33fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3400:	9c 89       	ldd	r25, Y+20	; 0x14
    3402:	98 8b       	std	Y+16, r25	; 0x10
    3404:	8f 87       	std	Y+15, r24	; 0x0f
    3406:	8f 85       	ldd	r24, Y+15	; 0x0f
    3408:	98 89       	ldd	r25, Y+16	; 0x10
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	f1 f7       	brne	.-4      	; 0x340a <main+0x830>
    340e:	98 8b       	std	Y+16, r25	; 0x10
    3410:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				while(505){
				// CLEAR SCREEEN
				LCD_voidSendCmnd(0x01);
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	0e 94 76 12 	call	0x24ec	; 0x24ec <LCD_voidSendCmnd>
    3418:	80 e0       	ldi	r24, 0x00	; 0
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	a0 e0       	ldi	r26, 0x00	; 0
    341e:	b0 e4       	ldi	r27, 0x40	; 64
    3420:	8b 87       	std	Y+11, r24	; 0x0b
    3422:	9c 87       	std	Y+12, r25	; 0x0c
    3424:	ad 87       	std	Y+13, r26	; 0x0d
    3426:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3428:	6b 85       	ldd	r22, Y+11	; 0x0b
    342a:	7c 85       	ldd	r23, Y+12	; 0x0c
    342c:	8d 85       	ldd	r24, Y+13	; 0x0d
    342e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	4a ef       	ldi	r20, 0xFA	; 250
    3436:	54 e4       	ldi	r21, 0x44	; 68
    3438:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	8f 83       	std	Y+7, r24	; 0x07
    3442:	98 87       	std	Y+8, r25	; 0x08
    3444:	a9 87       	std	Y+9, r26	; 0x09
    3446:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3448:	6f 81       	ldd	r22, Y+7	; 0x07
    344a:	78 85       	ldd	r23, Y+8	; 0x08
    344c:	89 85       	ldd	r24, Y+9	; 0x09
    344e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	40 e8       	ldi	r20, 0x80	; 128
    3456:	5f e3       	ldi	r21, 0x3F	; 63
    3458:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    345c:	88 23       	and	r24, r24
    345e:	2c f4       	brge	.+10     	; 0x346a <main+0x890>
		__ticks = 1;
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	9e 83       	std	Y+6, r25	; 0x06
    3466:	8d 83       	std	Y+5, r24	; 0x05
    3468:	3f c0       	rjmp	.+126    	; 0x34e8 <main+0x90e>
	else if (__tmp > 65535)
    346a:	6f 81       	ldd	r22, Y+7	; 0x07
    346c:	78 85       	ldd	r23, Y+8	; 0x08
    346e:	89 85       	ldd	r24, Y+9	; 0x09
    3470:	9a 85       	ldd	r25, Y+10	; 0x0a
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	3f ef       	ldi	r19, 0xFF	; 255
    3476:	4f e7       	ldi	r20, 0x7F	; 127
    3478:	57 e4       	ldi	r21, 0x47	; 71
    347a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    347e:	18 16       	cp	r1, r24
    3480:	4c f5       	brge	.+82     	; 0x34d4 <main+0x8fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3482:	6b 85       	ldd	r22, Y+11	; 0x0b
    3484:	7c 85       	ldd	r23, Y+12	; 0x0c
    3486:	8d 85       	ldd	r24, Y+13	; 0x0d
    3488:	9e 85       	ldd	r25, Y+14	; 0x0e
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	40 e2       	ldi	r20, 0x20	; 32
    3490:	51 e4       	ldi	r21, 0x41	; 65
    3492:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	bc 01       	movw	r22, r24
    349c:	cd 01       	movw	r24, r26
    349e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34a2:	dc 01       	movw	r26, r24
    34a4:	cb 01       	movw	r24, r22
    34a6:	9e 83       	std	Y+6, r25	; 0x06
    34a8:	8d 83       	std	Y+5, r24	; 0x05
    34aa:	0f c0       	rjmp	.+30     	; 0x34ca <main+0x8f0>
    34ac:	88 ec       	ldi	r24, 0xC8	; 200
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	9c 83       	std	Y+4, r25	; 0x04
    34b2:	8b 83       	std	Y+3, r24	; 0x03
    34b4:	8b 81       	ldd	r24, Y+3	; 0x03
    34b6:	9c 81       	ldd	r25, Y+4	; 0x04
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	f1 f7       	brne	.-4      	; 0x34b8 <main+0x8de>
    34bc:	9c 83       	std	Y+4, r25	; 0x04
    34be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34c0:	8d 81       	ldd	r24, Y+5	; 0x05
    34c2:	9e 81       	ldd	r25, Y+6	; 0x06
    34c4:	01 97       	sbiw	r24, 0x01	; 1
    34c6:	9e 83       	std	Y+6, r25	; 0x06
    34c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ca:	8d 81       	ldd	r24, Y+5	; 0x05
    34cc:	9e 81       	ldd	r25, Y+6	; 0x06
    34ce:	00 97       	sbiw	r24, 0x00	; 0
    34d0:	69 f7       	brne	.-38     	; 0x34ac <main+0x8d2>
    34d2:	14 c0       	rjmp	.+40     	; 0x34fc <main+0x922>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d4:	6f 81       	ldd	r22, Y+7	; 0x07
    34d6:	78 85       	ldd	r23, Y+8	; 0x08
    34d8:	89 85       	ldd	r24, Y+9	; 0x09
    34da:	9a 85       	ldd	r25, Y+10	; 0x0a
    34dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	9e 83       	std	Y+6, r25	; 0x06
    34e6:	8d 83       	std	Y+5, r24	; 0x05
    34e8:	8d 81       	ldd	r24, Y+5	; 0x05
    34ea:	9e 81       	ldd	r25, Y+6	; 0x06
    34ec:	9a 83       	std	Y+2, r25	; 0x02
    34ee:	89 83       	std	Y+1, r24	; 0x01
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	9a 81       	ldd	r25, Y+2	; 0x02
    34f4:	01 97       	sbiw	r24, 0x01	; 1
    34f6:	f1 f7       	brne	.-4      	; 0x34f4 <main+0x91a>
    34f8:	9a 83       	std	Y+2, r25	; 0x02
    34fa:	89 83       	std	Y+1, r24	; 0x01
				 _delay_ms(2);
				LCD_u8GoToXY(LCD_u8_LINE1,0);
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	60 e0       	ldi	r22, 0x00	; 0
    3500:	0e 94 4a 14 	call	0x2894	; 0x2894 <LCD_u8GoToXY>
				LCD_SendString("WELCOME TO M");
    3504:	8a e9       	ldi	r24, 0x9A	; 154
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LCD_SendString>
				LCD_u8GoToXY(LCD_u8_LINE2,5);
    350c:	82 e0       	ldi	r24, 0x02	; 2
    350e:	65 e0       	ldi	r22, 0x05	; 5
    3510:	0e 94 4a 14 	call	0x2894	; 0x2894 <LCD_u8GoToXY>
				LCD_SendString("DASHBOARD");
    3514:	87 ea       	ldi	r24, 0xA7	; 167
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LCD_SendString>
    351c:	7a cf       	rjmp	.-268    	; 0x3412 <main+0x838>

0000351e <__prologue_saves__>:
    351e:	2f 92       	push	r2
    3520:	3f 92       	push	r3
    3522:	4f 92       	push	r4
    3524:	5f 92       	push	r5
    3526:	6f 92       	push	r6
    3528:	7f 92       	push	r7
    352a:	8f 92       	push	r8
    352c:	9f 92       	push	r9
    352e:	af 92       	push	r10
    3530:	bf 92       	push	r11
    3532:	cf 92       	push	r12
    3534:	df 92       	push	r13
    3536:	ef 92       	push	r14
    3538:	ff 92       	push	r15
    353a:	0f 93       	push	r16
    353c:	1f 93       	push	r17
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	cd b7       	in	r28, 0x3d	; 61
    3544:	de b7       	in	r29, 0x3e	; 62
    3546:	ca 1b       	sub	r28, r26
    3548:	db 0b       	sbc	r29, r27
    354a:	0f b6       	in	r0, 0x3f	; 63
    354c:	f8 94       	cli
    354e:	de bf       	out	0x3e, r29	; 62
    3550:	0f be       	out	0x3f, r0	; 63
    3552:	cd bf       	out	0x3d, r28	; 61
    3554:	09 94       	ijmp

00003556 <__epilogue_restores__>:
    3556:	2a 88       	ldd	r2, Y+18	; 0x12
    3558:	39 88       	ldd	r3, Y+17	; 0x11
    355a:	48 88       	ldd	r4, Y+16	; 0x10
    355c:	5f 84       	ldd	r5, Y+15	; 0x0f
    355e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3560:	7d 84       	ldd	r7, Y+13	; 0x0d
    3562:	8c 84       	ldd	r8, Y+12	; 0x0c
    3564:	9b 84       	ldd	r9, Y+11	; 0x0b
    3566:	aa 84       	ldd	r10, Y+10	; 0x0a
    3568:	b9 84       	ldd	r11, Y+9	; 0x09
    356a:	c8 84       	ldd	r12, Y+8	; 0x08
    356c:	df 80       	ldd	r13, Y+7	; 0x07
    356e:	ee 80       	ldd	r14, Y+6	; 0x06
    3570:	fd 80       	ldd	r15, Y+5	; 0x05
    3572:	0c 81       	ldd	r16, Y+4	; 0x04
    3574:	1b 81       	ldd	r17, Y+3	; 0x03
    3576:	aa 81       	ldd	r26, Y+2	; 0x02
    3578:	b9 81       	ldd	r27, Y+1	; 0x01
    357a:	ce 0f       	add	r28, r30
    357c:	d1 1d       	adc	r29, r1
    357e:	0f b6       	in	r0, 0x3f	; 63
    3580:	f8 94       	cli
    3582:	de bf       	out	0x3e, r29	; 62
    3584:	0f be       	out	0x3f, r0	; 63
    3586:	cd bf       	out	0x3d, r28	; 61
    3588:	ed 01       	movw	r28, r26
    358a:	08 95       	ret

0000358c <_exit>:
    358c:	f8 94       	cli

0000358e <__stop_program>:
    358e:	ff cf       	rjmp	.-2      	; 0x358e <__stop_program>
