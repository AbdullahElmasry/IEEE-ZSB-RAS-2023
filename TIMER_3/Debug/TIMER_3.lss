
TIMER_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00003a50  00003ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800080  00800080  00003b04  2**0
                  ALLOC
  3 .stab         00003a2c  00000000  00000000  00003b04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001439  00000000  00000000  00007530  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008969  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ac9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000bd9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cd20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d162  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d9f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_1>
       8:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__vector_2>
       c:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__vector_10>
      2c:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 1c 	call	0x387c	; 0x387c <main>
      8a:	0c 94 26 1d 	jmp	0x3a4c	; 0x3a4c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 17 1d 	jmp	0x3a2e	; 0x3a2e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 17 1d 	jmp	0x3a2e	; 0x3a2e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 13 1d 	jmp	0x3a26	; 0x3a26 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 17 1d 	jmp	0x3a2e	; 0x3a2e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 17 1d 	jmp	0x3a2e	; 0x3a2e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 17 1d 	jmp	0x3a2e	; 0x3a2e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 1b 1d 	jmp	0x3a36	; 0x3a36 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TIMERS_voidTimer1Init>:
/* Global Pointer to Function of Timer0 CTC */
static void(*TIMERS_pfTimer0CTC) (void) = NULL;


void TIMERS_voidTimer1Init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/* Select Timer1 Mode => 14 */
	SET_BIT(TIMERS_u8_TCCR1A_REG,1);
     ca6:	af e4       	ldi	r26, 0x4F	; 79
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ef e4       	ldi	r30, 0x4F	; 79
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	82 60       	ori	r24, 0x02	; 2
     cb2:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
     cb4:	af e4       	ldi	r26, 0x4F	; 79
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	ef e4       	ldi	r30, 0x4F	; 79
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8e 7f       	andi	r24, 0xFE	; 254
     cc0:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
     cc2:	ae e4       	ldi	r26, 0x4E	; 78
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ee e4       	ldi	r30, 0x4E	; 78
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	80 61       	ori	r24, 0x10	; 16
     cce:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
     cd0:	ae e4       	ldi	r26, 0x4E	; 78
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ee e4       	ldi	r30, 0x4E	; 78
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	88 60       	ori	r24, 0x08	; 8
     cdc:	8c 93       	st	X, r24

	/* Select HW Action On OC1A Pin => Non Inverting */
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
     cde:	af e4       	ldi	r26, 0x4F	; 79
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	ef e4       	ldi	r30, 0x4F	; 79
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 68       	ori	r24, 0x80	; 128
     cea:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,6);
     cec:	af e4       	ldi	r26, 0x4F	; 79
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	ef e4       	ldi	r30, 0x4F	; 79
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8f 7b       	andi	r24, 0xBF	; 191
     cf8:	8c 93       	st	X, r24

	/* Set Top Value in ICR1 */
	TIMERS_u16_ICR1_REG = 19999;
     cfa:	e6 e4       	ldi	r30, 0x46	; 70
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	8f e1       	ldi	r24, 0x1F	; 31
     d00:	9e e4       	ldi	r25, 0x4E	; 78
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	80 83       	st	Z, r24

	/* Set Angle of Servo Motor */
	TIMERS_u16_OCR1A_REG = 195;
     d06:	ea e4       	ldi	r30, 0x4A	; 74
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	83 ec       	ldi	r24, 0xC3	; 195
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	91 83       	std	Z+1, r25	; 0x01
     d10:	80 83       	st	Z, r24

		/* Set Prescaler Value CLK/8 */
		CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
     d12:	ae e4       	ldi	r26, 0x4E	; 78
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	ee e4       	ldi	r30, 0x4E	; 78
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8b 7f       	andi	r24, 0xFB	; 251
     d1e:	8c 93       	st	X, r24
		SET_BIT(TIMERS_u8_TCCR1B_REG,1);
     d20:	ae e4       	ldi	r26, 0x4E	; 78
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	ee e4       	ldi	r30, 0x4E	; 78
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	82 60       	ori	r24, 0x02	; 2
     d2c:	8c 93       	st	X, r24
		CLR_BIT(TIMERS_u8_TCCR1B_REG,0);
     d2e:	ae e4       	ldi	r26, 0x4E	; 78
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ee e4       	ldi	r30, 0x4E	; 78
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8e 7f       	andi	r24, 0xFE	; 254
     d3a:	8c 93       	st	X, r24
}
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <TIMERS_voidTimer1SetCompareMatchValueA>:

void TIMERS_voidTimer1SetCompareMatchValueA(u16 Copy_u16OCRValue)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	00 d0       	rcall	.+0      	; 0xd48 <TIMERS_voidTimer1SetCompareMatchValueA+0x6>
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	9a 83       	std	Y+2, r25	; 0x02
     d4e:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u16OCRValue;
     d50:	ea e4       	ldi	r30, 0x4A	; 74
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	9a 81       	ldd	r25, Y+2	; 0x02
     d58:	91 83       	std	Z+1, r25	; 0x01
     d5a:	80 83       	st	Z, r24
}
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <TIMERS_voidTimer0Init>:



void TIMERS_voidTimer0Init(void)
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
//	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
//	SET_BIT(TIMERS_u8_TCCR0_REG,1);
//	CLR_BIT(TIMERS_u8_TCCR0_REG,0);

	/* Select Mode => Phase Correct PWM Mode */
	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
     d6e:	a3 e5       	ldi	r26, 0x53	; 83
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e3 e5       	ldi	r30, 0x53	; 83
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	8f 7b       	andi	r24, 0xBF	; 191
     d7a:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,3);
     d7c:	a3 e5       	ldi	r26, 0x53	; 83
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e3 e5       	ldi	r30, 0x53	; 83
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	88 60       	ori	r24, 0x08	; 8
     d88:	8c 93       	st	X, r24

	/* Select HW Action On OC0Pin => Non Inverting */
	SET_BIT(TIMERS_u8_TCCR0_REG,5);
     d8a:	a3 e5       	ldi	r26, 0x53	; 83
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e3 e5       	ldi	r30, 0x53	; 83
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	80 62       	ori	r24, 0x20	; 32
     d96:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,4);
     d98:	a3 e5       	ldi	r26, 0x53	; 83
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e3 e5       	ldi	r30, 0x53	; 83
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8f 7e       	andi	r24, 0xEF	; 239
     da4:	8c 93       	st	X, r24

	/* Set Prescaler Value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
     da6:	a3 e5       	ldi	r26, 0x53	; 83
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e3 e5       	ldi	r30, 0x53	; 83
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8b 7f       	andi	r24, 0xFB	; 251
     db2:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
     db4:	a3 e5       	ldi	r26, 0x53	; 83
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e3 e5       	ldi	r30, 0x53	; 83
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	82 60       	ori	r24, 0x02	; 2
     dc0:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,0);
     dc2:	a3 e5       	ldi	r26, 0x53	; 83
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e3 e5       	ldi	r30, 0x53	; 83
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	8e 7f       	andi	r24, 0xFE	; 254
     dce:	8c 93       	st	X, r24

}
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <TIMERS_voidTimer0SetCompareMatchValue>:




void TIMERS_voidTimer0SetCompareMatchValue(u8 Copy_u8OCR0Value)
{
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	0f 92       	push	r0
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
     de2:	ec e5       	ldi	r30, 0x5C	; 92
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	80 83       	st	Z, r24
}
     dea:	0f 90       	pop	r0
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <TIMERS_u8Timer0SetCallBack>:


u8 TIMERS_u8Timer0SetCallBack(void(*Copy_pf)(void))
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <TIMERS_u8Timer0SetCallBack+0x6>
     df8:	0f 92       	push	r0
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	9b 83       	std	Y+3, r25	; 0x03
     e00:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	9b 81       	ldd	r25, Y+3	; 0x03
     e0a:	00 97       	sbiw	r24, 0x00	; 0
     e0c:	39 f0       	breq	.+14     	; 0xe1c <TIMERS_u8Timer0SetCallBack+0x2a>
	{
		TIMERS_pfTimer0OVF = Copy_pf;
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	9b 81       	ldd	r25, Y+3	; 0x03
     e12:	90 93 81 00 	sts	0x0081, r25
     e16:	80 93 80 00 	sts	0x0080, r24
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <TIMERS_u8Timer0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e1c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <TIMERS_u8Timer0CTCSetCallBack>:


u8 TIMERS_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	00 d0       	rcall	.+0      	; 0xe32 <TIMERS_u8Timer0CTCSetCallBack+0x6>
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9b 83       	std	Y+3, r25	; 0x03
     e3a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	9b 81       	ldd	r25, Y+3	; 0x03
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	39 f0       	breq	.+14     	; 0xe56 <TIMERS_u8Timer0CTCSetCallBack+0x2a>
	{
		TIMERS_pfTimer0CTC = Copy_pf;
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	9b 81       	ldd	r25, Y+3	; 0x03
     e4c:	90 93 83 00 	sts	0x0083, r25
     e50:	80 93 82 00 	sts	0x0082, r24
     e54:	01 c0       	rjmp	.+2      	; 0xe58 <TIMERS_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e56:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     e58:	89 81       	ldd	r24, Y+1	; 0x01
}
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <__vector_11>:


/* Prototype for ISR of TIMER0 OVF */
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
     e66:	1f 92       	push	r1
     e68:	0f 92       	push	r0
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	0f 92       	push	r0
     e6e:	11 24       	eor	r1, r1
     e70:	2f 93       	push	r18
     e72:	3f 93       	push	r19
     e74:	4f 93       	push	r20
     e76:	5f 93       	push	r21
     e78:	6f 93       	push	r22
     e7a:	7f 93       	push	r23
     e7c:	8f 93       	push	r24
     e7e:	9f 93       	push	r25
     e80:	af 93       	push	r26
     e82:	bf 93       	push	r27
     e84:	ef 93       	push	r30
     e86:	ff 93       	push	r31
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
     e90:	80 91 84 00 	lds	r24, 0x0084
     e94:	90 91 85 00 	lds	r25, 0x0085
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	90 93 85 00 	sts	0x0085, r25
     e9e:	80 93 84 00 	sts	0x0084, r24
	if(Local_u16CounterOVF == 3907)
     ea2:	80 91 84 00 	lds	r24, 0x0084
     ea6:	90 91 85 00 	lds	r25, 0x0085
     eaa:	2f e0       	ldi	r18, 0x0F	; 15
     eac:	83 34       	cpi	r24, 0x43	; 67
     eae:	92 07       	cpc	r25, r18
     eb0:	99 f4       	brne	.+38     	; 0xed8 <__vector_11+0x72>
	{
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
     eb2:	e2 e5       	ldi	r30, 0x52	; 82
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 ec       	ldi	r24, 0xC0	; 192
     eb8:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
     eba:	10 92 85 00 	sts	0x0085, r1
     ebe:	10 92 84 00 	sts	0x0084, r1
		/* Call App Function */
		if(TIMERS_pfTimer0OVF != NULL)
     ec2:	80 91 80 00 	lds	r24, 0x0080
     ec6:	90 91 81 00 	lds	r25, 0x0081
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	29 f0       	breq	.+10     	; 0xed8 <__vector_11+0x72>
		{
			TIMERS_pfTimer0OVF();
     ece:	e0 91 80 00 	lds	r30, 0x0080
     ed2:	f0 91 81 00 	lds	r31, 0x0081
     ed6:	09 95       	icall
		}
	}
}
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	ff 91       	pop	r31
     ede:	ef 91       	pop	r30
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	7f 91       	pop	r23
     eea:	6f 91       	pop	r22
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti

00000efe <__vector_10>:


/* Prototype for ISR of TIMER0 CTC */
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
     efe:	1f 92       	push	r1
     f00:	0f 92       	push	r0
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	0f 92       	push	r0
     f06:	11 24       	eor	r1, r1
     f08:	2f 93       	push	r18
     f0a:	3f 93       	push	r19
     f0c:	4f 93       	push	r20
     f0e:	5f 93       	push	r21
     f10:	6f 93       	push	r22
     f12:	7f 93       	push	r23
     f14:	8f 93       	push	r24
     f16:	9f 93       	push	r25
     f18:	af 93       	push	r26
     f1a:	bf 93       	push	r27
     f1c:	ef 93       	push	r30
     f1e:	ff 93       	push	r31
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
     f28:	80 91 86 00 	lds	r24, 0x0086
     f2c:	90 91 87 00 	lds	r25, 0x0087
     f30:	01 96       	adiw	r24, 0x01	; 1
     f32:	90 93 87 00 	sts	0x0087, r25
     f36:	80 93 86 00 	sts	0x0086, r24
	if(Local_u16CounterCTC == 10000)
     f3a:	80 91 86 00 	lds	r24, 0x0086
     f3e:	90 91 87 00 	lds	r25, 0x0087
     f42:	27 e2       	ldi	r18, 0x27	; 39
     f44:	80 31       	cpi	r24, 0x10	; 16
     f46:	92 07       	cpc	r25, r18
     f48:	79 f4       	brne	.+30     	; 0xf68 <__vector_10+0x6a>
	{
		/* Clear Counter */
		Local_u16CounterCTC = 0;
     f4a:	10 92 87 00 	sts	0x0087, r1
     f4e:	10 92 86 00 	sts	0x0086, r1
		/* Call Back Function */
		if(TIMERS_pfTimer0CTC != NULL)
     f52:	80 91 82 00 	lds	r24, 0x0082
     f56:	90 91 83 00 	lds	r25, 0x0083
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	29 f0       	breq	.+10     	; 0xf68 <__vector_10+0x6a>
		{
			TIMERS_pfTimer0CTC();
     f5e:	e0 91 82 00 	lds	r30, 0x0082
     f62:	f0 91 83 00 	lds	r31, 0x0083
     f66:	09 95       	icall
		}
	}
}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	ff 91       	pop	r31
     f6e:	ef 91       	pop	r30
     f70:	bf 91       	pop	r27
     f72:	af 91       	pop	r26
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	7f 91       	pop	r23
     f7a:	6f 91       	pop	r22
     f7c:	5f 91       	pop	r21
     f7e:	4f 91       	pop	r20
     f80:	3f 91       	pop	r19
     f82:	2f 91       	pop	r18
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <WDT_voidEnable>:
#include "WDT_interface.h"

#define WDTCR         *((volatile u8*)0x41)

void WDT_voidEnable(void)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
	/* Enable WDT = 2.1 Sec */
	WDTCR = 0b00001111;
     f96:	e1 e4       	ldi	r30, 0x41	; 65
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	8f e0       	ldi	r24, 0x0F	; 15
     f9c:	80 83       	st	Z, r24
}
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <WDT_voidDisable>:

void WDT_voidDisable(void)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= ((1<<4)|(1<<3));
     fac:	a1 e4       	ldi	r26, 0x41	; 65
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e1 e4       	ldi	r30, 0x41	; 65
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	88 61       	ori	r24, 0x18	; 24
     fb8:	8c 93       	st	X, r24

	WDTCR = 0x00;
     fba:	e1 e4       	ldi	r30, 0x41	; 65
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	10 82       	st	Z, r1
}
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <GI_voidGlobalEnable>:

#include "GI_interface.h"
#include "../DIO/DIO_interface.h"

/* Enable Global Interrupt Function */
void GI_voidGlobalEnable(void){
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
     fce:	af e5       	ldi	r26, 0x5F	; 95
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	ef e5       	ldi	r30, 0x5F	; 95
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 68       	ori	r24, 0x80	; 128
     fda:	8c 93       	st	X, r24
}
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <GI_voidGlobalDisable>:

/* Disable Global Interrupt Function */
void GI_voidGlobalDisable(void){
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
     fea:	af e5       	ldi	r26, 0x5F	; 95
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	ef e5       	ldi	r30, 0x5F	; 95
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	8f 77       	andi	r24, 0x7F	; 127
     ff6:	8c 93       	st	X, r24
}
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <EXTI_u8Enable>:

/***************** NO ADDED MACORS TO REGISTERES YET *****************/

/* Enable EXTI Function */
u8    EXTI_u8Enable(u8 Copy_u8EXTIIndex,u8 Copy_u8EdgeIndex)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	2b 97       	sbiw	r28, 0x0b	; 11
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	8a 83       	std	Y+2, r24	; 0x02
    1014:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8EXTIIndex)
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	3b 87       	std	Y+11, r19	; 0x0b
    1022:	2a 87       	std	Y+10, r18	; 0x0a
    1024:	8a 85       	ldd	r24, Y+10	; 0x0a
    1026:	9b 85       	ldd	r25, Y+11	; 0x0b
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	91 05       	cpc	r25, r1
    102c:	09 f4       	brne	.+2      	; 0x1030 <EXTI_u8Enable+0x32>
    102e:	85 c0       	rjmp	.+266    	; 0x113a <EXTI_u8Enable+0x13c>
    1030:	2a 85       	ldd	r18, Y+10	; 0x0a
    1032:	3b 85       	ldd	r19, Y+11	; 0x0b
    1034:	22 30       	cpi	r18, 0x02	; 2
    1036:	31 05       	cpc	r19, r1
    1038:	09 f4       	brne	.+2      	; 0x103c <EXTI_u8Enable+0x3e>
    103a:	f9 c0       	rjmp	.+498    	; 0x122e <EXTI_u8Enable+0x230>
    103c:	8a 85       	ldd	r24, Y+10	; 0x0a
    103e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	09 f0       	breq	.+2      	; 0x1046 <EXTI_u8Enable+0x48>
    1044:	23 c1       	rjmp	.+582    	; 0x128c <EXTI_u8Enable+0x28e>
	{
		case EXTI_u8_INT0:
			switch(Copy_u8EdgeIndex)
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	39 87       	std	Y+9, r19	; 0x09
    104e:	28 87       	std	Y+8, r18	; 0x08
    1050:	88 85       	ldd	r24, Y+8	; 0x08
    1052:	99 85       	ldd	r25, Y+9	; 0x09
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	91 05       	cpc	r25, r1
    1058:	61 f1       	breq	.+88     	; 0x10b2 <EXTI_u8Enable+0xb4>
    105a:	28 85       	ldd	r18, Y+8	; 0x08
    105c:	39 85       	ldd	r19, Y+9	; 0x09
    105e:	22 30       	cpi	r18, 0x02	; 2
    1060:	31 05       	cpc	r19, r1
    1062:	2c f4       	brge	.+10     	; 0x106e <EXTI_u8Enable+0x70>
    1064:	88 85       	ldd	r24, Y+8	; 0x08
    1066:	99 85       	ldd	r25, Y+9	; 0x09
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	69 f0       	breq	.+26     	; 0x1086 <EXTI_u8Enable+0x88>
    106c:	64 c0       	rjmp	.+200    	; 0x1136 <EXTI_u8Enable+0x138>
    106e:	28 85       	ldd	r18, Y+8	; 0x08
    1070:	39 85       	ldd	r19, Y+9	; 0x09
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	99 f1       	breq	.+102    	; 0x10de <EXTI_u8Enable+0xe0>
    1078:	88 85       	ldd	r24, Y+8	; 0x08
    107a:	99 85       	ldd	r25, Y+9	; 0x09
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	91 05       	cpc	r25, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <EXTI_u8Enable+0x86>
    1082:	43 c0       	rjmp	.+134    	; 0x110a <EXTI_u8Enable+0x10c>
    1084:	58 c0       	rjmp	.+176    	; 0x1136 <EXTI_u8Enable+0x138>
			{
				case EXTI_u8_RAISING_EDGE:
					SET_BIT(EXTI_u8_MCUCR,1);
    1086:	a5 e5       	ldi	r26, 0x55	; 85
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e5 e5       	ldi	r30, 0x55	; 85
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	82 60       	ori	r24, 0x02	; 2
    1092:	8c 93       	st	X, r24
					SET_BIT(EXTI_u8_MCUCR,0);
    1094:	a5 e5       	ldi	r26, 0x55	; 85
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e5 e5       	ldi	r30, 0x55	; 85
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	81 60       	ori	r24, 0x01	; 1
    10a0:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    10a2:	ab e5       	ldi	r26, 0x5B	; 91
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	eb e5       	ldi	r30, 0x5B	; 91
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	80 64       	ori	r24, 0x40	; 64
    10ae:	8c 93       	st	X, r24
    10b0:	ee c0       	rjmp	.+476    	; 0x128e <EXTI_u8Enable+0x290>
					break;

				case EXTI_u8_FALLING_EDGE:
					SET_BIT(EXTI_u8_MCUCR,1);
    10b2:	a5 e5       	ldi	r26, 0x55	; 85
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e5 e5       	ldi	r30, 0x55	; 85
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	82 60       	ori	r24, 0x02	; 2
    10be:	8c 93       	st	X, r24
					CLR_BIT(EXTI_u8_MCUCR,0);
    10c0:	a5 e5       	ldi	r26, 0x55	; 85
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e5 e5       	ldi	r30, 0x55	; 85
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	8e 7f       	andi	r24, 0xFE	; 254
    10cc:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    10ce:	ab e5       	ldi	r26, 0x5B	; 91
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	eb e5       	ldi	r30, 0x5B	; 91
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	80 64       	ori	r24, 0x40	; 64
    10da:	8c 93       	st	X, r24
    10dc:	d8 c0       	rjmp	.+432    	; 0x128e <EXTI_u8Enable+0x290>
					break;

				case EXTI_u8_ANY_LOGICAL_CHANGE:
					CLR_BIT(EXTI_u8_MCUCR,1);
    10de:	a5 e5       	ldi	r26, 0x55	; 85
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e5 e5       	ldi	r30, 0x55	; 85
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	8d 7f       	andi	r24, 0xFD	; 253
    10ea:	8c 93       	st	X, r24
					SET_BIT(EXTI_u8_MCUCR,0);
    10ec:	a5 e5       	ldi	r26, 0x55	; 85
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e5 e5       	ldi	r30, 0x55	; 85
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	81 60       	ori	r24, 0x01	; 1
    10f8:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    10fa:	ab e5       	ldi	r26, 0x5B	; 91
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	eb e5       	ldi	r30, 0x5B	; 91
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	80 64       	ori	r24, 0x40	; 64
    1106:	8c 93       	st	X, r24
    1108:	c2 c0       	rjmp	.+388    	; 0x128e <EXTI_u8Enable+0x290>
					break;

				case EXTI_u8_LOW_LEVEL:
					CLR_BIT(EXTI_u8_MCUCR,1);
    110a:	a5 e5       	ldi	r26, 0x55	; 85
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e5 e5       	ldi	r30, 0x55	; 85
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	8d 7f       	andi	r24, 0xFD	; 253
    1116:	8c 93       	st	X, r24
					CLR_BIT(EXTI_u8_MCUCR,0);
    1118:	a5 e5       	ldi	r26, 0x55	; 85
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e5 e5       	ldi	r30, 0x55	; 85
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8e 7f       	andi	r24, 0xFE	; 254
    1124:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    1126:	ab e5       	ldi	r26, 0x5B	; 91
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	eb e5       	ldi	r30, 0x5B	; 91
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	80 64       	ori	r24, 0x40	; 64
    1132:	8c 93       	st	X, r24
    1134:	ac c0       	rjmp	.+344    	; 0x128e <EXTI_u8Enable+0x290>
					break;
				default : Local_u8ErrorState = STD_TYPES_NOK;
    1136:	19 82       	std	Y+1, r1	; 0x01
    1138:	aa c0       	rjmp	.+340    	; 0x128e <EXTI_u8Enable+0x290>
			}
		break;

			case EXTI_u8_INT1:
				switch(Copy_u8EdgeIndex)
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	3f 83       	std	Y+7, r19	; 0x07
    1142:	2e 83       	std	Y+6, r18	; 0x06
    1144:	8e 81       	ldd	r24, Y+6	; 0x06
    1146:	9f 81       	ldd	r25, Y+7	; 0x07
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	91 05       	cpc	r25, r1
    114c:	61 f1       	breq	.+88     	; 0x11a6 <EXTI_u8Enable+0x1a8>
    114e:	2e 81       	ldd	r18, Y+6	; 0x06
    1150:	3f 81       	ldd	r19, Y+7	; 0x07
    1152:	22 30       	cpi	r18, 0x02	; 2
    1154:	31 05       	cpc	r19, r1
    1156:	2c f4       	brge	.+10     	; 0x1162 <EXTI_u8Enable+0x164>
    1158:	8e 81       	ldd	r24, Y+6	; 0x06
    115a:	9f 81       	ldd	r25, Y+7	; 0x07
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	69 f0       	breq	.+26     	; 0x117a <EXTI_u8Enable+0x17c>
    1160:	64 c0       	rjmp	.+200    	; 0x122a <EXTI_u8Enable+0x22c>
    1162:	2e 81       	ldd	r18, Y+6	; 0x06
    1164:	3f 81       	ldd	r19, Y+7	; 0x07
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	99 f1       	breq	.+102    	; 0x11d2 <EXTI_u8Enable+0x1d4>
    116c:	8e 81       	ldd	r24, Y+6	; 0x06
    116e:	9f 81       	ldd	r25, Y+7	; 0x07
    1170:	83 30       	cpi	r24, 0x03	; 3
    1172:	91 05       	cpc	r25, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <EXTI_u8Enable+0x17a>
    1176:	43 c0       	rjmp	.+134    	; 0x11fe <EXTI_u8Enable+0x200>
    1178:	58 c0       	rjmp	.+176    	; 0x122a <EXTI_u8Enable+0x22c>
				{
					case EXTI_u8_RAISING_EDGE:
						SET_BIT(EXTI_u8_MCUCR,3);
    117a:	a5 e5       	ldi	r26, 0x55	; 85
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e5 e5       	ldi	r30, 0x55	; 85
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	88 60       	ori	r24, 0x08	; 8
    1186:	8c 93       	st	X, r24
						SET_BIT(EXTI_u8_MCUCR,2);
    1188:	a5 e5       	ldi	r26, 0x55	; 85
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e5 e5       	ldi	r30, 0x55	; 85
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	84 60       	ori	r24, 0x04	; 4
    1194:	8c 93       	st	X, r24
						/* Enable EXTI0 */
						SET_BIT(EXTI_u8_GICR,7);
    1196:	ab e5       	ldi	r26, 0x5B	; 91
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	eb e5       	ldi	r30, 0x5B	; 91
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	80 68       	ori	r24, 0x80	; 128
    11a2:	8c 93       	st	X, r24
    11a4:	74 c0       	rjmp	.+232    	; 0x128e <EXTI_u8Enable+0x290>
						break;

					case EXTI_u8_FALLING_EDGE:
						SET_BIT(EXTI_u8_MCUCR,3);
    11a6:	a5 e5       	ldi	r26, 0x55	; 85
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e5 e5       	ldi	r30, 0x55	; 85
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	88 60       	ori	r24, 0x08	; 8
    11b2:	8c 93       	st	X, r24
						CLR_BIT(EXTI_u8_MCUCR,2);
    11b4:	a5 e5       	ldi	r26, 0x55	; 85
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e5 e5       	ldi	r30, 0x55	; 85
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	8b 7f       	andi	r24, 0xFB	; 251
    11c0:	8c 93       	st	X, r24
						/* Enable EXTI0 */
						SET_BIT(EXTI_u8_GICR,7);
    11c2:	ab e5       	ldi	r26, 0x5B	; 91
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	eb e5       	ldi	r30, 0x5B	; 91
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	80 68       	ori	r24, 0x80	; 128
    11ce:	8c 93       	st	X, r24
    11d0:	5e c0       	rjmp	.+188    	; 0x128e <EXTI_u8Enable+0x290>
						break;

					case EXTI_u8_ANY_LOGICAL_CHANGE:
						CLR_BIT(EXTI_u8_MCUCR,3);
    11d2:	a5 e5       	ldi	r26, 0x55	; 85
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e5 e5       	ldi	r30, 0x55	; 85
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	87 7f       	andi	r24, 0xF7	; 247
    11de:	8c 93       	st	X, r24
						SET_BIT(EXTI_u8_MCUCR,2);
    11e0:	a5 e5       	ldi	r26, 0x55	; 85
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e5 e5       	ldi	r30, 0x55	; 85
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	84 60       	ori	r24, 0x04	; 4
    11ec:	8c 93       	st	X, r24
						/* Enable EXTI0 */
						SET_BIT(EXTI_u8_GICR,7);
    11ee:	ab e5       	ldi	r26, 0x5B	; 91
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	eb e5       	ldi	r30, 0x5B	; 91
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	80 68       	ori	r24, 0x80	; 128
    11fa:	8c 93       	st	X, r24
    11fc:	48 c0       	rjmp	.+144    	; 0x128e <EXTI_u8Enable+0x290>
						break;

					case EXTI_u8_LOW_LEVEL:
						CLR_BIT(EXTI_u8_MCUCR,3);
    11fe:	a5 e5       	ldi	r26, 0x55	; 85
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e5 e5       	ldi	r30, 0x55	; 85
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	87 7f       	andi	r24, 0xF7	; 247
    120a:	8c 93       	st	X, r24
						CLR_BIT(EXTI_u8_MCUCR,2);
    120c:	a5 e5       	ldi	r26, 0x55	; 85
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e5 e5       	ldi	r30, 0x55	; 85
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	8b 7f       	andi	r24, 0xFB	; 251
    1218:	8c 93       	st	X, r24
						/* Enable EXTI0 */
						SET_BIT(EXTI_u8_GICR,7);
    121a:	ab e5       	ldi	r26, 0x5B	; 91
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	eb e5       	ldi	r30, 0x5B	; 91
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	80 68       	ori	r24, 0x80	; 128
    1226:	8c 93       	st	X, r24
    1228:	32 c0       	rjmp	.+100    	; 0x128e <EXTI_u8Enable+0x290>
						break;
					default : Local_u8ErrorState = STD_TYPES_NOK;
    122a:	19 82       	std	Y+1, r1	; 0x01
    122c:	30 c0       	rjmp	.+96     	; 0x128e <EXTI_u8Enable+0x290>
				}
			break;

				case EXTI_u8_INT2:
					switch(Copy_u8EdgeIndex)
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	3d 83       	std	Y+5, r19	; 0x05
    1236:	2c 83       	std	Y+4, r18	; 0x04
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	9d 81       	ldd	r25, Y+5	; 0x05
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	31 f0       	breq	.+12     	; 0x124c <EXTI_u8Enable+0x24e>
    1240:	2c 81       	ldd	r18, Y+4	; 0x04
    1242:	3d 81       	ldd	r19, Y+5	; 0x05
    1244:	21 30       	cpi	r18, 0x01	; 1
    1246:	31 05       	cpc	r19, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <EXTI_u8Enable+0x26c>
    124a:	1e c0       	rjmp	.+60     	; 0x1288 <EXTI_u8Enable+0x28a>
					{
						case EXTI_u8_RAISING_EDGE:
							SET_BIT(EXTI_u8_MCUCR,6);
    124c:	a5 e5       	ldi	r26, 0x55	; 85
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e5 e5       	ldi	r30, 0x55	; 85
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	80 64       	ori	r24, 0x40	; 64
    1258:	8c 93       	st	X, r24
							/* Enable EXTI0 */
							SET_BIT(EXTI_u8_GICR,5);
    125a:	ab e5       	ldi	r26, 0x5B	; 91
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	eb e5       	ldi	r30, 0x5B	; 91
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	80 62       	ori	r24, 0x20	; 32
    1266:	8c 93       	st	X, r24
    1268:	12 c0       	rjmp	.+36     	; 0x128e <EXTI_u8Enable+0x290>
							break;

						case EXTI_u8_FALLING_EDGE:
							SET_BIT(EXTI_u8_MCUCR,6);
    126a:	a5 e5       	ldi	r26, 0x55	; 85
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e5 e5       	ldi	r30, 0x55	; 85
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	80 64       	ori	r24, 0x40	; 64
    1276:	8c 93       	st	X, r24
							/* Enable EXTI0 */
							SET_BIT(EXTI_u8_GICR,5);
    1278:	ab e5       	ldi	r26, 0x5B	; 91
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	eb e5       	ldi	r30, 0x5B	; 91
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	80 62       	ori	r24, 0x20	; 32
    1284:	8c 93       	st	X, r24
    1286:	03 c0       	rjmp	.+6      	; 0x128e <EXTI_u8Enable+0x290>
							break;

						default : Local_u8ErrorState = STD_TYPES_NOK;
    1288:	19 82       	std	Y+1, r1	; 0x01
    128a:	01 c0       	rjmp	.+2      	; 0x128e <EXTI_u8Enable+0x290>
					}
				break;
				default : Local_u8ErrorState = STD_TYPES_NOK;
    128c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    128e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1290:	2b 96       	adiw	r28, 0x0b	; 11
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <EXTI_u8EXTIDisable>:



u8    EXTI_u8EXTIDisable(u8 Copy_u8EXTIIndex){
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <EXTI_u8EXTIDisable+0x6>
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <EXTI_u8EXTIDisable+0x8>
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8EXTIIndex)
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	3c 83       	std	Y+4, r19	; 0x04
    12bc:	2b 83       	std	Y+3, r18	; 0x03
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	91 05       	cpc	r25, r1
    12c6:	89 f0       	breq	.+34     	; 0x12ea <EXTI_u8EXTIDisable+0x48>
    12c8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ca:	3c 81       	ldd	r19, Y+4	; 0x04
    12cc:	22 30       	cpi	r18, 0x02	; 2
    12ce:	31 05       	cpc	r19, r1
    12d0:	a1 f0       	breq	.+40     	; 0x12fa <EXTI_u8EXTIDisable+0x58>
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	c1 f4       	brne	.+48     	; 0x130a <EXTI_u8EXTIDisable+0x68>
	{
		case EXTI_u8_INT0 :
			/* Disable EXTI0 */
			CLR_BIT(EXTI_u8_GICR,6);
    12da:	ab e5       	ldi	r26, 0x5B	; 91
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	eb e5       	ldi	r30, 0x5B	; 91
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8f 7b       	andi	r24, 0xBF	; 191
    12e6:	8c 93       	st	X, r24
    12e8:	11 c0       	rjmp	.+34     	; 0x130c <EXTI_u8EXTIDisable+0x6a>
			break;

		case EXTI_u8_INT1 :
			/* Disable EXTI1 */
			CLR_BIT(EXTI_u8_GICR,7);
    12ea:	ab e5       	ldi	r26, 0x5B	; 91
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e5       	ldi	r30, 0x5B	; 91
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8f 77       	andi	r24, 0x7F	; 127
    12f6:	8c 93       	st	X, r24
    12f8:	09 c0       	rjmp	.+18     	; 0x130c <EXTI_u8EXTIDisable+0x6a>
			break;

		case EXTI_u8_INT2 :
			/* Disable EXTI2 */
			CLR_BIT(EXTI_u8_GICR,5);
    12fa:	ab e5       	ldi	r26, 0x5B	; 91
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	eb e5       	ldi	r30, 0x5B	; 91
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8f 7d       	andi	r24, 0xDF	; 223
    1306:	8c 93       	st	X, r24
    1308:	01 c0       	rjmp	.+2      	; 0x130c <EXTI_u8EXTIDisable+0x6a>
			break;
		default : Local_u8ErrorState = STD_TYPES_NOK;
    130a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    130c:	89 81       	ldd	r24, Y+1	; 0x01
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <EXTI_u8EXTISetCallBack>:


u8    EXTI_u8EXTISetCallBack(u8 Copy_u8EXTIIndex, void(*Copy_pf)(void)){
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <EXTI_u8EXTISetCallBack+0x6>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <EXTI_u8EXTISetCallBack+0x8>
    1324:	0f 92       	push	r0
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	8a 83       	std	Y+2, r24	; 0x02
    132c:	7c 83       	std	Y+4, r23	; 0x04
    132e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8EXTIIndex <= EXTI_u8_INT2) && (Copy_pf != NULL)){
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	88 f4       	brcc	.+34     	; 0x135c <EXTI_u8EXTISetCallBack+0x40>
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	69 f0       	breq	.+26     	; 0x135c <EXTI_u8EXTISetCallBack+0x40>
		EXTI_ApfEXTI[Copy_u8EXTIIndex] = Copy_pf;
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	88 2f       	mov	r24, r24
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	fc 01       	movw	r30, r24
    134e:	e8 57       	subi	r30, 0x78	; 120
    1350:	ff 4f       	sbci	r31, 0xFF	; 255
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	91 83       	std	Z+1, r25	; 0x01
    1358:	80 83       	st	Z, r24
    135a:	01 c0       	rjmp	.+2      	; 0x135e <EXTI_u8EXTISetCallBack+0x42>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    135c:	19 82       	std	Y+1, r1	; 0x01
	}
}
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <__vector_1>:


/* Prototype for ISR of EXTI0 */
void __vector_1(void)    __attribute__((signal)); // to avoid optimizer changes
void __vector_1(void)
{
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	2f 93       	push	r18
    137a:	3f 93       	push	r19
    137c:	4f 93       	push	r20
    137e:	5f 93       	push	r21
    1380:	6f 93       	push	r22
    1382:	7f 93       	push	r23
    1384:	8f 93       	push	r24
    1386:	9f 93       	push	r25
    1388:	af 93       	push	r26
    138a:	bf 93       	push	r27
    138c:	ef 93       	push	r30
    138e:	ff 93       	push	r31
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT0] != NULL)
    1398:	80 91 88 00 	lds	r24, 0x0088
    139c:	90 91 89 00 	lds	r25, 0x0089
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	29 f0       	breq	.+10     	; 0x13ae <__vector_1+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INT0]();
    13a4:	e0 91 88 00 	lds	r30, 0x0088
    13a8:	f0 91 89 00 	lds	r31, 0x0089
    13ac:	09 95       	icall
	}

}
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	ff 91       	pop	r31
    13b4:	ef 91       	pop	r30
    13b6:	bf 91       	pop	r27
    13b8:	af 91       	pop	r26
    13ba:	9f 91       	pop	r25
    13bc:	8f 91       	pop	r24
    13be:	7f 91       	pop	r23
    13c0:	6f 91       	pop	r22
    13c2:	5f 91       	pop	r21
    13c4:	4f 91       	pop	r20
    13c6:	3f 91       	pop	r19
    13c8:	2f 91       	pop	r18
    13ca:	0f 90       	pop	r0
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	0f 90       	pop	r0
    13d0:	1f 90       	pop	r1
    13d2:	18 95       	reti

000013d4 <__vector_2>:

/* Prototype for ISR of EXTI2 */
void __vector_2(void)    __attribute__((signal)); // to avoid optimizer changes
void __vector_2(void)
{
    13d4:	1f 92       	push	r1
    13d6:	0f 92       	push	r0
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	0f 92       	push	r0
    13dc:	11 24       	eor	r1, r1
    13de:	2f 93       	push	r18
    13e0:	3f 93       	push	r19
    13e2:	4f 93       	push	r20
    13e4:	5f 93       	push	r21
    13e6:	6f 93       	push	r22
    13e8:	7f 93       	push	r23
    13ea:	8f 93       	push	r24
    13ec:	9f 93       	push	r25
    13ee:	af 93       	push	r26
    13f0:	bf 93       	push	r27
    13f2:	ef 93       	push	r30
    13f4:	ff 93       	push	r31
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT1] != NULL)
    13fe:	80 91 8a 00 	lds	r24, 0x008A
    1402:	90 91 8b 00 	lds	r25, 0x008B
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	29 f0       	breq	.+10     	; 0x1414 <__vector_2+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INT1]();
    140a:	e0 91 8a 00 	lds	r30, 0x008A
    140e:	f0 91 8b 00 	lds	r31, 0x008B
    1412:	09 95       	icall
	}
}
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	ff 91       	pop	r31
    141a:	ef 91       	pop	r30
    141c:	bf 91       	pop	r27
    141e:	af 91       	pop	r26
    1420:	9f 91       	pop	r25
    1422:	8f 91       	pop	r24
    1424:	7f 91       	pop	r23
    1426:	6f 91       	pop	r22
    1428:	5f 91       	pop	r21
    142a:	4f 91       	pop	r20
    142c:	3f 91       	pop	r19
    142e:	2f 91       	pop	r18
    1430:	0f 90       	pop	r0
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	0f 90       	pop	r0
    1436:	1f 90       	pop	r1
    1438:	18 95       	reti

0000143a <__vector_3>:

/* Prototype for ISR of EXTI3 */
void __vector_3(void)    __attribute__((signal)); // to avoid optimizer changes
void __vector_3(void)
{
    143a:	1f 92       	push	r1
    143c:	0f 92       	push	r0
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	0f 92       	push	r0
    1442:	11 24       	eor	r1, r1
    1444:	2f 93       	push	r18
    1446:	3f 93       	push	r19
    1448:	4f 93       	push	r20
    144a:	5f 93       	push	r21
    144c:	6f 93       	push	r22
    144e:	7f 93       	push	r23
    1450:	8f 93       	push	r24
    1452:	9f 93       	push	r25
    1454:	af 93       	push	r26
    1456:	bf 93       	push	r27
    1458:	ef 93       	push	r30
    145a:	ff 93       	push	r31
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT2] != NULL)
    1464:	80 91 8c 00 	lds	r24, 0x008C
    1468:	90 91 8d 00 	lds	r25, 0x008D
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	29 f0       	breq	.+10     	; 0x147a <__vector_3+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INT2]();
    1470:	e0 91 8c 00 	lds	r30, 0x008C
    1474:	f0 91 8d 00 	lds	r31, 0x008D
    1478:	09 95       	icall
	}
}
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	ff 91       	pop	r31
    1480:	ef 91       	pop	r30
    1482:	bf 91       	pop	r27
    1484:	af 91       	pop	r26
    1486:	9f 91       	pop	r25
    1488:	8f 91       	pop	r24
    148a:	7f 91       	pop	r23
    148c:	6f 91       	pop	r22
    148e:	5f 91       	pop	r21
    1490:	4f 91       	pop	r20
    1492:	3f 91       	pop	r19
    1494:	2f 91       	pop	r18
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <DIO_voidInit>:
#include "DIO_config.h"



void DIO_voidInit(void)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    14a8:	ea e3       	ldi	r30, 0x3A	; 58
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	8e e7       	ldi	r24, 0x7E	; 126
    14ae:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    14b0:	e7 e3       	ldi	r30, 0x37	; 55
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	89 ef       	ldi	r24, 0xF9	; 249
    14b6:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    14b8:	e4 e3       	ldi	r30, 0x34	; 52
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	8f ef       	ldi	r24, 0xFF	; 255
    14be:	80 83       	st	Z, r24

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    14c0:	e1 e3       	ldi	r30, 0x31	; 49
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	8b e2       	ldi	r24, 0x2B	; 43
    14c6:	80 83       	st	Z, r24
	/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA0_INITIAL_VALUE);
    14c8:	eb e3       	ldi	r30, 0x3B	; 59
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	88 e7       	ldi	r24, 0x78	; 120
    14ce:	80 83       	st	Z, r24

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB0_INITIAL_VALUE);
    14d0:	e8 e3       	ldi	r30, 0x38	; 56
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	87 ef       	ldi	r24, 0xF7	; 247
    14d6:	80 83       	st	Z, r24

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC0_INITIAL_VALUE);
    14d8:	e5 e3       	ldi	r30, 0x35	; 53
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD0_INITIAL_VALUE);
    14de:	e2 e3       	ldi	r30, 0x32	; 50
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	84 e0       	ldi	r24, 0x04	; 4
    14e4:	80 83       	st	Z, r24

}
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <DIO_u8SetPinDirection>:




u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	2e 97       	sbiw	r28, 0x0e	; 14
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	8a 83       	std	Y+2, r24	; 0x02
    1502:	6b 83       	std	Y+3, r22	; 0x03
    1504:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	84 30       	cpi	r24, 0x04	; 4
    150e:	08 f0       	brcs	.+2      	; 0x1512 <DIO_u8SetPinDirection+0x26>
    1510:	0d c1       	rjmp	.+538    	; 0x172c <DIO_u8SetPinDirection+0x240>
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	88 30       	cpi	r24, 0x08	; 8
    1516:	08 f0       	brcs	.+2      	; 0x151a <DIO_u8SetPinDirection+0x2e>
    1518:	09 c1       	rjmp	.+530    	; 0x172c <DIO_u8SetPinDirection+0x240>
    151a:	8c 81       	ldd	r24, Y+4	; 0x04
    151c:	88 23       	and	r24, r24
    151e:	21 f0       	breq	.+8      	; 0x1528 <DIO_u8SetPinDirection+0x3c>
    1520:	8c 81       	ldd	r24, Y+4	; 0x04
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	09 f0       	breq	.+2      	; 0x1528 <DIO_u8SetPinDirection+0x3c>
    1526:	02 c1       	rjmp	.+516    	; 0x172c <DIO_u8SetPinDirection+0x240>
	{

		switch (Copy_u8PortId)
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	3e 87       	std	Y+14, r19	; 0x0e
    1530:	2d 87       	std	Y+13, r18	; 0x0d
    1532:	8d 85       	ldd	r24, Y+13	; 0x0d
    1534:	9e 85       	ldd	r25, Y+14	; 0x0e
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	91 05       	cpc	r25, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <DIO_u8SetPinDirection+0x52>
    153c:	4f c0       	rjmp	.+158    	; 0x15dc <DIO_u8SetPinDirection+0xf0>
    153e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1540:	3e 85       	ldd	r19, Y+14	; 0x0e
    1542:	22 30       	cpi	r18, 0x02	; 2
    1544:	31 05       	cpc	r19, r1
    1546:	2c f4       	brge	.+10     	; 0x1552 <DIO_u8SetPinDirection+0x66>
    1548:	8d 85       	ldd	r24, Y+13	; 0x0d
    154a:	9e 85       	ldd	r25, Y+14	; 0x0e
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	71 f0       	breq	.+28     	; 0x156c <DIO_u8SetPinDirection+0x80>
    1550:	ee c0       	rjmp	.+476    	; 0x172e <DIO_u8SetPinDirection+0x242>
    1552:	2d 85       	ldd	r18, Y+13	; 0x0d
    1554:	3e 85       	ldd	r19, Y+14	; 0x0e
    1556:	22 30       	cpi	r18, 0x02	; 2
    1558:	31 05       	cpc	r19, r1
    155a:	09 f4       	brne	.+2      	; 0x155e <DIO_u8SetPinDirection+0x72>
    155c:	77 c0       	rjmp	.+238    	; 0x164c <DIO_u8SetPinDirection+0x160>
    155e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1560:	9e 85       	ldd	r25, Y+14	; 0x0e
    1562:	83 30       	cpi	r24, 0x03	; 3
    1564:	91 05       	cpc	r25, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <DIO_u8SetPinDirection+0x7e>
    1568:	a9 c0       	rjmp	.+338    	; 0x16bc <DIO_u8SetPinDirection+0x1d0>
    156a:	e1 c0       	rjmp	.+450    	; 0x172e <DIO_u8SetPinDirection+0x242>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3c 87       	std	Y+12, r19	; 0x0c
    1574:	2b 87       	std	Y+11, r18	; 0x0b
    1576:	8b 85       	ldd	r24, Y+11	; 0x0b
    1578:	9c 85       	ldd	r25, Y+12	; 0x0c
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	31 f0       	breq	.+12     	; 0x158a <DIO_u8SetPinDirection+0x9e>
    157e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1580:	3c 85       	ldd	r19, Y+12	; 0x0c
    1582:	21 30       	cpi	r18, 0x01	; 1
    1584:	31 05       	cpc	r19, r1
    1586:	a9 f0       	breq	.+42     	; 0x15b2 <DIO_u8SetPinDirection+0xc6>
    1588:	d2 c0       	rjmp	.+420    	; 0x172e <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    158a:	aa e3       	ldi	r26, 0x3A	; 58
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	ea e3       	ldi	r30, 0x3A	; 58
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_u8SetPinDirection+0xbc>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <DIO_u8SetPinDirection+0xb8>
    15ac:	84 2b       	or	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	be c0       	rjmp	.+380    	; 0x172e <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    15b2:	aa e3       	ldi	r26, 0x3A	; 58
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ea e3       	ldi	r30, 0x3A	; 58
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <DIO_u8SetPinDirection+0xe4>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <DIO_u8SetPinDirection+0xe0>
    15d4:	80 95       	com	r24
    15d6:	84 23       	and	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	a9 c0       	rjmp	.+338    	; 0x172e <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	3a 87       	std	Y+10, r19	; 0x0a
    15e4:	29 87       	std	Y+9, r18	; 0x09
    15e6:	89 85       	ldd	r24, Y+9	; 0x09
    15e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	31 f0       	breq	.+12     	; 0x15fa <DIO_u8SetPinDirection+0x10e>
    15ee:	29 85       	ldd	r18, Y+9	; 0x09
    15f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    15f2:	21 30       	cpi	r18, 0x01	; 1
    15f4:	31 05       	cpc	r19, r1
    15f6:	a9 f0       	breq	.+42     	; 0x1622 <DIO_u8SetPinDirection+0x136>
    15f8:	9a c0       	rjmp	.+308    	; 0x172e <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    15fa:	a7 e3       	ldi	r26, 0x37	; 55
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e7 e3       	ldi	r30, 0x37	; 55
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <DIO_u8SetPinDirection+0x12c>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <DIO_u8SetPinDirection+0x128>
    161c:	84 2b       	or	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	86 c0       	rjmp	.+268    	; 0x172e <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1622:	a7 e3       	ldi	r26, 0x37	; 55
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e7 e3       	ldi	r30, 0x37	; 55
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_u8SetPinDirection+0x154>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_u8SetPinDirection+0x150>
    1644:	80 95       	com	r24
    1646:	84 23       	and	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	71 c0       	rjmp	.+226    	; 0x172e <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    164c:	8c 81       	ldd	r24, Y+4	; 0x04
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	38 87       	std	Y+8, r19	; 0x08
    1654:	2f 83       	std	Y+7, r18	; 0x07
    1656:	8f 81       	ldd	r24, Y+7	; 0x07
    1658:	98 85       	ldd	r25, Y+8	; 0x08
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	31 f0       	breq	.+12     	; 0x166a <DIO_u8SetPinDirection+0x17e>
    165e:	2f 81       	ldd	r18, Y+7	; 0x07
    1660:	38 85       	ldd	r19, Y+8	; 0x08
    1662:	21 30       	cpi	r18, 0x01	; 1
    1664:	31 05       	cpc	r19, r1
    1666:	a9 f0       	breq	.+42     	; 0x1692 <DIO_u8SetPinDirection+0x1a6>
    1668:	62 c0       	rjmp	.+196    	; 0x172e <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    166a:	a4 e3       	ldi	r26, 0x34	; 52
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e4 e3       	ldi	r30, 0x34	; 52
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 2e       	mov	r0, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <DIO_u8SetPinDirection+0x19c>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	0a 94       	dec	r0
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <DIO_u8SetPinDirection+0x198>
    168c:	84 2b       	or	r24, r20
    168e:	8c 93       	st	X, r24
    1690:	4e c0       	rjmp	.+156    	; 0x172e <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1692:	a4 e3       	ldi	r26, 0x34	; 52
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e4 e3       	ldi	r30, 0x34	; 52
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_u8SetPinDirection+0x1c4>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_u8SetPinDirection+0x1c0>
    16b4:	80 95       	com	r24
    16b6:	84 23       	and	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	39 c0       	rjmp	.+114    	; 0x172e <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	3e 83       	std	Y+6, r19	; 0x06
    16c4:	2d 83       	std	Y+5, r18	; 0x05
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	31 f0       	breq	.+12     	; 0x16da <DIO_u8SetPinDirection+0x1ee>
    16ce:	2d 81       	ldd	r18, Y+5	; 0x05
    16d0:	3e 81       	ldd	r19, Y+6	; 0x06
    16d2:	21 30       	cpi	r18, 0x01	; 1
    16d4:	31 05       	cpc	r19, r1
    16d6:	a9 f0       	breq	.+42     	; 0x1702 <DIO_u8SetPinDirection+0x216>
    16d8:	2a c0       	rjmp	.+84     	; 0x172e <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    16da:	a1 e3       	ldi	r26, 0x31	; 49
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e1 e3       	ldi	r30, 0x31	; 49
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <DIO_u8SetPinDirection+0x20c>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <DIO_u8SetPinDirection+0x208>
    16fc:	84 2b       	or	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	16 c0       	rjmp	.+44     	; 0x172e <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1702:	a1 e3       	ldi	r26, 0x31	; 49
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e1 e3       	ldi	r30, 0x31	; 49
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <DIO_u8SetPinDirection+0x234>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <DIO_u8SetPinDirection+0x230>
    1724:	80 95       	com	r24
    1726:	84 23       	and	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	01 c0       	rjmp	.+2      	; 0x172e <DIO_u8SetPinDirection+0x242>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    172c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    172e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1730:	2e 96       	adiw	r28, 0x0e	; 14
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	2e 97       	sbiw	r28, 0x0e	; 14
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	8a 83       	std	Y+2, r24	; 0x02
    1758:	6b 83       	std	Y+3, r22	; 0x03
    175a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	84 30       	cpi	r24, 0x04	; 4
    1764:	08 f0       	brcs	.+2      	; 0x1768 <DIO_u8SetPinValue+0x26>
    1766:	13 c1       	rjmp	.+550    	; 0x198e <DIO_u8SetPinValue+0x24c>
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	88 30       	cpi	r24, 0x08	; 8
    176c:	08 f0       	brcs	.+2      	; 0x1770 <DIO_u8SetPinValue+0x2e>
    176e:	0f c1       	rjmp	.+542    	; 0x198e <DIO_u8SetPinValue+0x24c>
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	88 23       	and	r24, r24
    1774:	21 f0       	breq	.+8      	; 0x177e <DIO_u8SetPinValue+0x3c>
    1776:	8c 81       	ldd	r24, Y+4	; 0x04
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	09 f0       	breq	.+2      	; 0x177e <DIO_u8SetPinValue+0x3c>
    177c:	08 c1       	rjmp	.+528    	; 0x198e <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	3e 87       	std	Y+14, r19	; 0x0e
    1786:	2d 87       	std	Y+13, r18	; 0x0d
    1788:	8d 85       	ldd	r24, Y+13	; 0x0d
    178a:	9e 85       	ldd	r25, Y+14	; 0x0e
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	91 05       	cpc	r25, r1
    1790:	09 f4       	brne	.+2      	; 0x1794 <DIO_u8SetPinValue+0x52>
    1792:	50 c0       	rjmp	.+160    	; 0x1834 <DIO_u8SetPinValue+0xf2>
    1794:	2d 85       	ldd	r18, Y+13	; 0x0d
    1796:	3e 85       	ldd	r19, Y+14	; 0x0e
    1798:	22 30       	cpi	r18, 0x02	; 2
    179a:	31 05       	cpc	r19, r1
    179c:	2c f4       	brge	.+10     	; 0x17a8 <DIO_u8SetPinValue+0x66>
    179e:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	71 f0       	breq	.+28     	; 0x17c2 <DIO_u8SetPinValue+0x80>
    17a6:	f4 c0       	rjmp	.+488    	; 0x1990 <DIO_u8SetPinValue+0x24e>
    17a8:	2d 85       	ldd	r18, Y+13	; 0x0d
    17aa:	3e 85       	ldd	r19, Y+14	; 0x0e
    17ac:	22 30       	cpi	r18, 0x02	; 2
    17ae:	31 05       	cpc	r19, r1
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <DIO_u8SetPinValue+0x72>
    17b2:	79 c0       	rjmp	.+242    	; 0x18a6 <DIO_u8SetPinValue+0x164>
    17b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b8:	83 30       	cpi	r24, 0x03	; 3
    17ba:	91 05       	cpc	r25, r1
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <DIO_u8SetPinValue+0x7e>
    17be:	ad c0       	rjmp	.+346    	; 0x191a <DIO_u8SetPinValue+0x1d8>
    17c0:	e7 c0       	rjmp	.+462    	; 0x1990 <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    17c2:	8c 81       	ldd	r24, Y+4	; 0x04
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	3c 87       	std	Y+12, r19	; 0x0c
    17ca:	2b 87       	std	Y+11, r18	; 0x0b
    17cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    17ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	c9 f0       	breq	.+50     	; 0x1806 <DIO_u8SetPinValue+0xc4>
    17d4:	2b 85       	ldd	r18, Y+11	; 0x0b
    17d6:	3c 85       	ldd	r19, Y+12	; 0x0c
    17d8:	21 30       	cpi	r18, 0x01	; 1
    17da:	31 05       	cpc	r19, r1
    17dc:	49 f5       	brne	.+82     	; 0x1830 <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    17de:	ab e3       	ldi	r26, 0x3B	; 59
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	eb e3       	ldi	r30, 0x3B	; 59
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	48 2f       	mov	r20, r24
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 2e       	mov	r0, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <DIO_u8SetPinValue+0xba>
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	0a 94       	dec	r0
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <DIO_u8SetPinValue+0xb6>
    1800:	84 2b       	or	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	c5 c0       	rjmp	.+394    	; 0x1990 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1806:	ab e3       	ldi	r26, 0x3B	; 59
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	eb e3       	ldi	r30, 0x3B	; 59
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 2e       	mov	r0, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <DIO_u8SetPinValue+0xe2>
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	0a 94       	dec	r0
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <DIO_u8SetPinValue+0xde>
    1828:	80 95       	com	r24
    182a:	84 23       	and	r24, r20
    182c:	8c 93       	st	X, r24
    182e:	b0 c0       	rjmp	.+352    	; 0x1990 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1830:	19 82       	std	Y+1, r1	; 0x01
    1832:	ae c0       	rjmp	.+348    	; 0x1990 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    1834:	8c 81       	ldd	r24, Y+4	; 0x04
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	3a 87       	std	Y+10, r19	; 0x0a
    183c:	29 87       	std	Y+9, r18	; 0x09
    183e:	89 85       	ldd	r24, Y+9	; 0x09
    1840:	9a 85       	ldd	r25, Y+10	; 0x0a
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	c9 f0       	breq	.+50     	; 0x1878 <DIO_u8SetPinValue+0x136>
    1846:	29 85       	ldd	r18, Y+9	; 0x09
    1848:	3a 85       	ldd	r19, Y+10	; 0x0a
    184a:	21 30       	cpi	r18, 0x01	; 1
    184c:	31 05       	cpc	r19, r1
    184e:	49 f5       	brne	.+82     	; 0x18a2 <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1850:	a8 e3       	ldi	r26, 0x38	; 56
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e8 e3       	ldi	r30, 0x38	; 56
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	48 2f       	mov	r20, r24
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <DIO_u8SetPinValue+0x12c>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <DIO_u8SetPinValue+0x128>
    1872:	84 2b       	or	r24, r20
    1874:	8c 93       	st	X, r24
    1876:	8c c0       	rjmp	.+280    	; 0x1990 <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1878:	a8 e3       	ldi	r26, 0x38	; 56
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e8 e3       	ldi	r30, 0x38	; 56
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <DIO_u8SetPinValue+0x154>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <DIO_u8SetPinValue+0x150>
    189a:	80 95       	com	r24
    189c:	84 23       	and	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	77 c0       	rjmp	.+238    	; 0x1990 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    18a2:	19 82       	std	Y+1, r1	; 0x01
    18a4:	75 c0       	rjmp	.+234    	; 0x1990 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	38 87       	std	Y+8, r19	; 0x08
    18ae:	2f 83       	std	Y+7, r18	; 0x07
    18b0:	8f 81       	ldd	r24, Y+7	; 0x07
    18b2:	98 85       	ldd	r25, Y+8	; 0x08
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	31 f0       	breq	.+12     	; 0x18c4 <DIO_u8SetPinValue+0x182>
    18b8:	2f 81       	ldd	r18, Y+7	; 0x07
    18ba:	38 85       	ldd	r19, Y+8	; 0x08
    18bc:	21 30       	cpi	r18, 0x01	; 1
    18be:	31 05       	cpc	r19, r1
    18c0:	b1 f0       	breq	.+44     	; 0x18ee <DIO_u8SetPinValue+0x1ac>
    18c2:	29 c0       	rjmp	.+82     	; 0x1916 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    18c4:	a5 e3       	ldi	r26, 0x35	; 53
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e5 e3       	ldi	r30, 0x35	; 53
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	48 2f       	mov	r20, r24
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	02 2e       	mov	r0, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <DIO_u8SetPinValue+0x1a0>
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	0a 94       	dec	r0
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <DIO_u8SetPinValue+0x19c>
    18e6:	80 95       	com	r24
    18e8:	84 23       	and	r24, r20
    18ea:	8c 93       	st	X, r24
    18ec:	51 c0       	rjmp	.+162    	; 0x1990 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    18ee:	a5 e3       	ldi	r26, 0x35	; 53
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e5 e3       	ldi	r30, 0x35	; 53
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	48 2f       	mov	r20, r24
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	02 2e       	mov	r0, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <DIO_u8SetPinValue+0x1ca>
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	0a 94       	dec	r0
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <DIO_u8SetPinValue+0x1c6>
    1910:	84 2b       	or	r24, r20
    1912:	8c 93       	st	X, r24
    1914:	3d c0       	rjmp	.+122    	; 0x1990 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1916:	19 82       	std	Y+1, r1	; 0x01
    1918:	3b c0       	rjmp	.+118    	; 0x1990 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	3e 83       	std	Y+6, r19	; 0x06
    1922:	2d 83       	std	Y+5, r18	; 0x05
    1924:	8d 81       	ldd	r24, Y+5	; 0x05
    1926:	9e 81       	ldd	r25, Y+6	; 0x06
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	31 f0       	breq	.+12     	; 0x1938 <DIO_u8SetPinValue+0x1f6>
    192c:	2d 81       	ldd	r18, Y+5	; 0x05
    192e:	3e 81       	ldd	r19, Y+6	; 0x06
    1930:	21 30       	cpi	r18, 0x01	; 1
    1932:	31 05       	cpc	r19, r1
    1934:	b1 f0       	breq	.+44     	; 0x1962 <DIO_u8SetPinValue+0x220>
    1936:	29 c0       	rjmp	.+82     	; 0x198a <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1938:	a2 e3       	ldi	r26, 0x32	; 50
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e2 e3       	ldi	r30, 0x32	; 50
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <DIO_u8SetPinValue+0x214>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <DIO_u8SetPinValue+0x210>
    195a:	80 95       	com	r24
    195c:	84 23       	and	r24, r20
    195e:	8c 93       	st	X, r24
    1960:	17 c0       	rjmp	.+46     	; 0x1990 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1962:	a2 e3       	ldi	r26, 0x32	; 50
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e2 e3       	ldi	r30, 0x32	; 50
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	48 2f       	mov	r20, r24
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	02 2e       	mov	r0, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <DIO_u8SetPinValue+0x23e>
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	0a 94       	dec	r0
    1982:	e2 f7       	brpl	.-8      	; 0x197c <DIO_u8SetPinValue+0x23a>
    1984:	84 2b       	or	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	03 c0       	rjmp	.+6      	; 0x1990 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    198a:	19 82       	std	Y+1, r1	; 0x01
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		 Local_u8ErrorState = STD_TYPES_NOK;
    198e:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1990:	89 81       	ldd	r24, Y+1	; 0x01
}
    1992:	2e 96       	adiw	r28, 0x0e	; 14
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	28 97       	sbiw	r28, 0x08	; 8
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	8b 83       	std	Y+3, r24	; 0x03
    19ba:	6c 83       	std	Y+4, r22	; 0x04
    19bc:	5e 83       	std	Y+6, r21	; 0x06
    19be:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	84 30       	cpi	r24, 0x04	; 4
    19c8:	08 f0       	brcs	.+2      	; 0x19cc <DIO_u8GetPinValue+0x28>
    19ca:	9f c0       	rjmp	.+318    	; 0x1b0a <DIO_u8GetPinValue+0x166>
    19cc:	8c 81       	ldd	r24, Y+4	; 0x04
    19ce:	88 30       	cpi	r24, 0x08	; 8
    19d0:	08 f0       	brcs	.+2      	; 0x19d4 <DIO_u8GetPinValue+0x30>
    19d2:	9b c0       	rjmp	.+310    	; 0x1b0a <DIO_u8GetPinValue+0x166>
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	09 f4       	brne	.+2      	; 0x19de <DIO_u8GetPinValue+0x3a>
    19dc:	96 c0       	rjmp	.+300    	; 0x1b0a <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	38 87       	std	Y+8, r19	; 0x08
    19e6:	2f 83       	std	Y+7, r18	; 0x07
    19e8:	4f 81       	ldd	r20, Y+7	; 0x07
    19ea:	58 85       	ldd	r21, Y+8	; 0x08
    19ec:	41 30       	cpi	r20, 0x01	; 1
    19ee:	51 05       	cpc	r21, r1
    19f0:	a9 f1       	breq	.+106    	; 0x1a5c <DIO_u8GetPinValue+0xb8>
    19f2:	8f 81       	ldd	r24, Y+7	; 0x07
    19f4:	98 85       	ldd	r25, Y+8	; 0x08
    19f6:	82 30       	cpi	r24, 0x02	; 2
    19f8:	91 05       	cpc	r25, r1
    19fa:	34 f4       	brge	.+12     	; 0x1a08 <DIO_u8GetPinValue+0x64>
    19fc:	2f 81       	ldd	r18, Y+7	; 0x07
    19fe:	38 85       	ldd	r19, Y+8	; 0x08
    1a00:	21 15       	cp	r18, r1
    1a02:	31 05       	cpc	r19, r1
    1a04:	71 f0       	breq	.+28     	; 0x1a22 <DIO_u8GetPinValue+0x7e>
    1a06:	82 c0       	rjmp	.+260    	; 0x1b0c <DIO_u8GetPinValue+0x168>
    1a08:	4f 81       	ldd	r20, Y+7	; 0x07
    1a0a:	58 85       	ldd	r21, Y+8	; 0x08
    1a0c:	42 30       	cpi	r20, 0x02	; 2
    1a0e:	51 05       	cpc	r21, r1
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <DIO_u8GetPinValue+0x70>
    1a12:	41 c0       	rjmp	.+130    	; 0x1a96 <DIO_u8GetPinValue+0xf2>
    1a14:	8f 81       	ldd	r24, Y+7	; 0x07
    1a16:	98 85       	ldd	r25, Y+8	; 0x08
    1a18:	83 30       	cpi	r24, 0x03	; 3
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <DIO_u8GetPinValue+0x7c>
    1a1e:	58 c0       	rjmp	.+176    	; 0x1ad0 <DIO_u8GetPinValue+0x12c>
    1a20:	75 c0       	rjmp	.+234    	; 0x1b0c <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    1a22:	e9 e3       	ldi	r30, 0x39	; 57
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2e:	88 2f       	mov	r24, r24
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	a9 01       	movw	r20, r18
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <DIO_u8GetPinValue+0x96>
    1a36:	55 95       	asr	r21
    1a38:	47 95       	ror	r20
    1a3a:	8a 95       	dec	r24
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <DIO_u8GetPinValue+0x92>
    1a3e:	ca 01       	movw	r24, r20
    1a40:	81 70       	andi	r24, 0x01	; 1
    1a42:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	88 23       	and	r24, r24
    1a48:	21 f4       	brne	.+8      	; 0x1a52 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1a4a:	ed 81       	ldd	r30, Y+5	; 0x05
    1a4c:	fe 81       	ldd	r31, Y+6	; 0x06
    1a4e:	10 82       	st	Z, r1
    1a50:	5d c0       	rjmp	.+186    	; 0x1b0c <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1a52:	ed 81       	ldd	r30, Y+5	; 0x05
    1a54:	fe 81       	ldd	r31, Y+6	; 0x06
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	80 83       	st	Z, r24
    1a5a:	58 c0       	rjmp	.+176    	; 0x1b0c <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    1a5c:	e6 e3       	ldi	r30, 0x36	; 54
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	8c 81       	ldd	r24, Y+4	; 0x04
    1a68:	88 2f       	mov	r24, r24
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	a9 01       	movw	r20, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <DIO_u8GetPinValue+0xd0>
    1a70:	55 95       	asr	r21
    1a72:	47 95       	ror	r20
    1a74:	8a 95       	dec	r24
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <DIO_u8GetPinValue+0xcc>
    1a78:	ca 01       	movw	r24, r20
    1a7a:	81 70       	andi	r24, 0x01	; 1
    1a7c:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	88 23       	and	r24, r24
    1a82:	21 f4       	brne	.+8      	; 0x1a8c <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1a84:	ed 81       	ldd	r30, Y+5	; 0x05
    1a86:	fe 81       	ldd	r31, Y+6	; 0x06
    1a88:	10 82       	st	Z, r1
    1a8a:	40 c0       	rjmp	.+128    	; 0x1b0c <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1a8c:	ed 81       	ldd	r30, Y+5	; 0x05
    1a8e:	fe 81       	ldd	r31, Y+6	; 0x06
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	80 83       	st	Z, r24
    1a94:	3b c0       	rjmp	.+118    	; 0x1b0c <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    1a96:	e3 e3       	ldi	r30, 0x33	; 51
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa2:	88 2f       	mov	r24, r24
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	a9 01       	movw	r20, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <DIO_u8GetPinValue+0x10a>
    1aaa:	55 95       	asr	r21
    1aac:	47 95       	ror	r20
    1aae:	8a 95       	dec	r24
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <DIO_u8GetPinValue+0x106>
    1ab2:	ca 01       	movw	r24, r20
    1ab4:	81 70       	andi	r24, 0x01	; 1
    1ab6:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	88 23       	and	r24, r24
    1abc:	21 f4       	brne	.+8      	; 0x1ac6 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1abe:	ed 81       	ldd	r30, Y+5	; 0x05
    1ac0:	fe 81       	ldd	r31, Y+6	; 0x06
    1ac2:	10 82       	st	Z, r1
    1ac4:	23 c0       	rjmp	.+70     	; 0x1b0c <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1ac6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ac8:	fe 81       	ldd	r31, Y+6	; 0x06
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	80 83       	st	Z, r24
    1ace:	1e c0       	rjmp	.+60     	; 0x1b0c <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    1ad0:	e0 e3       	ldi	r30, 0x30	; 48
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	88 2f       	mov	r24, r24
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a9 01       	movw	r20, r18
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <DIO_u8GetPinValue+0x144>
    1ae4:	55 95       	asr	r21
    1ae6:	47 95       	ror	r20
    1ae8:	8a 95       	dec	r24
    1aea:	e2 f7       	brpl	.-8      	; 0x1ae4 <DIO_u8GetPinValue+0x140>
    1aec:	ca 01       	movw	r24, r20
    1aee:	81 70       	andi	r24, 0x01	; 1
    1af0:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	88 23       	and	r24, r24
    1af6:	21 f4       	brne	.+8      	; 0x1b00 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1af8:	ed 81       	ldd	r30, Y+5	; 0x05
    1afa:	fe 81       	ldd	r31, Y+6	; 0x06
    1afc:	10 82       	st	Z, r1
    1afe:	06 c0       	rjmp	.+12     	; 0x1b0c <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1b00:	ed 81       	ldd	r30, Y+5	; 0x05
    1b02:	fe 81       	ldd	r31, Y+6	; 0x06
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	80 83       	st	Z, r24
    1b08:	01 c0       	rjmp	.+2      	; 0x1b0c <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1b0a:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b0e:	28 96       	adiw	r28, 0x08	; 8
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	2d 97       	sbiw	r28, 0x0d	; 13
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	3d 87       	std	Y+13, r19	; 0x0d
    1b40:	2c 87       	std	Y+12, r18	; 0x0c
    1b42:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b44:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	91 05       	cpc	r25, r1
    1b4a:	71 f1       	breq	.+92     	; 0x1ba8 <DIO_u8SetPortDirection+0x88>
    1b4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b4e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b50:	22 30       	cpi	r18, 0x02	; 2
    1b52:	31 05       	cpc	r19, r1
    1b54:	2c f4       	brge	.+10     	; 0x1b60 <DIO_u8SetPortDirection+0x40>
    1b56:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b58:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	69 f0       	breq	.+26     	; 0x1b78 <DIO_u8SetPortDirection+0x58>
    1b5e:	69 c0       	rjmp	.+210    	; 0x1c32 <DIO_u8SetPortDirection+0x112>
    1b60:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b62:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b64:	22 30       	cpi	r18, 0x02	; 2
    1b66:	31 05       	cpc	r19, r1
    1b68:	b1 f1       	breq	.+108    	; 0x1bd6 <DIO_u8SetPortDirection+0xb6>
    1b6a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b6c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b6e:	83 30       	cpi	r24, 0x03	; 3
    1b70:	91 05       	cpc	r25, r1
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <DIO_u8SetPortDirection+0x56>
    1b74:	47 c0       	rjmp	.+142    	; 0x1c04 <DIO_u8SetPortDirection+0xe4>
    1b76:	5d c0       	rjmp	.+186    	; 0x1c32 <DIO_u8SetPortDirection+0x112>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	3b 87       	std	Y+11, r19	; 0x0b
    1b80:	2a 87       	std	Y+10, r18	; 0x0a
    1b82:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b84:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	51 f0       	breq	.+20     	; 0x1b9e <DIO_u8SetPortDirection+0x7e>
    1b8a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b8c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b8e:	21 30       	cpi	r18, 0x01	; 1
    1b90:	31 05       	cpc	r19, r1
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <DIO_u8SetPortDirection+0x76>
    1b94:	50 c0       	rjmp	.+160    	; 0x1c36 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    1b96:	ea e3       	ldi	r30, 0x3A	; 58
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	10 82       	st	Z, r1
    1b9c:	4c c0       	rjmp	.+152    	; 0x1c36 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    1b9e:	ea e3       	ldi	r30, 0x3A	; 58
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	8f ef       	ldi	r24, 0xFF	; 255
    1ba4:	80 83       	st	Z, r24
    1ba6:	47 c0       	rjmp	.+142    	; 0x1c36 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	39 87       	std	Y+9, r19	; 0x09
    1bb0:	28 87       	std	Y+8, r18	; 0x08
    1bb2:	88 85       	ldd	r24, Y+8	; 0x08
    1bb4:	99 85       	ldd	r25, Y+9	; 0x09
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	49 f0       	breq	.+18     	; 0x1bcc <DIO_u8SetPortDirection+0xac>
    1bba:	28 85       	ldd	r18, Y+8	; 0x08
    1bbc:	39 85       	ldd	r19, Y+9	; 0x09
    1bbe:	21 30       	cpi	r18, 0x01	; 1
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	c9 f5       	brne	.+114    	; 0x1c36 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    1bc4:	e7 e3       	ldi	r30, 0x37	; 55
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	10 82       	st	Z, r1
    1bca:	35 c0       	rjmp	.+106    	; 0x1c36 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    1bcc:	e7 e3       	ldi	r30, 0x37	; 55
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	8f ef       	ldi	r24, 0xFF	; 255
    1bd2:	80 83       	st	Z, r24
    1bd4:	30 c0       	rjmp	.+96     	; 0x1c36 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	3f 83       	std	Y+7, r19	; 0x07
    1bde:	2e 83       	std	Y+6, r18	; 0x06
    1be0:	8e 81       	ldd	r24, Y+6	; 0x06
    1be2:	9f 81       	ldd	r25, Y+7	; 0x07
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	49 f0       	breq	.+18     	; 0x1bfa <DIO_u8SetPortDirection+0xda>
    1be8:	2e 81       	ldd	r18, Y+6	; 0x06
    1bea:	3f 81       	ldd	r19, Y+7	; 0x07
    1bec:	21 30       	cpi	r18, 0x01	; 1
    1bee:	31 05       	cpc	r19, r1
    1bf0:	11 f5       	brne	.+68     	; 0x1c36 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    1bf2:	e4 e3       	ldi	r30, 0x34	; 52
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	10 82       	st	Z, r1
    1bf8:	1e c0       	rjmp	.+60     	; 0x1c36 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    1bfa:	e4 e3       	ldi	r30, 0x34	; 52
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	8f ef       	ldi	r24, 0xFF	; 255
    1c00:	80 83       	st	Z, r24
    1c02:	19 c0       	rjmp	.+50     	; 0x1c36 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	3d 83       	std	Y+5, r19	; 0x05
    1c0c:	2c 83       	std	Y+4, r18	; 0x04
    1c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c10:	9d 81       	ldd	r25, Y+5	; 0x05
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	49 f0       	breq	.+18     	; 0x1c28 <DIO_u8SetPortDirection+0x108>
    1c16:	2c 81       	ldd	r18, Y+4	; 0x04
    1c18:	3d 81       	ldd	r19, Y+5	; 0x05
    1c1a:	21 30       	cpi	r18, 0x01	; 1
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	59 f4       	brne	.+22     	; 0x1c36 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    1c20:	e1 e3       	ldi	r30, 0x31	; 49
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	10 82       	st	Z, r1
    1c26:	07 c0       	rjmp	.+14     	; 0x1c36 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    1c28:	e1 e3       	ldi	r30, 0x31	; 49
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	80 83       	st	Z, r24
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;
		default:
			return STD_TYPES_NOK;
    1c32:	1b 82       	std	Y+3, r1	; 0x03
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <DIO_u8SetPortDirection+0x11a>
			break;
	}
	return STD_TYPES_OK;
    1c36:	31 e0       	ldi	r19, 0x01	; 1
    1c38:	3b 83       	std	Y+3, r19	; 0x03
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c3c:	2d 96       	adiw	r28, 0x0d	; 13
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <DIO_u8SetPortValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortVlaue)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <DIO_u8SetPortValue+0x6>
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <DIO_u8SetPortValue+0x8>
    1c56:	0f 92       	push	r0
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId){
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	3d 83       	std	Y+5, r19	; 0x05
    1c68:	2c 83       	std	Y+4, r18	; 0x04
    1c6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	91 05       	cpc	r25, r1
    1c72:	d1 f0       	breq	.+52     	; 0x1ca8 <DIO_u8SetPortValue+0x5a>
    1c74:	2c 81       	ldd	r18, Y+4	; 0x04
    1c76:	3d 81       	ldd	r19, Y+5	; 0x05
    1c78:	22 30       	cpi	r18, 0x02	; 2
    1c7a:	31 05       	cpc	r19, r1
    1c7c:	2c f4       	brge	.+10     	; 0x1c88 <DIO_u8SetPortValue+0x3a>
    1c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c80:	9d 81       	ldd	r25, Y+5	; 0x05
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	61 f0       	breq	.+24     	; 0x1c9e <DIO_u8SetPortValue+0x50>
    1c86:	1f c0       	rjmp	.+62     	; 0x1cc6 <DIO_u8SetPortValue+0x78>
    1c88:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8c:	22 30       	cpi	r18, 0x02	; 2
    1c8e:	31 05       	cpc	r19, r1
    1c90:	81 f0       	breq	.+32     	; 0x1cb2 <DIO_u8SetPortValue+0x64>
    1c92:	8c 81       	ldd	r24, Y+4	; 0x04
    1c94:	9d 81       	ldd	r25, Y+5	; 0x05
    1c96:	83 30       	cpi	r24, 0x03	; 3
    1c98:	91 05       	cpc	r25, r1
    1c9a:	81 f0       	breq	.+32     	; 0x1cbc <DIO_u8SetPortValue+0x6e>
    1c9c:	14 c0       	rjmp	.+40     	; 0x1cc6 <DIO_u8SetPortValue+0x78>
	case DIO_u8_PORTA:
		DIO_u8_PORTA_REG = Copy_u8PortVlaue;
    1c9e:	eb e3       	ldi	r30, 0x3B	; 59
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	80 83       	st	Z, r24
    1ca6:	11 c0       	rjmp	.+34     	; 0x1cca <DIO_u8SetPortValue+0x7c>
		break;
	case DIO_u8_PORTB:
		DIO_u8_PORTB_REG = Copy_u8PortVlaue;
    1ca8:	e8 e3       	ldi	r30, 0x38	; 56
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	80 83       	st	Z, r24
    1cb0:	0c c0       	rjmp	.+24     	; 0x1cca <DIO_u8SetPortValue+0x7c>
		break;
	case DIO_u8_PORTC:
		DIO_u8_PORTC_REG = Copy_u8PortVlaue;
    1cb2:	e5 e3       	ldi	r30, 0x35	; 53
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	80 83       	st	Z, r24
    1cba:	07 c0       	rjmp	.+14     	; 0x1cca <DIO_u8SetPortValue+0x7c>
		break;
	case DIO_u8_PORTD:
		DIO_u8_PORTD_REG = Copy_u8PortVlaue;
    1cbc:	e2 e3       	ldi	r30, 0x32	; 50
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	80 83       	st	Z, r24
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <DIO_u8SetPortValue+0x7c>
		break;
	default:
		return STD_TYPES_NOK;
    1cc6:	1b 82       	std	Y+3, r1	; 0x03
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <DIO_u8SetPortValue+0x80>
		break;
	}
	return 1;
    1cca:	91 e0       	ldi	r25, 0x01	; 1
    1ccc:	9b 83       	std	Y+3, r25	; 0x03
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <DIO_u8GetPortValue+0x6>
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <DIO_u8GetPortValue+0x8>
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <DIO_u8GetPortValue+0xa>
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	8a 83       	std	Y+2, r24	; 0x02
    1cf0:	7c 83       	std	Y+4, r23	; 0x04
    1cf2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	84 30       	cpi	r24, 0x04	; 4
    1cfc:	08 f0       	brcs	.+2      	; 0x1d00 <DIO_u8GetPortValue+0x20>
    1cfe:	3f c0       	rjmp	.+126    	; 0x1d7e <DIO_u8GetPortValue+0x9e>
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	9c 81       	ldd	r25, Y+4	; 0x04
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	d9 f1       	breq	.+118    	; 0x1d7e <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	3e 83       	std	Y+6, r19	; 0x06
    1d10:	2d 83       	std	Y+5, r18	; 0x05
    1d12:	8d 81       	ldd	r24, Y+5	; 0x05
    1d14:	9e 81       	ldd	r25, Y+6	; 0x06
    1d16:	81 30       	cpi	r24, 0x01	; 1
    1d18:	91 05       	cpc	r25, r1
    1d1a:	e1 f0       	breq	.+56     	; 0x1d54 <DIO_u8GetPortValue+0x74>
    1d1c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d1e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d20:	22 30       	cpi	r18, 0x02	; 2
    1d22:	31 05       	cpc	r19, r1
    1d24:	2c f4       	brge	.+10     	; 0x1d30 <DIO_u8GetPortValue+0x50>
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	61 f0       	breq	.+24     	; 0x1d46 <DIO_u8GetPortValue+0x66>
    1d2e:	28 c0       	rjmp	.+80     	; 0x1d80 <DIO_u8GetPortValue+0xa0>
    1d30:	2d 81       	ldd	r18, Y+5	; 0x05
    1d32:	3e 81       	ldd	r19, Y+6	; 0x06
    1d34:	22 30       	cpi	r18, 0x02	; 2
    1d36:	31 05       	cpc	r19, r1
    1d38:	a1 f0       	breq	.+40     	; 0x1d62 <DIO_u8GetPortValue+0x82>
    1d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3e:	83 30       	cpi	r24, 0x03	; 3
    1d40:	91 05       	cpc	r25, r1
    1d42:	b1 f0       	breq	.+44     	; 0x1d70 <DIO_u8GetPortValue+0x90>
    1d44:	1d c0       	rjmp	.+58     	; 0x1d80 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    1d46:	e9 e3       	ldi	r30, 0x39	; 57
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d50:	80 83       	st	Z, r24
    1d52:	16 c0       	rjmp	.+44     	; 0x1d80 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    1d54:	e6 e3       	ldi	r30, 0x36	; 54
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d5e:	80 83       	st	Z, r24
    1d60:	0f c0       	rjmp	.+30     	; 0x1d80 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    1d62:	e3 e3       	ldi	r30, 0x33	; 51
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	eb 81       	ldd	r30, Y+3	; 0x03
    1d6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d6c:	80 83       	st	Z, r24
    1d6e:	08 c0       	rjmp	.+16     	; 0x1d80 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    1d70:	e0 e3       	ldi	r30, 0x30	; 48
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	eb 81       	ldd	r30, Y+3	; 0x03
    1d78:	fc 81       	ldd	r31, Y+4	; 0x04
    1d7a:	80 83       	st	Z, r24
    1d7c:	01 c0       	rjmp	.+2      	; 0x1d80 <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1d7e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1d82:	26 96       	adiw	r28, 0x06	; 6
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <ADC_voidInit>:
static void(*ADC_pfNotification)(u16) = NULL;
/* ADC busy flag */
static u8 ADC_u8BusyFlag = 0;

void ADC_voidInit(void)
{
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
		2- Right Adjust
		3- Disable AutoTrigger
		4- Select CLK/64
		5- Enable ADC
	 */
	CLR_BIT(ADC_u8_ADMUX_REG,7);
    1d9c:	a7 e2       	ldi	r26, 0x27	; 39
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e7 e2       	ldi	r30, 0x27	; 39
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	8f 77       	andi	r24, 0x7F	; 127
    1da8:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
    1daa:	a7 e2       	ldi	r26, 0x27	; 39
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e7 e2       	ldi	r30, 0x27	; 39
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	80 64       	ori	r24, 0x40	; 64
    1db6:	8c 93       	st	X, r24

	CLR_BIT(ADC_u8_ADMUX_REG,5);
    1db8:	a7 e2       	ldi	r26, 0x27	; 39
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e7 e2       	ldi	r30, 0x27	; 39
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8f 7d       	andi	r24, 0xDF	; 223
    1dc4:	8c 93       	st	X, r24

	CLR_BIT(ADC_u8_ADCSRA_REG,5);
    1dc6:	a6 e2       	ldi	r26, 0x26	; 38
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e6 e2       	ldi	r30, 0x26	; 38
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	8f 7d       	andi	r24, 0xDF	; 223
    1dd2:	8c 93       	st	X, r24

	SET_BIT(ADC_u8_ADCSRA_REG,2);
    1dd4:	a6 e2       	ldi	r26, 0x26	; 38
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e6 e2       	ldi	r30, 0x26	; 38
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	84 60       	ori	r24, 0x04	; 4
    1de0:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
    1de2:	a6 e2       	ldi	r26, 0x26	; 38
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e6 e2       	ldi	r30, 0x26	; 38
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	82 60       	ori	r24, 0x02	; 2
    1dee:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
    1df0:	a6 e2       	ldi	r26, 0x26	; 38
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e6 e2       	ldi	r30, 0x26	; 38
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	8e 7f       	andi	r24, 0xFE	; 254
    1dfc:	8c 93       	st	X, r24

	SET_BIT(ADC_u8_ADCSRA_REG,7);
    1dfe:	a6 e2       	ldi	r26, 0x26	; 38
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e6 e2       	ldi	r30, 0x26	; 38
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	80 68       	ori	r24, 0x80	; 128
    1e0a:	8c 93       	st	X, r24
}
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <ADC_u8GetDigitalValueSynchNonBlocking>:

u8   ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNb, u16 * Copy_pu16DigitalValue)
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	28 97       	sbiw	r28, 0x08	; 8
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	8e 83       	std	Y+6, r24	; 0x06
    1e28:	78 87       	std	Y+8, r23	; 0x08
    1e2a:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    1e30:	19 82       	std	Y+1, r1	; 0x01
    1e32:	1a 82       	std	Y+2, r1	; 0x02
    1e34:	1b 82       	std	Y+3, r1	; 0x03
    1e36:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNb < 32) && (Copy_pu16DigitalValue != NULL))
    1e38:	8e 81       	ldd	r24, Y+6	; 0x06
    1e3a:	80 32       	cpi	r24, 0x20	; 32
    1e3c:	08 f0       	brcs	.+2      	; 0x1e40 <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
    1e3e:	5b c0       	rjmp	.+182    	; 0x1ef6 <ADC_u8GetDigitalValueSynchNonBlocking+0xe4>
    1e40:	8f 81       	ldd	r24, Y+7	; 0x07
    1e42:	98 85       	ldd	r25, Y+8	; 0x08
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
    1e48:	56 c0       	rjmp	.+172    	; 0x1ef6 <ADC_u8GetDigitalValueSynchNonBlocking+0xe4>
	{
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    1e4a:	a7 e2       	ldi	r26, 0x27	; 39
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e7 e2       	ldi	r30, 0x27	; 39
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	80 7e       	andi	r24, 0xE0	; 224
    1e56:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
    1e58:	a7 e2       	ldi	r26, 0x27	; 39
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e7 e2       	ldi	r30, 0x27	; 39
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	90 81       	ld	r25, Z
    1e62:	8e 81       	ldd	r24, Y+6	; 0x06
    1e64:	89 2b       	or	r24, r25
    1e66:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
    1e68:	a6 e2       	ldi	r26, 0x26	; 38
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e6 e2       	ldi	r30, 0x26	; 38
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	80 64       	ori	r24, 0x40	; 64
    1e74:	8c 93       	st	X, r24
    1e76:	0b c0       	rjmp	.+22     	; 0x1e8e <ADC_u8GetDigitalValueSynchNonBlocking+0x7c>
		/* Wait flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)== 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
		{
			Local_u32TimeOutCounter++;
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7c:	ab 81       	ldd	r26, Y+3	; 0x03
    1e7e:	bc 81       	ldd	r27, Y+4	; 0x04
    1e80:	01 96       	adiw	r24, 0x01	; 1
    1e82:	a1 1d       	adc	r26, r1
    1e84:	b1 1d       	adc	r27, r1
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	ab 83       	std	Y+3, r26	; 0x03
    1e8c:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/* Wait flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)== 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
    1e8e:	e6 e2       	ldi	r30, 0x26	; 38
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	82 95       	swap	r24
    1e96:	8f 70       	andi	r24, 0x0F	; 15
    1e98:	88 2f       	mov	r24, r24
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	81 70       	andi	r24, 0x01	; 1
    1e9e:	90 70       	andi	r25, 0x00	; 0
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	61 f4       	brne	.+24     	; 0x1ebc <ADC_u8GetDigitalValueSynchNonBlocking+0xaa>
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea8:	ab 81       	ldd	r26, Y+3	; 0x03
    1eaa:	bc 81       	ldd	r27, Y+4	; 0x04
    1eac:	80 35       	cpi	r24, 0x50	; 80
    1eae:	23 ec       	ldi	r18, 0xC3	; 195
    1eb0:	92 07       	cpc	r25, r18
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	a2 07       	cpc	r26, r18
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	b2 07       	cpc	r27, r18
    1eba:	f0 f2       	brcs	.-68     	; 0x1e78 <ADC_u8GetDigitalValueSynchNonBlocking+0x66>
		{
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)!= 0)//(Local_u32TimeOutCounter<ADC_u32_TIME_OUT_MAX_VALUE)
    1ebc:	e6 e2       	ldi	r30, 0x26	; 38
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	82 95       	swap	r24
    1ec4:	8f 70       	andi	r24, 0x0F	; 15
    1ec6:	88 2f       	mov	r24, r24
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	81 70       	andi	r24, 0x01	; 1
    1ecc:	90 70       	andi	r25, 0x00	; 0
    1ece:	88 23       	and	r24, r24
    1ed0:	81 f0       	breq	.+32     	; 0x1ef2 <ADC_u8GetDigitalValueSynchNonBlocking+0xe0>
		{
			/* Clear flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
    1ed2:	a6 e2       	ldi	r26, 0x26	; 38
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e6 e2       	ldi	r30, 0x26	; 38
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	80 61       	ori	r24, 0x10	; 16
    1ede:	8c 93       	st	X, r24
			/* Read the Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
    1ee0:	e4 e2       	ldi	r30, 0x24	; 36
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	ef 81       	ldd	r30, Y+7	; 0x07
    1eea:	f8 85       	ldd	r31, Y+8	; 0x08
    1eec:	91 83       	std	Z+1, r25	; 0x01
    1eee:	80 83       	st	Z, r24
    1ef0:	03 c0       	rjmp	.+6      	; 0x1ef8 <ADC_u8GetDigitalValueSynchNonBlocking+0xe6>
		}
		else
		{
			Local_u8ErrorState = STD_TYPES_NOK;
    1ef2:	1d 82       	std	Y+5, r1	; 0x05
    1ef4:	01 c0       	rjmp	.+2      	; 0x1ef8 <ADC_u8GetDigitalValueSynchNonBlocking+0xe6>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1ef6:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1efa:	28 96       	adiw	r28, 0x08	; 8
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <ADC_u8GetDigitalValueAsynch>:
u8   ADC_u8GetDigitalValueAsynch          (u8 Copy_u8ChannelNb,void(*Copy_pfNotification)(u16))
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <ADC_u8GetDigitalValueAsynch+0x6>
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <ADC_u8GetDigitalValueAsynch+0x8>
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	8a 83       	std	Y+2, r24	; 0x02
    1f1a:	7c 83       	std	Y+4, r23	; 0x04
    1f1c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32) && (Copy_pfNotification != NULL) && (ADC_u8BusyFlag == 0))
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	80 32       	cpi	r24, 0x20	; 32
    1f26:	78 f5       	brcc	.+94     	; 0x1f86 <ADC_u8GetDigitalValueAsynch+0x7a>
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	59 f1       	breq	.+86     	; 0x1f86 <ADC_u8GetDigitalValueAsynch+0x7a>
    1f30:	80 91 90 00 	lds	r24, 0x0090
    1f34:	88 23       	and	r24, r24
    1f36:	39 f5       	brne	.+78     	; 0x1f86 <ADC_u8GetDigitalValueAsynch+0x7a>
	{
		/* Set Flag to make ADC is Busy */
		ADC_u8BusyFlag = 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	80 93 90 00 	sts	0x0090, r24
		/* update Global Pointer to a function */
		ADC_pfNotification = Copy_pfNotification;
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	9c 81       	ldd	r25, Y+4	; 0x04
    1f42:	90 93 8f 00 	sts	0x008F, r25
    1f46:	80 93 8e 00 	sts	0x008E, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
    1f4a:	a6 e2       	ldi	r26, 0x26	; 38
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e6 e2       	ldi	r30, 0x26	; 38
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	88 60       	ori	r24, 0x08	; 8
    1f56:	8c 93       	st	X, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    1f58:	a7 e2       	ldi	r26, 0x27	; 39
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e7 e2       	ldi	r30, 0x27	; 39
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	80 7e       	andi	r24, 0xE0	; 224
    1f64:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
    1f66:	a7 e2       	ldi	r26, 0x27	; 39
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e7 e2       	ldi	r30, 0x27	; 39
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	90 81       	ld	r25, Z
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	89 2b       	or	r24, r25
    1f74:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
    1f76:	a6 e2       	ldi	r26, 0x26	; 38
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e6 e2       	ldi	r30, 0x26	; 38
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	80 64       	ori	r24, 0x40	; 64
    1f82:	8c 93       	st	X, r24
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <ADC_u8GetDigitalValueAsynch+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1f86:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <ADC_u8GetADCRegValue>:
u8   ADC_u8GetADCRegValue                 (u16 * Copy_pu16ADCValue)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <ADC_u8GetADCRegValue+0x6>
    1f9e:	0f 92       	push	r0
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	9b 83       	std	Y+3, r25	; 0x03
    1fa6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCValue != NULL)
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	49 f0       	breq	.+18     	; 0x1fc6 <ADC_u8GetADCRegValue+0x2e>
	{
		/* Read ADC Register */
		*Copy_pu16ADCValue = ADC_u16_ADC_REG;
    1fb4:	e4 e2       	ldi	r30, 0x24	; 36
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	91 81       	ldd	r25, Z+1	; 0x01
    1fbc:	ea 81       	ldd	r30, Y+2	; 0x02
    1fbe:	fb 81       	ldd	r31, Y+3	; 0x03
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	80 83       	st	Z, r24
    1fc4:	01 c0       	rjmp	.+2      	; 0x1fc8 <ADC_u8GetADCRegValue+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1fc6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState ;
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <__vector_16>:

/* Prototype for ADC ISR */
void __vector_16(void)     __attribute__((signal));
void __vector_16(void)
{
    1fd6:	1f 92       	push	r1
    1fd8:	0f 92       	push	r0
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	0f 92       	push	r0
    1fde:	11 24       	eor	r1, r1
    1fe0:	2f 93       	push	r18
    1fe2:	3f 93       	push	r19
    1fe4:	4f 93       	push	r20
    1fe6:	5f 93       	push	r21
    1fe8:	6f 93       	push	r22
    1fea:	7f 93       	push	r23
    1fec:	8f 93       	push	r24
    1fee:	9f 93       	push	r25
    1ff0:	af 93       	push	r26
    1ff2:	bf 93       	push	r27
    1ff4:	ef 93       	push	r30
    1ff6:	ff 93       	push	r31
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
    2000:	80 91 8e 00 	lds	r24, 0x008E
    2004:	90 91 8f 00 	lds	r25, 0x008F
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	99 f0       	breq	.+38     	; 0x2032 <__vector_16+0x5c>
	{
		/* Clear Flag */
		ADC_u8BusyFlag = 0;
    200c:	10 92 90 00 	sts	0x0090, r1
		/* Clear PIE of ADC */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
    2010:	a6 e2       	ldi	r26, 0x26	; 38
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e6 e2       	ldi	r30, 0x26	; 38
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	87 7f       	andi	r24, 0xF7	; 247
    201c:	8c 93       	st	X, r24
		/* Calling Notification function */
		ADC_pfNotification(ADC_u16_ADC_REG);
    201e:	20 91 8e 00 	lds	r18, 0x008E
    2022:	30 91 8f 00 	lds	r19, 0x008F
    2026:	e4 e2       	ldi	r30, 0x24	; 36
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
    202e:	f9 01       	movw	r30, r18
    2030:	09 95       	icall
	}
}
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	ff 91       	pop	r31
    2038:	ef 91       	pop	r30
    203a:	bf 91       	pop	r27
    203c:	af 91       	pop	r26
    203e:	9f 91       	pop	r25
    2040:	8f 91       	pop	r24
    2042:	7f 91       	pop	r23
    2044:	6f 91       	pop	r22
    2046:	5f 91       	pop	r21
    2048:	4f 91       	pop	r20
    204a:	3f 91       	pop	r19
    204c:	2f 91       	pop	r18
    204e:	0f 90       	pop	r0
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	0f 90       	pop	r0
    2054:	1f 90       	pop	r1
    2056:	18 95       	reti

00002058 <STM_u8_Rotate_CW>:
#include "STM_interface.h"
#include "STM_config.h"


u8 STM_u8_Rotate_CW()
{
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	e8 97       	sbiw	r28, 0x38	; 56
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
	// FIRST STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_LOW);
    206c:	83 e0       	ldi	r24, 0x03	; 3
    206e:	64 e0       	ldi	r22, 0x04	; 4
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    2076:	83 e0       	ldi	r24, 0x03	; 3
    2078:	65 e0       	ldi	r22, 0x05	; 5
    207a:	41 e0       	ldi	r20, 0x01	; 1
    207c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    2080:	83 e0       	ldi	r24, 0x03	; 3
    2082:	66 e0       	ldi	r22, 0x06	; 6
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    208a:	83 e0       	ldi	r24, 0x03	; 3
    208c:	67 e0       	ldi	r22, 0x07	; 7
    208e:	41 e0       	ldi	r20, 0x01	; 1
    2090:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a0 e2       	ldi	r26, 0x20	; 32
    209a:	b1 e4       	ldi	r27, 0x41	; 65
    209c:	8d ab       	std	Y+53, r24	; 0x35
    209e:	9e ab       	std	Y+54, r25	; 0x36
    20a0:	af ab       	std	Y+55, r26	; 0x37
    20a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a4:	6d a9       	ldd	r22, Y+53	; 0x35
    20a6:	7e a9       	ldd	r23, Y+54	; 0x36
    20a8:	8f a9       	ldd	r24, Y+55	; 0x37
    20aa:	98 ad       	ldd	r25, Y+56	; 0x38
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4a ef       	ldi	r20, 0xFA	; 250
    20b2:	54 e4       	ldi	r21, 0x44	; 68
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	89 ab       	std	Y+49, r24	; 0x31
    20be:	9a ab       	std	Y+50, r25	; 0x32
    20c0:	ab ab       	std	Y+51, r26	; 0x33
    20c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20c4:	69 a9       	ldd	r22, Y+49	; 0x31
    20c6:	7a a9       	ldd	r23, Y+50	; 0x32
    20c8:	8b a9       	ldd	r24, Y+51	; 0x33
    20ca:	9c a9       	ldd	r25, Y+52	; 0x34
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e8       	ldi	r20, 0x80	; 128
    20d2:	5f e3       	ldi	r21, 0x3F	; 63
    20d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20d8:	88 23       	and	r24, r24
    20da:	2c f4       	brge	.+10     	; 0x20e6 <STM_u8_Rotate_CW+0x8e>
		__ticks = 1;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	98 ab       	std	Y+48, r25	; 0x30
    20e2:	8f a7       	std	Y+47, r24	; 0x2f
    20e4:	3f c0       	rjmp	.+126    	; 0x2164 <STM_u8_Rotate_CW+0x10c>
	else if (__tmp > 65535)
    20e6:	69 a9       	ldd	r22, Y+49	; 0x31
    20e8:	7a a9       	ldd	r23, Y+50	; 0x32
    20ea:	8b a9       	ldd	r24, Y+51	; 0x33
    20ec:	9c a9       	ldd	r25, Y+52	; 0x34
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	3f ef       	ldi	r19, 0xFF	; 255
    20f2:	4f e7       	ldi	r20, 0x7F	; 127
    20f4:	57 e4       	ldi	r21, 0x47	; 71
    20f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	4c f5       	brge	.+82     	; 0x2150 <STM_u8_Rotate_CW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fe:	6d a9       	ldd	r22, Y+53	; 0x35
    2100:	7e a9       	ldd	r23, Y+54	; 0x36
    2102:	8f a9       	ldd	r24, Y+55	; 0x37
    2104:	98 ad       	ldd	r25, Y+56	; 0x38
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e2       	ldi	r20, 0x20	; 32
    210c:	51 e4       	ldi	r21, 0x41	; 65
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	98 ab       	std	Y+48, r25	; 0x30
    2124:	8f a7       	std	Y+47, r24	; 0x2f
    2126:	0f c0       	rjmp	.+30     	; 0x2146 <STM_u8_Rotate_CW+0xee>
    2128:	88 ec       	ldi	r24, 0xC8	; 200
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	9e a7       	std	Y+46, r25	; 0x2e
    212e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2130:	8d a5       	ldd	r24, Y+45	; 0x2d
    2132:	9e a5       	ldd	r25, Y+46	; 0x2e
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <STM_u8_Rotate_CW+0xdc>
    2138:	9e a7       	std	Y+46, r25	; 0x2e
    213a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213c:	8f a5       	ldd	r24, Y+47	; 0x2f
    213e:	98 a9       	ldd	r25, Y+48	; 0x30
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	98 ab       	std	Y+48, r25	; 0x30
    2144:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2146:	8f a5       	ldd	r24, Y+47	; 0x2f
    2148:	98 a9       	ldd	r25, Y+48	; 0x30
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	69 f7       	brne	.-38     	; 0x2128 <STM_u8_Rotate_CW+0xd0>
    214e:	14 c0       	rjmp	.+40     	; 0x2178 <STM_u8_Rotate_CW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2150:	69 a9       	ldd	r22, Y+49	; 0x31
    2152:	7a a9       	ldd	r23, Y+50	; 0x32
    2154:	8b a9       	ldd	r24, Y+51	; 0x33
    2156:	9c a9       	ldd	r25, Y+52	; 0x34
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	98 ab       	std	Y+48, r25	; 0x30
    2162:	8f a7       	std	Y+47, r24	; 0x2f
    2164:	8f a5       	ldd	r24, Y+47	; 0x2f
    2166:	98 a9       	ldd	r25, Y+48	; 0x30
    2168:	9c a7       	std	Y+44, r25	; 0x2c
    216a:	8b a7       	std	Y+43, r24	; 0x2b
    216c:	8b a5       	ldd	r24, Y+43	; 0x2b
    216e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <STM_u8_Rotate_CW+0x118>
    2174:	9c a7       	std	Y+44, r25	; 0x2c
    2176:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	// SECOND STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    2178:	83 e0       	ldi	r24, 0x03	; 3
    217a:	64 e0       	ldi	r22, 0x04	; 4
    217c:	41 e0       	ldi	r20, 0x01	; 1
    217e:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_LOW);
    2182:	83 e0       	ldi	r24, 0x03	; 3
    2184:	65 e0       	ldi	r22, 0x05	; 5
    2186:	40 e0       	ldi	r20, 0x00	; 0
    2188:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    218c:	83 e0       	ldi	r24, 0x03	; 3
    218e:	66 e0       	ldi	r22, 0x06	; 6
    2190:	41 e0       	ldi	r20, 0x01	; 1
    2192:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    2196:	83 e0       	ldi	r24, 0x03	; 3
    2198:	67 e0       	ldi	r22, 0x07	; 7
    219a:	41 e0       	ldi	r20, 0x01	; 1
    219c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	a0 e2       	ldi	r26, 0x20	; 32
    21a6:	b1 e4       	ldi	r27, 0x41	; 65
    21a8:	8f a3       	std	Y+39, r24	; 0x27
    21aa:	98 a7       	std	Y+40, r25	; 0x28
    21ac:	a9 a7       	std	Y+41, r26	; 0x29
    21ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b0:	6f a1       	ldd	r22, Y+39	; 0x27
    21b2:	78 a5       	ldd	r23, Y+40	; 0x28
    21b4:	89 a5       	ldd	r24, Y+41	; 0x29
    21b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	4a ef       	ldi	r20, 0xFA	; 250
    21be:	54 e4       	ldi	r21, 0x44	; 68
    21c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	8b a3       	std	Y+35, r24	; 0x23
    21ca:	9c a3       	std	Y+36, r25	; 0x24
    21cc:	ad a3       	std	Y+37, r26	; 0x25
    21ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21d0:	6b a1       	ldd	r22, Y+35	; 0x23
    21d2:	7c a1       	ldd	r23, Y+36	; 0x24
    21d4:	8d a1       	ldd	r24, Y+37	; 0x25
    21d6:	9e a1       	ldd	r25, Y+38	; 0x26
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e8       	ldi	r20, 0x80	; 128
    21de:	5f e3       	ldi	r21, 0x3F	; 63
    21e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21e4:	88 23       	and	r24, r24
    21e6:	2c f4       	brge	.+10     	; 0x21f2 <STM_u8_Rotate_CW+0x19a>
		__ticks = 1;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9a a3       	std	Y+34, r25	; 0x22
    21ee:	89 a3       	std	Y+33, r24	; 0x21
    21f0:	3f c0       	rjmp	.+126    	; 0x2270 <STM_u8_Rotate_CW+0x218>
	else if (__tmp > 65535)
    21f2:	6b a1       	ldd	r22, Y+35	; 0x23
    21f4:	7c a1       	ldd	r23, Y+36	; 0x24
    21f6:	8d a1       	ldd	r24, Y+37	; 0x25
    21f8:	9e a1       	ldd	r25, Y+38	; 0x26
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	3f ef       	ldi	r19, 0xFF	; 255
    21fe:	4f e7       	ldi	r20, 0x7F	; 127
    2200:	57 e4       	ldi	r21, 0x47	; 71
    2202:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2206:	18 16       	cp	r1, r24
    2208:	4c f5       	brge	.+82     	; 0x225c <STM_u8_Rotate_CW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220a:	6f a1       	ldd	r22, Y+39	; 0x27
    220c:	78 a5       	ldd	r23, Y+40	; 0x28
    220e:	89 a5       	ldd	r24, Y+41	; 0x29
    2210:	9a a5       	ldd	r25, Y+42	; 0x2a
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e2       	ldi	r20, 0x20	; 32
    2218:	51 e4       	ldi	r21, 0x41	; 65
    221a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	bc 01       	movw	r22, r24
    2224:	cd 01       	movw	r24, r26
    2226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	9a a3       	std	Y+34, r25	; 0x22
    2230:	89 a3       	std	Y+33, r24	; 0x21
    2232:	0f c0       	rjmp	.+30     	; 0x2252 <STM_u8_Rotate_CW+0x1fa>
    2234:	88 ec       	ldi	r24, 0xC8	; 200
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	98 a3       	std	Y+32, r25	; 0x20
    223a:	8f 8f       	std	Y+31, r24	; 0x1f
    223c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    223e:	98 a1       	ldd	r25, Y+32	; 0x20
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <STM_u8_Rotate_CW+0x1e8>
    2244:	98 a3       	std	Y+32, r25	; 0x20
    2246:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2248:	89 a1       	ldd	r24, Y+33	; 0x21
    224a:	9a a1       	ldd	r25, Y+34	; 0x22
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	9a a3       	std	Y+34, r25	; 0x22
    2250:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2252:	89 a1       	ldd	r24, Y+33	; 0x21
    2254:	9a a1       	ldd	r25, Y+34	; 0x22
    2256:	00 97       	sbiw	r24, 0x00	; 0
    2258:	69 f7       	brne	.-38     	; 0x2234 <STM_u8_Rotate_CW+0x1dc>
    225a:	14 c0       	rjmp	.+40     	; 0x2284 <STM_u8_Rotate_CW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225c:	6b a1       	ldd	r22, Y+35	; 0x23
    225e:	7c a1       	ldd	r23, Y+36	; 0x24
    2260:	8d a1       	ldd	r24, Y+37	; 0x25
    2262:	9e a1       	ldd	r25, Y+38	; 0x26
    2264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	9a a3       	std	Y+34, r25	; 0x22
    226e:	89 a3       	std	Y+33, r24	; 0x21
    2270:	89 a1       	ldd	r24, Y+33	; 0x21
    2272:	9a a1       	ldd	r25, Y+34	; 0x22
    2274:	9e 8f       	std	Y+30, r25	; 0x1e
    2276:	8d 8f       	std	Y+29, r24	; 0x1d
    2278:	8d 8d       	ldd	r24, Y+29	; 0x1d
    227a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <STM_u8_Rotate_CW+0x224>
    2280:	9e 8f       	std	Y+30, r25	; 0x1e
    2282:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	// FOURTH STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    2284:	83 e0       	ldi	r24, 0x03	; 3
    2286:	64 e0       	ldi	r22, 0x04	; 4
    2288:	41 e0       	ldi	r20, 0x01	; 1
    228a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    228e:	83 e0       	ldi	r24, 0x03	; 3
    2290:	65 e0       	ldi	r22, 0x05	; 5
    2292:	41 e0       	ldi	r20, 0x01	; 1
    2294:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_LOW);
    2298:	83 e0       	ldi	r24, 0x03	; 3
    229a:	66 e0       	ldi	r22, 0x06	; 6
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    22a2:	83 e0       	ldi	r24, 0x03	; 3
    22a4:	67 e0       	ldi	r22, 0x07	; 7
    22a6:	41 e0       	ldi	r20, 0x01	; 1
    22a8:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	a0 e2       	ldi	r26, 0x20	; 32
    22b2:	b1 e4       	ldi	r27, 0x41	; 65
    22b4:	89 8f       	std	Y+25, r24	; 0x19
    22b6:	9a 8f       	std	Y+26, r25	; 0x1a
    22b8:	ab 8f       	std	Y+27, r26	; 0x1b
    22ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22bc:	69 8d       	ldd	r22, Y+25	; 0x19
    22be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	4a ef       	ldi	r20, 0xFA	; 250
    22ca:	54 e4       	ldi	r21, 0x44	; 68
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	8d 8b       	std	Y+21, r24	; 0x15
    22d6:	9e 8b       	std	Y+22, r25	; 0x16
    22d8:	af 8b       	std	Y+23, r26	; 0x17
    22da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22dc:	6d 89       	ldd	r22, Y+21	; 0x15
    22de:	7e 89       	ldd	r23, Y+22	; 0x16
    22e0:	8f 89       	ldd	r24, Y+23	; 0x17
    22e2:	98 8d       	ldd	r25, Y+24	; 0x18
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e8       	ldi	r20, 0x80	; 128
    22ea:	5f e3       	ldi	r21, 0x3F	; 63
    22ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f0:	88 23       	and	r24, r24
    22f2:	2c f4       	brge	.+10     	; 0x22fe <STM_u8_Rotate_CW+0x2a6>
		__ticks = 1;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	9c 8b       	std	Y+20, r25	; 0x14
    22fa:	8b 8b       	std	Y+19, r24	; 0x13
    22fc:	3f c0       	rjmp	.+126    	; 0x237c <STM_u8_Rotate_CW+0x324>
	else if (__tmp > 65535)
    22fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2300:	7e 89       	ldd	r23, Y+22	; 0x16
    2302:	8f 89       	ldd	r24, Y+23	; 0x17
    2304:	98 8d       	ldd	r25, Y+24	; 0x18
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	3f ef       	ldi	r19, 0xFF	; 255
    230a:	4f e7       	ldi	r20, 0x7F	; 127
    230c:	57 e4       	ldi	r21, 0x47	; 71
    230e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2312:	18 16       	cp	r1, r24
    2314:	4c f5       	brge	.+82     	; 0x2368 <STM_u8_Rotate_CW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2316:	69 8d       	ldd	r22, Y+25	; 0x19
    2318:	7a 8d       	ldd	r23, Y+26	; 0x1a
    231a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    231c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e2       	ldi	r20, 0x20	; 32
    2324:	51 e4       	ldi	r21, 0x41	; 65
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9c 8b       	std	Y+20, r25	; 0x14
    233c:	8b 8b       	std	Y+19, r24	; 0x13
    233e:	0f c0       	rjmp	.+30     	; 0x235e <STM_u8_Rotate_CW+0x306>
    2340:	88 ec       	ldi	r24, 0xC8	; 200
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	9a 8b       	std	Y+18, r25	; 0x12
    2346:	89 8b       	std	Y+17, r24	; 0x11
    2348:	89 89       	ldd	r24, Y+17	; 0x11
    234a:	9a 89       	ldd	r25, Y+18	; 0x12
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <STM_u8_Rotate_CW+0x2f4>
    2350:	9a 8b       	std	Y+18, r25	; 0x12
    2352:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2354:	8b 89       	ldd	r24, Y+19	; 0x13
    2356:	9c 89       	ldd	r25, Y+20	; 0x14
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	9c 8b       	std	Y+20, r25	; 0x14
    235c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235e:	8b 89       	ldd	r24, Y+19	; 0x13
    2360:	9c 89       	ldd	r25, Y+20	; 0x14
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	69 f7       	brne	.-38     	; 0x2340 <STM_u8_Rotate_CW+0x2e8>
    2366:	14 c0       	rjmp	.+40     	; 0x2390 <STM_u8_Rotate_CW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2368:	6d 89       	ldd	r22, Y+21	; 0x15
    236a:	7e 89       	ldd	r23, Y+22	; 0x16
    236c:	8f 89       	ldd	r24, Y+23	; 0x17
    236e:	98 8d       	ldd	r25, Y+24	; 0x18
    2370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	9c 8b       	std	Y+20, r25	; 0x14
    237a:	8b 8b       	std	Y+19, r24	; 0x13
    237c:	8b 89       	ldd	r24, Y+19	; 0x13
    237e:	9c 89       	ldd	r25, Y+20	; 0x14
    2380:	98 8b       	std	Y+16, r25	; 0x10
    2382:	8f 87       	std	Y+15, r24	; 0x0f
    2384:	8f 85       	ldd	r24, Y+15	; 0x0f
    2386:	98 89       	ldd	r25, Y+16	; 0x10
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <STM_u8_Rotate_CW+0x330>
    238c:	98 8b       	std	Y+16, r25	; 0x10
    238e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	// FOURTH STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    2390:	83 e0       	ldi	r24, 0x03	; 3
    2392:	64 e0       	ldi	r22, 0x04	; 4
    2394:	41 e0       	ldi	r20, 0x01	; 1
    2396:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    239a:	83 e0       	ldi	r24, 0x03	; 3
    239c:	65 e0       	ldi	r22, 0x05	; 5
    239e:	41 e0       	ldi	r20, 0x01	; 1
    23a0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    23a4:	83 e0       	ldi	r24, 0x03	; 3
    23a6:	66 e0       	ldi	r22, 0x06	; 6
    23a8:	41 e0       	ldi	r20, 0x01	; 1
    23aa:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_LOW);
    23ae:	83 e0       	ldi	r24, 0x03	; 3
    23b0:	67 e0       	ldi	r22, 0x07	; 7
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	a0 e2       	ldi	r26, 0x20	; 32
    23be:	b1 e4       	ldi	r27, 0x41	; 65
    23c0:	8b 87       	std	Y+11, r24	; 0x0b
    23c2:	9c 87       	std	Y+12, r25	; 0x0c
    23c4:	ad 87       	std	Y+13, r26	; 0x0d
    23c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    23cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	4a ef       	ldi	r20, 0xFA	; 250
    23d6:	54 e4       	ldi	r21, 0x44	; 68
    23d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	8f 83       	std	Y+7, r24	; 0x07
    23e2:	98 87       	std	Y+8, r25	; 0x08
    23e4:	a9 87       	std	Y+9, r26	; 0x09
    23e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23e8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ea:	78 85       	ldd	r23, Y+8	; 0x08
    23ec:	89 85       	ldd	r24, Y+9	; 0x09
    23ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e8       	ldi	r20, 0x80	; 128
    23f6:	5f e3       	ldi	r21, 0x3F	; 63
    23f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23fc:	88 23       	and	r24, r24
    23fe:	2c f4       	brge	.+10     	; 0x240a <STM_u8_Rotate_CW+0x3b2>
		__ticks = 1;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9e 83       	std	Y+6, r25	; 0x06
    2406:	8d 83       	std	Y+5, r24	; 0x05
    2408:	3f c0       	rjmp	.+126    	; 0x2488 <STM_u8_Rotate_CW+0x430>
	else if (__tmp > 65535)
    240a:	6f 81       	ldd	r22, Y+7	; 0x07
    240c:	78 85       	ldd	r23, Y+8	; 0x08
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	9a 85       	ldd	r25, Y+10	; 0x0a
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	3f ef       	ldi	r19, 0xFF	; 255
    2416:	4f e7       	ldi	r20, 0x7F	; 127
    2418:	57 e4       	ldi	r21, 0x47	; 71
    241a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    241e:	18 16       	cp	r1, r24
    2420:	4c f5       	brge	.+82     	; 0x2474 <STM_u8_Rotate_CW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2422:	6b 85       	ldd	r22, Y+11	; 0x0b
    2424:	7c 85       	ldd	r23, Y+12	; 0x0c
    2426:	8d 85       	ldd	r24, Y+13	; 0x0d
    2428:	9e 85       	ldd	r25, Y+14	; 0x0e
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e2       	ldi	r20, 0x20	; 32
    2430:	51 e4       	ldi	r21, 0x41	; 65
    2432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9e 83       	std	Y+6, r25	; 0x06
    2448:	8d 83       	std	Y+5, r24	; 0x05
    244a:	0f c0       	rjmp	.+30     	; 0x246a <STM_u8_Rotate_CW+0x412>
    244c:	88 ec       	ldi	r24, 0xC8	; 200
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	9c 83       	std	Y+4, r25	; 0x04
    2452:	8b 83       	std	Y+3, r24	; 0x03
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <STM_u8_Rotate_CW+0x400>
    245c:	9c 83       	std	Y+4, r25	; 0x04
    245e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2460:	8d 81       	ldd	r24, Y+5	; 0x05
    2462:	9e 81       	ldd	r25, Y+6	; 0x06
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	9e 83       	std	Y+6, r25	; 0x06
    2468:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246a:	8d 81       	ldd	r24, Y+5	; 0x05
    246c:	9e 81       	ldd	r25, Y+6	; 0x06
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	69 f7       	brne	.-38     	; 0x244c <STM_u8_Rotate_CW+0x3f4>
    2472:	14 c0       	rjmp	.+40     	; 0x249c <STM_u8_Rotate_CW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2474:	6f 81       	ldd	r22, Y+7	; 0x07
    2476:	78 85       	ldd	r23, Y+8	; 0x08
    2478:	89 85       	ldd	r24, Y+9	; 0x09
    247a:	9a 85       	ldd	r25, Y+10	; 0x0a
    247c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	9e 83       	std	Y+6, r25	; 0x06
    2486:	8d 83       	std	Y+5, r24	; 0x05
    2488:	8d 81       	ldd	r24, Y+5	; 0x05
    248a:	9e 81       	ldd	r25, Y+6	; 0x06
    248c:	9a 83       	std	Y+2, r25	; 0x02
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	9a 81       	ldd	r25, Y+2	; 0x02
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <STM_u8_Rotate_CW+0x43c>
    2498:	9a 83       	std	Y+2, r25	; 0x02
    249a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);


	return STD_TYPES_OK;
    249c:	81 e0       	ldi	r24, 0x01	; 1
}
    249e:	e8 96       	adiw	r28, 0x38	; 56
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <STM_u8_Rotate_CCW>:

u8 STM_u8_Rotate_CCW()
{
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	e8 97       	sbiw	r28, 0x38	; 56
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
	// FIRST STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    24c4:	83 e0       	ldi	r24, 0x03	; 3
    24c6:	64 e0       	ldi	r22, 0x04	; 4
    24c8:	41 e0       	ldi	r20, 0x01	; 1
    24ca:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    24ce:	83 e0       	ldi	r24, 0x03	; 3
    24d0:	65 e0       	ldi	r22, 0x05	; 5
    24d2:	41 e0       	ldi	r20, 0x01	; 1
    24d4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    24d8:	83 e0       	ldi	r24, 0x03	; 3
    24da:	66 e0       	ldi	r22, 0x06	; 6
    24dc:	41 e0       	ldi	r20, 0x01	; 1
    24de:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_LOW);
    24e2:	83 e0       	ldi	r24, 0x03	; 3
    24e4:	67 e0       	ldi	r22, 0x07	; 7
    24e6:	40 e0       	ldi	r20, 0x00	; 0
    24e8:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	a0 e2       	ldi	r26, 0x20	; 32
    24f2:	b1 e4       	ldi	r27, 0x41	; 65
    24f4:	8d ab       	std	Y+53, r24	; 0x35
    24f6:	9e ab       	std	Y+54, r25	; 0x36
    24f8:	af ab       	std	Y+55, r26	; 0x37
    24fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fc:	6d a9       	ldd	r22, Y+53	; 0x35
    24fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2500:	8f a9       	ldd	r24, Y+55	; 0x37
    2502:	98 ad       	ldd	r25, Y+56	; 0x38
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	4a ef       	ldi	r20, 0xFA	; 250
    250a:	54 e4       	ldi	r21, 0x44	; 68
    250c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	89 ab       	std	Y+49, r24	; 0x31
    2516:	9a ab       	std	Y+50, r25	; 0x32
    2518:	ab ab       	std	Y+51, r26	; 0x33
    251a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    251c:	69 a9       	ldd	r22, Y+49	; 0x31
    251e:	7a a9       	ldd	r23, Y+50	; 0x32
    2520:	8b a9       	ldd	r24, Y+51	; 0x33
    2522:	9c a9       	ldd	r25, Y+52	; 0x34
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e8       	ldi	r20, 0x80	; 128
    252a:	5f e3       	ldi	r21, 0x3F	; 63
    252c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2530:	88 23       	and	r24, r24
    2532:	2c f4       	brge	.+10     	; 0x253e <STM_u8_Rotate_CCW+0x8e>
		__ticks = 1;
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	98 ab       	std	Y+48, r25	; 0x30
    253a:	8f a7       	std	Y+47, r24	; 0x2f
    253c:	3f c0       	rjmp	.+126    	; 0x25bc <STM_u8_Rotate_CCW+0x10c>
	else if (__tmp > 65535)
    253e:	69 a9       	ldd	r22, Y+49	; 0x31
    2540:	7a a9       	ldd	r23, Y+50	; 0x32
    2542:	8b a9       	ldd	r24, Y+51	; 0x33
    2544:	9c a9       	ldd	r25, Y+52	; 0x34
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	3f ef       	ldi	r19, 0xFF	; 255
    254a:	4f e7       	ldi	r20, 0x7F	; 127
    254c:	57 e4       	ldi	r21, 0x47	; 71
    254e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2552:	18 16       	cp	r1, r24
    2554:	4c f5       	brge	.+82     	; 0x25a8 <STM_u8_Rotate_CCW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2556:	6d a9       	ldd	r22, Y+53	; 0x35
    2558:	7e a9       	ldd	r23, Y+54	; 0x36
    255a:	8f a9       	ldd	r24, Y+55	; 0x37
    255c:	98 ad       	ldd	r25, Y+56	; 0x38
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e2       	ldi	r20, 0x20	; 32
    2564:	51 e4       	ldi	r21, 0x41	; 65
    2566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	bc 01       	movw	r22, r24
    2570:	cd 01       	movw	r24, r26
    2572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	98 ab       	std	Y+48, r25	; 0x30
    257c:	8f a7       	std	Y+47, r24	; 0x2f
    257e:	0f c0       	rjmp	.+30     	; 0x259e <STM_u8_Rotate_CCW+0xee>
    2580:	88 ec       	ldi	r24, 0xC8	; 200
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	9e a7       	std	Y+46, r25	; 0x2e
    2586:	8d a7       	std	Y+45, r24	; 0x2d
    2588:	8d a5       	ldd	r24, Y+45	; 0x2d
    258a:	9e a5       	ldd	r25, Y+46	; 0x2e
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <STM_u8_Rotate_CCW+0xdc>
    2590:	9e a7       	std	Y+46, r25	; 0x2e
    2592:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2594:	8f a5       	ldd	r24, Y+47	; 0x2f
    2596:	98 a9       	ldd	r25, Y+48	; 0x30
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	98 ab       	std	Y+48, r25	; 0x30
    259c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259e:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a0:	98 a9       	ldd	r25, Y+48	; 0x30
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	69 f7       	brne	.-38     	; 0x2580 <STM_u8_Rotate_CCW+0xd0>
    25a6:	14 c0       	rjmp	.+40     	; 0x25d0 <STM_u8_Rotate_CCW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a8:	69 a9       	ldd	r22, Y+49	; 0x31
    25aa:	7a a9       	ldd	r23, Y+50	; 0x32
    25ac:	8b a9       	ldd	r24, Y+51	; 0x33
    25ae:	9c a9       	ldd	r25, Y+52	; 0x34
    25b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	98 ab       	std	Y+48, r25	; 0x30
    25ba:	8f a7       	std	Y+47, r24	; 0x2f
    25bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    25be:	98 a9       	ldd	r25, Y+48	; 0x30
    25c0:	9c a7       	std	Y+44, r25	; 0x2c
    25c2:	8b a7       	std	Y+43, r24	; 0x2b
    25c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    25c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <STM_u8_Rotate_CCW+0x118>
    25cc:	9c a7       	std	Y+44, r25	; 0x2c
    25ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	// SECOND STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    25d0:	83 e0       	ldi	r24, 0x03	; 3
    25d2:	64 e0       	ldi	r22, 0x04	; 4
    25d4:	41 e0       	ldi	r20, 0x01	; 1
    25d6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    25da:	83 e0       	ldi	r24, 0x03	; 3
    25dc:	65 e0       	ldi	r22, 0x05	; 5
    25de:	41 e0       	ldi	r20, 0x01	; 1
    25e0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_LOW);
    25e4:	83 e0       	ldi	r24, 0x03	; 3
    25e6:	66 e0       	ldi	r22, 0x06	; 6
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    25ee:	83 e0       	ldi	r24, 0x03	; 3
    25f0:	67 e0       	ldi	r22, 0x07	; 7
    25f2:	41 e0       	ldi	r20, 0x01	; 1
    25f4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	a0 e2       	ldi	r26, 0x20	; 32
    25fe:	b1 e4       	ldi	r27, 0x41	; 65
    2600:	8f a3       	std	Y+39, r24	; 0x27
    2602:	98 a7       	std	Y+40, r25	; 0x28
    2604:	a9 a7       	std	Y+41, r26	; 0x29
    2606:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2608:	6f a1       	ldd	r22, Y+39	; 0x27
    260a:	78 a5       	ldd	r23, Y+40	; 0x28
    260c:	89 a5       	ldd	r24, Y+41	; 0x29
    260e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	4a ef       	ldi	r20, 0xFA	; 250
    2616:	54 e4       	ldi	r21, 0x44	; 68
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	8b a3       	std	Y+35, r24	; 0x23
    2622:	9c a3       	std	Y+36, r25	; 0x24
    2624:	ad a3       	std	Y+37, r26	; 0x25
    2626:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2628:	6b a1       	ldd	r22, Y+35	; 0x23
    262a:	7c a1       	ldd	r23, Y+36	; 0x24
    262c:	8d a1       	ldd	r24, Y+37	; 0x25
    262e:	9e a1       	ldd	r25, Y+38	; 0x26
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e8       	ldi	r20, 0x80	; 128
    2636:	5f e3       	ldi	r21, 0x3F	; 63
    2638:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    263c:	88 23       	and	r24, r24
    263e:	2c f4       	brge	.+10     	; 0x264a <STM_u8_Rotate_CCW+0x19a>
		__ticks = 1;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	9a a3       	std	Y+34, r25	; 0x22
    2646:	89 a3       	std	Y+33, r24	; 0x21
    2648:	3f c0       	rjmp	.+126    	; 0x26c8 <STM_u8_Rotate_CCW+0x218>
	else if (__tmp > 65535)
    264a:	6b a1       	ldd	r22, Y+35	; 0x23
    264c:	7c a1       	ldd	r23, Y+36	; 0x24
    264e:	8d a1       	ldd	r24, Y+37	; 0x25
    2650:	9e a1       	ldd	r25, Y+38	; 0x26
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	3f ef       	ldi	r19, 0xFF	; 255
    2656:	4f e7       	ldi	r20, 0x7F	; 127
    2658:	57 e4       	ldi	r21, 0x47	; 71
    265a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    265e:	18 16       	cp	r1, r24
    2660:	4c f5       	brge	.+82     	; 0x26b4 <STM_u8_Rotate_CCW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2662:	6f a1       	ldd	r22, Y+39	; 0x27
    2664:	78 a5       	ldd	r23, Y+40	; 0x28
    2666:	89 a5       	ldd	r24, Y+41	; 0x29
    2668:	9a a5       	ldd	r25, Y+42	; 0x2a
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e2       	ldi	r20, 0x20	; 32
    2670:	51 e4       	ldi	r21, 0x41	; 65
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9a a3       	std	Y+34, r25	; 0x22
    2688:	89 a3       	std	Y+33, r24	; 0x21
    268a:	0f c0       	rjmp	.+30     	; 0x26aa <STM_u8_Rotate_CCW+0x1fa>
    268c:	88 ec       	ldi	r24, 0xC8	; 200
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	98 a3       	std	Y+32, r25	; 0x20
    2692:	8f 8f       	std	Y+31, r24	; 0x1f
    2694:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2696:	98 a1       	ldd	r25, Y+32	; 0x20
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <STM_u8_Rotate_CCW+0x1e8>
    269c:	98 a3       	std	Y+32, r25	; 0x20
    269e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a0:	89 a1       	ldd	r24, Y+33	; 0x21
    26a2:	9a a1       	ldd	r25, Y+34	; 0x22
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	9a a3       	std	Y+34, r25	; 0x22
    26a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26aa:	89 a1       	ldd	r24, Y+33	; 0x21
    26ac:	9a a1       	ldd	r25, Y+34	; 0x22
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	69 f7       	brne	.-38     	; 0x268c <STM_u8_Rotate_CCW+0x1dc>
    26b2:	14 c0       	rjmp	.+40     	; 0x26dc <STM_u8_Rotate_CCW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b4:	6b a1       	ldd	r22, Y+35	; 0x23
    26b6:	7c a1       	ldd	r23, Y+36	; 0x24
    26b8:	8d a1       	ldd	r24, Y+37	; 0x25
    26ba:	9e a1       	ldd	r25, Y+38	; 0x26
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9a a3       	std	Y+34, r25	; 0x22
    26c6:	89 a3       	std	Y+33, r24	; 0x21
    26c8:	89 a1       	ldd	r24, Y+33	; 0x21
    26ca:	9a a1       	ldd	r25, Y+34	; 0x22
    26cc:	9e 8f       	std	Y+30, r25	; 0x1e
    26ce:	8d 8f       	std	Y+29, r24	; 0x1d
    26d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <STM_u8_Rotate_CCW+0x224>
    26d8:	9e 8f       	std	Y+30, r25	; 0x1e
    26da:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	// THIRD STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    26dc:	83 e0       	ldi	r24, 0x03	; 3
    26de:	64 e0       	ldi	r22, 0x04	; 4
    26e0:	41 e0       	ldi	r20, 0x01	; 1
    26e2:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_LOW);
    26e6:	83 e0       	ldi	r24, 0x03	; 3
    26e8:	65 e0       	ldi	r22, 0x05	; 5
    26ea:	40 e0       	ldi	r20, 0x00	; 0
    26ec:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    26f0:	83 e0       	ldi	r24, 0x03	; 3
    26f2:	66 e0       	ldi	r22, 0x06	; 6
    26f4:	41 e0       	ldi	r20, 0x01	; 1
    26f6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    26fa:	83 e0       	ldi	r24, 0x03	; 3
    26fc:	67 e0       	ldi	r22, 0x07	; 7
    26fe:	41 e0       	ldi	r20, 0x01	; 1
    2700:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	a0 e2       	ldi	r26, 0x20	; 32
    270a:	b1 e4       	ldi	r27, 0x41	; 65
    270c:	89 8f       	std	Y+25, r24	; 0x19
    270e:	9a 8f       	std	Y+26, r25	; 0x1a
    2710:	ab 8f       	std	Y+27, r26	; 0x1b
    2712:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2714:	69 8d       	ldd	r22, Y+25	; 0x19
    2716:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2718:	8b 8d       	ldd	r24, Y+27	; 0x1b
    271a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	4a ef       	ldi	r20, 0xFA	; 250
    2722:	54 e4       	ldi	r21, 0x44	; 68
    2724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	8d 8b       	std	Y+21, r24	; 0x15
    272e:	9e 8b       	std	Y+22, r25	; 0x16
    2730:	af 8b       	std	Y+23, r26	; 0x17
    2732:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2734:	6d 89       	ldd	r22, Y+21	; 0x15
    2736:	7e 89       	ldd	r23, Y+22	; 0x16
    2738:	8f 89       	ldd	r24, Y+23	; 0x17
    273a:	98 8d       	ldd	r25, Y+24	; 0x18
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e8       	ldi	r20, 0x80	; 128
    2742:	5f e3       	ldi	r21, 0x3F	; 63
    2744:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2748:	88 23       	and	r24, r24
    274a:	2c f4       	brge	.+10     	; 0x2756 <STM_u8_Rotate_CCW+0x2a6>
		__ticks = 1;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	9c 8b       	std	Y+20, r25	; 0x14
    2752:	8b 8b       	std	Y+19, r24	; 0x13
    2754:	3f c0       	rjmp	.+126    	; 0x27d4 <STM_u8_Rotate_CCW+0x324>
	else if (__tmp > 65535)
    2756:	6d 89       	ldd	r22, Y+21	; 0x15
    2758:	7e 89       	ldd	r23, Y+22	; 0x16
    275a:	8f 89       	ldd	r24, Y+23	; 0x17
    275c:	98 8d       	ldd	r25, Y+24	; 0x18
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	3f ef       	ldi	r19, 0xFF	; 255
    2762:	4f e7       	ldi	r20, 0x7F	; 127
    2764:	57 e4       	ldi	r21, 0x47	; 71
    2766:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    276a:	18 16       	cp	r1, r24
    276c:	4c f5       	brge	.+82     	; 0x27c0 <STM_u8_Rotate_CCW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276e:	69 8d       	ldd	r22, Y+25	; 0x19
    2770:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2772:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2774:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e2       	ldi	r20, 0x20	; 32
    277c:	51 e4       	ldi	r21, 0x41	; 65
    277e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	9c 8b       	std	Y+20, r25	; 0x14
    2794:	8b 8b       	std	Y+19, r24	; 0x13
    2796:	0f c0       	rjmp	.+30     	; 0x27b6 <STM_u8_Rotate_CCW+0x306>
    2798:	88 ec       	ldi	r24, 0xC8	; 200
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	9a 8b       	std	Y+18, r25	; 0x12
    279e:	89 8b       	std	Y+17, r24	; 0x11
    27a0:	89 89       	ldd	r24, Y+17	; 0x11
    27a2:	9a 89       	ldd	r25, Y+18	; 0x12
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <STM_u8_Rotate_CCW+0x2f4>
    27a8:	9a 8b       	std	Y+18, r25	; 0x12
    27aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ac:	8b 89       	ldd	r24, Y+19	; 0x13
    27ae:	9c 89       	ldd	r25, Y+20	; 0x14
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	9c 8b       	std	Y+20, r25	; 0x14
    27b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b6:	8b 89       	ldd	r24, Y+19	; 0x13
    27b8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	69 f7       	brne	.-38     	; 0x2798 <STM_u8_Rotate_CCW+0x2e8>
    27be:	14 c0       	rjmp	.+40     	; 0x27e8 <STM_u8_Rotate_CCW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c0:	6d 89       	ldd	r22, Y+21	; 0x15
    27c2:	7e 89       	ldd	r23, Y+22	; 0x16
    27c4:	8f 89       	ldd	r24, Y+23	; 0x17
    27c6:	98 8d       	ldd	r25, Y+24	; 0x18
    27c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	9c 8b       	std	Y+20, r25	; 0x14
    27d2:	8b 8b       	std	Y+19, r24	; 0x13
    27d4:	8b 89       	ldd	r24, Y+19	; 0x13
    27d6:	9c 89       	ldd	r25, Y+20	; 0x14
    27d8:	98 8b       	std	Y+16, r25	; 0x10
    27da:	8f 87       	std	Y+15, r24	; 0x0f
    27dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    27de:	98 89       	ldd	r25, Y+16	; 0x10
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <STM_u8_Rotate_CCW+0x330>
    27e4:	98 8b       	std	Y+16, r25	; 0x10
    27e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	// FORTH STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_LOW);
    27e8:	83 e0       	ldi	r24, 0x03	; 3
    27ea:	64 e0       	ldi	r22, 0x04	; 4
    27ec:	40 e0       	ldi	r20, 0x00	; 0
    27ee:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    27f2:	83 e0       	ldi	r24, 0x03	; 3
    27f4:	65 e0       	ldi	r22, 0x05	; 5
    27f6:	41 e0       	ldi	r20, 0x01	; 1
    27f8:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    27fc:	83 e0       	ldi	r24, 0x03	; 3
    27fe:	66 e0       	ldi	r22, 0x06	; 6
    2800:	41 e0       	ldi	r20, 0x01	; 1
    2802:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    2806:	83 e0       	ldi	r24, 0x03	; 3
    2808:	67 e0       	ldi	r22, 0x07	; 7
    280a:	41 e0       	ldi	r20, 0x01	; 1
    280c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	a0 e2       	ldi	r26, 0x20	; 32
    2816:	b1 e4       	ldi	r27, 0x41	; 65
    2818:	8b 87       	std	Y+11, r24	; 0x0b
    281a:	9c 87       	std	Y+12, r25	; 0x0c
    281c:	ad 87       	std	Y+13, r26	; 0x0d
    281e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2820:	6b 85       	ldd	r22, Y+11	; 0x0b
    2822:	7c 85       	ldd	r23, Y+12	; 0x0c
    2824:	8d 85       	ldd	r24, Y+13	; 0x0d
    2826:	9e 85       	ldd	r25, Y+14	; 0x0e
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	4a ef       	ldi	r20, 0xFA	; 250
    282e:	54 e4       	ldi	r21, 0x44	; 68
    2830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	8f 83       	std	Y+7, r24	; 0x07
    283a:	98 87       	std	Y+8, r25	; 0x08
    283c:	a9 87       	std	Y+9, r26	; 0x09
    283e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2840:	6f 81       	ldd	r22, Y+7	; 0x07
    2842:	78 85       	ldd	r23, Y+8	; 0x08
    2844:	89 85       	ldd	r24, Y+9	; 0x09
    2846:	9a 85       	ldd	r25, Y+10	; 0x0a
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	40 e8       	ldi	r20, 0x80	; 128
    284e:	5f e3       	ldi	r21, 0x3F	; 63
    2850:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2854:	88 23       	and	r24, r24
    2856:	2c f4       	brge	.+10     	; 0x2862 <STM_u8_Rotate_CCW+0x3b2>
		__ticks = 1;
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	9e 83       	std	Y+6, r25	; 0x06
    285e:	8d 83       	std	Y+5, r24	; 0x05
    2860:	3f c0       	rjmp	.+126    	; 0x28e0 <STM_u8_Rotate_CCW+0x430>
	else if (__tmp > 65535)
    2862:	6f 81       	ldd	r22, Y+7	; 0x07
    2864:	78 85       	ldd	r23, Y+8	; 0x08
    2866:	89 85       	ldd	r24, Y+9	; 0x09
    2868:	9a 85       	ldd	r25, Y+10	; 0x0a
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	3f ef       	ldi	r19, 0xFF	; 255
    286e:	4f e7       	ldi	r20, 0x7F	; 127
    2870:	57 e4       	ldi	r21, 0x47	; 71
    2872:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2876:	18 16       	cp	r1, r24
    2878:	4c f5       	brge	.+82     	; 0x28cc <STM_u8_Rotate_CCW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287a:	6b 85       	ldd	r22, Y+11	; 0x0b
    287c:	7c 85       	ldd	r23, Y+12	; 0x0c
    287e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2880:	9e 85       	ldd	r25, Y+14	; 0x0e
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e2       	ldi	r20, 0x20	; 32
    2888:	51 e4       	ldi	r21, 0x41	; 65
    288a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	bc 01       	movw	r22, r24
    2894:	cd 01       	movw	r24, r26
    2896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	9e 83       	std	Y+6, r25	; 0x06
    28a0:	8d 83       	std	Y+5, r24	; 0x05
    28a2:	0f c0       	rjmp	.+30     	; 0x28c2 <STM_u8_Rotate_CCW+0x412>
    28a4:	88 ec       	ldi	r24, 0xC8	; 200
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	9c 83       	std	Y+4, r25	; 0x04
    28aa:	8b 83       	std	Y+3, r24	; 0x03
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	f1 f7       	brne	.-4      	; 0x28b0 <STM_u8_Rotate_CCW+0x400>
    28b4:	9c 83       	std	Y+4, r25	; 0x04
    28b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ba:	9e 81       	ldd	r25, Y+6	; 0x06
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	9e 83       	std	Y+6, r25	; 0x06
    28c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c2:	8d 81       	ldd	r24, Y+5	; 0x05
    28c4:	9e 81       	ldd	r25, Y+6	; 0x06
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	69 f7       	brne	.-38     	; 0x28a4 <STM_u8_Rotate_CCW+0x3f4>
    28ca:	14 c0       	rjmp	.+40     	; 0x28f4 <STM_u8_Rotate_CCW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28cc:	6f 81       	ldd	r22, Y+7	; 0x07
    28ce:	78 85       	ldd	r23, Y+8	; 0x08
    28d0:	89 85       	ldd	r24, Y+9	; 0x09
    28d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	9e 83       	std	Y+6, r25	; 0x06
    28de:	8d 83       	std	Y+5, r24	; 0x05
    28e0:	8d 81       	ldd	r24, Y+5	; 0x05
    28e2:	9e 81       	ldd	r25, Y+6	; 0x06
    28e4:	9a 83       	std	Y+2, r25	; 0x02
    28e6:	89 83       	std	Y+1, r24	; 0x01
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	9a 81       	ldd	r25, Y+2	; 0x02
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <STM_u8_Rotate_CCW+0x43c>
    28f0:	9a 83       	std	Y+2, r25	; 0x02
    28f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	return STD_TYPES_OK;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
}
    28f6:	e8 96       	adiw	r28, 0x38	; 56
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	08 95       	ret

00002908 <STM_u8_STOP>:

u8 STM_u8_STOP()
{
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	2e 97       	sbiw	r28, 0x0e	; 14
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	f8 94       	cli
    2916:	de bf       	out	0x3e, r29	; 62
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	cd bf       	out	0x3d, r28	; 61
	// STOP STEPPER MOTOR
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    291c:	83 e0       	ldi	r24, 0x03	; 3
    291e:	64 e0       	ldi	r22, 0x04	; 4
    2920:	41 e0       	ldi	r20, 0x01	; 1
    2922:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    2926:	83 e0       	ldi	r24, 0x03	; 3
    2928:	65 e0       	ldi	r22, 0x05	; 5
    292a:	41 e0       	ldi	r20, 0x01	; 1
    292c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    2930:	83 e0       	ldi	r24, 0x03	; 3
    2932:	66 e0       	ldi	r22, 0x06	; 6
    2934:	41 e0       	ldi	r20, 0x01	; 1
    2936:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    293a:	83 e0       	ldi	r24, 0x03	; 3
    293c:	67 e0       	ldi	r22, 0x07	; 7
    293e:	41 e0       	ldi	r20, 0x01	; 1
    2940:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	a0 e2       	ldi	r26, 0x20	; 32
    294a:	b1 e4       	ldi	r27, 0x41	; 65
    294c:	8b 87       	std	Y+11, r24	; 0x0b
    294e:	9c 87       	std	Y+12, r25	; 0x0c
    2950:	ad 87       	std	Y+13, r26	; 0x0d
    2952:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2954:	6b 85       	ldd	r22, Y+11	; 0x0b
    2956:	7c 85       	ldd	r23, Y+12	; 0x0c
    2958:	8d 85       	ldd	r24, Y+13	; 0x0d
    295a:	9e 85       	ldd	r25, Y+14	; 0x0e
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	4a ef       	ldi	r20, 0xFA	; 250
    2962:	54 e4       	ldi	r21, 0x44	; 68
    2964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	8f 83       	std	Y+7, r24	; 0x07
    296e:	98 87       	std	Y+8, r25	; 0x08
    2970:	a9 87       	std	Y+9, r26	; 0x09
    2972:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2974:	6f 81       	ldd	r22, Y+7	; 0x07
    2976:	78 85       	ldd	r23, Y+8	; 0x08
    2978:	89 85       	ldd	r24, Y+9	; 0x09
    297a:	9a 85       	ldd	r25, Y+10	; 0x0a
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e8       	ldi	r20, 0x80	; 128
    2982:	5f e3       	ldi	r21, 0x3F	; 63
    2984:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2988:	88 23       	and	r24, r24
    298a:	2c f4       	brge	.+10     	; 0x2996 <STM_u8_STOP+0x8e>
		__ticks = 1;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	9e 83       	std	Y+6, r25	; 0x06
    2992:	8d 83       	std	Y+5, r24	; 0x05
    2994:	3f c0       	rjmp	.+126    	; 0x2a14 <STM_u8_STOP+0x10c>
	else if (__tmp > 65535)
    2996:	6f 81       	ldd	r22, Y+7	; 0x07
    2998:	78 85       	ldd	r23, Y+8	; 0x08
    299a:	89 85       	ldd	r24, Y+9	; 0x09
    299c:	9a 85       	ldd	r25, Y+10	; 0x0a
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	3f ef       	ldi	r19, 0xFF	; 255
    29a2:	4f e7       	ldi	r20, 0x7F	; 127
    29a4:	57 e4       	ldi	r21, 0x47	; 71
    29a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29aa:	18 16       	cp	r1, r24
    29ac:	4c f5       	brge	.+82     	; 0x2a00 <STM_u8_STOP+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e2       	ldi	r20, 0x20	; 32
    29bc:	51 e4       	ldi	r21, 0x41	; 65
    29be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	bc 01       	movw	r22, r24
    29c8:	cd 01       	movw	r24, r26
    29ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	9e 83       	std	Y+6, r25	; 0x06
    29d4:	8d 83       	std	Y+5, r24	; 0x05
    29d6:	0f c0       	rjmp	.+30     	; 0x29f6 <STM_u8_STOP+0xee>
    29d8:	88 ec       	ldi	r24, 0xC8	; 200
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9c 83       	std	Y+4, r25	; 0x04
    29de:	8b 83       	std	Y+3, r24	; 0x03
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	9c 81       	ldd	r25, Y+4	; 0x04
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <STM_u8_STOP+0xdc>
    29e8:	9c 83       	std	Y+4, r25	; 0x04
    29ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ec:	8d 81       	ldd	r24, Y+5	; 0x05
    29ee:	9e 81       	ldd	r25, Y+6	; 0x06
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f6:	8d 81       	ldd	r24, Y+5	; 0x05
    29f8:	9e 81       	ldd	r25, Y+6	; 0x06
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	69 f7       	brne	.-38     	; 0x29d8 <STM_u8_STOP+0xd0>
    29fe:	14 c0       	rjmp	.+40     	; 0x2a28 <STM_u8_STOP+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a00:	6f 81       	ldd	r22, Y+7	; 0x07
    2a02:	78 85       	ldd	r23, Y+8	; 0x08
    2a04:	89 85       	ldd	r24, Y+9	; 0x09
    2a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	9e 83       	std	Y+6, r25	; 0x06
    2a12:	8d 83       	std	Y+5, r24	; 0x05
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	9e 81       	ldd	r25, Y+6	; 0x06
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <STM_u8_STOP+0x118>
    2a24:	9a 83       	std	Y+2, r25	; 0x02
    2a26:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	return STD_TYPES_OK;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
}
    2a2a:	2e 96       	adiw	r28, 0x0e	; 14
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	f8 94       	cli
    2a30:	de bf       	out	0x3e, r29	; 62
    2a32:	0f be       	out	0x3f, r0	; 63
    2a34:	cd bf       	out	0x3d, r28	; 61
    2a36:	cf 91       	pop	r28
    2a38:	df 91       	pop	r29
    2a3a:	08 95       	ret

00002a3c <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_voidInit(void)
{
    2a3c:	0f 93       	push	r16
    2a3e:	1f 93       	push	r17
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	cc 54       	subi	r28, 0x4C	; 76
    2a4a:	d0 40       	sbci	r29, 0x00	; 0
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	f8 94       	cli
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	cd bf       	out	0x3d, r28	; 61
    2a56:	fe 01       	movw	r30, r28
    2a58:	e7 5b       	subi	r30, 0xB7	; 183
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	ac e0       	ldi	r26, 0x0C	; 12
    2a62:	b2 e4       	ldi	r27, 0x42	; 66
    2a64:	80 83       	st	Z, r24
    2a66:	91 83       	std	Z+1, r25	; 0x01
    2a68:	a2 83       	std	Z+2, r26	; 0x02
    2a6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6c:	8e 01       	movw	r16, r28
    2a6e:	0b 5b       	subi	r16, 0xBB	; 187
    2a70:	1f 4f       	sbci	r17, 0xFF	; 255
    2a72:	fe 01       	movw	r30, r28
    2a74:	e7 5b       	subi	r30, 0xB7	; 183
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	60 81       	ld	r22, Z
    2a7a:	71 81       	ldd	r23, Z+1	; 0x01
    2a7c:	82 81       	ldd	r24, Z+2	; 0x02
    2a7e:	93 81       	ldd	r25, Z+3	; 0x03
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	4a ef       	ldi	r20, 0xFA	; 250
    2a86:	54 e4       	ldi	r21, 0x44	; 68
    2a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	f8 01       	movw	r30, r16
    2a92:	80 83       	st	Z, r24
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	a2 83       	std	Z+2, r26	; 0x02
    2a98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	eb 5b       	subi	r30, 0xBB	; 187
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	60 81       	ld	r22, Z
    2aa2:	71 81       	ldd	r23, Z+1	; 0x01
    2aa4:	82 81       	ldd	r24, Z+2	; 0x02
    2aa6:	93 81       	ldd	r25, Z+3	; 0x03
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e8       	ldi	r20, 0x80	; 128
    2aae:	5f e3       	ldi	r21, 0x3F	; 63
    2ab0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ab4:	88 23       	and	r24, r24
    2ab6:	44 f4       	brge	.+16     	; 0x2ac8 <LCD_voidInit+0x8c>
		__ticks = 1;
    2ab8:	fe 01       	movw	r30, r28
    2aba:	ed 5b       	subi	r30, 0xBD	; 189
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	91 83       	std	Z+1, r25	; 0x01
    2ac4:	80 83       	st	Z, r24
    2ac6:	64 c0       	rjmp	.+200    	; 0x2b90 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    2ac8:	fe 01       	movw	r30, r28
    2aca:	eb 5b       	subi	r30, 0xBB	; 187
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	60 81       	ld	r22, Z
    2ad0:	71 81       	ldd	r23, Z+1	; 0x01
    2ad2:	82 81       	ldd	r24, Z+2	; 0x02
    2ad4:	93 81       	ldd	r25, Z+3	; 0x03
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	3f ef       	ldi	r19, 0xFF	; 255
    2ada:	4f e7       	ldi	r20, 0x7F	; 127
    2adc:	57 e4       	ldi	r21, 0x47	; 71
    2ade:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ae2:	18 16       	cp	r1, r24
    2ae4:	0c f0       	brlt	.+2      	; 0x2ae8 <LCD_voidInit+0xac>
    2ae6:	43 c0       	rjmp	.+134    	; 0x2b6e <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e7 5b       	subi	r30, 0xB7	; 183
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	60 81       	ld	r22, Z
    2af0:	71 81       	ldd	r23, Z+1	; 0x01
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e2       	ldi	r20, 0x20	; 32
    2afc:	51 e4       	ldi	r21, 0x41	; 65
    2afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	8e 01       	movw	r16, r28
    2b08:	0d 5b       	subi	r16, 0xBD	; 189
    2b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0c:	bc 01       	movw	r22, r24
    2b0e:	cd 01       	movw	r24, r26
    2b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	f8 01       	movw	r30, r16
    2b1a:	91 83       	std	Z+1, r25	; 0x01
    2b1c:	80 83       	st	Z, r24
    2b1e:	1f c0       	rjmp	.+62     	; 0x2b5e <LCD_voidInit+0x122>
    2b20:	fe 01       	movw	r30, r28
    2b22:	ef 5b       	subi	r30, 0xBF	; 191
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	88 ec       	ldi	r24, 0xC8	; 200
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	91 83       	std	Z+1, r25	; 0x01
    2b2c:	80 83       	st	Z, r24
    2b2e:	fe 01       	movw	r30, r28
    2b30:	ef 5b       	subi	r30, 0xBF	; 191
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	80 81       	ld	r24, Z
    2b36:	91 81       	ldd	r25, Z+1	; 0x01
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <LCD_voidInit+0xfc>
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	ef 5b       	subi	r30, 0xBF	; 191
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	91 83       	std	Z+1, r25	; 0x01
    2b44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b46:	de 01       	movw	r26, r28
    2b48:	ad 5b       	subi	r26, 0xBD	; 189
    2b4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	ed 5b       	subi	r30, 0xBD	; 189
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	80 81       	ld	r24, Z
    2b54:	91 81       	ldd	r25, Z+1	; 0x01
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	11 96       	adiw	r26, 0x01	; 1
    2b5a:	9c 93       	st	X, r25
    2b5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5e:	fe 01       	movw	r30, r28
    2b60:	ed 5b       	subi	r30, 0xBD	; 189
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	80 81       	ld	r24, Z
    2b66:	91 81       	ldd	r25, Z+1	; 0x01
    2b68:	00 97       	sbiw	r24, 0x00	; 0
    2b6a:	d1 f6       	brne	.-76     	; 0x2b20 <LCD_voidInit+0xe4>
    2b6c:	24 c0       	rjmp	.+72     	; 0x2bb6 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b6e:	8e 01       	movw	r16, r28
    2b70:	0d 5b       	subi	r16, 0xBD	; 189
    2b72:	1f 4f       	sbci	r17, 0xFF	; 255
    2b74:	fe 01       	movw	r30, r28
    2b76:	eb 5b       	subi	r30, 0xBB	; 187
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	60 81       	ld	r22, Z
    2b7c:	71 81       	ldd	r23, Z+1	; 0x01
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	f8 01       	movw	r30, r16
    2b8c:	91 83       	std	Z+1, r25	; 0x01
    2b8e:	80 83       	st	Z, r24
    2b90:	fe 01       	movw	r30, r28
    2b92:	ed 5b       	subi	r30, 0xBD	; 189
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	80 81       	ld	r24, Z
    2b98:	91 81       	ldd	r25, Z+1	; 0x01
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	ff 96       	adiw	r30, 0x3f	; 63
    2b9e:	91 83       	std	Z+1, r25	; 0x01
    2ba0:	80 83       	st	Z, r24
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	ff 96       	adiw	r30, 0x3f	; 63
    2ba6:	80 81       	ld	r24, Z
    2ba8:	91 81       	ldd	r25, Z+1	; 0x01
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	f1 f7       	brne	.-4      	; 0x2baa <LCD_voidInit+0x16e>
    2bae:	fe 01       	movw	r30, r28
    2bb0:	ff 96       	adiw	r30, 0x3f	; 63
    2bb2:	91 83       	std	Z+1, r25	; 0x01
    2bb4:	80 83       	st	Z, r24
	_delay_ms(35);
	/* Function Set Cmnd */
	LCD_voidSendCmnd(0b00111000);
    2bb6:	88 e3       	ldi	r24, 0x38	; 56
    2bb8:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_voidSendCmnd>
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	a0 e2       	ldi	r26, 0x20	; 32
    2bc2:	b2 e4       	ldi	r27, 0x42	; 66
    2bc4:	8b af       	std	Y+59, r24	; 0x3b
    2bc6:	9c af       	std	Y+60, r25	; 0x3c
    2bc8:	ad af       	std	Y+61, r26	; 0x3d
    2bca:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bcc:	6b ad       	ldd	r22, Y+59	; 0x3b
    2bce:	7c ad       	ldd	r23, Y+60	; 0x3c
    2bd0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bd2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bd4:	2b ea       	ldi	r18, 0xAB	; 171
    2bd6:	3a ea       	ldi	r19, 0xAA	; 170
    2bd8:	4a e2       	ldi	r20, 0x2A	; 42
    2bda:	50 e4       	ldi	r21, 0x40	; 64
    2bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	8f ab       	std	Y+55, r24	; 0x37
    2be6:	98 af       	std	Y+56, r25	; 0x38
    2be8:	a9 af       	std	Y+57, r26	; 0x39
    2bea:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2bec:	6f a9       	ldd	r22, Y+55	; 0x37
    2bee:	78 ad       	ldd	r23, Y+56	; 0x38
    2bf0:	89 ad       	ldd	r24, Y+57	; 0x39
    2bf2:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e8       	ldi	r20, 0x80	; 128
    2bfa:	5f e3       	ldi	r21, 0x3F	; 63
    2bfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c00:	88 23       	and	r24, r24
    2c02:	1c f4       	brge	.+6      	; 0x2c0a <LCD_voidInit+0x1ce>
		__ticks = 1;
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	8e ab       	std	Y+54, r24	; 0x36
    2c08:	91 c0       	rjmp	.+290    	; 0x2d2c <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    2c0a:	6f a9       	ldd	r22, Y+55	; 0x37
    2c0c:	78 ad       	ldd	r23, Y+56	; 0x38
    2c0e:	89 ad       	ldd	r24, Y+57	; 0x39
    2c10:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	4f e7       	ldi	r20, 0x7F	; 127
    2c18:	53 e4       	ldi	r21, 0x43	; 67
    2c1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c1e:	18 16       	cp	r1, r24
    2c20:	0c f0       	brlt	.+2      	; 0x2c24 <LCD_voidInit+0x1e8>
    2c22:	7b c0       	rjmp	.+246    	; 0x2d1a <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    2c24:	6b ad       	ldd	r22, Y+59	; 0x3b
    2c26:	7c ad       	ldd	r23, Y+60	; 0x3c
    2c28:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	4a e7       	ldi	r20, 0x7A	; 122
    2c32:	54 e4       	ldi	r21, 0x44	; 68
    2c34:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	8a ab       	std	Y+50, r24	; 0x32
    2c3e:	9b ab       	std	Y+51, r25	; 0x33
    2c40:	ac ab       	std	Y+52, r26	; 0x34
    2c42:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c44:	6a a9       	ldd	r22, Y+50	; 0x32
    2c46:	7b a9       	ldd	r23, Y+51	; 0x33
    2c48:	8c a9       	ldd	r24, Y+52	; 0x34
    2c4a:	9d a9       	ldd	r25, Y+53	; 0x35
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	4a ef       	ldi	r20, 0xFA	; 250
    2c52:	54 e4       	ldi	r21, 0x44	; 68
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	8e a7       	std	Y+46, r24	; 0x2e
    2c5e:	9f a7       	std	Y+47, r25	; 0x2f
    2c60:	a8 ab       	std	Y+48, r26	; 0x30
    2c62:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2c64:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c66:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c68:	88 a9       	ldd	r24, Y+48	; 0x30
    2c6a:	99 a9       	ldd	r25, Y+49	; 0x31
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e8       	ldi	r20, 0x80	; 128
    2c72:	5f e3       	ldi	r21, 0x3F	; 63
    2c74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c78:	88 23       	and	r24, r24
    2c7a:	2c f4       	brge	.+10     	; 0x2c86 <LCD_voidInit+0x24a>
		__ticks = 1;
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	9d a7       	std	Y+45, r25	; 0x2d
    2c82:	8c a7       	std	Y+44, r24	; 0x2c
    2c84:	3f c0       	rjmp	.+126    	; 0x2d04 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    2c86:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c88:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c8a:	88 a9       	ldd	r24, Y+48	; 0x30
    2c8c:	99 a9       	ldd	r25, Y+49	; 0x31
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	3f ef       	ldi	r19, 0xFF	; 255
    2c92:	4f e7       	ldi	r20, 0x7F	; 127
    2c94:	57 e4       	ldi	r21, 0x47	; 71
    2c96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c9a:	18 16       	cp	r1, r24
    2c9c:	4c f5       	brge	.+82     	; 0x2cf0 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9e:	6a a9       	ldd	r22, Y+50	; 0x32
    2ca0:	7b a9       	ldd	r23, Y+51	; 0x33
    2ca2:	8c a9       	ldd	r24, Y+52	; 0x34
    2ca4:	9d a9       	ldd	r25, Y+53	; 0x35
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e2       	ldi	r20, 0x20	; 32
    2cac:	51 e4       	ldi	r21, 0x41	; 65
    2cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	bc 01       	movw	r22, r24
    2cb8:	cd 01       	movw	r24, r26
    2cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	9d a7       	std	Y+45, r25	; 0x2d
    2cc4:	8c a7       	std	Y+44, r24	; 0x2c
    2cc6:	0f c0       	rjmp	.+30     	; 0x2ce6 <LCD_voidInit+0x2aa>
    2cc8:	88 ec       	ldi	r24, 0xC8	; 200
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	9b a7       	std	Y+43, r25	; 0x2b
    2cce:	8a a7       	std	Y+42, r24	; 0x2a
    2cd0:	8a a5       	ldd	r24, Y+42	; 0x2a
    2cd2:	9b a5       	ldd	r25, Y+43	; 0x2b
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <LCD_voidInit+0x298>
    2cd8:	9b a7       	std	Y+43, r25	; 0x2b
    2cda:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cdc:	8c a5       	ldd	r24, Y+44	; 0x2c
    2cde:	9d a5       	ldd	r25, Y+45	; 0x2d
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	9d a7       	std	Y+45, r25	; 0x2d
    2ce4:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce6:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ce8:	9d a5       	ldd	r25, Y+45	; 0x2d
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	69 f7       	brne	.-38     	; 0x2cc8 <LCD_voidInit+0x28c>
    2cee:	24 c0       	rjmp	.+72     	; 0x2d38 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf0:	6e a5       	ldd	r22, Y+46	; 0x2e
    2cf2:	7f a5       	ldd	r23, Y+47	; 0x2f
    2cf4:	88 a9       	ldd	r24, Y+48	; 0x30
    2cf6:	99 a9       	ldd	r25, Y+49	; 0x31
    2cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	9d a7       	std	Y+45, r25	; 0x2d
    2d02:	8c a7       	std	Y+44, r24	; 0x2c
    2d04:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d06:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d08:	99 a7       	std	Y+41, r25	; 0x29
    2d0a:	88 a7       	std	Y+40, r24	; 0x28
    2d0c:	88 a5       	ldd	r24, Y+40	; 0x28
    2d0e:	99 a5       	ldd	r25, Y+41	; 0x29
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	f1 f7       	brne	.-4      	; 0x2d10 <LCD_voidInit+0x2d4>
    2d14:	99 a7       	std	Y+41, r25	; 0x29
    2d16:	88 a7       	std	Y+40, r24	; 0x28
    2d18:	0f c0       	rjmp	.+30     	; 0x2d38 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d1a:	6f a9       	ldd	r22, Y+55	; 0x37
    2d1c:	78 ad       	ldd	r23, Y+56	; 0x38
    2d1e:	89 ad       	ldd	r24, Y+57	; 0x39
    2d20:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	8e ab       	std	Y+54, r24	; 0x36
    2d2c:	8e a9       	ldd	r24, Y+54	; 0x36
    2d2e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d30:	8f a1       	ldd	r24, Y+39	; 0x27
    2d32:	8a 95       	dec	r24
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <LCD_voidInit+0x2f6>
    2d36:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmnd(0b00001111);
    2d38:	8f e0       	ldi	r24, 0x0F	; 15
    2d3a:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_voidSendCmnd>
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	a0 e2       	ldi	r26, 0x20	; 32
    2d44:	b2 e4       	ldi	r27, 0x42	; 66
    2d46:	8b a3       	std	Y+35, r24	; 0x23
    2d48:	9c a3       	std	Y+36, r25	; 0x24
    2d4a:	ad a3       	std	Y+37, r26	; 0x25
    2d4c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d4e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d50:	7c a1       	ldd	r23, Y+36	; 0x24
    2d52:	8d a1       	ldd	r24, Y+37	; 0x25
    2d54:	9e a1       	ldd	r25, Y+38	; 0x26
    2d56:	2b ea       	ldi	r18, 0xAB	; 171
    2d58:	3a ea       	ldi	r19, 0xAA	; 170
    2d5a:	4a e2       	ldi	r20, 0x2A	; 42
    2d5c:	50 e4       	ldi	r21, 0x40	; 64
    2d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	8f 8f       	std	Y+31, r24	; 0x1f
    2d68:	98 a3       	std	Y+32, r25	; 0x20
    2d6a:	a9 a3       	std	Y+33, r26	; 0x21
    2d6c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2d6e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d70:	78 a1       	ldd	r23, Y+32	; 0x20
    2d72:	89 a1       	ldd	r24, Y+33	; 0x21
    2d74:	9a a1       	ldd	r25, Y+34	; 0x22
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	40 e8       	ldi	r20, 0x80	; 128
    2d7c:	5f e3       	ldi	r21, 0x3F	; 63
    2d7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d82:	88 23       	and	r24, r24
    2d84:	1c f4       	brge	.+6      	; 0x2d8c <LCD_voidInit+0x350>
		__ticks = 1;
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	8e 8f       	std	Y+30, r24	; 0x1e
    2d8a:	91 c0       	rjmp	.+290    	; 0x2eae <LCD_voidInit+0x472>
	else if (__tmp > 255)
    2d8c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d8e:	78 a1       	ldd	r23, Y+32	; 0x20
    2d90:	89 a1       	ldd	r24, Y+33	; 0x21
    2d92:	9a a1       	ldd	r25, Y+34	; 0x22
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	4f e7       	ldi	r20, 0x7F	; 127
    2d9a:	53 e4       	ldi	r21, 0x43	; 67
    2d9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2da0:	18 16       	cp	r1, r24
    2da2:	0c f0       	brlt	.+2      	; 0x2da6 <LCD_voidInit+0x36a>
    2da4:	7b c0       	rjmp	.+246    	; 0x2e9c <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2da6:	6b a1       	ldd	r22, Y+35	; 0x23
    2da8:	7c a1       	ldd	r23, Y+36	; 0x24
    2daa:	8d a1       	ldd	r24, Y+37	; 0x25
    2dac:	9e a1       	ldd	r25, Y+38	; 0x26
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	4a e7       	ldi	r20, 0x7A	; 122
    2db4:	54 e4       	ldi	r21, 0x44	; 68
    2db6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	8a 8f       	std	Y+26, r24	; 0x1a
    2dc0:	9b 8f       	std	Y+27, r25	; 0x1b
    2dc2:	ac 8f       	std	Y+28, r26	; 0x1c
    2dc4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2dc8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2dca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dcc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	4a ef       	ldi	r20, 0xFA	; 250
    2dd4:	54 e4       	ldi	r21, 0x44	; 68
    2dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	8e 8b       	std	Y+22, r24	; 0x16
    2de0:	9f 8b       	std	Y+23, r25	; 0x17
    2de2:	a8 8f       	std	Y+24, r26	; 0x18
    2de4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2de6:	6e 89       	ldd	r22, Y+22	; 0x16
    2de8:	7f 89       	ldd	r23, Y+23	; 0x17
    2dea:	88 8d       	ldd	r24, Y+24	; 0x18
    2dec:	99 8d       	ldd	r25, Y+25	; 0x19
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e8       	ldi	r20, 0x80	; 128
    2df4:	5f e3       	ldi	r21, 0x3F	; 63
    2df6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dfa:	88 23       	and	r24, r24
    2dfc:	2c f4       	brge	.+10     	; 0x2e08 <LCD_voidInit+0x3cc>
		__ticks = 1;
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	9d 8b       	std	Y+21, r25	; 0x15
    2e04:	8c 8b       	std	Y+20, r24	; 0x14
    2e06:	3f c0       	rjmp	.+126    	; 0x2e86 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    2e08:	6e 89       	ldd	r22, Y+22	; 0x16
    2e0a:	7f 89       	ldd	r23, Y+23	; 0x17
    2e0c:	88 8d       	ldd	r24, Y+24	; 0x18
    2e0e:	99 8d       	ldd	r25, Y+25	; 0x19
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	3f ef       	ldi	r19, 0xFF	; 255
    2e14:	4f e7       	ldi	r20, 0x7F	; 127
    2e16:	57 e4       	ldi	r21, 0x47	; 71
    2e18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e1c:	18 16       	cp	r1, r24
    2e1e:	4c f5       	brge	.+82     	; 0x2e72 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e20:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2e22:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2e24:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e26:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	40 e2       	ldi	r20, 0x20	; 32
    2e2e:	51 e4       	ldi	r21, 0x41	; 65
    2e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	bc 01       	movw	r22, r24
    2e3a:	cd 01       	movw	r24, r26
    2e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	9d 8b       	std	Y+21, r25	; 0x15
    2e46:	8c 8b       	std	Y+20, r24	; 0x14
    2e48:	0f c0       	rjmp	.+30     	; 0x2e68 <LCD_voidInit+0x42c>
    2e4a:	88 ec       	ldi	r24, 0xC8	; 200
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	9b 8b       	std	Y+19, r25	; 0x13
    2e50:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e52:	8a 89       	ldd	r24, Y+18	; 0x12
    2e54:	9b 89       	ldd	r25, Y+19	; 0x13
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	f1 f7       	brne	.-4      	; 0x2e56 <LCD_voidInit+0x41a>
    2e5a:	9b 8b       	std	Y+19, r25	; 0x13
    2e5c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5e:	8c 89       	ldd	r24, Y+20	; 0x14
    2e60:	9d 89       	ldd	r25, Y+21	; 0x15
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	9d 8b       	std	Y+21, r25	; 0x15
    2e66:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e68:	8c 89       	ldd	r24, Y+20	; 0x14
    2e6a:	9d 89       	ldd	r25, Y+21	; 0x15
    2e6c:	00 97       	sbiw	r24, 0x00	; 0
    2e6e:	69 f7       	brne	.-38     	; 0x2e4a <LCD_voidInit+0x40e>
    2e70:	24 c0       	rjmp	.+72     	; 0x2eba <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e72:	6e 89       	ldd	r22, Y+22	; 0x16
    2e74:	7f 89       	ldd	r23, Y+23	; 0x17
    2e76:	88 8d       	ldd	r24, Y+24	; 0x18
    2e78:	99 8d       	ldd	r25, Y+25	; 0x19
    2e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	9d 8b       	std	Y+21, r25	; 0x15
    2e84:	8c 8b       	std	Y+20, r24	; 0x14
    2e86:	8c 89       	ldd	r24, Y+20	; 0x14
    2e88:	9d 89       	ldd	r25, Y+21	; 0x15
    2e8a:	99 8b       	std	Y+17, r25	; 0x11
    2e8c:	88 8b       	std	Y+16, r24	; 0x10
    2e8e:	88 89       	ldd	r24, Y+16	; 0x10
    2e90:	99 89       	ldd	r25, Y+17	; 0x11
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	f1 f7       	brne	.-4      	; 0x2e92 <LCD_voidInit+0x456>
    2e96:	99 8b       	std	Y+17, r25	; 0x11
    2e98:	88 8b       	std	Y+16, r24	; 0x10
    2e9a:	0f c0       	rjmp	.+30     	; 0x2eba <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e9c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2e9e:	78 a1       	ldd	r23, Y+32	; 0x20
    2ea0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ea2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	8e 8f       	std	Y+30, r24	; 0x1e
    2eae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2eb0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2eb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eb4:	8a 95       	dec	r24
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <LCD_voidInit+0x478>
    2eb8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmnd(0b00000001);
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_voidSendCmnd>
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	a0 e0       	ldi	r26, 0x00	; 0
    2ec6:	b0 e4       	ldi	r27, 0x40	; 64
    2ec8:	8b 87       	std	Y+11, r24	; 0x0b
    2eca:	9c 87       	std	Y+12, r25	; 0x0c
    2ecc:	ad 87       	std	Y+13, r26	; 0x0d
    2ece:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	4a ef       	ldi	r20, 0xFA	; 250
    2ede:	54 e4       	ldi	r21, 0x44	; 68
    2ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	8f 83       	std	Y+7, r24	; 0x07
    2eea:	98 87       	std	Y+8, r25	; 0x08
    2eec:	a9 87       	std	Y+9, r26	; 0x09
    2eee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef2:	78 85       	ldd	r23, Y+8	; 0x08
    2ef4:	89 85       	ldd	r24, Y+9	; 0x09
    2ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	40 e8       	ldi	r20, 0x80	; 128
    2efe:	5f e3       	ldi	r21, 0x3F	; 63
    2f00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f04:	88 23       	and	r24, r24
    2f06:	2c f4       	brge	.+10     	; 0x2f12 <LCD_voidInit+0x4d6>
		__ticks = 1;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	9e 83       	std	Y+6, r25	; 0x06
    2f0e:	8d 83       	std	Y+5, r24	; 0x05
    2f10:	3f c0       	rjmp	.+126    	; 0x2f90 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    2f12:	6f 81       	ldd	r22, Y+7	; 0x07
    2f14:	78 85       	ldd	r23, Y+8	; 0x08
    2f16:	89 85       	ldd	r24, Y+9	; 0x09
    2f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	3f ef       	ldi	r19, 0xFF	; 255
    2f1e:	4f e7       	ldi	r20, 0x7F	; 127
    2f20:	57 e4       	ldi	r21, 0x47	; 71
    2f22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f26:	18 16       	cp	r1, r24
    2f28:	4c f5       	brge	.+82     	; 0x2f7c <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e2       	ldi	r20, 0x20	; 32
    2f38:	51 e4       	ldi	r21, 0x41	; 65
    2f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	bc 01       	movw	r22, r24
    2f44:	cd 01       	movw	r24, r26
    2f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	9e 83       	std	Y+6, r25	; 0x06
    2f50:	8d 83       	std	Y+5, r24	; 0x05
    2f52:	0f c0       	rjmp	.+30     	; 0x2f72 <LCD_voidInit+0x536>
    2f54:	88 ec       	ldi	r24, 0xC8	; 200
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	9c 83       	std	Y+4, r25	; 0x04
    2f5a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	f1 f7       	brne	.-4      	; 0x2f60 <LCD_voidInit+0x524>
    2f64:	9c 83       	std	Y+4, r25	; 0x04
    2f66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f68:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	9e 83       	std	Y+6, r25	; 0x06
    2f70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f72:	8d 81       	ldd	r24, Y+5	; 0x05
    2f74:	9e 81       	ldd	r25, Y+6	; 0x06
    2f76:	00 97       	sbiw	r24, 0x00	; 0
    2f78:	69 f7       	brne	.-38     	; 0x2f54 <LCD_voidInit+0x518>
    2f7a:	14 c0       	rjmp	.+40     	; 0x2fa4 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7e:	78 85       	ldd	r23, Y+8	; 0x08
    2f80:	89 85       	ldd	r24, Y+9	; 0x09
    2f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	9e 83       	std	Y+6, r25	; 0x06
    2f8e:	8d 83       	std	Y+5, r24	; 0x05
    2f90:	8d 81       	ldd	r24, Y+5	; 0x05
    2f92:	9e 81       	ldd	r25, Y+6	; 0x06
    2f94:	9a 83       	std	Y+2, r25	; 0x02
    2f96:	89 83       	std	Y+1, r24	; 0x01
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	f1 f7       	brne	.-4      	; 0x2f9c <LCD_voidInit+0x560>
    2fa0:	9a 83       	std	Y+2, r25	; 0x02
    2fa2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmnd(0b00000110);
    2fa4:	86 e0       	ldi	r24, 0x06	; 6
    2fa6:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_voidSendCmnd>
}
    2faa:	c4 5b       	subi	r28, 0xB4	; 180
    2fac:	df 4f       	sbci	r29, 0xFF	; 255
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	de bf       	out	0x3e, r29	; 62
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	cd bf       	out	0x3d, r28	; 61
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	1f 91       	pop	r17
    2fbe:	0f 91       	pop	r16
    2fc0:	08 95       	ret

00002fc2 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    2fc2:	df 93       	push	r29
    2fc4:	cf 93       	push	r28
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	69 97       	sbiw	r28, 0x19	; 25
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	f8 94       	cli
    2fd0:	de bf       	out	0x3e, r29	; 62
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	cd bf       	out	0x3d, r28	; 61
    2fd6:	89 8f       	std	Y+25, r24	; 0x19
		//  Rs = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rs_PIN ,DIO_u8_LOW); // portA, Pin0 ,LOW
    2fd8:	83 e0       	ldi	r24, 0x03	; 3
    2fda:	60 e0       	ldi	r22, 0x00	; 0
    2fdc:	40 e0       	ldi	r20, 0x00	; 0
    2fde:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
		//  Rw = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rw_PIN ,DIO_u8_LOW); // portA, Pin1 ,LOW
    2fe2:	83 e0       	ldi	r24, 0x03	; 3
    2fe4:	61 e0       	ldi	r22, 0x01	; 1
    2fe6:	40 e0       	ldi	r20, 0x00	; 0
    2fe8:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
		/* Write Cmnd */
		DIO_u8SetPortValue(LCD_u8_DATA_PORT , Copy_u8Cmnd); // Port D
    2fec:	82 e0       	ldi	r24, 0x02	; 2
    2fee:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff0:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPortValue>
		// E = 1
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_HIGH); // portA, Pin2 ,HIGH
    2ff4:	83 e0       	ldi	r24, 0x03	; 3
    2ff6:	63 e0       	ldi	r22, 0x03	; 3
    2ff8:	41 e0       	ldi	r20, 0x01	; 1
    2ffa:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	a0 e8       	ldi	r26, 0x80	; 128
    3004:	bf e3       	ldi	r27, 0x3F	; 63
    3006:	8d 8b       	std	Y+21, r24	; 0x15
    3008:	9e 8b       	std	Y+22, r25	; 0x16
    300a:	af 8b       	std	Y+23, r26	; 0x17
    300c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    300e:	6d 89       	ldd	r22, Y+21	; 0x15
    3010:	7e 89       	ldd	r23, Y+22	; 0x16
    3012:	8f 89       	ldd	r24, Y+23	; 0x17
    3014:	98 8d       	ldd	r25, Y+24	; 0x18
    3016:	2b ea       	ldi	r18, 0xAB	; 171
    3018:	3a ea       	ldi	r19, 0xAA	; 170
    301a:	4a e2       	ldi	r20, 0x2A	; 42
    301c:	50 e4       	ldi	r21, 0x40	; 64
    301e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	89 8b       	std	Y+17, r24	; 0x11
    3028:	9a 8b       	std	Y+18, r25	; 0x12
    302a:	ab 8b       	std	Y+19, r26	; 0x13
    302c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    302e:	69 89       	ldd	r22, Y+17	; 0x11
    3030:	7a 89       	ldd	r23, Y+18	; 0x12
    3032:	8b 89       	ldd	r24, Y+19	; 0x13
    3034:	9c 89       	ldd	r25, Y+20	; 0x14
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	40 e8       	ldi	r20, 0x80	; 128
    303c:	5f e3       	ldi	r21, 0x3F	; 63
    303e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3042:	88 23       	and	r24, r24
    3044:	1c f4       	brge	.+6      	; 0x304c <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	88 8b       	std	Y+16, r24	; 0x10
    304a:	91 c0       	rjmp	.+290    	; 0x316e <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    304c:	69 89       	ldd	r22, Y+17	; 0x11
    304e:	7a 89       	ldd	r23, Y+18	; 0x12
    3050:	8b 89       	ldd	r24, Y+19	; 0x13
    3052:	9c 89       	ldd	r25, Y+20	; 0x14
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	4f e7       	ldi	r20, 0x7F	; 127
    305a:	53 e4       	ldi	r21, 0x43	; 67
    305c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3060:	18 16       	cp	r1, r24
    3062:	0c f0       	brlt	.+2      	; 0x3066 <LCD_voidSendCmnd+0xa4>
    3064:	7b c0       	rjmp	.+246    	; 0x315c <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    3066:	6d 89       	ldd	r22, Y+21	; 0x15
    3068:	7e 89       	ldd	r23, Y+22	; 0x16
    306a:	8f 89       	ldd	r24, Y+23	; 0x17
    306c:	98 8d       	ldd	r25, Y+24	; 0x18
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	4a e7       	ldi	r20, 0x7A	; 122
    3074:	54 e4       	ldi	r21, 0x44	; 68
    3076:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	8c 87       	std	Y+12, r24	; 0x0c
    3080:	9d 87       	std	Y+13, r25	; 0x0d
    3082:	ae 87       	std	Y+14, r26	; 0x0e
    3084:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3086:	6c 85       	ldd	r22, Y+12	; 0x0c
    3088:	7d 85       	ldd	r23, Y+13	; 0x0d
    308a:	8e 85       	ldd	r24, Y+14	; 0x0e
    308c:	9f 85       	ldd	r25, Y+15	; 0x0f
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	4a ef       	ldi	r20, 0xFA	; 250
    3094:	54 e4       	ldi	r21, 0x44	; 68
    3096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	88 87       	std	Y+8, r24	; 0x08
    30a0:	99 87       	std	Y+9, r25	; 0x09
    30a2:	aa 87       	std	Y+10, r26	; 0x0a
    30a4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    30a6:	68 85       	ldd	r22, Y+8	; 0x08
    30a8:	79 85       	ldd	r23, Y+9	; 0x09
    30aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    30ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	40 e8       	ldi	r20, 0x80	; 128
    30b4:	5f e3       	ldi	r21, 0x3F	; 63
    30b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ba:	88 23       	and	r24, r24
    30bc:	2c f4       	brge	.+10     	; 0x30c8 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	9f 83       	std	Y+7, r25	; 0x07
    30c4:	8e 83       	std	Y+6, r24	; 0x06
    30c6:	3f c0       	rjmp	.+126    	; 0x3146 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    30c8:	68 85       	ldd	r22, Y+8	; 0x08
    30ca:	79 85       	ldd	r23, Y+9	; 0x09
    30cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    30ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	3f ef       	ldi	r19, 0xFF	; 255
    30d4:	4f e7       	ldi	r20, 0x7F	; 127
    30d6:	57 e4       	ldi	r21, 0x47	; 71
    30d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30dc:	18 16       	cp	r1, r24
    30de:	4c f5       	brge	.+82     	; 0x3132 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    30e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    30e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    30e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	40 e2       	ldi	r20, 0x20	; 32
    30ee:	51 e4       	ldi	r21, 0x41	; 65
    30f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	bc 01       	movw	r22, r24
    30fa:	cd 01       	movw	r24, r26
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9f 83       	std	Y+7, r25	; 0x07
    3106:	8e 83       	std	Y+6, r24	; 0x06
    3108:	0f c0       	rjmp	.+30     	; 0x3128 <LCD_voidSendCmnd+0x166>
    310a:	88 ec       	ldi	r24, 0xC8	; 200
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	9d 83       	std	Y+5, r25	; 0x05
    3110:	8c 83       	std	Y+4, r24	; 0x04
    3112:	8c 81       	ldd	r24, Y+4	; 0x04
    3114:	9d 81       	ldd	r25, Y+5	; 0x05
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	f1 f7       	brne	.-4      	; 0x3116 <LCD_voidSendCmnd+0x154>
    311a:	9d 83       	std	Y+5, r25	; 0x05
    311c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311e:	8e 81       	ldd	r24, Y+6	; 0x06
    3120:	9f 81       	ldd	r25, Y+7	; 0x07
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	9f 83       	std	Y+7, r25	; 0x07
    3126:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3128:	8e 81       	ldd	r24, Y+6	; 0x06
    312a:	9f 81       	ldd	r25, Y+7	; 0x07
    312c:	00 97       	sbiw	r24, 0x00	; 0
    312e:	69 f7       	brne	.-38     	; 0x310a <LCD_voidSendCmnd+0x148>
    3130:	24 c0       	rjmp	.+72     	; 0x317a <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3132:	68 85       	ldd	r22, Y+8	; 0x08
    3134:	79 85       	ldd	r23, Y+9	; 0x09
    3136:	8a 85       	ldd	r24, Y+10	; 0x0a
    3138:	9b 85       	ldd	r25, Y+11	; 0x0b
    313a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	9f 83       	std	Y+7, r25	; 0x07
    3144:	8e 83       	std	Y+6, r24	; 0x06
    3146:	8e 81       	ldd	r24, Y+6	; 0x06
    3148:	9f 81       	ldd	r25, Y+7	; 0x07
    314a:	9b 83       	std	Y+3, r25	; 0x03
    314c:	8a 83       	std	Y+2, r24	; 0x02
    314e:	8a 81       	ldd	r24, Y+2	; 0x02
    3150:	9b 81       	ldd	r25, Y+3	; 0x03
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	f1 f7       	brne	.-4      	; 0x3152 <LCD_voidSendCmnd+0x190>
    3156:	9b 83       	std	Y+3, r25	; 0x03
    3158:	8a 83       	std	Y+2, r24	; 0x02
    315a:	0f c0       	rjmp	.+30     	; 0x317a <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    315c:	69 89       	ldd	r22, Y+17	; 0x11
    315e:	7a 89       	ldd	r23, Y+18	; 0x12
    3160:	8b 89       	ldd	r24, Y+19	; 0x13
    3162:	9c 89       	ldd	r25, Y+20	; 0x14
    3164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	88 8b       	std	Y+16, r24	; 0x10
    316e:	88 89       	ldd	r24, Y+16	; 0x10
    3170:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	8a 95       	dec	r24
    3176:	f1 f7       	brne	.-4      	; 0x3174 <LCD_voidSendCmnd+0x1b2>
    3178:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		// E = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_LOW); // portA, Pin2 ,LOW
    317a:	83 e0       	ldi	r24, 0x03	; 3
    317c:	63 e0       	ldi	r22, 0x03	; 3
    317e:	40 e0       	ldi	r20, 0x00	; 0
    3180:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
}
    3184:	69 96       	adiw	r28, 0x19	; 25
    3186:	0f b6       	in	r0, 0x3f	; 63
    3188:	f8 94       	cli
    318a:	de bf       	out	0x3e, r29	; 62
    318c:	0f be       	out	0x3f, r0	; 63
    318e:	cd bf       	out	0x3d, r28	; 61
    3190:	cf 91       	pop	r28
    3192:	df 91       	pop	r29
    3194:	08 95       	ret

00003196 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    3196:	df 93       	push	r29
    3198:	cf 93       	push	r28
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
    319e:	69 97       	sbiw	r28, 0x19	; 25
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	f8 94       	cli
    31a4:	de bf       	out	0x3e, r29	; 62
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	cd bf       	out	0x3d, r28	; 61
    31aa:	89 8f       	std	Y+25, r24	; 0x19
		// STEP 1 Rs = 1
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rs_PIN ,DIO_u8_HIGH); // portA, Pin0 , HIGH
    31ac:	83 e0       	ldi	r24, 0x03	; 3
    31ae:	60 e0       	ldi	r22, 0x00	; 0
    31b0:	41 e0       	ldi	r20, 0x01	; 1
    31b2:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
		// step 2 Rw = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rw_PIN ,DIO_u8_LOW); // portA, Pin1 , LOW
    31b6:	83 e0       	ldi	r24, 0x03	; 3
    31b8:	61 e0       	ldi	r22, 0x01	; 1
    31ba:	40 e0       	ldi	r20, 0x00	; 0
    31bc:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
		/* Write Char */
		DIO_u8SetPortValue(LCD_u8_DATA_PORT , Copy_u8Char); // Port D
    31c0:	82 e0       	ldi	r24, 0x02	; 2
    31c2:	69 8d       	ldd	r22, Y+25	; 0x19
    31c4:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPortValue>
		// E = 1
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_HIGH); // portA, Pin2 , HIGH
    31c8:	83 e0       	ldi	r24, 0x03	; 3
    31ca:	63 e0       	ldi	r22, 0x03	; 3
    31cc:	41 e0       	ldi	r20, 0x01	; 1
    31ce:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	a0 e8       	ldi	r26, 0x80	; 128
    31d8:	bf e3       	ldi	r27, 0x3F	; 63
    31da:	8d 8b       	std	Y+21, r24	; 0x15
    31dc:	9e 8b       	std	Y+22, r25	; 0x16
    31de:	af 8b       	std	Y+23, r26	; 0x17
    31e0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    31e2:	6d 89       	ldd	r22, Y+21	; 0x15
    31e4:	7e 89       	ldd	r23, Y+22	; 0x16
    31e6:	8f 89       	ldd	r24, Y+23	; 0x17
    31e8:	98 8d       	ldd	r25, Y+24	; 0x18
    31ea:	2b ea       	ldi	r18, 0xAB	; 171
    31ec:	3a ea       	ldi	r19, 0xAA	; 170
    31ee:	4a e2       	ldi	r20, 0x2A	; 42
    31f0:	50 e4       	ldi	r21, 0x40	; 64
    31f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	89 8b       	std	Y+17, r24	; 0x11
    31fc:	9a 8b       	std	Y+18, r25	; 0x12
    31fe:	ab 8b       	std	Y+19, r26	; 0x13
    3200:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3202:	69 89       	ldd	r22, Y+17	; 0x11
    3204:	7a 89       	ldd	r23, Y+18	; 0x12
    3206:	8b 89       	ldd	r24, Y+19	; 0x13
    3208:	9c 89       	ldd	r25, Y+20	; 0x14
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 e8       	ldi	r20, 0x80	; 128
    3210:	5f e3       	ldi	r21, 0x3F	; 63
    3212:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3216:	88 23       	and	r24, r24
    3218:	1c f4       	brge	.+6      	; 0x3220 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	88 8b       	std	Y+16, r24	; 0x10
    321e:	91 c0       	rjmp	.+290    	; 0x3342 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    3220:	69 89       	ldd	r22, Y+17	; 0x11
    3222:	7a 89       	ldd	r23, Y+18	; 0x12
    3224:	8b 89       	ldd	r24, Y+19	; 0x13
    3226:	9c 89       	ldd	r25, Y+20	; 0x14
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	4f e7       	ldi	r20, 0x7F	; 127
    322e:	53 e4       	ldi	r21, 0x43	; 67
    3230:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3234:	18 16       	cp	r1, r24
    3236:	0c f0       	brlt	.+2      	; 0x323a <LCD_voidSendChar+0xa4>
    3238:	7b c0       	rjmp	.+246    	; 0x3330 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    323a:	6d 89       	ldd	r22, Y+21	; 0x15
    323c:	7e 89       	ldd	r23, Y+22	; 0x16
    323e:	8f 89       	ldd	r24, Y+23	; 0x17
    3240:	98 8d       	ldd	r25, Y+24	; 0x18
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	4a e7       	ldi	r20, 0x7A	; 122
    3248:	54 e4       	ldi	r21, 0x44	; 68
    324a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	8c 87       	std	Y+12, r24	; 0x0c
    3254:	9d 87       	std	Y+13, r25	; 0x0d
    3256:	ae 87       	std	Y+14, r26	; 0x0e
    3258:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    325a:	6c 85       	ldd	r22, Y+12	; 0x0c
    325c:	7d 85       	ldd	r23, Y+13	; 0x0d
    325e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3260:	9f 85       	ldd	r25, Y+15	; 0x0f
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	4a ef       	ldi	r20, 0xFA	; 250
    3268:	54 e4       	ldi	r21, 0x44	; 68
    326a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	88 87       	std	Y+8, r24	; 0x08
    3274:	99 87       	std	Y+9, r25	; 0x09
    3276:	aa 87       	std	Y+10, r26	; 0x0a
    3278:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    327a:	68 85       	ldd	r22, Y+8	; 0x08
    327c:	79 85       	ldd	r23, Y+9	; 0x09
    327e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3280:	9b 85       	ldd	r25, Y+11	; 0x0b
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	40 e8       	ldi	r20, 0x80	; 128
    3288:	5f e3       	ldi	r21, 0x3F	; 63
    328a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    328e:	88 23       	and	r24, r24
    3290:	2c f4       	brge	.+10     	; 0x329c <LCD_voidSendChar+0x106>
		__ticks = 1;
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	9f 83       	std	Y+7, r25	; 0x07
    3298:	8e 83       	std	Y+6, r24	; 0x06
    329a:	3f c0       	rjmp	.+126    	; 0x331a <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    329c:	68 85       	ldd	r22, Y+8	; 0x08
    329e:	79 85       	ldd	r23, Y+9	; 0x09
    32a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    32a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	3f ef       	ldi	r19, 0xFF	; 255
    32a8:	4f e7       	ldi	r20, 0x7F	; 127
    32aa:	57 e4       	ldi	r21, 0x47	; 71
    32ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32b0:	18 16       	cp	r1, r24
    32b2:	4c f5       	brge	.+82     	; 0x3306 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b4:	6c 85       	ldd	r22, Y+12	; 0x0c
    32b6:	7d 85       	ldd	r23, Y+13	; 0x0d
    32b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    32ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e2       	ldi	r20, 0x20	; 32
    32c2:	51 e4       	ldi	r21, 0x41	; 65
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	bc 01       	movw	r22, r24
    32ce:	cd 01       	movw	r24, r26
    32d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	9f 83       	std	Y+7, r25	; 0x07
    32da:	8e 83       	std	Y+6, r24	; 0x06
    32dc:	0f c0       	rjmp	.+30     	; 0x32fc <LCD_voidSendChar+0x166>
    32de:	88 ec       	ldi	r24, 0xC8	; 200
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	9d 83       	std	Y+5, r25	; 0x05
    32e4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32e6:	8c 81       	ldd	r24, Y+4	; 0x04
    32e8:	9d 81       	ldd	r25, Y+5	; 0x05
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	f1 f7       	brne	.-4      	; 0x32ea <LCD_voidSendChar+0x154>
    32ee:	9d 83       	std	Y+5, r25	; 0x05
    32f0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f2:	8e 81       	ldd	r24, Y+6	; 0x06
    32f4:	9f 81       	ldd	r25, Y+7	; 0x07
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	9f 83       	std	Y+7, r25	; 0x07
    32fa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32fc:	8e 81       	ldd	r24, Y+6	; 0x06
    32fe:	9f 81       	ldd	r25, Y+7	; 0x07
    3300:	00 97       	sbiw	r24, 0x00	; 0
    3302:	69 f7       	brne	.-38     	; 0x32de <LCD_voidSendChar+0x148>
    3304:	24 c0       	rjmp	.+72     	; 0x334e <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3306:	68 85       	ldd	r22, Y+8	; 0x08
    3308:	79 85       	ldd	r23, Y+9	; 0x09
    330a:	8a 85       	ldd	r24, Y+10	; 0x0a
    330c:	9b 85       	ldd	r25, Y+11	; 0x0b
    330e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	9f 83       	std	Y+7, r25	; 0x07
    3318:	8e 83       	std	Y+6, r24	; 0x06
    331a:	8e 81       	ldd	r24, Y+6	; 0x06
    331c:	9f 81       	ldd	r25, Y+7	; 0x07
    331e:	9b 83       	std	Y+3, r25	; 0x03
    3320:	8a 83       	std	Y+2, r24	; 0x02
    3322:	8a 81       	ldd	r24, Y+2	; 0x02
    3324:	9b 81       	ldd	r25, Y+3	; 0x03
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	f1 f7       	brne	.-4      	; 0x3326 <LCD_voidSendChar+0x190>
    332a:	9b 83       	std	Y+3, r25	; 0x03
    332c:	8a 83       	std	Y+2, r24	; 0x02
    332e:	0f c0       	rjmp	.+30     	; 0x334e <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3330:	69 89       	ldd	r22, Y+17	; 0x11
    3332:	7a 89       	ldd	r23, Y+18	; 0x12
    3334:	8b 89       	ldd	r24, Y+19	; 0x13
    3336:	9c 89       	ldd	r25, Y+20	; 0x14
    3338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	88 8b       	std	Y+16, r24	; 0x10
    3342:	88 89       	ldd	r24, Y+16	; 0x10
    3344:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	8a 95       	dec	r24
    334a:	f1 f7       	brne	.-4      	; 0x3348 <LCD_voidSendChar+0x1b2>
    334c:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		// E = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_LOW); // portA, Pin2 , LOW
    334e:	83 e0       	ldi	r24, 0x03	; 3
    3350:	63 e0       	ldi	r22, 0x03	; 3
    3352:	40 e0       	ldi	r20, 0x00	; 0
    3354:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
}
    3358:	69 96       	adiw	r28, 0x19	; 25
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
    3364:	cf 91       	pop	r28
    3366:	df 91       	pop	r29
    3368:	08 95       	ret

0000336a <LCD_u8GoToXY>:

u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    336a:	df 93       	push	r29
    336c:	cf 93       	push	r28
    336e:	00 d0       	rcall	.+0      	; 0x3370 <LCD_u8GoToXY+0x6>
    3370:	00 d0       	rcall	.+0      	; 0x3372 <LCD_u8GoToXY+0x8>
    3372:	0f 92       	push	r0
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	8a 83       	std	Y+2, r24	; 0x02
    337a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    3380:	8b 81       	ldd	r24, Y+3	; 0x03
    3382:	88 32       	cpi	r24, 0x28	; 40
    3384:	e0 f4       	brcc	.+56     	; 0x33be <LCD_u8GoToXY+0x54>
	{
		switch (Copy_u8LineNum)
    3386:	8a 81       	ldd	r24, Y+2	; 0x02
    3388:	28 2f       	mov	r18, r24
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	3d 83       	std	Y+5, r19	; 0x05
    338e:	2c 83       	std	Y+4, r18	; 0x04
    3390:	8c 81       	ldd	r24, Y+4	; 0x04
    3392:	9d 81       	ldd	r25, Y+5	; 0x05
    3394:	81 30       	cpi	r24, 0x01	; 1
    3396:	91 05       	cpc	r25, r1
    3398:	31 f0       	breq	.+12     	; 0x33a6 <LCD_u8GoToXY+0x3c>
    339a:	2c 81       	ldd	r18, Y+4	; 0x04
    339c:	3d 81       	ldd	r19, Y+5	; 0x05
    339e:	22 30       	cpi	r18, 0x02	; 2
    33a0:	31 05       	cpc	r19, r1
    33a2:	31 f0       	breq	.+12     	; 0x33b0 <LCD_u8GoToXY+0x46>
    33a4:	0a c0       	rjmp	.+20     	; 0x33ba <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1 : LCD_voidSendCmnd(0x80+Copy_u8Location);break;
    33a6:	8b 81       	ldd	r24, Y+3	; 0x03
    33a8:	80 58       	subi	r24, 0x80	; 128
    33aa:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_voidSendCmnd>
    33ae:	08 c0       	rjmp	.+16     	; 0x33c0 <LCD_u8GoToXY+0x56>
			case LCD_u8_LINE2 : LCD_voidSendCmnd(0xc0+Copy_u8Location);break;
    33b0:	8b 81       	ldd	r24, Y+3	; 0x03
    33b2:	80 54       	subi	r24, 0x40	; 64
    33b4:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_voidSendCmnd>
    33b8:	03 c0       	rjmp	.+6      	; 0x33c0 <LCD_u8GoToXY+0x56>
			default : Local_u8ErrorState = STD_TYPES_NOK;
    33ba:	19 82       	std	Y+1, r1	; 0x01
    33bc:	01 c0       	rjmp	.+2      	; 0x33c0 <LCD_u8GoToXY+0x56>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    33be:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	0f 90       	pop	r0
    33c8:	0f 90       	pop	r0
    33ca:	0f 90       	pop	r0
    33cc:	cf 91       	pop	r28
    33ce:	df 91       	pop	r29
    33d0:	08 95       	ret

000033d2 <LCD_SendString>:

u8 LCD_SendString(u8 * Copy_pu8_String){
    33d2:	df 93       	push	r29
    33d4:	cf 93       	push	r28
    33d6:	00 d0       	rcall	.+0      	; 0x33d8 <LCD_SendString+0x6>
    33d8:	0f 92       	push	r0
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
    33de:	9b 83       	std	Y+3, r25	; 0x03
    33e0:	8a 83       	std	Y+2, r24	; 0x02
    for(u8 i=0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    33e2:	19 82       	std	Y+1, r1	; 0x01
    33e4:	0e c0       	rjmp	.+28     	; 0x3402 <LCD_SendString+0x30>
    	LCD_voidSendChar(Copy_pu8_String[i]);
    33e6:	89 81       	ldd	r24, Y+1	; 0x01
    33e8:	28 2f       	mov	r18, r24
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	8a 81       	ldd	r24, Y+2	; 0x02
    33ee:	9b 81       	ldd	r25, Y+3	; 0x03
    33f0:	fc 01       	movw	r30, r24
    33f2:	e2 0f       	add	r30, r18
    33f4:	f3 1f       	adc	r31, r19
    33f6:	80 81       	ld	r24, Z
    33f8:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_voidSendChar>
	}
	return Local_u8ErrorState;
}

u8 LCD_SendString(u8 * Copy_pu8_String){
    for(u8 i=0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    33fc:	89 81       	ldd	r24, Y+1	; 0x01
    33fe:	8f 5f       	subi	r24, 0xFF	; 255
    3400:	89 83       	std	Y+1, r24	; 0x01
    3402:	89 81       	ldd	r24, Y+1	; 0x01
    3404:	28 2f       	mov	r18, r24
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	8a 81       	ldd	r24, Y+2	; 0x02
    340a:	9b 81       	ldd	r25, Y+3	; 0x03
    340c:	fc 01       	movw	r30, r24
    340e:	e2 0f       	add	r30, r18
    3410:	f3 1f       	adc	r31, r19
    3412:	80 81       	ld	r24, Z
    3414:	88 23       	and	r24, r24
    3416:	39 f7       	brne	.-50     	; 0x33e6 <LCD_SendString+0x14>
    	LCD_voidSendChar(Copy_pu8_String[i]);
    }
    return STD_TYPES_OK;
    3418:	81 e0       	ldi	r24, 0x01	; 1
}
    341a:	0f 90       	pop	r0
    341c:	0f 90       	pop	r0
    341e:	0f 90       	pop	r0
    3420:	cf 91       	pop	r28
    3422:	df 91       	pop	r29
    3424:	08 95       	ret

00003426 <LCD_SendNum>:

u8 LCD_SendNum(u32 Copy_u32_Num){
    3426:	0f 93       	push	r16
    3428:	1f 93       	push	r17
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	cd b7       	in	r28, 0x3d	; 61
    3430:	de b7       	in	r29, 0x3e	; 62
    3432:	60 97       	sbiw	r28, 0x10	; 16
    3434:	0f b6       	in	r0, 0x3f	; 63
    3436:	f8 94       	cli
    3438:	de bf       	out	0x3e, r29	; 62
    343a:	0f be       	out	0x3f, r0	; 63
    343c:	cd bf       	out	0x3d, r28	; 61
    343e:	6d 87       	std	Y+13, r22	; 0x0d
    3440:	7e 87       	std	Y+14, r23	; 0x0e
    3442:	8f 87       	std	Y+15, r24	; 0x0f
    3444:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0,Local_u8_iterator2 = 0;
    3446:	1a 82       	std	Y+2, r1	; 0x02
    3448:	19 82       	std	Y+1, r1	; 0x01
	    if(Copy_u32_Num == 0)
    344a:	8d 85       	ldd	r24, Y+13	; 0x0d
    344c:	9e 85       	ldd	r25, Y+14	; 0x0e
    344e:	af 85       	ldd	r26, Y+15	; 0x0f
    3450:	b8 89       	ldd	r27, Y+16	; 0x10
    3452:	00 97       	sbiw	r24, 0x00	; 0
    3454:	a1 05       	cpc	r26, r1
    3456:	b1 05       	cpc	r27, r1
    3458:	89 f5       	brne	.+98     	; 0x34bc <LCD_SendNum+0x96>
	    	LCD_voidSendChar('0');
    345a:	80 e3       	ldi	r24, 0x30	; 48
    345c:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_voidSendChar>
    3460:	4d c0       	rjmp	.+154    	; 0x34fc <LCD_SendNum+0xd6>
	    else{
			while(Copy_u32_Num != 0){
				Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
    3462:	8a 81       	ldd	r24, Y+2	; 0x02
    3464:	08 2f       	mov	r16, r24
    3466:	10 e0       	ldi	r17, 0x00	; 0
    3468:	8d 85       	ldd	r24, Y+13	; 0x0d
    346a:	9e 85       	ldd	r25, Y+14	; 0x0e
    346c:	af 85       	ldd	r26, Y+15	; 0x0f
    346e:	b8 89       	ldd	r27, Y+16	; 0x10
    3470:	2a e0       	ldi	r18, 0x0A	; 10
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	40 e0       	ldi	r20, 0x00	; 0
    3476:	50 e0       	ldi	r21, 0x00	; 0
    3478:	bc 01       	movw	r22, r24
    347a:	cd 01       	movw	r24, r26
    347c:	0e 94 cd 1c 	call	0x399a	; 0x399a <__udivmodsi4>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	28 2f       	mov	r18, r24
    3486:	ce 01       	movw	r24, r28
    3488:	03 96       	adiw	r24, 0x03	; 3
    348a:	fc 01       	movw	r30, r24
    348c:	e0 0f       	add	r30, r16
    348e:	f1 1f       	adc	r31, r17
    3490:	20 83       	st	Z, r18
				Copy_u32_Num /= 10;
    3492:	8d 85       	ldd	r24, Y+13	; 0x0d
    3494:	9e 85       	ldd	r25, Y+14	; 0x0e
    3496:	af 85       	ldd	r26, Y+15	; 0x0f
    3498:	b8 89       	ldd	r27, Y+16	; 0x10
    349a:	2a e0       	ldi	r18, 0x0A	; 10
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	40 e0       	ldi	r20, 0x00	; 0
    34a0:	50 e0       	ldi	r21, 0x00	; 0
    34a2:	bc 01       	movw	r22, r24
    34a4:	cd 01       	movw	r24, r26
    34a6:	0e 94 cd 1c 	call	0x399a	; 0x399a <__udivmodsi4>
    34aa:	da 01       	movw	r26, r20
    34ac:	c9 01       	movw	r24, r18
    34ae:	8d 87       	std	Y+13, r24	; 0x0d
    34b0:	9e 87       	std	Y+14, r25	; 0x0e
    34b2:	af 87       	std	Y+15, r26	; 0x0f
    34b4:	b8 8b       	std	Y+16, r27	; 0x10
				Local_u8_iterator1++;
    34b6:	8a 81       	ldd	r24, Y+2	; 0x02
    34b8:	8f 5f       	subi	r24, 0xFF	; 255
    34ba:	8a 83       	std	Y+2, r24	; 0x02
u8 LCD_SendNum(u32 Copy_u32_Num){
	u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0,Local_u8_iterator2 = 0;
	    if(Copy_u32_Num == 0)
	    	LCD_voidSendChar('0');
	    else{
			while(Copy_u32_Num != 0){
    34bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34be:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c0:	af 85       	ldd	r26, Y+15	; 0x0f
    34c2:	b8 89       	ldd	r27, Y+16	; 0x10
    34c4:	00 97       	sbiw	r24, 0x00	; 0
    34c6:	a1 05       	cpc	r26, r1
    34c8:	b1 05       	cpc	r27, r1
    34ca:	59 f6       	brne	.-106    	; 0x3462 <LCD_SendNum+0x3c>
				Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
				Copy_u32_Num /= 10;
				Local_u8_iterator1++;
			}
			for(Local_u8_iterator2 = Local_u8_iterator1 ;Local_u8_iterator2>0; Local_u8_iterator2--){
    34cc:	8a 81       	ldd	r24, Y+2	; 0x02
    34ce:	89 83       	std	Y+1, r24	; 0x01
    34d0:	12 c0       	rjmp	.+36     	; 0x34f6 <LCD_SendNum+0xd0>
				LCD_voidSendChar(Local_u8_numArr[Local_u8_iterator2-1]+'0');
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	88 2f       	mov	r24, r24
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	9c 01       	movw	r18, r24
    34da:	21 50       	subi	r18, 0x01	; 1
    34dc:	30 40       	sbci	r19, 0x00	; 0
    34de:	ce 01       	movw	r24, r28
    34e0:	03 96       	adiw	r24, 0x03	; 3
    34e2:	fc 01       	movw	r30, r24
    34e4:	e2 0f       	add	r30, r18
    34e6:	f3 1f       	adc	r31, r19
    34e8:	80 81       	ld	r24, Z
    34ea:	80 5d       	subi	r24, 0xD0	; 208
    34ec:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_voidSendChar>
			while(Copy_u32_Num != 0){
				Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
				Copy_u32_Num /= 10;
				Local_u8_iterator1++;
			}
			for(Local_u8_iterator2 = Local_u8_iterator1 ;Local_u8_iterator2>0; Local_u8_iterator2--){
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	81 50       	subi	r24, 0x01	; 1
    34f4:	89 83       	std	Y+1, r24	; 0x01
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
    34f8:	88 23       	and	r24, r24
    34fa:	59 f7       	brne	.-42     	; 0x34d2 <LCD_SendNum+0xac>
				LCD_voidSendChar(Local_u8_numArr[Local_u8_iterator2-1]+'0');
			}
	    }
	    return STD_TYPES_OK;
    34fc:	81 e0       	ldi	r24, 0x01	; 1
}
    34fe:	60 96       	adiw	r28, 0x10	; 16
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61
    350a:	cf 91       	pop	r28
    350c:	df 91       	pop	r29
    350e:	1f 91       	pop	r17
    3510:	0f 91       	pop	r16
    3512:	08 95       	ret

00003514 <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};


u8 KPD_u8GetKeyState(u8 * Copy_pu8ReturnedKey)
{
    3514:	df 93       	push	r29
    3516:	cf 93       	push	r28
    3518:	cd b7       	in	r28, 0x3d	; 61
    351a:	de b7       	in	r29, 0x3e	; 62
    351c:	65 97       	sbiw	r28, 0x15	; 21
    351e:	0f b6       	in	r0, 0x3f	; 63
    3520:	f8 94       	cli
    3522:	de bf       	out	0x3e, r29	; 62
    3524:	0f be       	out	0x3f, r0	; 63
    3526:	cd bf       	out	0x3d, r28	; 61
    3528:	9d 8b       	std	Y+21, r25	; 0x15
    352a:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    352c:	81 e0       	ldi	r24, 0x01	; 1
    352e:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
    3530:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey != NULL)
    3532:	8c 89       	ldd	r24, Y+20	; 0x14
    3534:	9d 89       	ldd	r25, Y+21	; 0x15
    3536:	00 97       	sbiw	r24, 0x00	; 0
    3538:	09 f4       	brne	.+2      	; 0x353c <KPD_u8GetKeyState+0x28>
    353a:	f0 c0       	rjmp	.+480    	; 0x371c <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    353c:	ec 89       	ldd	r30, Y+20	; 0x14
    353e:	fd 89       	ldd	r31, Y+21	; 0x15
    3540:	8f ef       	ldi	r24, 0xFF	; 255
    3542:	80 83       	st	Z, r24
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    3544:	19 8a       	std	Y+17, r1	; 0x11
    3546:	e5 c0       	rjmp	.+458    	; 0x3712 <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_R_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    3548:	89 89       	ldd	r24, Y+17	; 0x11
    354a:	88 2f       	mov	r24, r24
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	fc 01       	movw	r30, r24
    3550:	e8 58       	subi	r30, 0x88	; 136
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	90 81       	ld	r25, Z
    3556:	80 e0       	ldi	r24, 0x00	; 0
    3558:	69 2f       	mov	r22, r25
    355a:	40 e0       	ldi	r20, 0x00	; 0
    355c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
			/* Check Which Input Pin Has Zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    3560:	18 8a       	std	Y+16, r1	; 0x10
    3562:	c1 c0       	rjmp	.+386    	; 0x36e6 <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    3564:	88 89       	ldd	r24, Y+16	; 0x10
    3566:	88 2f       	mov	r24, r24
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	fc 01       	movw	r30, r24
    356c:	e4 58       	subi	r30, 0x84	; 132
    356e:	ff 4f       	sbci	r31, 0xFF	; 255
    3570:	90 81       	ld	r25, Z
    3572:	9e 01       	movw	r18, r28
    3574:	2d 5e       	subi	r18, 0xED	; 237
    3576:	3f 4f       	sbci	r19, 0xFF	; 255
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	69 2f       	mov	r22, r25
    357c:	a9 01       	movw	r20, r18
    357e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)/* Switch is Pressed */
    3582:	8b 89       	ldd	r24, Y+19	; 0x13
    3584:	88 23       	and	r24, r24
    3586:	09 f0       	breq	.+2      	; 0x358a <KPD_u8GetKeyState+0x76>
    3588:	ab c0       	rjmp	.+342    	; 0x36e0 <KPD_u8GetKeyState+0x1cc>
    358a:	80 e0       	ldi	r24, 0x00	; 0
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	a0 ea       	ldi	r26, 0xA0	; 160
    3590:	b1 e4       	ldi	r27, 0x41	; 65
    3592:	8b 87       	std	Y+11, r24	; 0x0b
    3594:	9c 87       	std	Y+12, r25	; 0x0c
    3596:	ad 87       	std	Y+13, r26	; 0x0d
    3598:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    359a:	6b 85       	ldd	r22, Y+11	; 0x0b
    359c:	7c 85       	ldd	r23, Y+12	; 0x0c
    359e:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	4a ef       	ldi	r20, 0xFA	; 250
    35a8:	54 e4       	ldi	r21, 0x44	; 68
    35aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ae:	dc 01       	movw	r26, r24
    35b0:	cb 01       	movw	r24, r22
    35b2:	8f 83       	std	Y+7, r24	; 0x07
    35b4:	98 87       	std	Y+8, r25	; 0x08
    35b6:	a9 87       	std	Y+9, r26	; 0x09
    35b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35ba:	6f 81       	ldd	r22, Y+7	; 0x07
    35bc:	78 85       	ldd	r23, Y+8	; 0x08
    35be:	89 85       	ldd	r24, Y+9	; 0x09
    35c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	40 e8       	ldi	r20, 0x80	; 128
    35c8:	5f e3       	ldi	r21, 0x3F	; 63
    35ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ce:	88 23       	and	r24, r24
    35d0:	2c f4       	brge	.+10     	; 0x35dc <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	9e 83       	std	Y+6, r25	; 0x06
    35d8:	8d 83       	std	Y+5, r24	; 0x05
    35da:	3f c0       	rjmp	.+126    	; 0x365a <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    35dc:	6f 81       	ldd	r22, Y+7	; 0x07
    35de:	78 85       	ldd	r23, Y+8	; 0x08
    35e0:	89 85       	ldd	r24, Y+9	; 0x09
    35e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	3f ef       	ldi	r19, 0xFF	; 255
    35e8:	4f e7       	ldi	r20, 0x7F	; 127
    35ea:	57 e4       	ldi	r21, 0x47	; 71
    35ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35f0:	18 16       	cp	r1, r24
    35f2:	4c f5       	brge	.+82     	; 0x3646 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	40 e2       	ldi	r20, 0x20	; 32
    3602:	51 e4       	ldi	r21, 0x41	; 65
    3604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	bc 01       	movw	r22, r24
    360e:	cd 01       	movw	r24, r26
    3610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	9e 83       	std	Y+6, r25	; 0x06
    361a:	8d 83       	std	Y+5, r24	; 0x05
    361c:	0f c0       	rjmp	.+30     	; 0x363c <KPD_u8GetKeyState+0x128>
    361e:	88 ec       	ldi	r24, 0xC8	; 200
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	9c 83       	std	Y+4, r25	; 0x04
    3624:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3626:	8b 81       	ldd	r24, Y+3	; 0x03
    3628:	9c 81       	ldd	r25, Y+4	; 0x04
    362a:	01 97       	sbiw	r24, 0x01	; 1
    362c:	f1 f7       	brne	.-4      	; 0x362a <KPD_u8GetKeyState+0x116>
    362e:	9c 83       	std	Y+4, r25	; 0x04
    3630:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3632:	8d 81       	ldd	r24, Y+5	; 0x05
    3634:	9e 81       	ldd	r25, Y+6	; 0x06
    3636:	01 97       	sbiw	r24, 0x01	; 1
    3638:	9e 83       	std	Y+6, r25	; 0x06
    363a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363c:	8d 81       	ldd	r24, Y+5	; 0x05
    363e:	9e 81       	ldd	r25, Y+6	; 0x06
    3640:	00 97       	sbiw	r24, 0x00	; 0
    3642:	69 f7       	brne	.-38     	; 0x361e <KPD_u8GetKeyState+0x10a>
    3644:	14 c0       	rjmp	.+40     	; 0x366e <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3646:	6f 81       	ldd	r22, Y+7	; 0x07
    3648:	78 85       	ldd	r23, Y+8	; 0x08
    364a:	89 85       	ldd	r24, Y+9	; 0x09
    364c:	9a 85       	ldd	r25, Y+10	; 0x0a
    364e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	9e 83       	std	Y+6, r25	; 0x06
    3658:	8d 83       	std	Y+5, r24	; 0x05
    365a:	8d 81       	ldd	r24, Y+5	; 0x05
    365c:	9e 81       	ldd	r25, Y+6	; 0x06
    365e:	9a 83       	std	Y+2, r25	; 0x02
    3660:	89 83       	std	Y+1, r24	; 0x01
    3662:	89 81       	ldd	r24, Y+1	; 0x01
    3664:	9a 81       	ldd	r25, Y+2	; 0x02
    3666:	01 97       	sbiw	r24, 0x01	; 1
    3668:	f1 f7       	brne	.-4      	; 0x3666 <KPD_u8GetKeyState+0x152>
    366a:	9a 83       	std	Y+2, r25	; 0x02
    366c:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    366e:	88 89       	ldd	r24, Y+16	; 0x10
    3670:	88 2f       	mov	r24, r24
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	fc 01       	movw	r30, r24
    3676:	e4 58       	subi	r30, 0x84	; 132
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	90 81       	ld	r25, Z
    367c:	9e 01       	movw	r18, r28
    367e:	2d 5e       	subi	r18, 0xED	; 237
    3680:	3f 4f       	sbci	r19, 0xFF	; 255
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	69 2f       	mov	r22, r25
    3686:	a9 01       	movw	r20, r18
    3688:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <DIO_u8GetPinValue>
    368c:	0f c0       	rjmp	.+30     	; 0x36ac <KPD_u8GetKeyState+0x198>
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    368e:	88 89       	ldd	r24, Y+16	; 0x10
    3690:	88 2f       	mov	r24, r24
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	fc 01       	movw	r30, r24
    3696:	e4 58       	subi	r30, 0x84	; 132
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	90 81       	ld	r25, Z
    369c:	9e 01       	movw	r18, r28
    369e:	2d 5e       	subi	r18, 0xED	; 237
    36a0:	3f 4f       	sbci	r19, 0xFF	; 255
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	69 2f       	mov	r22, r25
    36a6:	a9 01       	movw	r20, r18
    36a8:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <DIO_u8GetPinValue>
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
    36ac:	8b 89       	ldd	r24, Y+19	; 0x13
    36ae:	88 23       	and	r24, r24
    36b0:	71 f3       	breq	.-36     	; 0x368e <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    36b2:	89 89       	ldd	r24, Y+17	; 0x11
    36b4:	48 2f       	mov	r20, r24
    36b6:	50 e0       	ldi	r21, 0x00	; 0
    36b8:	88 89       	ldd	r24, Y+16	; 0x10
    36ba:	28 2f       	mov	r18, r24
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	ca 01       	movw	r24, r20
    36c0:	88 0f       	add	r24, r24
    36c2:	99 1f       	adc	r25, r25
    36c4:	88 0f       	add	r24, r24
    36c6:	99 1f       	adc	r25, r25
    36c8:	82 0f       	add	r24, r18
    36ca:	93 1f       	adc	r25, r19
    36cc:	fc 01       	movw	r30, r24
    36ce:	e8 59       	subi	r30, 0x98	; 152
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	80 81       	ld	r24, Z
    36d4:	ec 89       	ldd	r30, Y+20	; 0x14
    36d6:	fd 89       	ldd	r31, Y+21	; 0x15
    36d8:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	8f 87       	std	Y+15, r24	; 0x0f
    36de:	07 c0       	rjmp	.+14     	; 0x36ee <KPD_u8GetKeyState+0x1da>
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
		{
			DIO_u8SetPinValue(KPD_u8_R_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
			/* Check Which Input Pin Has Zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    36e0:	88 89       	ldd	r24, Y+16	; 0x10
    36e2:	8f 5f       	subi	r24, 0xFF	; 255
    36e4:	88 8b       	std	Y+16, r24	; 0x10
    36e6:	88 89       	ldd	r24, Y+16	; 0x10
    36e8:	84 30       	cpi	r24, 0x04	; 4
    36ea:	08 f4       	brcc	.+2      	; 0x36ee <KPD_u8GetKeyState+0x1da>
    36ec:	3b cf       	rjmp	.-394    	; 0x3564 <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;						
				}
			}
			/* Deactivate Row */
			DIO_u8SetPinValue(KPD_u8_R_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    36ee:	89 89       	ldd	r24, Y+17	; 0x11
    36f0:	88 2f       	mov	r24, r24
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	fc 01       	movw	r30, r24
    36f6:	e8 58       	subi	r30, 0x88	; 136
    36f8:	ff 4f       	sbci	r31, 0xFF	; 255
    36fa:	90 81       	ld	r25, Z
    36fc:	80 e0       	ldi	r24, 0x00	; 0
    36fe:	69 2f       	mov	r22, r25
    3700:	41 e0       	ldi	r20, 0x01	; 1
    3702:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
			if(Local_u8Flag == 1)
    3706:	8f 85       	ldd	r24, Y+15	; 0x0f
    3708:	81 30       	cpi	r24, 0x01	; 1
    370a:	49 f0       	breq	.+18     	; 0x371e <KPD_u8GetKeyState+0x20a>
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    370c:	89 89       	ldd	r24, Y+17	; 0x11
    370e:	8f 5f       	subi	r24, 0xFF	; 255
    3710:	89 8b       	std	Y+17, r24	; 0x11
    3712:	89 89       	ldd	r24, Y+17	; 0x11
    3714:	84 30       	cpi	r24, 0x04	; 4
    3716:	08 f4       	brcc	.+2      	; 0x371a <KPD_u8GetKeyState+0x206>
    3718:	17 cf       	rjmp	.-466    	; 0x3548 <KPD_u8GetKeyState+0x34>
    371a:	01 c0       	rjmp	.+2      	; 0x371e <KPD_u8GetKeyState+0x20a>
			}
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    371c:	1a 8a       	std	Y+18, r1	; 0x12
	}
	return Local_u8ErrorState;
    371e:	8a 89       	ldd	r24, Y+18	; 0x12
}
    3720:	65 96       	adiw	r28, 0x15	; 21
    3722:	0f b6       	in	r0, 0x3f	; 63
    3724:	f8 94       	cli
    3726:	de bf       	out	0x3e, r29	; 62
    3728:	0f be       	out	0x3f, r0	; 63
    372a:	cd bf       	out	0x3d, r28	; 61
    372c:	cf 91       	pop	r28
    372e:	df 91       	pop	r29
    3730:	08 95       	ret

00003732 <DCM_u8_ROTATE_CW>:
#include "DCM_interface.h"
#include "DCM_private.h"
#include "DCM_config.h"

u8 DCM_u8_ROTATE_CW()
{
    3732:	df 93       	push	r29
    3734:	cf 93       	push	r28
    3736:	cd b7       	in	r28, 0x3d	; 61
    3738:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_IN1_PORT,MOTOR_IN1_PIN,DIO_u8_HIGH);
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	64 e0       	ldi	r22, 0x04	; 4
    373e:	41 e0       	ldi	r20, 0x01	; 1
    3740:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_IN2_PORT,MOTOR_IN2_PIN,DIO_u8_LOW);
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	65 e0       	ldi	r22, 0x05	; 5
    3748:	40 e0       	ldi	r20, 0x00	; 0
    374a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    374e:	81 e0       	ldi	r24, 0x01	; 1
}
    3750:	cf 91       	pop	r28
    3752:	df 91       	pop	r29
    3754:	08 95       	ret

00003756 <DCM_u8_ROTATE_CCW>:

u8 DCM_u8_ROTATE_CCW()
{
    3756:	df 93       	push	r29
    3758:	cf 93       	push	r28
    375a:	cd b7       	in	r28, 0x3d	; 61
    375c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_IN1_PORT,MOTOR_IN1_PIN,DIO_u8_LOW);
    375e:	81 e0       	ldi	r24, 0x01	; 1
    3760:	64 e0       	ldi	r22, 0x04	; 4
    3762:	40 e0       	ldi	r20, 0x00	; 0
    3764:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_IN2_PORT,MOTOR_IN2_PIN,DIO_u8_HIGH);
    3768:	81 e0       	ldi	r24, 0x01	; 1
    376a:	65 e0       	ldi	r22, 0x05	; 5
    376c:	41 e0       	ldi	r20, 0x01	; 1
    376e:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    3772:	81 e0       	ldi	r24, 0x01	; 1
}
    3774:	cf 91       	pop	r28
    3776:	df 91       	pop	r29
    3778:	08 95       	ret

0000377a <DCM_u8_ROTATE_STOP>:

u8 DCM_u8_ROTATE_STOP()
{
    377a:	df 93       	push	r29
    377c:	cf 93       	push	r28
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62
		DIO_u8SetPinValue(MOTOR_IN1_PORT,MOTOR_IN1_PIN,DIO_u8_LOW);
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	64 e0       	ldi	r22, 0x04	; 4
    3786:	40 e0       	ldi	r20, 0x00	; 0
    3788:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(MOTOR_IN2_PORT,MOTOR_IN2_PIN,DIO_u8_LOW);
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	65 e0       	ldi	r22, 0x05	; 5
    3790:	40 e0       	ldi	r20, 0x00	; 0
    3792:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>

		return STD_TYPES_OK;
    3796:	81 e0       	ldi	r24, 0x01	; 1

}
    3798:	cf 91       	pop	r28
    379a:	df 91       	pop	r29
    379c:	08 95       	ret

0000379e <DCM_u8_H_ROTATE_CW>:


/********************* FOR HARDWARE PART **********************/

u8 DCM_u8_H_ROTATE_CW()
{
    379e:	df 93       	push	r29
    37a0:	cf 93       	push	r28
    37a2:	cd b7       	in	r28, 0x3d	; 61
    37a4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CW_PIN,DIO_u8_HIGH);
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	64 e0       	ldi	r22, 0x04	; 4
    37aa:	41 e0       	ldi	r20, 0x01	; 1
    37ac:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CW_PIN,DIO_u8_HIGH);
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	65 e0       	ldi	r22, 0x05	; 5
    37b4:	41 e0       	ldi	r20, 0x01	; 1
    37b6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CCW_PIN,DIO_u8_LOW);
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	66 e0       	ldi	r22, 0x06	; 6
    37be:	40 e0       	ldi	r20, 0x00	; 0
    37c0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CCW_PIN,DIO_u8_LOW);
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	67 e0       	ldi	r22, 0x07	; 7
    37c8:	40 e0       	ldi	r20, 0x00	; 0
    37ca:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    37ce:	81 e0       	ldi	r24, 0x01	; 1
}
    37d0:	cf 91       	pop	r28
    37d2:	df 91       	pop	r29
    37d4:	08 95       	ret

000037d6 <DCM_u8_H_ROTATE_CCW>:

u8 DCM_u8_H_ROTATE_CCW()
{
    37d6:	df 93       	push	r29
    37d8:	cf 93       	push	r28
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CW_PIN,DIO_u8_LOW);
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	64 e0       	ldi	r22, 0x04	; 4
    37e2:	40 e0       	ldi	r20, 0x00	; 0
    37e4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CW_PIN,DIO_u8_LOW);
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	65 e0       	ldi	r22, 0x05	; 5
    37ec:	40 e0       	ldi	r20, 0x00	; 0
    37ee:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CCW_PIN,DIO_u8_HIGH);
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	66 e0       	ldi	r22, 0x06	; 6
    37f6:	41 e0       	ldi	r20, 0x01	; 1
    37f8:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CCW_PIN,DIO_u8_HIGH);
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	67 e0       	ldi	r22, 0x07	; 7
    3800:	41 e0       	ldi	r20, 0x01	; 1
    3802:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    3806:	81 e0       	ldi	r24, 0x01	; 1
}
    3808:	cf 91       	pop	r28
    380a:	df 91       	pop	r29
    380c:	08 95       	ret

0000380e <DCM_u8_H_ROTATE_STOP>:

u8 DCM_u8_H_ROTATE_STOP()
{
    380e:	df 93       	push	r29
    3810:	cf 93       	push	r28
    3812:	cd b7       	in	r28, 0x3d	; 61
    3814:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CW_PIN,DIO_u8_LOW);
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	64 e0       	ldi	r22, 0x04	; 4
    381a:	40 e0       	ldi	r20, 0x00	; 0
    381c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CW_PIN,DIO_u8_LOW);
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	65 e0       	ldi	r22, 0x05	; 5
    3824:	40 e0       	ldi	r20, 0x00	; 0
    3826:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CCW_PIN,DIO_u8_LOW);
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	66 e0       	ldi	r22, 0x06	; 6
    382e:	40 e0       	ldi	r20, 0x00	; 0
    3830:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CCW_PIN,DIO_u8_LOW);
    3834:	81 e0       	ldi	r24, 0x01	; 1
    3836:	67 e0       	ldi	r22, 0x07	; 7
    3838:	40 e0       	ldi	r20, 0x00	; 0
    383a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    383e:	81 e0       	ldi	r24, 0x01	; 1
}
    3840:	cf 91       	pop	r28
    3842:	df 91       	pop	r29
    3844:	08 95       	ret

00003846 <App_voidTogLed>:
#include <util/delay.h>



void App_voidTogLed(void)
{
    3846:	df 93       	push	r29
    3848:	cf 93       	push	r28
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
	static u8 flag = 0;
	if(flag == 0)
    384e:	80 91 91 00 	lds	r24, 0x0091
    3852:	88 23       	and	r24, r24
    3854:	49 f4       	brne	.+18     	; 0x3868 <App_voidTogLed+0x22>
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
    3856:	80 e0       	ldi	r24, 0x00	; 0
    3858:	60 e0       	ldi	r22, 0x00	; 0
    385a:	41 e0       	ldi	r20, 0x01	; 1
    385c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
		flag = 1;
    3860:	81 e0       	ldi	r24, 0x01	; 1
    3862:	80 93 91 00 	sts	0x0091, r24
    3866:	07 c0       	rjmp	.+14     	; 0x3876 <App_voidTogLed+0x30>
	}
	else
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    3868:	80 e0       	ldi	r24, 0x00	; 0
    386a:	60 e0       	ldi	r22, 0x00	; 0
    386c:	40 e0       	ldi	r20, 0x00	; 0
    386e:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
		flag = 0;
    3872:	10 92 91 00 	sts	0x0091, r1
	}
}
    3876:	cf 91       	pop	r28
    3878:	df 91       	pop	r29
    387a:	08 95       	ret

0000387c <main>:




u8 main(void)
{
    387c:	df 93       	push	r29
    387e:	cf 93       	push	r28
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
    3884:	62 97       	sbiw	r28, 0x12	; 18
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	f8 94       	cli
    388a:	de bf       	out	0x3e, r29	; 62
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	cd bf       	out	0x3d, r28	; 61
	u16 Local_u16DigitalValue;
	u16 Local_u16ServoValue;
	// initialization of DIO
	DIO_voidInit();
    3890:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_voidInit>
	// initialization of ADC
	ADC_voidInit();
    3894:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <ADC_voidInit>
	// initialization of TIMER
	TIMERS_voidTimer1Init();
    3898:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TIMERS_voidTimer1Init>

	while(505)
	{
		WDT_voidEnable();
    389c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <WDT_voidEnable>
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	60 e0       	ldi	r22, 0x00	; 0
    38a4:	41 e0       	ldi	r20, 0x01	; 1
    38a6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	aa e7       	ldi	r26, 0x7A	; 122
    38b0:	b4 e4       	ldi	r27, 0x44	; 68
    38b2:	8b 87       	std	Y+11, r24	; 0x0b
    38b4:	9c 87       	std	Y+12, r25	; 0x0c
    38b6:	ad 87       	std	Y+13, r26	; 0x0d
    38b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    38bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    38be:	8d 85       	ldd	r24, Y+13	; 0x0d
    38c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	4a ef       	ldi	r20, 0xFA	; 250
    38c8:	54 e4       	ldi	r21, 0x44	; 68
    38ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	8f 83       	std	Y+7, r24	; 0x07
    38d4:	98 87       	std	Y+8, r25	; 0x08
    38d6:	a9 87       	std	Y+9, r26	; 0x09
    38d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38da:	6f 81       	ldd	r22, Y+7	; 0x07
    38dc:	78 85       	ldd	r23, Y+8	; 0x08
    38de:	89 85       	ldd	r24, Y+9	; 0x09
    38e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	40 e8       	ldi	r20, 0x80	; 128
    38e8:	5f e3       	ldi	r21, 0x3F	; 63
    38ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38ee:	88 23       	and	r24, r24
    38f0:	2c f4       	brge	.+10     	; 0x38fc <main+0x80>
		__ticks = 1;
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	9e 83       	std	Y+6, r25	; 0x06
    38f8:	8d 83       	std	Y+5, r24	; 0x05
    38fa:	3f c0       	rjmp	.+126    	; 0x397a <main+0xfe>
	else if (__tmp > 65535)
    38fc:	6f 81       	ldd	r22, Y+7	; 0x07
    38fe:	78 85       	ldd	r23, Y+8	; 0x08
    3900:	89 85       	ldd	r24, Y+9	; 0x09
    3902:	9a 85       	ldd	r25, Y+10	; 0x0a
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	3f ef       	ldi	r19, 0xFF	; 255
    3908:	4f e7       	ldi	r20, 0x7F	; 127
    390a:	57 e4       	ldi	r21, 0x47	; 71
    390c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3910:	18 16       	cp	r1, r24
    3912:	4c f5       	brge	.+82     	; 0x3966 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3914:	6b 85       	ldd	r22, Y+11	; 0x0b
    3916:	7c 85       	ldd	r23, Y+12	; 0x0c
    3918:	8d 85       	ldd	r24, Y+13	; 0x0d
    391a:	9e 85       	ldd	r25, Y+14	; 0x0e
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	40 e2       	ldi	r20, 0x20	; 32
    3922:	51 e4       	ldi	r21, 0x41	; 65
    3924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	bc 01       	movw	r22, r24
    392e:	cd 01       	movw	r24, r26
    3930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3934:	dc 01       	movw	r26, r24
    3936:	cb 01       	movw	r24, r22
    3938:	9e 83       	std	Y+6, r25	; 0x06
    393a:	8d 83       	std	Y+5, r24	; 0x05
    393c:	0f c0       	rjmp	.+30     	; 0x395c <main+0xe0>
    393e:	88 ec       	ldi	r24, 0xC8	; 200
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	9c 83       	std	Y+4, r25	; 0x04
    3944:	8b 83       	std	Y+3, r24	; 0x03
    3946:	8b 81       	ldd	r24, Y+3	; 0x03
    3948:	9c 81       	ldd	r25, Y+4	; 0x04
    394a:	01 97       	sbiw	r24, 0x01	; 1
    394c:	f1 f7       	brne	.-4      	; 0x394a <main+0xce>
    394e:	9c 83       	std	Y+4, r25	; 0x04
    3950:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3952:	8d 81       	ldd	r24, Y+5	; 0x05
    3954:	9e 81       	ldd	r25, Y+6	; 0x06
    3956:	01 97       	sbiw	r24, 0x01	; 1
    3958:	9e 83       	std	Y+6, r25	; 0x06
    395a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    395c:	8d 81       	ldd	r24, Y+5	; 0x05
    395e:	9e 81       	ldd	r25, Y+6	; 0x06
    3960:	00 97       	sbiw	r24, 0x00	; 0
    3962:	69 f7       	brne	.-38     	; 0x393e <main+0xc2>
    3964:	14 c0       	rjmp	.+40     	; 0x398e <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3966:	6f 81       	ldd	r22, Y+7	; 0x07
    3968:	78 85       	ldd	r23, Y+8	; 0x08
    396a:	89 85       	ldd	r24, Y+9	; 0x09
    396c:	9a 85       	ldd	r25, Y+10	; 0x0a
    396e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3972:	dc 01       	movw	r26, r24
    3974:	cb 01       	movw	r24, r22
    3976:	9e 83       	std	Y+6, r25	; 0x06
    3978:	8d 83       	std	Y+5, r24	; 0x05
    397a:	8d 81       	ldd	r24, Y+5	; 0x05
    397c:	9e 81       	ldd	r25, Y+6	; 0x06
    397e:	9a 83       	std	Y+2, r25	; 0x02
    3980:	89 83       	std	Y+1, r24	; 0x01
    3982:	89 81       	ldd	r24, Y+1	; 0x01
    3984:	9a 81       	ldd	r25, Y+2	; 0x02
    3986:	01 97       	sbiw	r24, 0x01	; 1
    3988:	f1 f7       	brne	.-4      	; 0x3986 <main+0x10a>
    398a:	9a 83       	std	Y+2, r25	; 0x02
    398c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);
    398e:	81 e0       	ldi	r24, 0x01	; 1
    3990:	60 e0       	ldi	r22, 0x00	; 0
    3992:	40 e0       	ldi	r20, 0x00	; 0
    3994:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8SetPinValue>
    3998:	ff cf       	rjmp	.-2      	; 0x3998 <main+0x11c>

0000399a <__udivmodsi4>:
    399a:	a1 e2       	ldi	r26, 0x21	; 33
    399c:	1a 2e       	mov	r1, r26
    399e:	aa 1b       	sub	r26, r26
    39a0:	bb 1b       	sub	r27, r27
    39a2:	fd 01       	movw	r30, r26
    39a4:	0d c0       	rjmp	.+26     	; 0x39c0 <__udivmodsi4_ep>

000039a6 <__udivmodsi4_loop>:
    39a6:	aa 1f       	adc	r26, r26
    39a8:	bb 1f       	adc	r27, r27
    39aa:	ee 1f       	adc	r30, r30
    39ac:	ff 1f       	adc	r31, r31
    39ae:	a2 17       	cp	r26, r18
    39b0:	b3 07       	cpc	r27, r19
    39b2:	e4 07       	cpc	r30, r20
    39b4:	f5 07       	cpc	r31, r21
    39b6:	20 f0       	brcs	.+8      	; 0x39c0 <__udivmodsi4_ep>
    39b8:	a2 1b       	sub	r26, r18
    39ba:	b3 0b       	sbc	r27, r19
    39bc:	e4 0b       	sbc	r30, r20
    39be:	f5 0b       	sbc	r31, r21

000039c0 <__udivmodsi4_ep>:
    39c0:	66 1f       	adc	r22, r22
    39c2:	77 1f       	adc	r23, r23
    39c4:	88 1f       	adc	r24, r24
    39c6:	99 1f       	adc	r25, r25
    39c8:	1a 94       	dec	r1
    39ca:	69 f7       	brne	.-38     	; 0x39a6 <__udivmodsi4_loop>
    39cc:	60 95       	com	r22
    39ce:	70 95       	com	r23
    39d0:	80 95       	com	r24
    39d2:	90 95       	com	r25
    39d4:	9b 01       	movw	r18, r22
    39d6:	ac 01       	movw	r20, r24
    39d8:	bd 01       	movw	r22, r26
    39da:	cf 01       	movw	r24, r30
    39dc:	08 95       	ret

000039de <__prologue_saves__>:
    39de:	2f 92       	push	r2
    39e0:	3f 92       	push	r3
    39e2:	4f 92       	push	r4
    39e4:	5f 92       	push	r5
    39e6:	6f 92       	push	r6
    39e8:	7f 92       	push	r7
    39ea:	8f 92       	push	r8
    39ec:	9f 92       	push	r9
    39ee:	af 92       	push	r10
    39f0:	bf 92       	push	r11
    39f2:	cf 92       	push	r12
    39f4:	df 92       	push	r13
    39f6:	ef 92       	push	r14
    39f8:	ff 92       	push	r15
    39fa:	0f 93       	push	r16
    39fc:	1f 93       	push	r17
    39fe:	cf 93       	push	r28
    3a00:	df 93       	push	r29
    3a02:	cd b7       	in	r28, 0x3d	; 61
    3a04:	de b7       	in	r29, 0x3e	; 62
    3a06:	ca 1b       	sub	r28, r26
    3a08:	db 0b       	sbc	r29, r27
    3a0a:	0f b6       	in	r0, 0x3f	; 63
    3a0c:	f8 94       	cli
    3a0e:	de bf       	out	0x3e, r29	; 62
    3a10:	0f be       	out	0x3f, r0	; 63
    3a12:	cd bf       	out	0x3d, r28	; 61
    3a14:	09 94       	ijmp

00003a16 <__epilogue_restores__>:
    3a16:	2a 88       	ldd	r2, Y+18	; 0x12
    3a18:	39 88       	ldd	r3, Y+17	; 0x11
    3a1a:	48 88       	ldd	r4, Y+16	; 0x10
    3a1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a1e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a20:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a22:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a24:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a26:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a28:	b9 84       	ldd	r11, Y+9	; 0x09
    3a2a:	c8 84       	ldd	r12, Y+8	; 0x08
    3a2c:	df 80       	ldd	r13, Y+7	; 0x07
    3a2e:	ee 80       	ldd	r14, Y+6	; 0x06
    3a30:	fd 80       	ldd	r15, Y+5	; 0x05
    3a32:	0c 81       	ldd	r16, Y+4	; 0x04
    3a34:	1b 81       	ldd	r17, Y+3	; 0x03
    3a36:	aa 81       	ldd	r26, Y+2	; 0x02
    3a38:	b9 81       	ldd	r27, Y+1	; 0x01
    3a3a:	ce 0f       	add	r28, r30
    3a3c:	d1 1d       	adc	r29, r1
    3a3e:	0f b6       	in	r0, 0x3f	; 63
    3a40:	f8 94       	cli
    3a42:	de bf       	out	0x3e, r29	; 62
    3a44:	0f be       	out	0x3f, r0	; 63
    3a46:	cd bf       	out	0x3d, r28	; 61
    3a48:	ed 01       	movw	r28, r26
    3a4a:	08 95       	ret

00003a4c <_exit>:
    3a4c:	f8 94       	cli

00003a4e <__stop_program>:
    3a4e:	ff cf       	rjmp	.-2      	; 0x3a4e <__stop_program>
