
TIMER_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000038ec  00003980  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800080  00800080  000039a0  2**0
                  ALLOC
  3 .stab         000037bc  00000000  00000000  000039a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000138b  00000000  00000000  0000715c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000084e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008647  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000087d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a81b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b91c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c8a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000ca20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000cce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d570  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__vector_1>
       8:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__vector_2>
       c:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__vector_10>
      2c:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 10 1c 	call	0x3820	; 0x3820 <main>
      8a:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TIMERS_voidTimer1Init>:
/* Global Pointer to Function of Timer0 CTC */
static void(*TIMERS_pfTimer0CTC) (void) = NULL;


void TIMERS_voidTimer1Init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/* Select Timer1 Mode => 14 */
	SET_BIT(TIMERS_u8_TCCR1A_REG,1);
     ca6:	af e4       	ldi	r26, 0x4F	; 79
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ef e4       	ldi	r30, 0x4F	; 79
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	82 60       	ori	r24, 0x02	; 2
     cb2:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
     cb4:	af e4       	ldi	r26, 0x4F	; 79
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	ef e4       	ldi	r30, 0x4F	; 79
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8e 7f       	andi	r24, 0xFE	; 254
     cc0:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
     cc2:	ae e4       	ldi	r26, 0x4E	; 78
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ee e4       	ldi	r30, 0x4E	; 78
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	80 61       	ori	r24, 0x10	; 16
     cce:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
     cd0:	ae e4       	ldi	r26, 0x4E	; 78
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ee e4       	ldi	r30, 0x4E	; 78
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	88 60       	ori	r24, 0x08	; 8
     cdc:	8c 93       	st	X, r24

	/* Select HW Action On OC1A Pin => Non Inverting */
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
     cde:	af e4       	ldi	r26, 0x4F	; 79
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	ef e4       	ldi	r30, 0x4F	; 79
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 68       	ori	r24, 0x80	; 128
     cea:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,6);
     cec:	af e4       	ldi	r26, 0x4F	; 79
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	ef e4       	ldi	r30, 0x4F	; 79
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8f 7b       	andi	r24, 0xBF	; 191
     cf8:	8c 93       	st	X, r24

	/* Set Top Value in ICR1 */
	TIMERS_u16_ICR1_REG = 19999;
     cfa:	e6 e4       	ldi	r30, 0x46	; 70
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	8f e1       	ldi	r24, 0x1F	; 31
     d00:	9e e4       	ldi	r25, 0x4E	; 78
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	80 83       	st	Z, r24

	/* Set Angle of Servo Motor */
	TIMERS_u16_OCR1A_REG = 999;
     d06:	ea e4       	ldi	r30, 0x4A	; 74
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	87 ee       	ldi	r24, 0xE7	; 231
     d0c:	93 e0       	ldi	r25, 0x03	; 3
     d0e:	91 83       	std	Z+1, r25	; 0x01
     d10:	80 83       	st	Z, r24

		/* Set Prescaler Value CLK/8 */
		CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
     d12:	ae e4       	ldi	r26, 0x4E	; 78
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	ee e4       	ldi	r30, 0x4E	; 78
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8b 7f       	andi	r24, 0xFB	; 251
     d1e:	8c 93       	st	X, r24
		SET_BIT(TIMERS_u8_TCCR1B_REG,1);
     d20:	ae e4       	ldi	r26, 0x4E	; 78
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	ee e4       	ldi	r30, 0x4E	; 78
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	82 60       	ori	r24, 0x02	; 2
     d2c:	8c 93       	st	X, r24
		CLR_BIT(TIMERS_u8_TCCR1B_REG,0);
     d2e:	ae e4       	ldi	r26, 0x4E	; 78
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ee e4       	ldi	r30, 0x4E	; 78
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8e 7f       	andi	r24, 0xFE	; 254
     d3a:	8c 93       	st	X, r24
}
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <TIMERS_voidTimer0Init>:


void TIMERS_voidTimer0Init(void)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
//	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
//	SET_BIT(TIMERS_u8_TCCR0_REG,1);
//	CLR_BIT(TIMERS_u8_TCCR0_REG,0);

	/* Select Mode => Phase Correct PWM Mode */
	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
     d4a:	a3 e5       	ldi	r26, 0x53	; 83
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e3 e5       	ldi	r30, 0x53	; 83
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8f 7b       	andi	r24, 0xBF	; 191
     d56:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,3);
     d58:	a3 e5       	ldi	r26, 0x53	; 83
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e3 e5       	ldi	r30, 0x53	; 83
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	88 60       	ori	r24, 0x08	; 8
     d64:	8c 93       	st	X, r24

	/* Select HW Action On OC0Pin => Non Inverting */
	SET_BIT(TIMERS_u8_TCCR0_REG,5);
     d66:	a3 e5       	ldi	r26, 0x53	; 83
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e3 e5       	ldi	r30, 0x53	; 83
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	80 62       	ori	r24, 0x20	; 32
     d72:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,4);
     d74:	a3 e5       	ldi	r26, 0x53	; 83
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e3 e5       	ldi	r30, 0x53	; 83
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	8f 7e       	andi	r24, 0xEF	; 239
     d80:	8c 93       	st	X, r24

	/* Set Prescaler Value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
     d82:	a3 e5       	ldi	r26, 0x53	; 83
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e3 e5       	ldi	r30, 0x53	; 83
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	8b 7f       	andi	r24, 0xFB	; 251
     d8e:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
     d90:	a3 e5       	ldi	r26, 0x53	; 83
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e3 e5       	ldi	r30, 0x53	; 83
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	82 60       	ori	r24, 0x02	; 2
     d9c:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,0);
     d9e:	a3 e5       	ldi	r26, 0x53	; 83
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e3 e5       	ldi	r30, 0x53	; 83
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	8e 7f       	andi	r24, 0xFE	; 254
     daa:	8c 93       	st	X, r24

}
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	08 95       	ret

00000db2 <TIMERS_voidTimer0SetCompareMatchValue>:




void TIMERS_voidTimer0SetCompareMatchValue(u8 Copy_u8OCR0Value)
{
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	0f 92       	push	r0
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
     dbe:	ec e5       	ldi	r30, 0x5C	; 92
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	80 83       	st	Z, r24
}
     dc6:	0f 90       	pop	r0
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <TIMERS_u8Timer0SetCallBack>:


u8 TIMERS_u8Timer0SetCallBack(void(*Copy_pf)(void))
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <TIMERS_u8Timer0SetCallBack+0x6>
     dd4:	0f 92       	push	r0
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	9b 83       	std	Y+3, r25	; 0x03
     ddc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	9b 81       	ldd	r25, Y+3	; 0x03
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	39 f0       	breq	.+14     	; 0xdf8 <TIMERS_u8Timer0SetCallBack+0x2a>
	{
		TIMERS_pfTimer0OVF = Copy_pf;
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	9b 81       	ldd	r25, Y+3	; 0x03
     dee:	90 93 81 00 	sts	0x0081, r25
     df2:	80 93 80 00 	sts	0x0080, r24
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <TIMERS_u8Timer0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     df8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <TIMERS_u8Timer0CTCSetCallBack>:


u8 TIMERS_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <TIMERS_u8Timer0CTCSetCallBack+0x6>
     e0e:	0f 92       	push	r0
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	9b 83       	std	Y+3, r25	; 0x03
     e16:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	9b 81       	ldd	r25, Y+3	; 0x03
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	39 f0       	breq	.+14     	; 0xe32 <TIMERS_u8Timer0CTCSetCallBack+0x2a>
	{
		TIMERS_pfTimer0CTC = Copy_pf;
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	9b 81       	ldd	r25, Y+3	; 0x03
     e28:	90 93 83 00 	sts	0x0083, r25
     e2c:	80 93 82 00 	sts	0x0082, r24
     e30:	01 c0       	rjmp	.+2      	; 0xe34 <TIMERS_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e32:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     e34:	89 81       	ldd	r24, Y+1	; 0x01
}
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <__vector_11>:


/* Prototype for ISR of TIMER0 OVF */
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
     e42:	1f 92       	push	r1
     e44:	0f 92       	push	r0
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	0f 92       	push	r0
     e4a:	11 24       	eor	r1, r1
     e4c:	2f 93       	push	r18
     e4e:	3f 93       	push	r19
     e50:	4f 93       	push	r20
     e52:	5f 93       	push	r21
     e54:	6f 93       	push	r22
     e56:	7f 93       	push	r23
     e58:	8f 93       	push	r24
     e5a:	9f 93       	push	r25
     e5c:	af 93       	push	r26
     e5e:	bf 93       	push	r27
     e60:	ef 93       	push	r30
     e62:	ff 93       	push	r31
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
     e6c:	80 91 84 00 	lds	r24, 0x0084
     e70:	90 91 85 00 	lds	r25, 0x0085
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	90 93 85 00 	sts	0x0085, r25
     e7a:	80 93 84 00 	sts	0x0084, r24
	if(Local_u16CounterOVF == 3907)
     e7e:	80 91 84 00 	lds	r24, 0x0084
     e82:	90 91 85 00 	lds	r25, 0x0085
     e86:	2f e0       	ldi	r18, 0x0F	; 15
     e88:	83 34       	cpi	r24, 0x43	; 67
     e8a:	92 07       	cpc	r25, r18
     e8c:	99 f4       	brne	.+38     	; 0xeb4 <__vector_11+0x72>
	{
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
     e8e:	e2 e5       	ldi	r30, 0x52	; 82
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 ec       	ldi	r24, 0xC0	; 192
     e94:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
     e96:	10 92 85 00 	sts	0x0085, r1
     e9a:	10 92 84 00 	sts	0x0084, r1
		/* Call App Function */
		if(TIMERS_pfTimer0OVF != NULL)
     e9e:	80 91 80 00 	lds	r24, 0x0080
     ea2:	90 91 81 00 	lds	r25, 0x0081
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	29 f0       	breq	.+10     	; 0xeb4 <__vector_11+0x72>
		{
			TIMERS_pfTimer0OVF();
     eaa:	e0 91 80 00 	lds	r30, 0x0080
     eae:	f0 91 81 00 	lds	r31, 0x0081
     eb2:	09 95       	icall
		}
	}
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	ff 91       	pop	r31
     eba:	ef 91       	pop	r30
     ebc:	bf 91       	pop	r27
     ebe:	af 91       	pop	r26
     ec0:	9f 91       	pop	r25
     ec2:	8f 91       	pop	r24
     ec4:	7f 91       	pop	r23
     ec6:	6f 91       	pop	r22
     ec8:	5f 91       	pop	r21
     eca:	4f 91       	pop	r20
     ecc:	3f 91       	pop	r19
     ece:	2f 91       	pop	r18
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	0f 90       	pop	r0
     ed6:	1f 90       	pop	r1
     ed8:	18 95       	reti

00000eda <__vector_10>:


/* Prototype for ISR of TIMER0 CTC */
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
     eda:	1f 92       	push	r1
     edc:	0f 92       	push	r0
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	0f 92       	push	r0
     ee2:	11 24       	eor	r1, r1
     ee4:	2f 93       	push	r18
     ee6:	3f 93       	push	r19
     ee8:	4f 93       	push	r20
     eea:	5f 93       	push	r21
     eec:	6f 93       	push	r22
     eee:	7f 93       	push	r23
     ef0:	8f 93       	push	r24
     ef2:	9f 93       	push	r25
     ef4:	af 93       	push	r26
     ef6:	bf 93       	push	r27
     ef8:	ef 93       	push	r30
     efa:	ff 93       	push	r31
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
     f04:	80 91 86 00 	lds	r24, 0x0086
     f08:	90 91 87 00 	lds	r25, 0x0087
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	90 93 87 00 	sts	0x0087, r25
     f12:	80 93 86 00 	sts	0x0086, r24
	if(Local_u16CounterCTC == 10000)
     f16:	80 91 86 00 	lds	r24, 0x0086
     f1a:	90 91 87 00 	lds	r25, 0x0087
     f1e:	27 e2       	ldi	r18, 0x27	; 39
     f20:	80 31       	cpi	r24, 0x10	; 16
     f22:	92 07       	cpc	r25, r18
     f24:	79 f4       	brne	.+30     	; 0xf44 <__vector_10+0x6a>
	{
		/* Clear Counter */
		Local_u16CounterCTC = 0;
     f26:	10 92 87 00 	sts	0x0087, r1
     f2a:	10 92 86 00 	sts	0x0086, r1
		/* Call Back Function */
		if(TIMERS_pfTimer0CTC != NULL)
     f2e:	80 91 82 00 	lds	r24, 0x0082
     f32:	90 91 83 00 	lds	r25, 0x0083
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	29 f0       	breq	.+10     	; 0xf44 <__vector_10+0x6a>
		{
			TIMERS_pfTimer0CTC();
     f3a:	e0 91 82 00 	lds	r30, 0x0082
     f3e:	f0 91 83 00 	lds	r31, 0x0083
     f42:	09 95       	icall
		}
	}
}
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	ff 91       	pop	r31
     f4a:	ef 91       	pop	r30
     f4c:	bf 91       	pop	r27
     f4e:	af 91       	pop	r26
     f50:	9f 91       	pop	r25
     f52:	8f 91       	pop	r24
     f54:	7f 91       	pop	r23
     f56:	6f 91       	pop	r22
     f58:	5f 91       	pop	r21
     f5a:	4f 91       	pop	r20
     f5c:	3f 91       	pop	r19
     f5e:	2f 91       	pop	r18
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f 90       	pop	r0
     f66:	1f 90       	pop	r1
     f68:	18 95       	reti

00000f6a <GI_voidGlobalEnable>:

#include "GI_interface.h"
#include "../DIO/DIO_interface.h"

/* Enable Global Interrupt Function */
void GI_voidGlobalEnable(void){
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
     f72:	af e5       	ldi	r26, 0x5F	; 95
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	ef e5       	ldi	r30, 0x5F	; 95
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	80 68       	ori	r24, 0x80	; 128
     f7e:	8c 93       	st	X, r24
}
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <GI_voidGlobalDisable>:

/* Disable Global Interrupt Function */
void GI_voidGlobalDisable(void){
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
     f8e:	af e5       	ldi	r26, 0x5F	; 95
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	ef e5       	ldi	r30, 0x5F	; 95
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8f 77       	andi	r24, 0x7F	; 127
     f9a:	8c 93       	st	X, r24
}
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <EXTI_u8Enable>:

/***************** NO ADDED MACORS TO REGISTERES YET *****************/

/* Enable EXTI Function */
u8    EXTI_u8Enable(u8 Copy_u8EXTIIndex,u8 Copy_u8EdgeIndex)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	2b 97       	sbiw	r28, 0x0b	; 11
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	8a 83       	std	Y+2, r24	; 0x02
     fb8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8EXTIIndex)
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	3b 87       	std	Y+11, r19	; 0x0b
     fc6:	2a 87       	std	Y+10, r18	; 0x0a
     fc8:	8a 85       	ldd	r24, Y+10	; 0x0a
     fca:	9b 85       	ldd	r25, Y+11	; 0x0b
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <EXTI_u8Enable+0x32>
     fd2:	85 c0       	rjmp	.+266    	; 0x10de <EXTI_u8Enable+0x13c>
     fd4:	2a 85       	ldd	r18, Y+10	; 0x0a
     fd6:	3b 85       	ldd	r19, Y+11	; 0x0b
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <EXTI_u8Enable+0x3e>
     fde:	f9 c0       	rjmp	.+498    	; 0x11d2 <EXTI_u8Enable+0x230>
     fe0:	8a 85       	ldd	r24, Y+10	; 0x0a
     fe2:	9b 85       	ldd	r25, Y+11	; 0x0b
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	09 f0       	breq	.+2      	; 0xfea <EXTI_u8Enable+0x48>
     fe8:	23 c1       	rjmp	.+582    	; 0x1230 <EXTI_u8Enable+0x28e>
	{
		case EXTI_u8_INT0:
			switch(Copy_u8EdgeIndex)
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	39 87       	std	Y+9, r19	; 0x09
     ff2:	28 87       	std	Y+8, r18	; 0x08
     ff4:	88 85       	ldd	r24, Y+8	; 0x08
     ff6:	99 85       	ldd	r25, Y+9	; 0x09
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	91 05       	cpc	r25, r1
     ffc:	61 f1       	breq	.+88     	; 0x1056 <EXTI_u8Enable+0xb4>
     ffe:	28 85       	ldd	r18, Y+8	; 0x08
    1000:	39 85       	ldd	r19, Y+9	; 0x09
    1002:	22 30       	cpi	r18, 0x02	; 2
    1004:	31 05       	cpc	r19, r1
    1006:	2c f4       	brge	.+10     	; 0x1012 <EXTI_u8Enable+0x70>
    1008:	88 85       	ldd	r24, Y+8	; 0x08
    100a:	99 85       	ldd	r25, Y+9	; 0x09
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	69 f0       	breq	.+26     	; 0x102a <EXTI_u8Enable+0x88>
    1010:	64 c0       	rjmp	.+200    	; 0x10da <EXTI_u8Enable+0x138>
    1012:	28 85       	ldd	r18, Y+8	; 0x08
    1014:	39 85       	ldd	r19, Y+9	; 0x09
    1016:	22 30       	cpi	r18, 0x02	; 2
    1018:	31 05       	cpc	r19, r1
    101a:	99 f1       	breq	.+102    	; 0x1082 <EXTI_u8Enable+0xe0>
    101c:	88 85       	ldd	r24, Y+8	; 0x08
    101e:	99 85       	ldd	r25, Y+9	; 0x09
    1020:	83 30       	cpi	r24, 0x03	; 3
    1022:	91 05       	cpc	r25, r1
    1024:	09 f4       	brne	.+2      	; 0x1028 <EXTI_u8Enable+0x86>
    1026:	43 c0       	rjmp	.+134    	; 0x10ae <EXTI_u8Enable+0x10c>
    1028:	58 c0       	rjmp	.+176    	; 0x10da <EXTI_u8Enable+0x138>
			{
				case EXTI_u8_RAISING_EDGE:
					SET_BIT(EXTI_u8_MCUCR,1);
    102a:	a5 e5       	ldi	r26, 0x55	; 85
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e5 e5       	ldi	r30, 0x55	; 85
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	82 60       	ori	r24, 0x02	; 2
    1036:	8c 93       	st	X, r24
					SET_BIT(EXTI_u8_MCUCR,0);
    1038:	a5 e5       	ldi	r26, 0x55	; 85
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e5 e5       	ldi	r30, 0x55	; 85
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	81 60       	ori	r24, 0x01	; 1
    1044:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    1046:	ab e5       	ldi	r26, 0x5B	; 91
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	eb e5       	ldi	r30, 0x5B	; 91
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	80 64       	ori	r24, 0x40	; 64
    1052:	8c 93       	st	X, r24
    1054:	ee c0       	rjmp	.+476    	; 0x1232 <EXTI_u8Enable+0x290>
					break;

				case EXTI_u8_FALLING_EDGE:
					SET_BIT(EXTI_u8_MCUCR,1);
    1056:	a5 e5       	ldi	r26, 0x55	; 85
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e5 e5       	ldi	r30, 0x55	; 85
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	82 60       	ori	r24, 0x02	; 2
    1062:	8c 93       	st	X, r24
					CLR_BIT(EXTI_u8_MCUCR,0);
    1064:	a5 e5       	ldi	r26, 0x55	; 85
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e5 e5       	ldi	r30, 0x55	; 85
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8e 7f       	andi	r24, 0xFE	; 254
    1070:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    1072:	ab e5       	ldi	r26, 0x5B	; 91
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	eb e5       	ldi	r30, 0x5B	; 91
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	80 64       	ori	r24, 0x40	; 64
    107e:	8c 93       	st	X, r24
    1080:	d8 c0       	rjmp	.+432    	; 0x1232 <EXTI_u8Enable+0x290>
					break;

				case EXTI_u8_ANY_LOGICAL_CHANGE:
					CLR_BIT(EXTI_u8_MCUCR,1);
    1082:	a5 e5       	ldi	r26, 0x55	; 85
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e5 e5       	ldi	r30, 0x55	; 85
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8d 7f       	andi	r24, 0xFD	; 253
    108e:	8c 93       	st	X, r24
					SET_BIT(EXTI_u8_MCUCR,0);
    1090:	a5 e5       	ldi	r26, 0x55	; 85
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e5 e5       	ldi	r30, 0x55	; 85
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	81 60       	ori	r24, 0x01	; 1
    109c:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    109e:	ab e5       	ldi	r26, 0x5B	; 91
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	eb e5       	ldi	r30, 0x5B	; 91
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	80 64       	ori	r24, 0x40	; 64
    10aa:	8c 93       	st	X, r24
    10ac:	c2 c0       	rjmp	.+388    	; 0x1232 <EXTI_u8Enable+0x290>
					break;

				case EXTI_u8_LOW_LEVEL:
					CLR_BIT(EXTI_u8_MCUCR,1);
    10ae:	a5 e5       	ldi	r26, 0x55	; 85
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e5 e5       	ldi	r30, 0x55	; 85
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8d 7f       	andi	r24, 0xFD	; 253
    10ba:	8c 93       	st	X, r24
					CLR_BIT(EXTI_u8_MCUCR,0);
    10bc:	a5 e5       	ldi	r26, 0x55	; 85
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e5 e5       	ldi	r30, 0x55	; 85
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8e 7f       	andi	r24, 0xFE	; 254
    10c8:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    10ca:	ab e5       	ldi	r26, 0x5B	; 91
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	eb e5       	ldi	r30, 0x5B	; 91
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	80 64       	ori	r24, 0x40	; 64
    10d6:	8c 93       	st	X, r24
    10d8:	ac c0       	rjmp	.+344    	; 0x1232 <EXTI_u8Enable+0x290>
					break;
				default : Local_u8ErrorState = STD_TYPES_NOK;
    10da:	19 82       	std	Y+1, r1	; 0x01
    10dc:	aa c0       	rjmp	.+340    	; 0x1232 <EXTI_u8Enable+0x290>
			}
		break;

			case EXTI_u8_INT1:
				switch(Copy_u8EdgeIndex)
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	3f 83       	std	Y+7, r19	; 0x07
    10e6:	2e 83       	std	Y+6, r18	; 0x06
    10e8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ea:	9f 81       	ldd	r25, Y+7	; 0x07
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	91 05       	cpc	r25, r1
    10f0:	61 f1       	breq	.+88     	; 0x114a <EXTI_u8Enable+0x1a8>
    10f2:	2e 81       	ldd	r18, Y+6	; 0x06
    10f4:	3f 81       	ldd	r19, Y+7	; 0x07
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	2c f4       	brge	.+10     	; 0x1106 <EXTI_u8Enable+0x164>
    10fc:	8e 81       	ldd	r24, Y+6	; 0x06
    10fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	69 f0       	breq	.+26     	; 0x111e <EXTI_u8Enable+0x17c>
    1104:	64 c0       	rjmp	.+200    	; 0x11ce <EXTI_u8Enable+0x22c>
    1106:	2e 81       	ldd	r18, Y+6	; 0x06
    1108:	3f 81       	ldd	r19, Y+7	; 0x07
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	99 f1       	breq	.+102    	; 0x1176 <EXTI_u8Enable+0x1d4>
    1110:	8e 81       	ldd	r24, Y+6	; 0x06
    1112:	9f 81       	ldd	r25, Y+7	; 0x07
    1114:	83 30       	cpi	r24, 0x03	; 3
    1116:	91 05       	cpc	r25, r1
    1118:	09 f4       	brne	.+2      	; 0x111c <EXTI_u8Enable+0x17a>
    111a:	43 c0       	rjmp	.+134    	; 0x11a2 <EXTI_u8Enable+0x200>
    111c:	58 c0       	rjmp	.+176    	; 0x11ce <EXTI_u8Enable+0x22c>
				{
					case EXTI_u8_RAISING_EDGE:
						SET_BIT(EXTI_u8_MCUCR,3);
    111e:	a5 e5       	ldi	r26, 0x55	; 85
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e5 e5       	ldi	r30, 0x55	; 85
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	88 60       	ori	r24, 0x08	; 8
    112a:	8c 93       	st	X, r24
						SET_BIT(EXTI_u8_MCUCR,2);
    112c:	a5 e5       	ldi	r26, 0x55	; 85
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e5 e5       	ldi	r30, 0x55	; 85
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	84 60       	ori	r24, 0x04	; 4
    1138:	8c 93       	st	X, r24
						/* Enable EXTI0 */
						SET_BIT(EXTI_u8_GICR,7);
    113a:	ab e5       	ldi	r26, 0x5B	; 91
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	eb e5       	ldi	r30, 0x5B	; 91
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	80 68       	ori	r24, 0x80	; 128
    1146:	8c 93       	st	X, r24
    1148:	74 c0       	rjmp	.+232    	; 0x1232 <EXTI_u8Enable+0x290>
						break;

					case EXTI_u8_FALLING_EDGE:
						SET_BIT(EXTI_u8_MCUCR,3);
    114a:	a5 e5       	ldi	r26, 0x55	; 85
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e5 e5       	ldi	r30, 0x55	; 85
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	88 60       	ori	r24, 0x08	; 8
    1156:	8c 93       	st	X, r24
						CLR_BIT(EXTI_u8_MCUCR,2);
    1158:	a5 e5       	ldi	r26, 0x55	; 85
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e5 e5       	ldi	r30, 0x55	; 85
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	8b 7f       	andi	r24, 0xFB	; 251
    1164:	8c 93       	st	X, r24
						/* Enable EXTI0 */
						SET_BIT(EXTI_u8_GICR,7);
    1166:	ab e5       	ldi	r26, 0x5B	; 91
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	eb e5       	ldi	r30, 0x5B	; 91
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	80 68       	ori	r24, 0x80	; 128
    1172:	8c 93       	st	X, r24
    1174:	5e c0       	rjmp	.+188    	; 0x1232 <EXTI_u8Enable+0x290>
						break;

					case EXTI_u8_ANY_LOGICAL_CHANGE:
						CLR_BIT(EXTI_u8_MCUCR,3);
    1176:	a5 e5       	ldi	r26, 0x55	; 85
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e5 e5       	ldi	r30, 0x55	; 85
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	87 7f       	andi	r24, 0xF7	; 247
    1182:	8c 93       	st	X, r24
						SET_BIT(EXTI_u8_MCUCR,2);
    1184:	a5 e5       	ldi	r26, 0x55	; 85
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e5 e5       	ldi	r30, 0x55	; 85
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	84 60       	ori	r24, 0x04	; 4
    1190:	8c 93       	st	X, r24
						/* Enable EXTI0 */
						SET_BIT(EXTI_u8_GICR,7);
    1192:	ab e5       	ldi	r26, 0x5B	; 91
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	eb e5       	ldi	r30, 0x5B	; 91
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	80 68       	ori	r24, 0x80	; 128
    119e:	8c 93       	st	X, r24
    11a0:	48 c0       	rjmp	.+144    	; 0x1232 <EXTI_u8Enable+0x290>
						break;

					case EXTI_u8_LOW_LEVEL:
						CLR_BIT(EXTI_u8_MCUCR,3);
    11a2:	a5 e5       	ldi	r26, 0x55	; 85
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e5 e5       	ldi	r30, 0x55	; 85
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	87 7f       	andi	r24, 0xF7	; 247
    11ae:	8c 93       	st	X, r24
						CLR_BIT(EXTI_u8_MCUCR,2);
    11b0:	a5 e5       	ldi	r26, 0x55	; 85
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e5 e5       	ldi	r30, 0x55	; 85
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	8b 7f       	andi	r24, 0xFB	; 251
    11bc:	8c 93       	st	X, r24
						/* Enable EXTI0 */
						SET_BIT(EXTI_u8_GICR,7);
    11be:	ab e5       	ldi	r26, 0x5B	; 91
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	eb e5       	ldi	r30, 0x5B	; 91
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	80 68       	ori	r24, 0x80	; 128
    11ca:	8c 93       	st	X, r24
    11cc:	32 c0       	rjmp	.+100    	; 0x1232 <EXTI_u8Enable+0x290>
						break;
					default : Local_u8ErrorState = STD_TYPES_NOK;
    11ce:	19 82       	std	Y+1, r1	; 0x01
    11d0:	30 c0       	rjmp	.+96     	; 0x1232 <EXTI_u8Enable+0x290>
				}
			break;

				case EXTI_u8_INT2:
					switch(Copy_u8EdgeIndex)
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3d 83       	std	Y+5, r19	; 0x05
    11da:	2c 83       	std	Y+4, r18	; 0x04
    11dc:	8c 81       	ldd	r24, Y+4	; 0x04
    11de:	9d 81       	ldd	r25, Y+5	; 0x05
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	31 f0       	breq	.+12     	; 0x11f0 <EXTI_u8Enable+0x24e>
    11e4:	2c 81       	ldd	r18, Y+4	; 0x04
    11e6:	3d 81       	ldd	r19, Y+5	; 0x05
    11e8:	21 30       	cpi	r18, 0x01	; 1
    11ea:	31 05       	cpc	r19, r1
    11ec:	81 f0       	breq	.+32     	; 0x120e <EXTI_u8Enable+0x26c>
    11ee:	1e c0       	rjmp	.+60     	; 0x122c <EXTI_u8Enable+0x28a>
					{
						case EXTI_u8_RAISING_EDGE:
							SET_BIT(EXTI_u8_MCUCR,6);
    11f0:	a5 e5       	ldi	r26, 0x55	; 85
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e5 e5       	ldi	r30, 0x55	; 85
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	80 64       	ori	r24, 0x40	; 64
    11fc:	8c 93       	st	X, r24
							/* Enable EXTI0 */
							SET_BIT(EXTI_u8_GICR,5);
    11fe:	ab e5       	ldi	r26, 0x5B	; 91
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	eb e5       	ldi	r30, 0x5B	; 91
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	80 62       	ori	r24, 0x20	; 32
    120a:	8c 93       	st	X, r24
    120c:	12 c0       	rjmp	.+36     	; 0x1232 <EXTI_u8Enable+0x290>
							break;

						case EXTI_u8_FALLING_EDGE:
							SET_BIT(EXTI_u8_MCUCR,6);
    120e:	a5 e5       	ldi	r26, 0x55	; 85
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e5 e5       	ldi	r30, 0x55	; 85
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	80 64       	ori	r24, 0x40	; 64
    121a:	8c 93       	st	X, r24
							/* Enable EXTI0 */
							SET_BIT(EXTI_u8_GICR,5);
    121c:	ab e5       	ldi	r26, 0x5B	; 91
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	eb e5       	ldi	r30, 0x5B	; 91
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	80 62       	ori	r24, 0x20	; 32
    1228:	8c 93       	st	X, r24
    122a:	03 c0       	rjmp	.+6      	; 0x1232 <EXTI_u8Enable+0x290>
							break;

						default : Local_u8ErrorState = STD_TYPES_NOK;
    122c:	19 82       	std	Y+1, r1	; 0x01
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <EXTI_u8Enable+0x290>
					}
				break;
				default : Local_u8ErrorState = STD_TYPES_NOK;
    1230:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1232:	89 81       	ldd	r24, Y+1	; 0x01
}
    1234:	2b 96       	adiw	r28, 0x0b	; 11
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <EXTI_u8EXTIDisable>:



u8    EXTI_u8EXTIDisable(u8 Copy_u8EXTIIndex){
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <EXTI_u8EXTIDisable+0x6>
    124c:	00 d0       	rcall	.+0      	; 0x124e <EXTI_u8EXTIDisable+0x8>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8EXTIIndex)
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	3c 83       	std	Y+4, r19	; 0x04
    1260:	2b 83       	std	Y+3, r18	; 0x03
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	91 05       	cpc	r25, r1
    126a:	89 f0       	breq	.+34     	; 0x128e <EXTI_u8EXTIDisable+0x48>
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	3c 81       	ldd	r19, Y+4	; 0x04
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	a1 f0       	breq	.+40     	; 0x129e <EXTI_u8EXTIDisable+0x58>
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	c1 f4       	brne	.+48     	; 0x12ae <EXTI_u8EXTIDisable+0x68>
	{
		case EXTI_u8_INT0 :
			/* Disable EXTI0 */
			CLR_BIT(EXTI_u8_GICR,6);
    127e:	ab e5       	ldi	r26, 0x5B	; 91
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	eb e5       	ldi	r30, 0x5B	; 91
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	8f 7b       	andi	r24, 0xBF	; 191
    128a:	8c 93       	st	X, r24
    128c:	11 c0       	rjmp	.+34     	; 0x12b0 <EXTI_u8EXTIDisable+0x6a>
			break;

		case EXTI_u8_INT1 :
			/* Disable EXTI1 */
			CLR_BIT(EXTI_u8_GICR,7);
    128e:	ab e5       	ldi	r26, 0x5B	; 91
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	eb e5       	ldi	r30, 0x5B	; 91
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	8f 77       	andi	r24, 0x7F	; 127
    129a:	8c 93       	st	X, r24
    129c:	09 c0       	rjmp	.+18     	; 0x12b0 <EXTI_u8EXTIDisable+0x6a>
			break;

		case EXTI_u8_INT2 :
			/* Disable EXTI2 */
			CLR_BIT(EXTI_u8_GICR,5);
    129e:	ab e5       	ldi	r26, 0x5B	; 91
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	eb e5       	ldi	r30, 0x5B	; 91
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	8f 7d       	andi	r24, 0xDF	; 223
    12aa:	8c 93       	st	X, r24
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <EXTI_u8EXTIDisable+0x6a>
			break;
		default : Local_u8ErrorState = STD_TYPES_NOK;
    12ae:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <EXTI_u8EXTISetCallBack>:


u8    EXTI_u8EXTISetCallBack(u8 Copy_u8EXTIIndex, void(*Copy_pf)(void)){
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <EXTI_u8EXTISetCallBack+0x6>
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <EXTI_u8EXTISetCallBack+0x8>
    12c8:	0f 92       	push	r0
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	8a 83       	std	Y+2, r24	; 0x02
    12d0:	7c 83       	std	Y+4, r23	; 0x04
    12d2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8EXTIIndex <= EXTI_u8_INT2) && (Copy_pf != NULL)){
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	83 30       	cpi	r24, 0x03	; 3
    12dc:	88 f4       	brcc	.+34     	; 0x1300 <EXTI_u8EXTISetCallBack+0x40>
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	9c 81       	ldd	r25, Y+4	; 0x04
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	69 f0       	breq	.+26     	; 0x1300 <EXTI_u8EXTISetCallBack+0x40>
		EXTI_ApfEXTI[Copy_u8EXTIIndex] = Copy_pf;
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	88 2f       	mov	r24, r24
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	fc 01       	movw	r30, r24
    12f2:	e8 57       	subi	r30, 0x78	; 120
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	91 83       	std	Z+1, r25	; 0x01
    12fc:	80 83       	st	Z, r24
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <EXTI_u8EXTISetCallBack+0x42>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    1300:	19 82       	std	Y+1, r1	; 0x01
	}
}
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <__vector_1>:


/* Prototype for ISR of EXTI0 */
void __vector_1(void)    __attribute__((signal)); // to avoid optimizer changes
void __vector_1(void)
{
    1312:	1f 92       	push	r1
    1314:	0f 92       	push	r0
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	0f 92       	push	r0
    131a:	11 24       	eor	r1, r1
    131c:	2f 93       	push	r18
    131e:	3f 93       	push	r19
    1320:	4f 93       	push	r20
    1322:	5f 93       	push	r21
    1324:	6f 93       	push	r22
    1326:	7f 93       	push	r23
    1328:	8f 93       	push	r24
    132a:	9f 93       	push	r25
    132c:	af 93       	push	r26
    132e:	bf 93       	push	r27
    1330:	ef 93       	push	r30
    1332:	ff 93       	push	r31
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT0] != NULL)
    133c:	80 91 88 00 	lds	r24, 0x0088
    1340:	90 91 89 00 	lds	r25, 0x0089
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	29 f0       	breq	.+10     	; 0x1352 <__vector_1+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INT0]();
    1348:	e0 91 88 00 	lds	r30, 0x0088
    134c:	f0 91 89 00 	lds	r31, 0x0089
    1350:	09 95       	icall
	}

}
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	ff 91       	pop	r31
    1358:	ef 91       	pop	r30
    135a:	bf 91       	pop	r27
    135c:	af 91       	pop	r26
    135e:	9f 91       	pop	r25
    1360:	8f 91       	pop	r24
    1362:	7f 91       	pop	r23
    1364:	6f 91       	pop	r22
    1366:	5f 91       	pop	r21
    1368:	4f 91       	pop	r20
    136a:	3f 91       	pop	r19
    136c:	2f 91       	pop	r18
    136e:	0f 90       	pop	r0
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	0f 90       	pop	r0
    1374:	1f 90       	pop	r1
    1376:	18 95       	reti

00001378 <__vector_2>:

/* Prototype for ISR of EXTI2 */
void __vector_2(void)    __attribute__((signal)); // to avoid optimizer changes
void __vector_2(void)
{
    1378:	1f 92       	push	r1
    137a:	0f 92       	push	r0
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	0f 92       	push	r0
    1380:	11 24       	eor	r1, r1
    1382:	2f 93       	push	r18
    1384:	3f 93       	push	r19
    1386:	4f 93       	push	r20
    1388:	5f 93       	push	r21
    138a:	6f 93       	push	r22
    138c:	7f 93       	push	r23
    138e:	8f 93       	push	r24
    1390:	9f 93       	push	r25
    1392:	af 93       	push	r26
    1394:	bf 93       	push	r27
    1396:	ef 93       	push	r30
    1398:	ff 93       	push	r31
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT1] != NULL)
    13a2:	80 91 8a 00 	lds	r24, 0x008A
    13a6:	90 91 8b 00 	lds	r25, 0x008B
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	29 f0       	breq	.+10     	; 0x13b8 <__vector_2+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INT1]();
    13ae:	e0 91 8a 00 	lds	r30, 0x008A
    13b2:	f0 91 8b 00 	lds	r31, 0x008B
    13b6:	09 95       	icall
	}
}
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	ff 91       	pop	r31
    13be:	ef 91       	pop	r30
    13c0:	bf 91       	pop	r27
    13c2:	af 91       	pop	r26
    13c4:	9f 91       	pop	r25
    13c6:	8f 91       	pop	r24
    13c8:	7f 91       	pop	r23
    13ca:	6f 91       	pop	r22
    13cc:	5f 91       	pop	r21
    13ce:	4f 91       	pop	r20
    13d0:	3f 91       	pop	r19
    13d2:	2f 91       	pop	r18
    13d4:	0f 90       	pop	r0
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	0f 90       	pop	r0
    13da:	1f 90       	pop	r1
    13dc:	18 95       	reti

000013de <__vector_3>:

/* Prototype for ISR of EXTI3 */
void __vector_3(void)    __attribute__((signal)); // to avoid optimizer changes
void __vector_3(void)
{
    13de:	1f 92       	push	r1
    13e0:	0f 92       	push	r0
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	0f 92       	push	r0
    13e6:	11 24       	eor	r1, r1
    13e8:	2f 93       	push	r18
    13ea:	3f 93       	push	r19
    13ec:	4f 93       	push	r20
    13ee:	5f 93       	push	r21
    13f0:	6f 93       	push	r22
    13f2:	7f 93       	push	r23
    13f4:	8f 93       	push	r24
    13f6:	9f 93       	push	r25
    13f8:	af 93       	push	r26
    13fa:	bf 93       	push	r27
    13fc:	ef 93       	push	r30
    13fe:	ff 93       	push	r31
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT2] != NULL)
    1408:	80 91 8c 00 	lds	r24, 0x008C
    140c:	90 91 8d 00 	lds	r25, 0x008D
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	29 f0       	breq	.+10     	; 0x141e <__vector_3+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INT2]();
    1414:	e0 91 8c 00 	lds	r30, 0x008C
    1418:	f0 91 8d 00 	lds	r31, 0x008D
    141c:	09 95       	icall
	}
}
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	ff 91       	pop	r31
    1424:	ef 91       	pop	r30
    1426:	bf 91       	pop	r27
    1428:	af 91       	pop	r26
    142a:	9f 91       	pop	r25
    142c:	8f 91       	pop	r24
    142e:	7f 91       	pop	r23
    1430:	6f 91       	pop	r22
    1432:	5f 91       	pop	r21
    1434:	4f 91       	pop	r20
    1436:	3f 91       	pop	r19
    1438:	2f 91       	pop	r18
    143a:	0f 90       	pop	r0
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	0f 90       	pop	r0
    1440:	1f 90       	pop	r1
    1442:	18 95       	reti

00001444 <DIO_voidInit>:
#include "DIO_config.h"



void DIO_voidInit(void)
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    144c:	ea e3       	ldi	r30, 0x3A	; 58
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	8f e7       	ldi	r24, 0x7F	; 127
    1452:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    1454:	e7 e3       	ldi	r30, 0x37	; 55
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	88 ef       	ldi	r24, 0xF8	; 248
    145a:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    145c:	e4 e3       	ldi	r30, 0x34	; 52
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	8f ef       	ldi	r24, 0xFF	; 255
    1462:	80 83       	st	Z, r24

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    1464:	e1 e3       	ldi	r30, 0x31	; 49
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	8b e2       	ldi	r24, 0x2B	; 43
    146a:	80 83       	st	Z, r24
	/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA0_INITIAL_VALUE);
    146c:	eb e3       	ldi	r30, 0x3B	; 59
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	88 e7       	ldi	r24, 0x78	; 120
    1472:	80 83       	st	Z, r24

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB0_INITIAL_VALUE);
    1474:	e8 e3       	ldi	r30, 0x38	; 56
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	87 ef       	ldi	r24, 0xF7	; 247
    147a:	80 83       	st	Z, r24

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC0_INITIAL_VALUE);
    147c:	e5 e3       	ldi	r30, 0x35	; 53
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD0_INITIAL_VALUE);
    1482:	e2 e3       	ldi	r30, 0x32	; 50
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	84 e0       	ldi	r24, 0x04	; 4
    1488:	80 83       	st	Z, r24

}
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <DIO_u8SetPinDirection>:




u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	2e 97       	sbiw	r28, 0x0e	; 14
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	8a 83       	std	Y+2, r24	; 0x02
    14a6:	6b 83       	std	Y+3, r22	; 0x03
    14a8:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	84 30       	cpi	r24, 0x04	; 4
    14b2:	08 f0       	brcs	.+2      	; 0x14b6 <DIO_u8SetPinDirection+0x26>
    14b4:	0d c1       	rjmp	.+538    	; 0x16d0 <DIO_u8SetPinDirection+0x240>
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	88 30       	cpi	r24, 0x08	; 8
    14ba:	08 f0       	brcs	.+2      	; 0x14be <DIO_u8SetPinDirection+0x2e>
    14bc:	09 c1       	rjmp	.+530    	; 0x16d0 <DIO_u8SetPinDirection+0x240>
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	88 23       	and	r24, r24
    14c2:	21 f0       	breq	.+8      	; 0x14cc <DIO_u8SetPinDirection+0x3c>
    14c4:	8c 81       	ldd	r24, Y+4	; 0x04
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	09 f0       	breq	.+2      	; 0x14cc <DIO_u8SetPinDirection+0x3c>
    14ca:	02 c1       	rjmp	.+516    	; 0x16d0 <DIO_u8SetPinDirection+0x240>
	{

		switch (Copy_u8PortId)
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	3e 87       	std	Y+14, r19	; 0x0e
    14d4:	2d 87       	std	Y+13, r18	; 0x0d
    14d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <DIO_u8SetPinDirection+0x52>
    14e0:	4f c0       	rjmp	.+158    	; 0x1580 <DIO_u8SetPinDirection+0xf0>
    14e2:	2d 85       	ldd	r18, Y+13	; 0x0d
    14e4:	3e 85       	ldd	r19, Y+14	; 0x0e
    14e6:	22 30       	cpi	r18, 0x02	; 2
    14e8:	31 05       	cpc	r19, r1
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <DIO_u8SetPinDirection+0x66>
    14ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	71 f0       	breq	.+28     	; 0x1510 <DIO_u8SetPinDirection+0x80>
    14f4:	ee c0       	rjmp	.+476    	; 0x16d2 <DIO_u8SetPinDirection+0x242>
    14f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    14f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    14fa:	22 30       	cpi	r18, 0x02	; 2
    14fc:	31 05       	cpc	r19, r1
    14fe:	09 f4       	brne	.+2      	; 0x1502 <DIO_u8SetPinDirection+0x72>
    1500:	77 c0       	rjmp	.+238    	; 0x15f0 <DIO_u8SetPinDirection+0x160>
    1502:	8d 85       	ldd	r24, Y+13	; 0x0d
    1504:	9e 85       	ldd	r25, Y+14	; 0x0e
    1506:	83 30       	cpi	r24, 0x03	; 3
    1508:	91 05       	cpc	r25, r1
    150a:	09 f4       	brne	.+2      	; 0x150e <DIO_u8SetPinDirection+0x7e>
    150c:	a9 c0       	rjmp	.+338    	; 0x1660 <DIO_u8SetPinDirection+0x1d0>
    150e:	e1 c0       	rjmp	.+450    	; 0x16d2 <DIO_u8SetPinDirection+0x242>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	3c 87       	std	Y+12, r19	; 0x0c
    1518:	2b 87       	std	Y+11, r18	; 0x0b
    151a:	8b 85       	ldd	r24, Y+11	; 0x0b
    151c:	9c 85       	ldd	r25, Y+12	; 0x0c
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	31 f0       	breq	.+12     	; 0x152e <DIO_u8SetPinDirection+0x9e>
    1522:	2b 85       	ldd	r18, Y+11	; 0x0b
    1524:	3c 85       	ldd	r19, Y+12	; 0x0c
    1526:	21 30       	cpi	r18, 0x01	; 1
    1528:	31 05       	cpc	r19, r1
    152a:	a9 f0       	breq	.+42     	; 0x1556 <DIO_u8SetPinDirection+0xc6>
    152c:	d2 c0       	rjmp	.+420    	; 0x16d2 <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    152e:	aa e3       	ldi	r26, 0x3A	; 58
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	ea e3       	ldi	r30, 0x3A	; 58
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	48 2f       	mov	r20, r24
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 2e       	mov	r0, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <DIO_u8SetPinDirection+0xbc>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <DIO_u8SetPinDirection+0xb8>
    1550:	84 2b       	or	r24, r20
    1552:	8c 93       	st	X, r24
    1554:	be c0       	rjmp	.+380    	; 0x16d2 <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1556:	aa e3       	ldi	r26, 0x3A	; 58
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	ea e3       	ldi	r30, 0x3A	; 58
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <DIO_u8SetPinDirection+0xe4>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <DIO_u8SetPinDirection+0xe0>
    1578:	80 95       	com	r24
    157a:	84 23       	and	r24, r20
    157c:	8c 93       	st	X, r24
    157e:	a9 c0       	rjmp	.+338    	; 0x16d2 <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	3a 87       	std	Y+10, r19	; 0x0a
    1588:	29 87       	std	Y+9, r18	; 0x09
    158a:	89 85       	ldd	r24, Y+9	; 0x09
    158c:	9a 85       	ldd	r25, Y+10	; 0x0a
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	31 f0       	breq	.+12     	; 0x159e <DIO_u8SetPinDirection+0x10e>
    1592:	29 85       	ldd	r18, Y+9	; 0x09
    1594:	3a 85       	ldd	r19, Y+10	; 0x0a
    1596:	21 30       	cpi	r18, 0x01	; 1
    1598:	31 05       	cpc	r19, r1
    159a:	a9 f0       	breq	.+42     	; 0x15c6 <DIO_u8SetPinDirection+0x136>
    159c:	9a c0       	rjmp	.+308    	; 0x16d2 <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    159e:	a7 e3       	ldi	r26, 0x37	; 55
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e7 e3       	ldi	r30, 0x37	; 55
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 2e       	mov	r0, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <DIO_u8SetPinDirection+0x12c>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	0a 94       	dec	r0
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <DIO_u8SetPinDirection+0x128>
    15c0:	84 2b       	or	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	86 c0       	rjmp	.+268    	; 0x16d2 <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    15c6:	a7 e3       	ldi	r26, 0x37	; 55
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e7 e3       	ldi	r30, 0x37	; 55
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <DIO_u8SetPinDirection+0x154>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <DIO_u8SetPinDirection+0x150>
    15e8:	80 95       	com	r24
    15ea:	84 23       	and	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	71 c0       	rjmp	.+226    	; 0x16d2 <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	38 87       	std	Y+8, r19	; 0x08
    15f8:	2f 83       	std	Y+7, r18	; 0x07
    15fa:	8f 81       	ldd	r24, Y+7	; 0x07
    15fc:	98 85       	ldd	r25, Y+8	; 0x08
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	31 f0       	breq	.+12     	; 0x160e <DIO_u8SetPinDirection+0x17e>
    1602:	2f 81       	ldd	r18, Y+7	; 0x07
    1604:	38 85       	ldd	r19, Y+8	; 0x08
    1606:	21 30       	cpi	r18, 0x01	; 1
    1608:	31 05       	cpc	r19, r1
    160a:	a9 f0       	breq	.+42     	; 0x1636 <DIO_u8SetPinDirection+0x1a6>
    160c:	62 c0       	rjmp	.+196    	; 0x16d2 <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    160e:	a4 e3       	ldi	r26, 0x34	; 52
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e4 e3       	ldi	r30, 0x34	; 52
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	48 2f       	mov	r20, r24
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	02 2e       	mov	r0, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <DIO_u8SetPinDirection+0x19c>
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	0a 94       	dec	r0
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <DIO_u8SetPinDirection+0x198>
    1630:	84 2b       	or	r24, r20
    1632:	8c 93       	st	X, r24
    1634:	4e c0       	rjmp	.+156    	; 0x16d2 <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1636:	a4 e3       	ldi	r26, 0x34	; 52
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e4 e3       	ldi	r30, 0x34	; 52
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	48 2f       	mov	r20, r24
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 2e       	mov	r0, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <DIO_u8SetPinDirection+0x1c4>
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	0a 94       	dec	r0
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <DIO_u8SetPinDirection+0x1c0>
    1658:	80 95       	com	r24
    165a:	84 23       	and	r24, r20
    165c:	8c 93       	st	X, r24
    165e:	39 c0       	rjmp	.+114    	; 0x16d2 <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	3e 83       	std	Y+6, r19	; 0x06
    1668:	2d 83       	std	Y+5, r18	; 0x05
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	31 f0       	breq	.+12     	; 0x167e <DIO_u8SetPinDirection+0x1ee>
    1672:	2d 81       	ldd	r18, Y+5	; 0x05
    1674:	3e 81       	ldd	r19, Y+6	; 0x06
    1676:	21 30       	cpi	r18, 0x01	; 1
    1678:	31 05       	cpc	r19, r1
    167a:	a9 f0       	breq	.+42     	; 0x16a6 <DIO_u8SetPinDirection+0x216>
    167c:	2a c0       	rjmp	.+84     	; 0x16d2 <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    167e:	a1 e3       	ldi	r26, 0x31	; 49
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e1 e3       	ldi	r30, 0x31	; 49
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <DIO_u8SetPinDirection+0x20c>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <DIO_u8SetPinDirection+0x208>
    16a0:	84 2b       	or	r24, r20
    16a2:	8c 93       	st	X, r24
    16a4:	16 c0       	rjmp	.+44     	; 0x16d2 <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    16a6:	a1 e3       	ldi	r26, 0x31	; 49
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e1 e3       	ldi	r30, 0x31	; 49
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <DIO_u8SetPinDirection+0x234>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <DIO_u8SetPinDirection+0x230>
    16c8:	80 95       	com	r24
    16ca:	84 23       	and	r24, r20
    16cc:	8c 93       	st	X, r24
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <DIO_u8SetPinDirection+0x242>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    16d0:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d4:	2e 96       	adiw	r28, 0x0e	; 14
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	2e 97       	sbiw	r28, 0x0e	; 14
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	8a 83       	std	Y+2, r24	; 0x02
    16fc:	6b 83       	std	Y+3, r22	; 0x03
    16fe:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	84 30       	cpi	r24, 0x04	; 4
    1708:	08 f0       	brcs	.+2      	; 0x170c <DIO_u8SetPinValue+0x26>
    170a:	13 c1       	rjmp	.+550    	; 0x1932 <DIO_u8SetPinValue+0x24c>
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	88 30       	cpi	r24, 0x08	; 8
    1710:	08 f0       	brcs	.+2      	; 0x1714 <DIO_u8SetPinValue+0x2e>
    1712:	0f c1       	rjmp	.+542    	; 0x1932 <DIO_u8SetPinValue+0x24c>
    1714:	8c 81       	ldd	r24, Y+4	; 0x04
    1716:	88 23       	and	r24, r24
    1718:	21 f0       	breq	.+8      	; 0x1722 <DIO_u8SetPinValue+0x3c>
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	09 f0       	breq	.+2      	; 0x1722 <DIO_u8SetPinValue+0x3c>
    1720:	08 c1       	rjmp	.+528    	; 0x1932 <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	3e 87       	std	Y+14, r19	; 0x0e
    172a:	2d 87       	std	Y+13, r18	; 0x0d
    172c:	8d 85       	ldd	r24, Y+13	; 0x0d
    172e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	91 05       	cpc	r25, r1
    1734:	09 f4       	brne	.+2      	; 0x1738 <DIO_u8SetPinValue+0x52>
    1736:	50 c0       	rjmp	.+160    	; 0x17d8 <DIO_u8SetPinValue+0xf2>
    1738:	2d 85       	ldd	r18, Y+13	; 0x0d
    173a:	3e 85       	ldd	r19, Y+14	; 0x0e
    173c:	22 30       	cpi	r18, 0x02	; 2
    173e:	31 05       	cpc	r19, r1
    1740:	2c f4       	brge	.+10     	; 0x174c <DIO_u8SetPinValue+0x66>
    1742:	8d 85       	ldd	r24, Y+13	; 0x0d
    1744:	9e 85       	ldd	r25, Y+14	; 0x0e
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	71 f0       	breq	.+28     	; 0x1766 <DIO_u8SetPinValue+0x80>
    174a:	f4 c0       	rjmp	.+488    	; 0x1934 <DIO_u8SetPinValue+0x24e>
    174c:	2d 85       	ldd	r18, Y+13	; 0x0d
    174e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1750:	22 30       	cpi	r18, 0x02	; 2
    1752:	31 05       	cpc	r19, r1
    1754:	09 f4       	brne	.+2      	; 0x1758 <DIO_u8SetPinValue+0x72>
    1756:	79 c0       	rjmp	.+242    	; 0x184a <DIO_u8SetPinValue+0x164>
    1758:	8d 85       	ldd	r24, Y+13	; 0x0d
    175a:	9e 85       	ldd	r25, Y+14	; 0x0e
    175c:	83 30       	cpi	r24, 0x03	; 3
    175e:	91 05       	cpc	r25, r1
    1760:	09 f4       	brne	.+2      	; 0x1764 <DIO_u8SetPinValue+0x7e>
    1762:	ad c0       	rjmp	.+346    	; 0x18be <DIO_u8SetPinValue+0x1d8>
    1764:	e7 c0       	rjmp	.+462    	; 0x1934 <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	3c 87       	std	Y+12, r19	; 0x0c
    176e:	2b 87       	std	Y+11, r18	; 0x0b
    1770:	8b 85       	ldd	r24, Y+11	; 0x0b
    1772:	9c 85       	ldd	r25, Y+12	; 0x0c
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	c9 f0       	breq	.+50     	; 0x17aa <DIO_u8SetPinValue+0xc4>
    1778:	2b 85       	ldd	r18, Y+11	; 0x0b
    177a:	3c 85       	ldd	r19, Y+12	; 0x0c
    177c:	21 30       	cpi	r18, 0x01	; 1
    177e:	31 05       	cpc	r19, r1
    1780:	49 f5       	brne	.+82     	; 0x17d4 <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1782:	ab e3       	ldi	r26, 0x3B	; 59
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	eb e3       	ldi	r30, 0x3B	; 59
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <DIO_u8SetPinValue+0xba>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <DIO_u8SetPinValue+0xb6>
    17a4:	84 2b       	or	r24, r20
    17a6:	8c 93       	st	X, r24
    17a8:	c5 c0       	rjmp	.+394    	; 0x1934 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    17aa:	ab e3       	ldi	r26, 0x3B	; 59
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	eb e3       	ldi	r30, 0x3B	; 59
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <DIO_u8SetPinValue+0xe2>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <DIO_u8SetPinValue+0xde>
    17cc:	80 95       	com	r24
    17ce:	84 23       	and	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	b0 c0       	rjmp	.+352    	; 0x1934 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    17d4:	19 82       	std	Y+1, r1	; 0x01
    17d6:	ae c0       	rjmp	.+348    	; 0x1934 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	3a 87       	std	Y+10, r19	; 0x0a
    17e0:	29 87       	std	Y+9, r18	; 0x09
    17e2:	89 85       	ldd	r24, Y+9	; 0x09
    17e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	c9 f0       	breq	.+50     	; 0x181c <DIO_u8SetPinValue+0x136>
    17ea:	29 85       	ldd	r18, Y+9	; 0x09
    17ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    17ee:	21 30       	cpi	r18, 0x01	; 1
    17f0:	31 05       	cpc	r19, r1
    17f2:	49 f5       	brne	.+82     	; 0x1846 <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    17f4:	a8 e3       	ldi	r26, 0x38	; 56
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e8 e3       	ldi	r30, 0x38	; 56
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <DIO_u8SetPinValue+0x12c>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <DIO_u8SetPinValue+0x128>
    1816:	84 2b       	or	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	8c c0       	rjmp	.+280    	; 0x1934 <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    181c:	a8 e3       	ldi	r26, 0x38	; 56
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e8 e3       	ldi	r30, 0x38	; 56
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <DIO_u8SetPinValue+0x154>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <DIO_u8SetPinValue+0x150>
    183e:	80 95       	com	r24
    1840:	84 23       	and	r24, r20
    1842:	8c 93       	st	X, r24
    1844:	77 c0       	rjmp	.+238    	; 0x1934 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1846:	19 82       	std	Y+1, r1	; 0x01
    1848:	75 c0       	rjmp	.+234    	; 0x1934 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    184a:	8c 81       	ldd	r24, Y+4	; 0x04
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	38 87       	std	Y+8, r19	; 0x08
    1852:	2f 83       	std	Y+7, r18	; 0x07
    1854:	8f 81       	ldd	r24, Y+7	; 0x07
    1856:	98 85       	ldd	r25, Y+8	; 0x08
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	31 f0       	breq	.+12     	; 0x1868 <DIO_u8SetPinValue+0x182>
    185c:	2f 81       	ldd	r18, Y+7	; 0x07
    185e:	38 85       	ldd	r19, Y+8	; 0x08
    1860:	21 30       	cpi	r18, 0x01	; 1
    1862:	31 05       	cpc	r19, r1
    1864:	b1 f0       	breq	.+44     	; 0x1892 <DIO_u8SetPinValue+0x1ac>
    1866:	29 c0       	rjmp	.+82     	; 0x18ba <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1868:	a5 e3       	ldi	r26, 0x35	; 53
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e5 e3       	ldi	r30, 0x35	; 53
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	48 2f       	mov	r20, r24
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	02 2e       	mov	r0, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <DIO_u8SetPinValue+0x1a0>
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	0a 94       	dec	r0
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <DIO_u8SetPinValue+0x19c>
    188a:	80 95       	com	r24
    188c:	84 23       	and	r24, r20
    188e:	8c 93       	st	X, r24
    1890:	51 c0       	rjmp	.+162    	; 0x1934 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1892:	a5 e3       	ldi	r26, 0x35	; 53
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e5 e3       	ldi	r30, 0x35	; 53
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_u8SetPinValue+0x1ca>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_u8SetPinValue+0x1c6>
    18b4:	84 2b       	or	r24, r20
    18b6:	8c 93       	st	X, r24
    18b8:	3d c0       	rjmp	.+122    	; 0x1934 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    18ba:	19 82       	std	Y+1, r1	; 0x01
    18bc:	3b c0       	rjmp	.+118    	; 0x1934 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    18be:	8c 81       	ldd	r24, Y+4	; 0x04
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	3e 83       	std	Y+6, r19	; 0x06
    18c6:	2d 83       	std	Y+5, r18	; 0x05
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	9e 81       	ldd	r25, Y+6	; 0x06
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	31 f0       	breq	.+12     	; 0x18dc <DIO_u8SetPinValue+0x1f6>
    18d0:	2d 81       	ldd	r18, Y+5	; 0x05
    18d2:	3e 81       	ldd	r19, Y+6	; 0x06
    18d4:	21 30       	cpi	r18, 0x01	; 1
    18d6:	31 05       	cpc	r19, r1
    18d8:	b1 f0       	breq	.+44     	; 0x1906 <DIO_u8SetPinValue+0x220>
    18da:	29 c0       	rjmp	.+82     	; 0x192e <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    18dc:	a2 e3       	ldi	r26, 0x32	; 50
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e2 e3       	ldi	r30, 0x32	; 50
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	48 2f       	mov	r20, r24
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	02 2e       	mov	r0, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <DIO_u8SetPinValue+0x214>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	0a 94       	dec	r0
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <DIO_u8SetPinValue+0x210>
    18fe:	80 95       	com	r24
    1900:	84 23       	and	r24, r20
    1902:	8c 93       	st	X, r24
    1904:	17 c0       	rjmp	.+46     	; 0x1934 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1906:	a2 e3       	ldi	r26, 0x32	; 50
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e2 e3       	ldi	r30, 0x32	; 50
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	48 2f       	mov	r20, r24
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 2e       	mov	r0, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <DIO_u8SetPinValue+0x23e>
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	0a 94       	dec	r0
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <DIO_u8SetPinValue+0x23a>
    1928:	84 2b       	or	r24, r20
    192a:	8c 93       	st	X, r24
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    192e:	19 82       	std	Y+1, r1	; 0x01
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		 Local_u8ErrorState = STD_TYPES_NOK;
    1932:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1934:	89 81       	ldd	r24, Y+1	; 0x01
}
    1936:	2e 96       	adiw	r28, 0x0e	; 14
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	28 97       	sbiw	r28, 0x08	; 8
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	8b 83       	std	Y+3, r24	; 0x03
    195e:	6c 83       	std	Y+4, r22	; 0x04
    1960:	5e 83       	std	Y+6, r21	; 0x06
    1962:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	84 30       	cpi	r24, 0x04	; 4
    196c:	08 f0       	brcs	.+2      	; 0x1970 <DIO_u8GetPinValue+0x28>
    196e:	9f c0       	rjmp	.+318    	; 0x1aae <DIO_u8GetPinValue+0x166>
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	88 30       	cpi	r24, 0x08	; 8
    1974:	08 f0       	brcs	.+2      	; 0x1978 <DIO_u8GetPinValue+0x30>
    1976:	9b c0       	rjmp	.+310    	; 0x1aae <DIO_u8GetPinValue+0x166>
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	09 f4       	brne	.+2      	; 0x1982 <DIO_u8GetPinValue+0x3a>
    1980:	96 c0       	rjmp	.+300    	; 0x1aae <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	38 87       	std	Y+8, r19	; 0x08
    198a:	2f 83       	std	Y+7, r18	; 0x07
    198c:	4f 81       	ldd	r20, Y+7	; 0x07
    198e:	58 85       	ldd	r21, Y+8	; 0x08
    1990:	41 30       	cpi	r20, 0x01	; 1
    1992:	51 05       	cpc	r21, r1
    1994:	a9 f1       	breq	.+106    	; 0x1a00 <DIO_u8GetPinValue+0xb8>
    1996:	8f 81       	ldd	r24, Y+7	; 0x07
    1998:	98 85       	ldd	r25, Y+8	; 0x08
    199a:	82 30       	cpi	r24, 0x02	; 2
    199c:	91 05       	cpc	r25, r1
    199e:	34 f4       	brge	.+12     	; 0x19ac <DIO_u8GetPinValue+0x64>
    19a0:	2f 81       	ldd	r18, Y+7	; 0x07
    19a2:	38 85       	ldd	r19, Y+8	; 0x08
    19a4:	21 15       	cp	r18, r1
    19a6:	31 05       	cpc	r19, r1
    19a8:	71 f0       	breq	.+28     	; 0x19c6 <DIO_u8GetPinValue+0x7e>
    19aa:	82 c0       	rjmp	.+260    	; 0x1ab0 <DIO_u8GetPinValue+0x168>
    19ac:	4f 81       	ldd	r20, Y+7	; 0x07
    19ae:	58 85       	ldd	r21, Y+8	; 0x08
    19b0:	42 30       	cpi	r20, 0x02	; 2
    19b2:	51 05       	cpc	r21, r1
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <DIO_u8GetPinValue+0x70>
    19b6:	41 c0       	rjmp	.+130    	; 0x1a3a <DIO_u8GetPinValue+0xf2>
    19b8:	8f 81       	ldd	r24, Y+7	; 0x07
    19ba:	98 85       	ldd	r25, Y+8	; 0x08
    19bc:	83 30       	cpi	r24, 0x03	; 3
    19be:	91 05       	cpc	r25, r1
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <DIO_u8GetPinValue+0x7c>
    19c2:	58 c0       	rjmp	.+176    	; 0x1a74 <DIO_u8GetPinValue+0x12c>
    19c4:	75 c0       	rjmp	.+234    	; 0x1ab0 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    19c6:	e9 e3       	ldi	r30, 0x39	; 57
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	8c 81       	ldd	r24, Y+4	; 0x04
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a9 01       	movw	r20, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <DIO_u8GetPinValue+0x96>
    19da:	55 95       	asr	r21
    19dc:	47 95       	ror	r20
    19de:	8a 95       	dec	r24
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <DIO_u8GetPinValue+0x92>
    19e2:	ca 01       	movw	r24, r20
    19e4:	81 70       	andi	r24, 0x01	; 1
    19e6:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	88 23       	and	r24, r24
    19ec:	21 f4       	brne	.+8      	; 0x19f6 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    19ee:	ed 81       	ldd	r30, Y+5	; 0x05
    19f0:	fe 81       	ldd	r31, Y+6	; 0x06
    19f2:	10 82       	st	Z, r1
    19f4:	5d c0       	rjmp	.+186    	; 0x1ab0 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    19f6:	ed 81       	ldd	r30, Y+5	; 0x05
    19f8:	fe 81       	ldd	r31, Y+6	; 0x06
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	80 83       	st	Z, r24
    19fe:	58 c0       	rjmp	.+176    	; 0x1ab0 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    1a00:	e6 e3       	ldi	r30, 0x36	; 54
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	a9 01       	movw	r20, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <DIO_u8GetPinValue+0xd0>
    1a14:	55 95       	asr	r21
    1a16:	47 95       	ror	r20
    1a18:	8a 95       	dec	r24
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <DIO_u8GetPinValue+0xcc>
    1a1c:	ca 01       	movw	r24, r20
    1a1e:	81 70       	andi	r24, 0x01	; 1
    1a20:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	88 23       	and	r24, r24
    1a26:	21 f4       	brne	.+8      	; 0x1a30 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1a28:	ed 81       	ldd	r30, Y+5	; 0x05
    1a2a:	fe 81       	ldd	r31, Y+6	; 0x06
    1a2c:	10 82       	st	Z, r1
    1a2e:	40 c0       	rjmp	.+128    	; 0x1ab0 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1a30:	ed 81       	ldd	r30, Y+5	; 0x05
    1a32:	fe 81       	ldd	r31, Y+6	; 0x06
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	80 83       	st	Z, r24
    1a38:	3b c0       	rjmp	.+118    	; 0x1ab0 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    1a3a:	e3 e3       	ldi	r30, 0x33	; 51
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	8c 81       	ldd	r24, Y+4	; 0x04
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	a9 01       	movw	r20, r18
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <DIO_u8GetPinValue+0x10a>
    1a4e:	55 95       	asr	r21
    1a50:	47 95       	ror	r20
    1a52:	8a 95       	dec	r24
    1a54:	e2 f7       	brpl	.-8      	; 0x1a4e <DIO_u8GetPinValue+0x106>
    1a56:	ca 01       	movw	r24, r20
    1a58:	81 70       	andi	r24, 0x01	; 1
    1a5a:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	88 23       	and	r24, r24
    1a60:	21 f4       	brne	.+8      	; 0x1a6a <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1a62:	ed 81       	ldd	r30, Y+5	; 0x05
    1a64:	fe 81       	ldd	r31, Y+6	; 0x06
    1a66:	10 82       	st	Z, r1
    1a68:	23 c0       	rjmp	.+70     	; 0x1ab0 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1a6a:	ed 81       	ldd	r30, Y+5	; 0x05
    1a6c:	fe 81       	ldd	r31, Y+6	; 0x06
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	80 83       	st	Z, r24
    1a72:	1e c0       	rjmp	.+60     	; 0x1ab0 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    1a74:	e0 e3       	ldi	r30, 0x30	; 48
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a80:	88 2f       	mov	r24, r24
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	a9 01       	movw	r20, r18
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <DIO_u8GetPinValue+0x144>
    1a88:	55 95       	asr	r21
    1a8a:	47 95       	ror	r20
    1a8c:	8a 95       	dec	r24
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <DIO_u8GetPinValue+0x140>
    1a90:	ca 01       	movw	r24, r20
    1a92:	81 70       	andi	r24, 0x01	; 1
    1a94:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	88 23       	and	r24, r24
    1a9a:	21 f4       	brne	.+8      	; 0x1aa4 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1a9c:	ed 81       	ldd	r30, Y+5	; 0x05
    1a9e:	fe 81       	ldd	r31, Y+6	; 0x06
    1aa0:	10 82       	st	Z, r1
    1aa2:	06 c0       	rjmp	.+12     	; 0x1ab0 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1aa4:	ed 81       	ldd	r30, Y+5	; 0x05
    1aa6:	fe 81       	ldd	r31, Y+6	; 0x06
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	80 83       	st	Z, r24
    1aac:	01 c0       	rjmp	.+2      	; 0x1ab0 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1aae:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ab2:	28 96       	adiw	r28, 0x08	; 8
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	2d 97       	sbiw	r28, 0x0d	; 13
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	3d 87       	std	Y+13, r19	; 0x0d
    1ae4:	2c 87       	std	Y+12, r18	; 0x0c
    1ae6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ae8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1aea:	81 30       	cpi	r24, 0x01	; 1
    1aec:	91 05       	cpc	r25, r1
    1aee:	71 f1       	breq	.+92     	; 0x1b4c <DIO_u8SetPortDirection+0x88>
    1af0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1af2:	3d 85       	ldd	r19, Y+13	; 0x0d
    1af4:	22 30       	cpi	r18, 0x02	; 2
    1af6:	31 05       	cpc	r19, r1
    1af8:	2c f4       	brge	.+10     	; 0x1b04 <DIO_u8SetPortDirection+0x40>
    1afa:	8c 85       	ldd	r24, Y+12	; 0x0c
    1afc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	69 f0       	breq	.+26     	; 0x1b1c <DIO_u8SetPortDirection+0x58>
    1b02:	69 c0       	rjmp	.+210    	; 0x1bd6 <DIO_u8SetPortDirection+0x112>
    1b04:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b06:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b08:	22 30       	cpi	r18, 0x02	; 2
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	b1 f1       	breq	.+108    	; 0x1b7a <DIO_u8SetPortDirection+0xb6>
    1b0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b10:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b12:	83 30       	cpi	r24, 0x03	; 3
    1b14:	91 05       	cpc	r25, r1
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <DIO_u8SetPortDirection+0x56>
    1b18:	47 c0       	rjmp	.+142    	; 0x1ba8 <DIO_u8SetPortDirection+0xe4>
    1b1a:	5d c0       	rjmp	.+186    	; 0x1bd6 <DIO_u8SetPortDirection+0x112>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	3b 87       	std	Y+11, r19	; 0x0b
    1b24:	2a 87       	std	Y+10, r18	; 0x0a
    1b26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b28:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	51 f0       	breq	.+20     	; 0x1b42 <DIO_u8SetPortDirection+0x7e>
    1b2e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b30:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b32:	21 30       	cpi	r18, 0x01	; 1
    1b34:	31 05       	cpc	r19, r1
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <DIO_u8SetPortDirection+0x76>
    1b38:	50 c0       	rjmp	.+160    	; 0x1bda <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    1b3a:	ea e3       	ldi	r30, 0x3A	; 58
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	10 82       	st	Z, r1
    1b40:	4c c0       	rjmp	.+152    	; 0x1bda <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    1b42:	ea e3       	ldi	r30, 0x3A	; 58
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	8f ef       	ldi	r24, 0xFF	; 255
    1b48:	80 83       	st	Z, r24
    1b4a:	47 c0       	rjmp	.+142    	; 0x1bda <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	39 87       	std	Y+9, r19	; 0x09
    1b54:	28 87       	std	Y+8, r18	; 0x08
    1b56:	88 85       	ldd	r24, Y+8	; 0x08
    1b58:	99 85       	ldd	r25, Y+9	; 0x09
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	49 f0       	breq	.+18     	; 0x1b70 <DIO_u8SetPortDirection+0xac>
    1b5e:	28 85       	ldd	r18, Y+8	; 0x08
    1b60:	39 85       	ldd	r19, Y+9	; 0x09
    1b62:	21 30       	cpi	r18, 0x01	; 1
    1b64:	31 05       	cpc	r19, r1
    1b66:	c9 f5       	brne	.+114    	; 0x1bda <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    1b68:	e7 e3       	ldi	r30, 0x37	; 55
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	10 82       	st	Z, r1
    1b6e:	35 c0       	rjmp	.+106    	; 0x1bda <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    1b70:	e7 e3       	ldi	r30, 0x37	; 55
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	8f ef       	ldi	r24, 0xFF	; 255
    1b76:	80 83       	st	Z, r24
    1b78:	30 c0       	rjmp	.+96     	; 0x1bda <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	3f 83       	std	Y+7, r19	; 0x07
    1b82:	2e 83       	std	Y+6, r18	; 0x06
    1b84:	8e 81       	ldd	r24, Y+6	; 0x06
    1b86:	9f 81       	ldd	r25, Y+7	; 0x07
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	49 f0       	breq	.+18     	; 0x1b9e <DIO_u8SetPortDirection+0xda>
    1b8c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b8e:	3f 81       	ldd	r19, Y+7	; 0x07
    1b90:	21 30       	cpi	r18, 0x01	; 1
    1b92:	31 05       	cpc	r19, r1
    1b94:	11 f5       	brne	.+68     	; 0x1bda <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    1b96:	e4 e3       	ldi	r30, 0x34	; 52
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	10 82       	st	Z, r1
    1b9c:	1e c0       	rjmp	.+60     	; 0x1bda <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    1b9e:	e4 e3       	ldi	r30, 0x34	; 52
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	8f ef       	ldi	r24, 0xFF	; 255
    1ba4:	80 83       	st	Z, r24
    1ba6:	19 c0       	rjmp	.+50     	; 0x1bda <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	3d 83       	std	Y+5, r19	; 0x05
    1bb0:	2c 83       	std	Y+4, r18	; 0x04
    1bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	49 f0       	breq	.+18     	; 0x1bcc <DIO_u8SetPortDirection+0x108>
    1bba:	2c 81       	ldd	r18, Y+4	; 0x04
    1bbc:	3d 81       	ldd	r19, Y+5	; 0x05
    1bbe:	21 30       	cpi	r18, 0x01	; 1
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	59 f4       	brne	.+22     	; 0x1bda <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    1bc4:	e1 e3       	ldi	r30, 0x31	; 49
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	10 82       	st	Z, r1
    1bca:	07 c0       	rjmp	.+14     	; 0x1bda <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    1bcc:	e1 e3       	ldi	r30, 0x31	; 49
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	8f ef       	ldi	r24, 0xFF	; 255
    1bd2:	80 83       	st	Z, r24
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;
		default:
			return STD_TYPES_NOK;
    1bd6:	1b 82       	std	Y+3, r1	; 0x03
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <DIO_u8SetPortDirection+0x11a>
			break;
	}
	return STD_TYPES_OK;
    1bda:	31 e0       	ldi	r19, 0x01	; 1
    1bdc:	3b 83       	std	Y+3, r19	; 0x03
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1be0:	2d 96       	adiw	r28, 0x0d	; 13
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	08 95       	ret

00001bf2 <DIO_u8SetPortValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortVlaue)
{
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <DIO_u8SetPortValue+0x6>
    1bf8:	00 d0       	rcall	.+0      	; 0x1bfa <DIO_u8SetPortValue+0x8>
    1bfa:	0f 92       	push	r0
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId){
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	3d 83       	std	Y+5, r19	; 0x05
    1c0c:	2c 83       	std	Y+4, r18	; 0x04
    1c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c10:	9d 81       	ldd	r25, Y+5	; 0x05
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	91 05       	cpc	r25, r1
    1c16:	d1 f0       	breq	.+52     	; 0x1c4c <DIO_u8SetPortValue+0x5a>
    1c18:	2c 81       	ldd	r18, Y+4	; 0x04
    1c1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c1c:	22 30       	cpi	r18, 0x02	; 2
    1c1e:	31 05       	cpc	r19, r1
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <DIO_u8SetPortValue+0x3a>
    1c22:	8c 81       	ldd	r24, Y+4	; 0x04
    1c24:	9d 81       	ldd	r25, Y+5	; 0x05
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	61 f0       	breq	.+24     	; 0x1c42 <DIO_u8SetPortValue+0x50>
    1c2a:	1f c0       	rjmp	.+62     	; 0x1c6a <DIO_u8SetPortValue+0x78>
    1c2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c30:	22 30       	cpi	r18, 0x02	; 2
    1c32:	31 05       	cpc	r19, r1
    1c34:	81 f0       	breq	.+32     	; 0x1c56 <DIO_u8SetPortValue+0x64>
    1c36:	8c 81       	ldd	r24, Y+4	; 0x04
    1c38:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3a:	83 30       	cpi	r24, 0x03	; 3
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	81 f0       	breq	.+32     	; 0x1c60 <DIO_u8SetPortValue+0x6e>
    1c40:	14 c0       	rjmp	.+40     	; 0x1c6a <DIO_u8SetPortValue+0x78>
	case DIO_u8_PORTA:
		DIO_u8_PORTA_REG = Copy_u8PortVlaue;
    1c42:	eb e3       	ldi	r30, 0x3B	; 59
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	80 83       	st	Z, r24
    1c4a:	11 c0       	rjmp	.+34     	; 0x1c6e <DIO_u8SetPortValue+0x7c>
		break;
	case DIO_u8_PORTB:
		DIO_u8_PORTB_REG = Copy_u8PortVlaue;
    1c4c:	e8 e3       	ldi	r30, 0x38	; 56
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	80 83       	st	Z, r24
    1c54:	0c c0       	rjmp	.+24     	; 0x1c6e <DIO_u8SetPortValue+0x7c>
		break;
	case DIO_u8_PORTC:
		DIO_u8_PORTC_REG = Copy_u8PortVlaue;
    1c56:	e5 e3       	ldi	r30, 0x35	; 53
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	80 83       	st	Z, r24
    1c5e:	07 c0       	rjmp	.+14     	; 0x1c6e <DIO_u8SetPortValue+0x7c>
		break;
	case DIO_u8_PORTD:
		DIO_u8_PORTD_REG = Copy_u8PortVlaue;
    1c60:	e2 e3       	ldi	r30, 0x32	; 50
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	80 83       	st	Z, r24
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <DIO_u8SetPortValue+0x7c>
		break;
	default:
		return STD_TYPES_NOK;
    1c6a:	1b 82       	std	Y+3, r1	; 0x03
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <DIO_u8SetPortValue+0x80>
		break;
	}
	return 1;
    1c6e:	91 e0       	ldi	r25, 0x01	; 1
    1c70:	9b 83       	std	Y+3, r25	; 0x03
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <DIO_u8GetPortValue+0x6>
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <DIO_u8GetPortValue+0x8>
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <DIO_u8GetPortValue+0xa>
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	8a 83       	std	Y+2, r24	; 0x02
    1c94:	7c 83       	std	Y+4, r23	; 0x04
    1c96:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	84 30       	cpi	r24, 0x04	; 4
    1ca0:	08 f0       	brcs	.+2      	; 0x1ca4 <DIO_u8GetPortValue+0x20>
    1ca2:	3f c0       	rjmp	.+126    	; 0x1d22 <DIO_u8GetPortValue+0x9e>
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	d9 f1       	breq	.+118    	; 0x1d22 <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	3e 83       	std	Y+6, r19	; 0x06
    1cb4:	2d 83       	std	Y+5, r18	; 0x05
    1cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	e1 f0       	breq	.+56     	; 0x1cf8 <DIO_u8GetPortValue+0x74>
    1cc0:	2d 81       	ldd	r18, Y+5	; 0x05
    1cc2:	3e 81       	ldd	r19, Y+6	; 0x06
    1cc4:	22 30       	cpi	r18, 0x02	; 2
    1cc6:	31 05       	cpc	r19, r1
    1cc8:	2c f4       	brge	.+10     	; 0x1cd4 <DIO_u8GetPortValue+0x50>
    1cca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	61 f0       	breq	.+24     	; 0x1cea <DIO_u8GetPortValue+0x66>
    1cd2:	28 c0       	rjmp	.+80     	; 0x1d24 <DIO_u8GetPortValue+0xa0>
    1cd4:	2d 81       	ldd	r18, Y+5	; 0x05
    1cd6:	3e 81       	ldd	r19, Y+6	; 0x06
    1cd8:	22 30       	cpi	r18, 0x02	; 2
    1cda:	31 05       	cpc	r19, r1
    1cdc:	a1 f0       	breq	.+40     	; 0x1d06 <DIO_u8GetPortValue+0x82>
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	83 30       	cpi	r24, 0x03	; 3
    1ce4:	91 05       	cpc	r25, r1
    1ce6:	b1 f0       	breq	.+44     	; 0x1d14 <DIO_u8GetPortValue+0x90>
    1ce8:	1d c0       	rjmp	.+58     	; 0x1d24 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    1cea:	e9 e3       	ldi	r30, 0x39	; 57
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	eb 81       	ldd	r30, Y+3	; 0x03
    1cf2:	fc 81       	ldd	r31, Y+4	; 0x04
    1cf4:	80 83       	st	Z, r24
    1cf6:	16 c0       	rjmp	.+44     	; 0x1d24 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    1cf8:	e6 e3       	ldi	r30, 0x36	; 54
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	eb 81       	ldd	r30, Y+3	; 0x03
    1d00:	fc 81       	ldd	r31, Y+4	; 0x04
    1d02:	80 83       	st	Z, r24
    1d04:	0f c0       	rjmp	.+30     	; 0x1d24 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    1d06:	e3 e3       	ldi	r30, 0x33	; 51
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d0e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d10:	80 83       	st	Z, r24
    1d12:	08 c0       	rjmp	.+16     	; 0x1d24 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    1d14:	e0 e3       	ldi	r30, 0x30	; 48
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d1e:	80 83       	st	Z, r24
    1d20:	01 c0       	rjmp	.+2      	; 0x1d24 <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1d22:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1d26:	26 96       	adiw	r28, 0x06	; 6
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <ADC_voidInit>:
static void(*ADC_pfNotification)(u16) = NULL;
/* ADC busy flag */
static u8 ADC_u8BusyFlag = 0;

void ADC_voidInit(void)
{
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
		2- Right Adjust
		3- Disable AutoTrigger
		4- Select CLK/64
		5- Enable ADC
	 */
	CLR_BIT(ADC_u8_ADMUX_REG,7);
    1d40:	a7 e2       	ldi	r26, 0x27	; 39
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e7 e2       	ldi	r30, 0x27	; 39
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	8f 77       	andi	r24, 0x7F	; 127
    1d4c:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
    1d4e:	a7 e2       	ldi	r26, 0x27	; 39
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e7 e2       	ldi	r30, 0x27	; 39
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	80 64       	ori	r24, 0x40	; 64
    1d5a:	8c 93       	st	X, r24

	CLR_BIT(ADC_u8_ADMUX_REG,5);
    1d5c:	a7 e2       	ldi	r26, 0x27	; 39
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e7 e2       	ldi	r30, 0x27	; 39
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	8f 7d       	andi	r24, 0xDF	; 223
    1d68:	8c 93       	st	X, r24

	CLR_BIT(ADC_u8_ADCSRA_REG,5);
    1d6a:	a6 e2       	ldi	r26, 0x26	; 38
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e6 e2       	ldi	r30, 0x26	; 38
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	8f 7d       	andi	r24, 0xDF	; 223
    1d76:	8c 93       	st	X, r24

	SET_BIT(ADC_u8_ADCSRA_REG,2);
    1d78:	a6 e2       	ldi	r26, 0x26	; 38
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e6 e2       	ldi	r30, 0x26	; 38
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	84 60       	ori	r24, 0x04	; 4
    1d84:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
    1d86:	a6 e2       	ldi	r26, 0x26	; 38
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e6 e2       	ldi	r30, 0x26	; 38
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	82 60       	ori	r24, 0x02	; 2
    1d92:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
    1d94:	a6 e2       	ldi	r26, 0x26	; 38
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e6 e2       	ldi	r30, 0x26	; 38
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	8e 7f       	andi	r24, 0xFE	; 254
    1da0:	8c 93       	st	X, r24

	SET_BIT(ADC_u8_ADCSRA_REG,7);
    1da2:	a6 e2       	ldi	r26, 0x26	; 38
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e6 e2       	ldi	r30, 0x26	; 38
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	80 68       	ori	r24, 0x80	; 128
    1dae:	8c 93       	st	X, r24
}
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <ADC_u8GetDigitalValueSynchNonBlocking>:

u8   ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNb, u16 * Copy_pu16DigitalValue)
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	28 97       	sbiw	r28, 0x08	; 8
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cd bf       	out	0x3d, r28	; 61
    1dca:	8e 83       	std	Y+6, r24	; 0x06
    1dcc:	78 87       	std	Y+8, r23	; 0x08
    1dce:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    1dd4:	19 82       	std	Y+1, r1	; 0x01
    1dd6:	1a 82       	std	Y+2, r1	; 0x02
    1dd8:	1b 82       	std	Y+3, r1	; 0x03
    1dda:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNb < 32) && (Copy_pu16DigitalValue != NULL))
    1ddc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dde:	80 32       	cpi	r24, 0x20	; 32
    1de0:	08 f0       	brcs	.+2      	; 0x1de4 <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
    1de2:	5b c0       	rjmp	.+182    	; 0x1e9a <ADC_u8GetDigitalValueSynchNonBlocking+0xe4>
    1de4:	8f 81       	ldd	r24, Y+7	; 0x07
    1de6:	98 85       	ldd	r25, Y+8	; 0x08
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	09 f4       	brne	.+2      	; 0x1dee <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
    1dec:	56 c0       	rjmp	.+172    	; 0x1e9a <ADC_u8GetDigitalValueSynchNonBlocking+0xe4>
	{
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    1dee:	a7 e2       	ldi	r26, 0x27	; 39
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e7 e2       	ldi	r30, 0x27	; 39
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	80 7e       	andi	r24, 0xE0	; 224
    1dfa:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
    1dfc:	a7 e2       	ldi	r26, 0x27	; 39
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e7 e2       	ldi	r30, 0x27	; 39
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	90 81       	ld	r25, Z
    1e06:	8e 81       	ldd	r24, Y+6	; 0x06
    1e08:	89 2b       	or	r24, r25
    1e0a:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
    1e0c:	a6 e2       	ldi	r26, 0x26	; 38
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e6 e2       	ldi	r30, 0x26	; 38
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	80 64       	ori	r24, 0x40	; 64
    1e18:	8c 93       	st	X, r24
    1e1a:	0b c0       	rjmp	.+22     	; 0x1e32 <ADC_u8GetDigitalValueSynchNonBlocking+0x7c>
		/* Wait flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)== 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
		{
			Local_u32TimeOutCounter++;
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e20:	ab 81       	ldd	r26, Y+3	; 0x03
    1e22:	bc 81       	ldd	r27, Y+4	; 0x04
    1e24:	01 96       	adiw	r24, 0x01	; 1
    1e26:	a1 1d       	adc	r26, r1
    1e28:	b1 1d       	adc	r27, r1
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	9a 83       	std	Y+2, r25	; 0x02
    1e2e:	ab 83       	std	Y+3, r26	; 0x03
    1e30:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/* Wait flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)== 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
    1e32:	e6 e2       	ldi	r30, 0x26	; 38
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	82 95       	swap	r24
    1e3a:	8f 70       	andi	r24, 0x0F	; 15
    1e3c:	88 2f       	mov	r24, r24
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	81 70       	andi	r24, 0x01	; 1
    1e42:	90 70       	andi	r25, 0x00	; 0
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	61 f4       	brne	.+24     	; 0x1e60 <ADC_u8GetDigitalValueSynchNonBlocking+0xaa>
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4c:	ab 81       	ldd	r26, Y+3	; 0x03
    1e4e:	bc 81       	ldd	r27, Y+4	; 0x04
    1e50:	80 35       	cpi	r24, 0x50	; 80
    1e52:	23 ec       	ldi	r18, 0xC3	; 195
    1e54:	92 07       	cpc	r25, r18
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	a2 07       	cpc	r26, r18
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	b2 07       	cpc	r27, r18
    1e5e:	f0 f2       	brcs	.-68     	; 0x1e1c <ADC_u8GetDigitalValueSynchNonBlocking+0x66>
		{
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)!= 0)//(Local_u32TimeOutCounter<ADC_u32_TIME_OUT_MAX_VALUE)
    1e60:	e6 e2       	ldi	r30, 0x26	; 38
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	82 95       	swap	r24
    1e68:	8f 70       	andi	r24, 0x0F	; 15
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	81 70       	andi	r24, 0x01	; 1
    1e70:	90 70       	andi	r25, 0x00	; 0
    1e72:	88 23       	and	r24, r24
    1e74:	81 f0       	breq	.+32     	; 0x1e96 <ADC_u8GetDigitalValueSynchNonBlocking+0xe0>
		{
			/* Clear flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
    1e76:	a6 e2       	ldi	r26, 0x26	; 38
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e6 e2       	ldi	r30, 0x26	; 38
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	80 61       	ori	r24, 0x10	; 16
    1e82:	8c 93       	st	X, r24
			/* Read the Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
    1e84:	e4 e2       	ldi	r30, 0x24	; 36
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	ef 81       	ldd	r30, Y+7	; 0x07
    1e8e:	f8 85       	ldd	r31, Y+8	; 0x08
    1e90:	91 83       	std	Z+1, r25	; 0x01
    1e92:	80 83       	st	Z, r24
    1e94:	03 c0       	rjmp	.+6      	; 0x1e9c <ADC_u8GetDigitalValueSynchNonBlocking+0xe6>
		}
		else
		{
			Local_u8ErrorState = STD_TYPES_NOK;
    1e96:	1d 82       	std	Y+5, r1	; 0x05
    1e98:	01 c0       	rjmp	.+2      	; 0x1e9c <ADC_u8GetDigitalValueSynchNonBlocking+0xe6>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1e9a:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1e9e:	28 96       	adiw	r28, 0x08	; 8
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <ADC_u8GetDigitalValueAsynch>:
u8   ADC_u8GetDigitalValueAsynch          (u8 Copy_u8ChannelNb,void(*Copy_pfNotification)(u16))
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <ADC_u8GetDigitalValueAsynch+0x6>
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <ADC_u8GetDigitalValueAsynch+0x8>
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	8a 83       	std	Y+2, r24	; 0x02
    1ebe:	7c 83       	std	Y+4, r23	; 0x04
    1ec0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32) && (Copy_pfNotification != NULL) && (ADC_u8BusyFlag == 0))
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	80 32       	cpi	r24, 0x20	; 32
    1eca:	78 f5       	brcc	.+94     	; 0x1f2a <ADC_u8GetDigitalValueAsynch+0x7a>
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	59 f1       	breq	.+86     	; 0x1f2a <ADC_u8GetDigitalValueAsynch+0x7a>
    1ed4:	80 91 90 00 	lds	r24, 0x0090
    1ed8:	88 23       	and	r24, r24
    1eda:	39 f5       	brne	.+78     	; 0x1f2a <ADC_u8GetDigitalValueAsynch+0x7a>
	{
		/* Set Flag to make ADC is Busy */
		ADC_u8BusyFlag = 1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	80 93 90 00 	sts	0x0090, r24
		/* update Global Pointer to a function */
		ADC_pfNotification = Copy_pfNotification;
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee6:	90 93 8f 00 	sts	0x008F, r25
    1eea:	80 93 8e 00 	sts	0x008E, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
    1eee:	a6 e2       	ldi	r26, 0x26	; 38
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e6 e2       	ldi	r30, 0x26	; 38
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	88 60       	ori	r24, 0x08	; 8
    1efa:	8c 93       	st	X, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    1efc:	a7 e2       	ldi	r26, 0x27	; 39
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e7 e2       	ldi	r30, 0x27	; 39
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	80 7e       	andi	r24, 0xE0	; 224
    1f08:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
    1f0a:	a7 e2       	ldi	r26, 0x27	; 39
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e7 e2       	ldi	r30, 0x27	; 39
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	90 81       	ld	r25, Z
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	89 2b       	or	r24, r25
    1f18:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
    1f1a:	a6 e2       	ldi	r26, 0x26	; 38
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e6 e2       	ldi	r30, 0x26	; 38
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	80 64       	ori	r24, 0x40	; 64
    1f26:	8c 93       	st	X, r24
    1f28:	01 c0       	rjmp	.+2      	; 0x1f2c <ADC_u8GetDigitalValueAsynch+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1f2a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <ADC_u8GetADCRegValue>:
u8   ADC_u8GetADCRegValue                 (u16 * Copy_pu16ADCValue)
{
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	00 d0       	rcall	.+0      	; 0x1f42 <ADC_u8GetADCRegValue+0x6>
    1f42:	0f 92       	push	r0
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	9b 83       	std	Y+3, r25	; 0x03
    1f4a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCValue != NULL)
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	9b 81       	ldd	r25, Y+3	; 0x03
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	49 f0       	breq	.+18     	; 0x1f6a <ADC_u8GetADCRegValue+0x2e>
	{
		/* Read ADC Register */
		*Copy_pu16ADCValue = ADC_u16_ADC_REG;
    1f58:	e4 e2       	ldi	r30, 0x24	; 36
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	ea 81       	ldd	r30, Y+2	; 0x02
    1f62:	fb 81       	ldd	r31, Y+3	; 0x03
    1f64:	91 83       	std	Z+1, r25	; 0x01
    1f66:	80 83       	st	Z, r24
    1f68:	01 c0       	rjmp	.+2      	; 0x1f6c <ADC_u8GetADCRegValue+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1f6a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState ;
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <__vector_16>:

/* Prototype for ADC ISR */
void __vector_16(void)     __attribute__((signal));
void __vector_16(void)
{
    1f7a:	1f 92       	push	r1
    1f7c:	0f 92       	push	r0
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	0f 92       	push	r0
    1f82:	11 24       	eor	r1, r1
    1f84:	2f 93       	push	r18
    1f86:	3f 93       	push	r19
    1f88:	4f 93       	push	r20
    1f8a:	5f 93       	push	r21
    1f8c:	6f 93       	push	r22
    1f8e:	7f 93       	push	r23
    1f90:	8f 93       	push	r24
    1f92:	9f 93       	push	r25
    1f94:	af 93       	push	r26
    1f96:	bf 93       	push	r27
    1f98:	ef 93       	push	r30
    1f9a:	ff 93       	push	r31
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
    1fa4:	80 91 8e 00 	lds	r24, 0x008E
    1fa8:	90 91 8f 00 	lds	r25, 0x008F
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	99 f0       	breq	.+38     	; 0x1fd6 <__vector_16+0x5c>
	{
		/* Clear Flag */
		ADC_u8BusyFlag = 0;
    1fb0:	10 92 90 00 	sts	0x0090, r1
		/* Clear PIE of ADC */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
    1fb4:	a6 e2       	ldi	r26, 0x26	; 38
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e6 e2       	ldi	r30, 0x26	; 38
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	87 7f       	andi	r24, 0xF7	; 247
    1fc0:	8c 93       	st	X, r24
		/* Calling Notification function */
		ADC_pfNotification(ADC_u16_ADC_REG);
    1fc2:	20 91 8e 00 	lds	r18, 0x008E
    1fc6:	30 91 8f 00 	lds	r19, 0x008F
    1fca:	e4 e2       	ldi	r30, 0x24	; 36
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	91 81       	ldd	r25, Z+1	; 0x01
    1fd2:	f9 01       	movw	r30, r18
    1fd4:	09 95       	icall
	}
}
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	ff 91       	pop	r31
    1fdc:	ef 91       	pop	r30
    1fde:	bf 91       	pop	r27
    1fe0:	af 91       	pop	r26
    1fe2:	9f 91       	pop	r25
    1fe4:	8f 91       	pop	r24
    1fe6:	7f 91       	pop	r23
    1fe8:	6f 91       	pop	r22
    1fea:	5f 91       	pop	r21
    1fec:	4f 91       	pop	r20
    1fee:	3f 91       	pop	r19
    1ff0:	2f 91       	pop	r18
    1ff2:	0f 90       	pop	r0
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	0f 90       	pop	r0
    1ff8:	1f 90       	pop	r1
    1ffa:	18 95       	reti

00001ffc <STM_u8_Rotate_CW>:
#include "STM_interface.h"
#include "STM_config.h"


u8 STM_u8_Rotate_CW()
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	e8 97       	sbiw	r28, 0x38	; 56
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	cd bf       	out	0x3d, r28	; 61
	// FIRST STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_LOW);
    2010:	83 e0       	ldi	r24, 0x03	; 3
    2012:	64 e0       	ldi	r22, 0x04	; 4
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    201a:	83 e0       	ldi	r24, 0x03	; 3
    201c:	65 e0       	ldi	r22, 0x05	; 5
    201e:	41 e0       	ldi	r20, 0x01	; 1
    2020:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    2024:	83 e0       	ldi	r24, 0x03	; 3
    2026:	66 e0       	ldi	r22, 0x06	; 6
    2028:	41 e0       	ldi	r20, 0x01	; 1
    202a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    202e:	83 e0       	ldi	r24, 0x03	; 3
    2030:	67 e0       	ldi	r22, 0x07	; 7
    2032:	41 e0       	ldi	r20, 0x01	; 1
    2034:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	a0 e2       	ldi	r26, 0x20	; 32
    203e:	b1 e4       	ldi	r27, 0x41	; 65
    2040:	8d ab       	std	Y+53, r24	; 0x35
    2042:	9e ab       	std	Y+54, r25	; 0x36
    2044:	af ab       	std	Y+55, r26	; 0x37
    2046:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2048:	6d a9       	ldd	r22, Y+53	; 0x35
    204a:	7e a9       	ldd	r23, Y+54	; 0x36
    204c:	8f a9       	ldd	r24, Y+55	; 0x37
    204e:	98 ad       	ldd	r25, Y+56	; 0x38
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4a ef       	ldi	r20, 0xFA	; 250
    2056:	54 e4       	ldi	r21, 0x44	; 68
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	89 ab       	std	Y+49, r24	; 0x31
    2062:	9a ab       	std	Y+50, r25	; 0x32
    2064:	ab ab       	std	Y+51, r26	; 0x33
    2066:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2068:	69 a9       	ldd	r22, Y+49	; 0x31
    206a:	7a a9       	ldd	r23, Y+50	; 0x32
    206c:	8b a9       	ldd	r24, Y+51	; 0x33
    206e:	9c a9       	ldd	r25, Y+52	; 0x34
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e8       	ldi	r20, 0x80	; 128
    2076:	5f e3       	ldi	r21, 0x3F	; 63
    2078:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    207c:	88 23       	and	r24, r24
    207e:	2c f4       	brge	.+10     	; 0x208a <STM_u8_Rotate_CW+0x8e>
		__ticks = 1;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	98 ab       	std	Y+48, r25	; 0x30
    2086:	8f a7       	std	Y+47, r24	; 0x2f
    2088:	3f c0       	rjmp	.+126    	; 0x2108 <STM_u8_Rotate_CW+0x10c>
	else if (__tmp > 65535)
    208a:	69 a9       	ldd	r22, Y+49	; 0x31
    208c:	7a a9       	ldd	r23, Y+50	; 0x32
    208e:	8b a9       	ldd	r24, Y+51	; 0x33
    2090:	9c a9       	ldd	r25, Y+52	; 0x34
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	3f ef       	ldi	r19, 0xFF	; 255
    2096:	4f e7       	ldi	r20, 0x7F	; 127
    2098:	57 e4       	ldi	r21, 0x47	; 71
    209a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    209e:	18 16       	cp	r1, r24
    20a0:	4c f5       	brge	.+82     	; 0x20f4 <STM_u8_Rotate_CW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a2:	6d a9       	ldd	r22, Y+53	; 0x35
    20a4:	7e a9       	ldd	r23, Y+54	; 0x36
    20a6:	8f a9       	ldd	r24, Y+55	; 0x37
    20a8:	98 ad       	ldd	r25, Y+56	; 0x38
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e2       	ldi	r20, 0x20	; 32
    20b0:	51 e4       	ldi	r21, 0x41	; 65
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	bc 01       	movw	r22, r24
    20bc:	cd 01       	movw	r24, r26
    20be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	98 ab       	std	Y+48, r25	; 0x30
    20c8:	8f a7       	std	Y+47, r24	; 0x2f
    20ca:	0f c0       	rjmp	.+30     	; 0x20ea <STM_u8_Rotate_CW+0xee>
    20cc:	88 ec       	ldi	r24, 0xC8	; 200
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9e a7       	std	Y+46, r25	; 0x2e
    20d2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    20d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <STM_u8_Rotate_CW+0xdc>
    20dc:	9e a7       	std	Y+46, r25	; 0x2e
    20de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20e2:	98 a9       	ldd	r25, Y+48	; 0x30
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	98 ab       	std	Y+48, r25	; 0x30
    20e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ec:	98 a9       	ldd	r25, Y+48	; 0x30
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	69 f7       	brne	.-38     	; 0x20cc <STM_u8_Rotate_CW+0xd0>
    20f2:	14 c0       	rjmp	.+40     	; 0x211c <STM_u8_Rotate_CW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f4:	69 a9       	ldd	r22, Y+49	; 0x31
    20f6:	7a a9       	ldd	r23, Y+50	; 0x32
    20f8:	8b a9       	ldd	r24, Y+51	; 0x33
    20fa:	9c a9       	ldd	r25, Y+52	; 0x34
    20fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	98 ab       	std	Y+48, r25	; 0x30
    2106:	8f a7       	std	Y+47, r24	; 0x2f
    2108:	8f a5       	ldd	r24, Y+47	; 0x2f
    210a:	98 a9       	ldd	r25, Y+48	; 0x30
    210c:	9c a7       	std	Y+44, r25	; 0x2c
    210e:	8b a7       	std	Y+43, r24	; 0x2b
    2110:	8b a5       	ldd	r24, Y+43	; 0x2b
    2112:	9c a5       	ldd	r25, Y+44	; 0x2c
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <STM_u8_Rotate_CW+0x118>
    2118:	9c a7       	std	Y+44, r25	; 0x2c
    211a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	// SECOND STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    211c:	83 e0       	ldi	r24, 0x03	; 3
    211e:	64 e0       	ldi	r22, 0x04	; 4
    2120:	41 e0       	ldi	r20, 0x01	; 1
    2122:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_LOW);
    2126:	83 e0       	ldi	r24, 0x03	; 3
    2128:	65 e0       	ldi	r22, 0x05	; 5
    212a:	40 e0       	ldi	r20, 0x00	; 0
    212c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    2130:	83 e0       	ldi	r24, 0x03	; 3
    2132:	66 e0       	ldi	r22, 0x06	; 6
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    213a:	83 e0       	ldi	r24, 0x03	; 3
    213c:	67 e0       	ldi	r22, 0x07	; 7
    213e:	41 e0       	ldi	r20, 0x01	; 1
    2140:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	a0 e2       	ldi	r26, 0x20	; 32
    214a:	b1 e4       	ldi	r27, 0x41	; 65
    214c:	8f a3       	std	Y+39, r24	; 0x27
    214e:	98 a7       	std	Y+40, r25	; 0x28
    2150:	a9 a7       	std	Y+41, r26	; 0x29
    2152:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2154:	6f a1       	ldd	r22, Y+39	; 0x27
    2156:	78 a5       	ldd	r23, Y+40	; 0x28
    2158:	89 a5       	ldd	r24, Y+41	; 0x29
    215a:	9a a5       	ldd	r25, Y+42	; 0x2a
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	4a ef       	ldi	r20, 0xFA	; 250
    2162:	54 e4       	ldi	r21, 0x44	; 68
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	8b a3       	std	Y+35, r24	; 0x23
    216e:	9c a3       	std	Y+36, r25	; 0x24
    2170:	ad a3       	std	Y+37, r26	; 0x25
    2172:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2174:	6b a1       	ldd	r22, Y+35	; 0x23
    2176:	7c a1       	ldd	r23, Y+36	; 0x24
    2178:	8d a1       	ldd	r24, Y+37	; 0x25
    217a:	9e a1       	ldd	r25, Y+38	; 0x26
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e8       	ldi	r20, 0x80	; 128
    2182:	5f e3       	ldi	r21, 0x3F	; 63
    2184:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2188:	88 23       	and	r24, r24
    218a:	2c f4       	brge	.+10     	; 0x2196 <STM_u8_Rotate_CW+0x19a>
		__ticks = 1;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9a a3       	std	Y+34, r25	; 0x22
    2192:	89 a3       	std	Y+33, r24	; 0x21
    2194:	3f c0       	rjmp	.+126    	; 0x2214 <STM_u8_Rotate_CW+0x218>
	else if (__tmp > 65535)
    2196:	6b a1       	ldd	r22, Y+35	; 0x23
    2198:	7c a1       	ldd	r23, Y+36	; 0x24
    219a:	8d a1       	ldd	r24, Y+37	; 0x25
    219c:	9e a1       	ldd	r25, Y+38	; 0x26
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	3f ef       	ldi	r19, 0xFF	; 255
    21a2:	4f e7       	ldi	r20, 0x7F	; 127
    21a4:	57 e4       	ldi	r21, 0x47	; 71
    21a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21aa:	18 16       	cp	r1, r24
    21ac:	4c f5       	brge	.+82     	; 0x2200 <STM_u8_Rotate_CW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ae:	6f a1       	ldd	r22, Y+39	; 0x27
    21b0:	78 a5       	ldd	r23, Y+40	; 0x28
    21b2:	89 a5       	ldd	r24, Y+41	; 0x29
    21b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e2       	ldi	r20, 0x20	; 32
    21bc:	51 e4       	ldi	r21, 0x41	; 65
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9a a3       	std	Y+34, r25	; 0x22
    21d4:	89 a3       	std	Y+33, r24	; 0x21
    21d6:	0f c0       	rjmp	.+30     	; 0x21f6 <STM_u8_Rotate_CW+0x1fa>
    21d8:	88 ec       	ldi	r24, 0xC8	; 200
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	98 a3       	std	Y+32, r25	; 0x20
    21de:	8f 8f       	std	Y+31, r24	; 0x1f
    21e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21e2:	98 a1       	ldd	r25, Y+32	; 0x20
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <STM_u8_Rotate_CW+0x1e8>
    21e8:	98 a3       	std	Y+32, r25	; 0x20
    21ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ec:	89 a1       	ldd	r24, Y+33	; 0x21
    21ee:	9a a1       	ldd	r25, Y+34	; 0x22
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	9a a3       	std	Y+34, r25	; 0x22
    21f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f6:	89 a1       	ldd	r24, Y+33	; 0x21
    21f8:	9a a1       	ldd	r25, Y+34	; 0x22
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	69 f7       	brne	.-38     	; 0x21d8 <STM_u8_Rotate_CW+0x1dc>
    21fe:	14 c0       	rjmp	.+40     	; 0x2228 <STM_u8_Rotate_CW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2200:	6b a1       	ldd	r22, Y+35	; 0x23
    2202:	7c a1       	ldd	r23, Y+36	; 0x24
    2204:	8d a1       	ldd	r24, Y+37	; 0x25
    2206:	9e a1       	ldd	r25, Y+38	; 0x26
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9a a3       	std	Y+34, r25	; 0x22
    2212:	89 a3       	std	Y+33, r24	; 0x21
    2214:	89 a1       	ldd	r24, Y+33	; 0x21
    2216:	9a a1       	ldd	r25, Y+34	; 0x22
    2218:	9e 8f       	std	Y+30, r25	; 0x1e
    221a:	8d 8f       	std	Y+29, r24	; 0x1d
    221c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    221e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <STM_u8_Rotate_CW+0x224>
    2224:	9e 8f       	std	Y+30, r25	; 0x1e
    2226:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	// FOURTH STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    2228:	83 e0       	ldi	r24, 0x03	; 3
    222a:	64 e0       	ldi	r22, 0x04	; 4
    222c:	41 e0       	ldi	r20, 0x01	; 1
    222e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    2232:	83 e0       	ldi	r24, 0x03	; 3
    2234:	65 e0       	ldi	r22, 0x05	; 5
    2236:	41 e0       	ldi	r20, 0x01	; 1
    2238:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_LOW);
    223c:	83 e0       	ldi	r24, 0x03	; 3
    223e:	66 e0       	ldi	r22, 0x06	; 6
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    2246:	83 e0       	ldi	r24, 0x03	; 3
    2248:	67 e0       	ldi	r22, 0x07	; 7
    224a:	41 e0       	ldi	r20, 0x01	; 1
    224c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	a0 e2       	ldi	r26, 0x20	; 32
    2256:	b1 e4       	ldi	r27, 0x41	; 65
    2258:	89 8f       	std	Y+25, r24	; 0x19
    225a:	9a 8f       	std	Y+26, r25	; 0x1a
    225c:	ab 8f       	std	Y+27, r26	; 0x1b
    225e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2260:	69 8d       	ldd	r22, Y+25	; 0x19
    2262:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2264:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2266:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	4a ef       	ldi	r20, 0xFA	; 250
    226e:	54 e4       	ldi	r21, 0x44	; 68
    2270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	8d 8b       	std	Y+21, r24	; 0x15
    227a:	9e 8b       	std	Y+22, r25	; 0x16
    227c:	af 8b       	std	Y+23, r26	; 0x17
    227e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2280:	6d 89       	ldd	r22, Y+21	; 0x15
    2282:	7e 89       	ldd	r23, Y+22	; 0x16
    2284:	8f 89       	ldd	r24, Y+23	; 0x17
    2286:	98 8d       	ldd	r25, Y+24	; 0x18
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e8       	ldi	r20, 0x80	; 128
    228e:	5f e3       	ldi	r21, 0x3F	; 63
    2290:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2294:	88 23       	and	r24, r24
    2296:	2c f4       	brge	.+10     	; 0x22a2 <STM_u8_Rotate_CW+0x2a6>
		__ticks = 1;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	9c 8b       	std	Y+20, r25	; 0x14
    229e:	8b 8b       	std	Y+19, r24	; 0x13
    22a0:	3f c0       	rjmp	.+126    	; 0x2320 <STM_u8_Rotate_CW+0x324>
	else if (__tmp > 65535)
    22a2:	6d 89       	ldd	r22, Y+21	; 0x15
    22a4:	7e 89       	ldd	r23, Y+22	; 0x16
    22a6:	8f 89       	ldd	r24, Y+23	; 0x17
    22a8:	98 8d       	ldd	r25, Y+24	; 0x18
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	3f ef       	ldi	r19, 0xFF	; 255
    22ae:	4f e7       	ldi	r20, 0x7F	; 127
    22b0:	57 e4       	ldi	r21, 0x47	; 71
    22b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22b6:	18 16       	cp	r1, r24
    22b8:	4c f5       	brge	.+82     	; 0x230c <STM_u8_Rotate_CW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ba:	69 8d       	ldd	r22, Y+25	; 0x19
    22bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e2       	ldi	r20, 0x20	; 32
    22c8:	51 e4       	ldi	r21, 0x41	; 65
    22ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	9c 8b       	std	Y+20, r25	; 0x14
    22e0:	8b 8b       	std	Y+19, r24	; 0x13
    22e2:	0f c0       	rjmp	.+30     	; 0x2302 <STM_u8_Rotate_CW+0x306>
    22e4:	88 ec       	ldi	r24, 0xC8	; 200
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	9a 8b       	std	Y+18, r25	; 0x12
    22ea:	89 8b       	std	Y+17, r24	; 0x11
    22ec:	89 89       	ldd	r24, Y+17	; 0x11
    22ee:	9a 89       	ldd	r25, Y+18	; 0x12
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <STM_u8_Rotate_CW+0x2f4>
    22f4:	9a 8b       	std	Y+18, r25	; 0x12
    22f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f8:	8b 89       	ldd	r24, Y+19	; 0x13
    22fa:	9c 89       	ldd	r25, Y+20	; 0x14
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	9c 8b       	std	Y+20, r25	; 0x14
    2300:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2302:	8b 89       	ldd	r24, Y+19	; 0x13
    2304:	9c 89       	ldd	r25, Y+20	; 0x14
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	69 f7       	brne	.-38     	; 0x22e4 <STM_u8_Rotate_CW+0x2e8>
    230a:	14 c0       	rjmp	.+40     	; 0x2334 <STM_u8_Rotate_CW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230c:	6d 89       	ldd	r22, Y+21	; 0x15
    230e:	7e 89       	ldd	r23, Y+22	; 0x16
    2310:	8f 89       	ldd	r24, Y+23	; 0x17
    2312:	98 8d       	ldd	r25, Y+24	; 0x18
    2314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	9c 8b       	std	Y+20, r25	; 0x14
    231e:	8b 8b       	std	Y+19, r24	; 0x13
    2320:	8b 89       	ldd	r24, Y+19	; 0x13
    2322:	9c 89       	ldd	r25, Y+20	; 0x14
    2324:	98 8b       	std	Y+16, r25	; 0x10
    2326:	8f 87       	std	Y+15, r24	; 0x0f
    2328:	8f 85       	ldd	r24, Y+15	; 0x0f
    232a:	98 89       	ldd	r25, Y+16	; 0x10
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <STM_u8_Rotate_CW+0x330>
    2330:	98 8b       	std	Y+16, r25	; 0x10
    2332:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	// FOURTH STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    2334:	83 e0       	ldi	r24, 0x03	; 3
    2336:	64 e0       	ldi	r22, 0x04	; 4
    2338:	41 e0       	ldi	r20, 0x01	; 1
    233a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    233e:	83 e0       	ldi	r24, 0x03	; 3
    2340:	65 e0       	ldi	r22, 0x05	; 5
    2342:	41 e0       	ldi	r20, 0x01	; 1
    2344:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    2348:	83 e0       	ldi	r24, 0x03	; 3
    234a:	66 e0       	ldi	r22, 0x06	; 6
    234c:	41 e0       	ldi	r20, 0x01	; 1
    234e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_LOW);
    2352:	83 e0       	ldi	r24, 0x03	; 3
    2354:	67 e0       	ldi	r22, 0x07	; 7
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	a0 e2       	ldi	r26, 0x20	; 32
    2362:	b1 e4       	ldi	r27, 0x41	; 65
    2364:	8b 87       	std	Y+11, r24	; 0x0b
    2366:	9c 87       	std	Y+12, r25	; 0x0c
    2368:	ad 87       	std	Y+13, r26	; 0x0d
    236a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236c:	6b 85       	ldd	r22, Y+11	; 0x0b
    236e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2370:	8d 85       	ldd	r24, Y+13	; 0x0d
    2372:	9e 85       	ldd	r25, Y+14	; 0x0e
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	4a ef       	ldi	r20, 0xFA	; 250
    237a:	54 e4       	ldi	r21, 0x44	; 68
    237c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	8f 83       	std	Y+7, r24	; 0x07
    2386:	98 87       	std	Y+8, r25	; 0x08
    2388:	a9 87       	std	Y+9, r26	; 0x09
    238a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    238c:	6f 81       	ldd	r22, Y+7	; 0x07
    238e:	78 85       	ldd	r23, Y+8	; 0x08
    2390:	89 85       	ldd	r24, Y+9	; 0x09
    2392:	9a 85       	ldd	r25, Y+10	; 0x0a
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e8       	ldi	r20, 0x80	; 128
    239a:	5f e3       	ldi	r21, 0x3F	; 63
    239c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23a0:	88 23       	and	r24, r24
    23a2:	2c f4       	brge	.+10     	; 0x23ae <STM_u8_Rotate_CW+0x3b2>
		__ticks = 1;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	9e 83       	std	Y+6, r25	; 0x06
    23aa:	8d 83       	std	Y+5, r24	; 0x05
    23ac:	3f c0       	rjmp	.+126    	; 0x242c <STM_u8_Rotate_CW+0x430>
	else if (__tmp > 65535)
    23ae:	6f 81       	ldd	r22, Y+7	; 0x07
    23b0:	78 85       	ldd	r23, Y+8	; 0x08
    23b2:	89 85       	ldd	r24, Y+9	; 0x09
    23b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	3f ef       	ldi	r19, 0xFF	; 255
    23ba:	4f e7       	ldi	r20, 0x7F	; 127
    23bc:	57 e4       	ldi	r21, 0x47	; 71
    23be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c2:	18 16       	cp	r1, r24
    23c4:	4c f5       	brge	.+82     	; 0x2418 <STM_u8_Rotate_CW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    23cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e2       	ldi	r20, 0x20	; 32
    23d4:	51 e4       	ldi	r21, 0x41	; 65
    23d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	bc 01       	movw	r22, r24
    23e0:	cd 01       	movw	r24, r26
    23e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
    23ee:	0f c0       	rjmp	.+30     	; 0x240e <STM_u8_Rotate_CW+0x412>
    23f0:	88 ec       	ldi	r24, 0xC8	; 200
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9c 83       	std	Y+4, r25	; 0x04
    23f6:	8b 83       	std	Y+3, r24	; 0x03
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	f1 f7       	brne	.-4      	; 0x23fc <STM_u8_Rotate_CW+0x400>
    2400:	9c 83       	std	Y+4, r25	; 0x04
    2402:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	9e 81       	ldd	r25, Y+6	; 0x06
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	9e 83       	std	Y+6, r25	; 0x06
    240c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	9e 81       	ldd	r25, Y+6	; 0x06
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	69 f7       	brne	.-38     	; 0x23f0 <STM_u8_Rotate_CW+0x3f4>
    2416:	14 c0       	rjmp	.+40     	; 0x2440 <STM_u8_Rotate_CW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2418:	6f 81       	ldd	r22, Y+7	; 0x07
    241a:	78 85       	ldd	r23, Y+8	; 0x08
    241c:	89 85       	ldd	r24, Y+9	; 0x09
    241e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	9e 81       	ldd	r25, Y+6	; 0x06
    2430:	9a 83       	std	Y+2, r25	; 0x02
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <STM_u8_Rotate_CW+0x43c>
    243c:	9a 83       	std	Y+2, r25	; 0x02
    243e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);


	return STD_TYPES_OK;
    2440:	81 e0       	ldi	r24, 0x01	; 1
}
    2442:	e8 96       	adiw	r28, 0x38	; 56
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <STM_u8_Rotate_CCW>:

u8 STM_u8_Rotate_CCW()
{
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	e8 97       	sbiw	r28, 0x38	; 56
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
	// FIRST STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    2468:	83 e0       	ldi	r24, 0x03	; 3
    246a:	64 e0       	ldi	r22, 0x04	; 4
    246c:	41 e0       	ldi	r20, 0x01	; 1
    246e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    2472:	83 e0       	ldi	r24, 0x03	; 3
    2474:	65 e0       	ldi	r22, 0x05	; 5
    2476:	41 e0       	ldi	r20, 0x01	; 1
    2478:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    247c:	83 e0       	ldi	r24, 0x03	; 3
    247e:	66 e0       	ldi	r22, 0x06	; 6
    2480:	41 e0       	ldi	r20, 0x01	; 1
    2482:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_LOW);
    2486:	83 e0       	ldi	r24, 0x03	; 3
    2488:	67 e0       	ldi	r22, 0x07	; 7
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	a0 e2       	ldi	r26, 0x20	; 32
    2496:	b1 e4       	ldi	r27, 0x41	; 65
    2498:	8d ab       	std	Y+53, r24	; 0x35
    249a:	9e ab       	std	Y+54, r25	; 0x36
    249c:	af ab       	std	Y+55, r26	; 0x37
    249e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	6d a9       	ldd	r22, Y+53	; 0x35
    24a2:	7e a9       	ldd	r23, Y+54	; 0x36
    24a4:	8f a9       	ldd	r24, Y+55	; 0x37
    24a6:	98 ad       	ldd	r25, Y+56	; 0x38
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	4a ef       	ldi	r20, 0xFA	; 250
    24ae:	54 e4       	ldi	r21, 0x44	; 68
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	89 ab       	std	Y+49, r24	; 0x31
    24ba:	9a ab       	std	Y+50, r25	; 0x32
    24bc:	ab ab       	std	Y+51, r26	; 0x33
    24be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24c0:	69 a9       	ldd	r22, Y+49	; 0x31
    24c2:	7a a9       	ldd	r23, Y+50	; 0x32
    24c4:	8b a9       	ldd	r24, Y+51	; 0x33
    24c6:	9c a9       	ldd	r25, Y+52	; 0x34
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e8       	ldi	r20, 0x80	; 128
    24ce:	5f e3       	ldi	r21, 0x3F	; 63
    24d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <STM_u8_Rotate_CCW+0x8e>
		__ticks = 1;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	98 ab       	std	Y+48, r25	; 0x30
    24de:	8f a7       	std	Y+47, r24	; 0x2f
    24e0:	3f c0       	rjmp	.+126    	; 0x2560 <STM_u8_Rotate_CCW+0x10c>
	else if (__tmp > 65535)
    24e2:	69 a9       	ldd	r22, Y+49	; 0x31
    24e4:	7a a9       	ldd	r23, Y+50	; 0x32
    24e6:	8b a9       	ldd	r24, Y+51	; 0x33
    24e8:	9c a9       	ldd	r25, Y+52	; 0x34
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	57 e4       	ldi	r21, 0x47	; 71
    24f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	4c f5       	brge	.+82     	; 0x254c <STM_u8_Rotate_CCW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fa:	6d a9       	ldd	r22, Y+53	; 0x35
    24fc:	7e a9       	ldd	r23, Y+54	; 0x36
    24fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2500:	98 ad       	ldd	r25, Y+56	; 0x38
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e2       	ldi	r20, 0x20	; 32
    2508:	51 e4       	ldi	r21, 0x41	; 65
    250a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	98 ab       	std	Y+48, r25	; 0x30
    2520:	8f a7       	std	Y+47, r24	; 0x2f
    2522:	0f c0       	rjmp	.+30     	; 0x2542 <STM_u8_Rotate_CCW+0xee>
    2524:	88 ec       	ldi	r24, 0xC8	; 200
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9e a7       	std	Y+46, r25	; 0x2e
    252a:	8d a7       	std	Y+45, r24	; 0x2d
    252c:	8d a5       	ldd	r24, Y+45	; 0x2d
    252e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <STM_u8_Rotate_CCW+0xdc>
    2534:	9e a7       	std	Y+46, r25	; 0x2e
    2536:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2538:	8f a5       	ldd	r24, Y+47	; 0x2f
    253a:	98 a9       	ldd	r25, Y+48	; 0x30
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	98 ab       	std	Y+48, r25	; 0x30
    2540:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	8f a5       	ldd	r24, Y+47	; 0x2f
    2544:	98 a9       	ldd	r25, Y+48	; 0x30
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	69 f7       	brne	.-38     	; 0x2524 <STM_u8_Rotate_CCW+0xd0>
    254a:	14 c0       	rjmp	.+40     	; 0x2574 <STM_u8_Rotate_CCW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254c:	69 a9       	ldd	r22, Y+49	; 0x31
    254e:	7a a9       	ldd	r23, Y+50	; 0x32
    2550:	8b a9       	ldd	r24, Y+51	; 0x33
    2552:	9c a9       	ldd	r25, Y+52	; 0x34
    2554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	98 ab       	std	Y+48, r25	; 0x30
    255e:	8f a7       	std	Y+47, r24	; 0x2f
    2560:	8f a5       	ldd	r24, Y+47	; 0x2f
    2562:	98 a9       	ldd	r25, Y+48	; 0x30
    2564:	9c a7       	std	Y+44, r25	; 0x2c
    2566:	8b a7       	std	Y+43, r24	; 0x2b
    2568:	8b a5       	ldd	r24, Y+43	; 0x2b
    256a:	9c a5       	ldd	r25, Y+44	; 0x2c
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <STM_u8_Rotate_CCW+0x118>
    2570:	9c a7       	std	Y+44, r25	; 0x2c
    2572:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	// SECOND STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    2574:	83 e0       	ldi	r24, 0x03	; 3
    2576:	64 e0       	ldi	r22, 0x04	; 4
    2578:	41 e0       	ldi	r20, 0x01	; 1
    257a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    257e:	83 e0       	ldi	r24, 0x03	; 3
    2580:	65 e0       	ldi	r22, 0x05	; 5
    2582:	41 e0       	ldi	r20, 0x01	; 1
    2584:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_LOW);
    2588:	83 e0       	ldi	r24, 0x03	; 3
    258a:	66 e0       	ldi	r22, 0x06	; 6
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    2592:	83 e0       	ldi	r24, 0x03	; 3
    2594:	67 e0       	ldi	r22, 0x07	; 7
    2596:	41 e0       	ldi	r20, 0x01	; 1
    2598:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	a0 e2       	ldi	r26, 0x20	; 32
    25a2:	b1 e4       	ldi	r27, 0x41	; 65
    25a4:	8f a3       	std	Y+39, r24	; 0x27
    25a6:	98 a7       	std	Y+40, r25	; 0x28
    25a8:	a9 a7       	std	Y+41, r26	; 0x29
    25aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ac:	6f a1       	ldd	r22, Y+39	; 0x27
    25ae:	78 a5       	ldd	r23, Y+40	; 0x28
    25b0:	89 a5       	ldd	r24, Y+41	; 0x29
    25b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	4a ef       	ldi	r20, 0xFA	; 250
    25ba:	54 e4       	ldi	r21, 0x44	; 68
    25bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	8b a3       	std	Y+35, r24	; 0x23
    25c6:	9c a3       	std	Y+36, r25	; 0x24
    25c8:	ad a3       	std	Y+37, r26	; 0x25
    25ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25cc:	6b a1       	ldd	r22, Y+35	; 0x23
    25ce:	7c a1       	ldd	r23, Y+36	; 0x24
    25d0:	8d a1       	ldd	r24, Y+37	; 0x25
    25d2:	9e a1       	ldd	r25, Y+38	; 0x26
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e8       	ldi	r20, 0x80	; 128
    25da:	5f e3       	ldi	r21, 0x3F	; 63
    25dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25e0:	88 23       	and	r24, r24
    25e2:	2c f4       	brge	.+10     	; 0x25ee <STM_u8_Rotate_CCW+0x19a>
		__ticks = 1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	9a a3       	std	Y+34, r25	; 0x22
    25ea:	89 a3       	std	Y+33, r24	; 0x21
    25ec:	3f c0       	rjmp	.+126    	; 0x266c <STM_u8_Rotate_CCW+0x218>
	else if (__tmp > 65535)
    25ee:	6b a1       	ldd	r22, Y+35	; 0x23
    25f0:	7c a1       	ldd	r23, Y+36	; 0x24
    25f2:	8d a1       	ldd	r24, Y+37	; 0x25
    25f4:	9e a1       	ldd	r25, Y+38	; 0x26
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	3f ef       	ldi	r19, 0xFF	; 255
    25fa:	4f e7       	ldi	r20, 0x7F	; 127
    25fc:	57 e4       	ldi	r21, 0x47	; 71
    25fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2602:	18 16       	cp	r1, r24
    2604:	4c f5       	brge	.+82     	; 0x2658 <STM_u8_Rotate_CCW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2606:	6f a1       	ldd	r22, Y+39	; 0x27
    2608:	78 a5       	ldd	r23, Y+40	; 0x28
    260a:	89 a5       	ldd	r24, Y+41	; 0x29
    260c:	9a a5       	ldd	r25, Y+42	; 0x2a
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e2       	ldi	r20, 0x20	; 32
    2614:	51 e4       	ldi	r21, 0x41	; 65
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	bc 01       	movw	r22, r24
    2620:	cd 01       	movw	r24, r26
    2622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	9a a3       	std	Y+34, r25	; 0x22
    262c:	89 a3       	std	Y+33, r24	; 0x21
    262e:	0f c0       	rjmp	.+30     	; 0x264e <STM_u8_Rotate_CCW+0x1fa>
    2630:	88 ec       	ldi	r24, 0xC8	; 200
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	98 a3       	std	Y+32, r25	; 0x20
    2636:	8f 8f       	std	Y+31, r24	; 0x1f
    2638:	8f 8d       	ldd	r24, Y+31	; 0x1f
    263a:	98 a1       	ldd	r25, Y+32	; 0x20
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <STM_u8_Rotate_CCW+0x1e8>
    2640:	98 a3       	std	Y+32, r25	; 0x20
    2642:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2644:	89 a1       	ldd	r24, Y+33	; 0x21
    2646:	9a a1       	ldd	r25, Y+34	; 0x22
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	9a a3       	std	Y+34, r25	; 0x22
    264c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264e:	89 a1       	ldd	r24, Y+33	; 0x21
    2650:	9a a1       	ldd	r25, Y+34	; 0x22
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	69 f7       	brne	.-38     	; 0x2630 <STM_u8_Rotate_CCW+0x1dc>
    2656:	14 c0       	rjmp	.+40     	; 0x2680 <STM_u8_Rotate_CCW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2658:	6b a1       	ldd	r22, Y+35	; 0x23
    265a:	7c a1       	ldd	r23, Y+36	; 0x24
    265c:	8d a1       	ldd	r24, Y+37	; 0x25
    265e:	9e a1       	ldd	r25, Y+38	; 0x26
    2660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	9a a3       	std	Y+34, r25	; 0x22
    266a:	89 a3       	std	Y+33, r24	; 0x21
    266c:	89 a1       	ldd	r24, Y+33	; 0x21
    266e:	9a a1       	ldd	r25, Y+34	; 0x22
    2670:	9e 8f       	std	Y+30, r25	; 0x1e
    2672:	8d 8f       	std	Y+29, r24	; 0x1d
    2674:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2676:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <STM_u8_Rotate_CCW+0x224>
    267c:	9e 8f       	std	Y+30, r25	; 0x1e
    267e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	// THIRD STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    2680:	83 e0       	ldi	r24, 0x03	; 3
    2682:	64 e0       	ldi	r22, 0x04	; 4
    2684:	41 e0       	ldi	r20, 0x01	; 1
    2686:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_LOW);
    268a:	83 e0       	ldi	r24, 0x03	; 3
    268c:	65 e0       	ldi	r22, 0x05	; 5
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    2694:	83 e0       	ldi	r24, 0x03	; 3
    2696:	66 e0       	ldi	r22, 0x06	; 6
    2698:	41 e0       	ldi	r20, 0x01	; 1
    269a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    269e:	83 e0       	ldi	r24, 0x03	; 3
    26a0:	67 e0       	ldi	r22, 0x07	; 7
    26a2:	41 e0       	ldi	r20, 0x01	; 1
    26a4:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	a0 e2       	ldi	r26, 0x20	; 32
    26ae:	b1 e4       	ldi	r27, 0x41	; 65
    26b0:	89 8f       	std	Y+25, r24	; 0x19
    26b2:	9a 8f       	std	Y+26, r25	; 0x1a
    26b4:	ab 8f       	std	Y+27, r26	; 0x1b
    26b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b8:	69 8d       	ldd	r22, Y+25	; 0x19
    26ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	4a ef       	ldi	r20, 0xFA	; 250
    26c6:	54 e4       	ldi	r21, 0x44	; 68
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	8d 8b       	std	Y+21, r24	; 0x15
    26d2:	9e 8b       	std	Y+22, r25	; 0x16
    26d4:	af 8b       	std	Y+23, r26	; 0x17
    26d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26d8:	6d 89       	ldd	r22, Y+21	; 0x15
    26da:	7e 89       	ldd	r23, Y+22	; 0x16
    26dc:	8f 89       	ldd	r24, Y+23	; 0x17
    26de:	98 8d       	ldd	r25, Y+24	; 0x18
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e8       	ldi	r20, 0x80	; 128
    26e6:	5f e3       	ldi	r21, 0x3F	; 63
    26e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ec:	88 23       	and	r24, r24
    26ee:	2c f4       	brge	.+10     	; 0x26fa <STM_u8_Rotate_CCW+0x2a6>
		__ticks = 1;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	9c 8b       	std	Y+20, r25	; 0x14
    26f6:	8b 8b       	std	Y+19, r24	; 0x13
    26f8:	3f c0       	rjmp	.+126    	; 0x2778 <STM_u8_Rotate_CCW+0x324>
	else if (__tmp > 65535)
    26fa:	6d 89       	ldd	r22, Y+21	; 0x15
    26fc:	7e 89       	ldd	r23, Y+22	; 0x16
    26fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2700:	98 8d       	ldd	r25, Y+24	; 0x18
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	3f ef       	ldi	r19, 0xFF	; 255
    2706:	4f e7       	ldi	r20, 0x7F	; 127
    2708:	57 e4       	ldi	r21, 0x47	; 71
    270a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    270e:	18 16       	cp	r1, r24
    2710:	4c f5       	brge	.+82     	; 0x2764 <STM_u8_Rotate_CCW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2712:	69 8d       	ldd	r22, Y+25	; 0x19
    2714:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2716:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2718:	9c 8d       	ldd	r25, Y+28	; 0x1c
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e2       	ldi	r20, 0x20	; 32
    2720:	51 e4       	ldi	r21, 0x41	; 65
    2722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9c 8b       	std	Y+20, r25	; 0x14
    2738:	8b 8b       	std	Y+19, r24	; 0x13
    273a:	0f c0       	rjmp	.+30     	; 0x275a <STM_u8_Rotate_CCW+0x306>
    273c:	88 ec       	ldi	r24, 0xC8	; 200
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9a 8b       	std	Y+18, r25	; 0x12
    2742:	89 8b       	std	Y+17, r24	; 0x11
    2744:	89 89       	ldd	r24, Y+17	; 0x11
    2746:	9a 89       	ldd	r25, Y+18	; 0x12
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <STM_u8_Rotate_CCW+0x2f4>
    274c:	9a 8b       	std	Y+18, r25	; 0x12
    274e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2750:	8b 89       	ldd	r24, Y+19	; 0x13
    2752:	9c 89       	ldd	r25, Y+20	; 0x14
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	9c 8b       	std	Y+20, r25	; 0x14
    2758:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275a:	8b 89       	ldd	r24, Y+19	; 0x13
    275c:	9c 89       	ldd	r25, Y+20	; 0x14
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	69 f7       	brne	.-38     	; 0x273c <STM_u8_Rotate_CCW+0x2e8>
    2762:	14 c0       	rjmp	.+40     	; 0x278c <STM_u8_Rotate_CCW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2764:	6d 89       	ldd	r22, Y+21	; 0x15
    2766:	7e 89       	ldd	r23, Y+22	; 0x16
    2768:	8f 89       	ldd	r24, Y+23	; 0x17
    276a:	98 8d       	ldd	r25, Y+24	; 0x18
    276c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	9c 8b       	std	Y+20, r25	; 0x14
    2776:	8b 8b       	std	Y+19, r24	; 0x13
    2778:	8b 89       	ldd	r24, Y+19	; 0x13
    277a:	9c 89       	ldd	r25, Y+20	; 0x14
    277c:	98 8b       	std	Y+16, r25	; 0x10
    277e:	8f 87       	std	Y+15, r24	; 0x0f
    2780:	8f 85       	ldd	r24, Y+15	; 0x0f
    2782:	98 89       	ldd	r25, Y+16	; 0x10
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <STM_u8_Rotate_CCW+0x330>
    2788:	98 8b       	std	Y+16, r25	; 0x10
    278a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	// FORTH STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_LOW);
    278c:	83 e0       	ldi	r24, 0x03	; 3
    278e:	64 e0       	ldi	r22, 0x04	; 4
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    2796:	83 e0       	ldi	r24, 0x03	; 3
    2798:	65 e0       	ldi	r22, 0x05	; 5
    279a:	41 e0       	ldi	r20, 0x01	; 1
    279c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    27a0:	83 e0       	ldi	r24, 0x03	; 3
    27a2:	66 e0       	ldi	r22, 0x06	; 6
    27a4:	41 e0       	ldi	r20, 0x01	; 1
    27a6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    27aa:	83 e0       	ldi	r24, 0x03	; 3
    27ac:	67 e0       	ldi	r22, 0x07	; 7
    27ae:	41 e0       	ldi	r20, 0x01	; 1
    27b0:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	a0 e2       	ldi	r26, 0x20	; 32
    27ba:	b1 e4       	ldi	r27, 0x41	; 65
    27bc:	8b 87       	std	Y+11, r24	; 0x0b
    27be:	9c 87       	std	Y+12, r25	; 0x0c
    27c0:	ad 87       	std	Y+13, r26	; 0x0d
    27c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	4a ef       	ldi	r20, 0xFA	; 250
    27d2:	54 e4       	ldi	r21, 0x44	; 68
    27d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	8f 83       	std	Y+7, r24	; 0x07
    27de:	98 87       	std	Y+8, r25	; 0x08
    27e0:	a9 87       	std	Y+9, r26	; 0x09
    27e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27e4:	6f 81       	ldd	r22, Y+7	; 0x07
    27e6:	78 85       	ldd	r23, Y+8	; 0x08
    27e8:	89 85       	ldd	r24, Y+9	; 0x09
    27ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e8       	ldi	r20, 0x80	; 128
    27f2:	5f e3       	ldi	r21, 0x3F	; 63
    27f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27f8:	88 23       	and	r24, r24
    27fa:	2c f4       	brge	.+10     	; 0x2806 <STM_u8_Rotate_CCW+0x3b2>
		__ticks = 1;
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	9e 83       	std	Y+6, r25	; 0x06
    2802:	8d 83       	std	Y+5, r24	; 0x05
    2804:	3f c0       	rjmp	.+126    	; 0x2884 <STM_u8_Rotate_CCW+0x430>
	else if (__tmp > 65535)
    2806:	6f 81       	ldd	r22, Y+7	; 0x07
    2808:	78 85       	ldd	r23, Y+8	; 0x08
    280a:	89 85       	ldd	r24, Y+9	; 0x09
    280c:	9a 85       	ldd	r25, Y+10	; 0x0a
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	3f ef       	ldi	r19, 0xFF	; 255
    2812:	4f e7       	ldi	r20, 0x7F	; 127
    2814:	57 e4       	ldi	r21, 0x47	; 71
    2816:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    281a:	18 16       	cp	r1, r24
    281c:	4c f5       	brge	.+82     	; 0x2870 <STM_u8_Rotate_CCW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2820:	7c 85       	ldd	r23, Y+12	; 0x0c
    2822:	8d 85       	ldd	r24, Y+13	; 0x0d
    2824:	9e 85       	ldd	r25, Y+14	; 0x0e
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e2       	ldi	r20, 0x20	; 32
    282c:	51 e4       	ldi	r21, 0x41	; 65
    282e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	bc 01       	movw	r22, r24
    2838:	cd 01       	movw	r24, r26
    283a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	9e 83       	std	Y+6, r25	; 0x06
    2844:	8d 83       	std	Y+5, r24	; 0x05
    2846:	0f c0       	rjmp	.+30     	; 0x2866 <STM_u8_Rotate_CCW+0x412>
    2848:	88 ec       	ldi	r24, 0xC8	; 200
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	9c 83       	std	Y+4, r25	; 0x04
    284e:	8b 83       	std	Y+3, r24	; 0x03
    2850:	8b 81       	ldd	r24, Y+3	; 0x03
    2852:	9c 81       	ldd	r25, Y+4	; 0x04
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <STM_u8_Rotate_CCW+0x400>
    2858:	9c 83       	std	Y+4, r25	; 0x04
    285a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285c:	8d 81       	ldd	r24, Y+5	; 0x05
    285e:	9e 81       	ldd	r25, Y+6	; 0x06
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	9e 83       	std	Y+6, r25	; 0x06
    2864:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
    2868:	9e 81       	ldd	r25, Y+6	; 0x06
    286a:	00 97       	sbiw	r24, 0x00	; 0
    286c:	69 f7       	brne	.-38     	; 0x2848 <STM_u8_Rotate_CCW+0x3f4>
    286e:	14 c0       	rjmp	.+40     	; 0x2898 <STM_u8_Rotate_CCW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2870:	6f 81       	ldd	r22, Y+7	; 0x07
    2872:	78 85       	ldd	r23, Y+8	; 0x08
    2874:	89 85       	ldd	r24, Y+9	; 0x09
    2876:	9a 85       	ldd	r25, Y+10	; 0x0a
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9e 83       	std	Y+6, r25	; 0x06
    2882:	8d 83       	std	Y+5, r24	; 0x05
    2884:	8d 81       	ldd	r24, Y+5	; 0x05
    2886:	9e 81       	ldd	r25, Y+6	; 0x06
    2888:	9a 83       	std	Y+2, r25	; 0x02
    288a:	89 83       	std	Y+1, r24	; 0x01
    288c:	89 81       	ldd	r24, Y+1	; 0x01
    288e:	9a 81       	ldd	r25, Y+2	; 0x02
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <STM_u8_Rotate_CCW+0x43c>
    2894:	9a 83       	std	Y+2, r25	; 0x02
    2896:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	return STD_TYPES_OK;
    2898:	81 e0       	ldi	r24, 0x01	; 1
}
    289a:	e8 96       	adiw	r28, 0x38	; 56
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	f8 94       	cli
    28a0:	de bf       	out	0x3e, r29	; 62
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	cd bf       	out	0x3d, r28	; 61
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret

000028ac <STM_u8_STOP>:

u8 STM_u8_STOP()
{
    28ac:	df 93       	push	r29
    28ae:	cf 93       	push	r28
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	2e 97       	sbiw	r28, 0x0e	; 14
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
	// STOP STEPPER MOTOR
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    28c0:	83 e0       	ldi	r24, 0x03	; 3
    28c2:	64 e0       	ldi	r22, 0x04	; 4
    28c4:	41 e0       	ldi	r20, 0x01	; 1
    28c6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    28ca:	83 e0       	ldi	r24, 0x03	; 3
    28cc:	65 e0       	ldi	r22, 0x05	; 5
    28ce:	41 e0       	ldi	r20, 0x01	; 1
    28d0:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    28d4:	83 e0       	ldi	r24, 0x03	; 3
    28d6:	66 e0       	ldi	r22, 0x06	; 6
    28d8:	41 e0       	ldi	r20, 0x01	; 1
    28da:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    28de:	83 e0       	ldi	r24, 0x03	; 3
    28e0:	67 e0       	ldi	r22, 0x07	; 7
    28e2:	41 e0       	ldi	r20, 0x01	; 1
    28e4:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	a0 e2       	ldi	r26, 0x20	; 32
    28ee:	b1 e4       	ldi	r27, 0x41	; 65
    28f0:	8b 87       	std	Y+11, r24	; 0x0b
    28f2:	9c 87       	std	Y+12, r25	; 0x0c
    28f4:	ad 87       	std	Y+13, r26	; 0x0d
    28f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    28fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	4a ef       	ldi	r20, 0xFA	; 250
    2906:	54 e4       	ldi	r21, 0x44	; 68
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	8f 83       	std	Y+7, r24	; 0x07
    2912:	98 87       	std	Y+8, r25	; 0x08
    2914:	a9 87       	std	Y+9, r26	; 0x09
    2916:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2918:	6f 81       	ldd	r22, Y+7	; 0x07
    291a:	78 85       	ldd	r23, Y+8	; 0x08
    291c:	89 85       	ldd	r24, Y+9	; 0x09
    291e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	5f e3       	ldi	r21, 0x3F	; 63
    2928:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    292c:	88 23       	and	r24, r24
    292e:	2c f4       	brge	.+10     	; 0x293a <STM_u8_STOP+0x8e>
		__ticks = 1;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9e 83       	std	Y+6, r25	; 0x06
    2936:	8d 83       	std	Y+5, r24	; 0x05
    2938:	3f c0       	rjmp	.+126    	; 0x29b8 <STM_u8_STOP+0x10c>
	else if (__tmp > 65535)
    293a:	6f 81       	ldd	r22, Y+7	; 0x07
    293c:	78 85       	ldd	r23, Y+8	; 0x08
    293e:	89 85       	ldd	r24, Y+9	; 0x09
    2940:	9a 85       	ldd	r25, Y+10	; 0x0a
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	3f ef       	ldi	r19, 0xFF	; 255
    2946:	4f e7       	ldi	r20, 0x7F	; 127
    2948:	57 e4       	ldi	r21, 0x47	; 71
    294a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    294e:	18 16       	cp	r1, r24
    2950:	4c f5       	brge	.+82     	; 0x29a4 <STM_u8_STOP+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2952:	6b 85       	ldd	r22, Y+11	; 0x0b
    2954:	7c 85       	ldd	r23, Y+12	; 0x0c
    2956:	8d 85       	ldd	r24, Y+13	; 0x0d
    2958:	9e 85       	ldd	r25, Y+14	; 0x0e
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e2       	ldi	r20, 0x20	; 32
    2960:	51 e4       	ldi	r21, 0x41	; 65
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9e 83       	std	Y+6, r25	; 0x06
    2978:	8d 83       	std	Y+5, r24	; 0x05
    297a:	0f c0       	rjmp	.+30     	; 0x299a <STM_u8_STOP+0xee>
    297c:	88 ec       	ldi	r24, 0xC8	; 200
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	9c 83       	std	Y+4, r25	; 0x04
    2982:	8b 83       	std	Y+3, r24	; 0x03
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	9c 81       	ldd	r25, Y+4	; 0x04
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <STM_u8_STOP+0xdc>
    298c:	9c 83       	std	Y+4, r25	; 0x04
    298e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2990:	8d 81       	ldd	r24, Y+5	; 0x05
    2992:	9e 81       	ldd	r25, Y+6	; 0x06
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	9e 83       	std	Y+6, r25	; 0x06
    2998:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299a:	8d 81       	ldd	r24, Y+5	; 0x05
    299c:	9e 81       	ldd	r25, Y+6	; 0x06
    299e:	00 97       	sbiw	r24, 0x00	; 0
    29a0:	69 f7       	brne	.-38     	; 0x297c <STM_u8_STOP+0xd0>
    29a2:	14 c0       	rjmp	.+40     	; 0x29cc <STM_u8_STOP+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a4:	6f 81       	ldd	r22, Y+7	; 0x07
    29a6:	78 85       	ldd	r23, Y+8	; 0x08
    29a8:	89 85       	ldd	r24, Y+9	; 0x09
    29aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	9e 83       	std	Y+6, r25	; 0x06
    29b6:	8d 83       	std	Y+5, r24	; 0x05
    29b8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ba:	9e 81       	ldd	r25, Y+6	; 0x06
    29bc:	9a 83       	std	Y+2, r25	; 0x02
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	9a 81       	ldd	r25, Y+2	; 0x02
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <STM_u8_STOP+0x118>
    29c8:	9a 83       	std	Y+2, r25	; 0x02
    29ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	return STD_TYPES_OK;
    29cc:	81 e0       	ldi	r24, 0x01	; 1
}
    29ce:	2e 96       	adiw	r28, 0x0e	; 14
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_voidInit(void)
{
    29e0:	0f 93       	push	r16
    29e2:	1f 93       	push	r17
    29e4:	df 93       	push	r29
    29e6:	cf 93       	push	r28
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	cc 54       	subi	r28, 0x4C	; 76
    29ee:	d0 40       	sbci	r29, 0x00	; 0
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	fe 01       	movw	r30, r28
    29fc:	e7 5b       	subi	r30, 0xB7	; 183
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	ac e0       	ldi	r26, 0x0C	; 12
    2a06:	b2 e4       	ldi	r27, 0x42	; 66
    2a08:	80 83       	st	Z, r24
    2a0a:	91 83       	std	Z+1, r25	; 0x01
    2a0c:	a2 83       	std	Z+2, r26	; 0x02
    2a0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a10:	8e 01       	movw	r16, r28
    2a12:	0b 5b       	subi	r16, 0xBB	; 187
    2a14:	1f 4f       	sbci	r17, 0xFF	; 255
    2a16:	fe 01       	movw	r30, r28
    2a18:	e7 5b       	subi	r30, 0xB7	; 183
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	60 81       	ld	r22, Z
    2a1e:	71 81       	ldd	r23, Z+1	; 0x01
    2a20:	82 81       	ldd	r24, Z+2	; 0x02
    2a22:	93 81       	ldd	r25, Z+3	; 0x03
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	4a ef       	ldi	r20, 0xFA	; 250
    2a2a:	54 e4       	ldi	r21, 0x44	; 68
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	f8 01       	movw	r30, r16
    2a36:	80 83       	st	Z, r24
    2a38:	91 83       	std	Z+1, r25	; 0x01
    2a3a:	a2 83       	std	Z+2, r26	; 0x02
    2a3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a3e:	fe 01       	movw	r30, r28
    2a40:	eb 5b       	subi	r30, 0xBB	; 187
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	60 81       	ld	r22, Z
    2a46:	71 81       	ldd	r23, Z+1	; 0x01
    2a48:	82 81       	ldd	r24, Z+2	; 0x02
    2a4a:	93 81       	ldd	r25, Z+3	; 0x03
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	40 e8       	ldi	r20, 0x80	; 128
    2a52:	5f e3       	ldi	r21, 0x3F	; 63
    2a54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a58:	88 23       	and	r24, r24
    2a5a:	44 f4       	brge	.+16     	; 0x2a6c <LCD_voidInit+0x8c>
		__ticks = 1;
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	ed 5b       	subi	r30, 0xBD	; 189
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	91 83       	std	Z+1, r25	; 0x01
    2a68:	80 83       	st	Z, r24
    2a6a:	64 c0       	rjmp	.+200    	; 0x2b34 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	eb 5b       	subi	r30, 0xBB	; 187
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	60 81       	ld	r22, Z
    2a74:	71 81       	ldd	r23, Z+1	; 0x01
    2a76:	82 81       	ldd	r24, Z+2	; 0x02
    2a78:	93 81       	ldd	r25, Z+3	; 0x03
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	3f ef       	ldi	r19, 0xFF	; 255
    2a7e:	4f e7       	ldi	r20, 0x7F	; 127
    2a80:	57 e4       	ldi	r21, 0x47	; 71
    2a82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a86:	18 16       	cp	r1, r24
    2a88:	0c f0       	brlt	.+2      	; 0x2a8c <LCD_voidInit+0xac>
    2a8a:	43 c0       	rjmp	.+134    	; 0x2b12 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	e7 5b       	subi	r30, 0xB7	; 183
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	60 81       	ld	r22, Z
    2a94:	71 81       	ldd	r23, Z+1	; 0x01
    2a96:	82 81       	ldd	r24, Z+2	; 0x02
    2a98:	93 81       	ldd	r25, Z+3	; 0x03
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	40 e2       	ldi	r20, 0x20	; 32
    2aa0:	51 e4       	ldi	r21, 0x41	; 65
    2aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	8e 01       	movw	r16, r28
    2aac:	0d 5b       	subi	r16, 0xBD	; 189
    2aae:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab0:	bc 01       	movw	r22, r24
    2ab2:	cd 01       	movw	r24, r26
    2ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	f8 01       	movw	r30, r16
    2abe:	91 83       	std	Z+1, r25	; 0x01
    2ac0:	80 83       	st	Z, r24
    2ac2:	1f c0       	rjmp	.+62     	; 0x2b02 <LCD_voidInit+0x122>
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	ef 5b       	subi	r30, 0xBF	; 191
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	88 ec       	ldi	r24, 0xC8	; 200
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	80 83       	st	Z, r24
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	ef 5b       	subi	r30, 0xBF	; 191
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	80 81       	ld	r24, Z
    2ada:	91 81       	ldd	r25, Z+1	; 0x01
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <LCD_voidInit+0xfc>
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	ef 5b       	subi	r30, 0xBF	; 191
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	91 83       	std	Z+1, r25	; 0x01
    2ae8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aea:	de 01       	movw	r26, r28
    2aec:	ad 5b       	subi	r26, 0xBD	; 189
    2aee:	bf 4f       	sbci	r27, 0xFF	; 255
    2af0:	fe 01       	movw	r30, r28
    2af2:	ed 5b       	subi	r30, 0xBD	; 189
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	80 81       	ld	r24, Z
    2af8:	91 81       	ldd	r25, Z+1	; 0x01
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	11 96       	adiw	r26, 0x01	; 1
    2afe:	9c 93       	st	X, r25
    2b00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b02:	fe 01       	movw	r30, r28
    2b04:	ed 5b       	subi	r30, 0xBD	; 189
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	80 81       	ld	r24, Z
    2b0a:	91 81       	ldd	r25, Z+1	; 0x01
    2b0c:	00 97       	sbiw	r24, 0x00	; 0
    2b0e:	d1 f6       	brne	.-76     	; 0x2ac4 <LCD_voidInit+0xe4>
    2b10:	24 c0       	rjmp	.+72     	; 0x2b5a <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b12:	8e 01       	movw	r16, r28
    2b14:	0d 5b       	subi	r16, 0xBD	; 189
    2b16:	1f 4f       	sbci	r17, 0xFF	; 255
    2b18:	fe 01       	movw	r30, r28
    2b1a:	eb 5b       	subi	r30, 0xBB	; 187
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	60 81       	ld	r22, Z
    2b20:	71 81       	ldd	r23, Z+1	; 0x01
    2b22:	82 81       	ldd	r24, Z+2	; 0x02
    2b24:	93 81       	ldd	r25, Z+3	; 0x03
    2b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	f8 01       	movw	r30, r16
    2b30:	91 83       	std	Z+1, r25	; 0x01
    2b32:	80 83       	st	Z, r24
    2b34:	fe 01       	movw	r30, r28
    2b36:	ed 5b       	subi	r30, 0xBD	; 189
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 81       	ld	r24, Z
    2b3c:	91 81       	ldd	r25, Z+1	; 0x01
    2b3e:	fe 01       	movw	r30, r28
    2b40:	ff 96       	adiw	r30, 0x3f	; 63
    2b42:	91 83       	std	Z+1, r25	; 0x01
    2b44:	80 83       	st	Z, r24
    2b46:	fe 01       	movw	r30, r28
    2b48:	ff 96       	adiw	r30, 0x3f	; 63
    2b4a:	80 81       	ld	r24, Z
    2b4c:	91 81       	ldd	r25, Z+1	; 0x01
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	f1 f7       	brne	.-4      	; 0x2b4e <LCD_voidInit+0x16e>
    2b52:	fe 01       	movw	r30, r28
    2b54:	ff 96       	adiw	r30, 0x3f	; 63
    2b56:	91 83       	std	Z+1, r25	; 0x01
    2b58:	80 83       	st	Z, r24
	_delay_ms(35);
	/* Function Set Cmnd */
	LCD_voidSendCmnd(0b00111000);
    2b5a:	88 e3       	ldi	r24, 0x38	; 56
    2b5c:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <LCD_voidSendCmnd>
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	a0 e2       	ldi	r26, 0x20	; 32
    2b66:	b2 e4       	ldi	r27, 0x42	; 66
    2b68:	8b af       	std	Y+59, r24	; 0x3b
    2b6a:	9c af       	std	Y+60, r25	; 0x3c
    2b6c:	ad af       	std	Y+61, r26	; 0x3d
    2b6e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b70:	6b ad       	ldd	r22, Y+59	; 0x3b
    2b72:	7c ad       	ldd	r23, Y+60	; 0x3c
    2b74:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b76:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b78:	2b ea       	ldi	r18, 0xAB	; 171
    2b7a:	3a ea       	ldi	r19, 0xAA	; 170
    2b7c:	4a e2       	ldi	r20, 0x2A	; 42
    2b7e:	50 e4       	ldi	r21, 0x40	; 64
    2b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	8f ab       	std	Y+55, r24	; 0x37
    2b8a:	98 af       	std	Y+56, r25	; 0x38
    2b8c:	a9 af       	std	Y+57, r26	; 0x39
    2b8e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2b90:	6f a9       	ldd	r22, Y+55	; 0x37
    2b92:	78 ad       	ldd	r23, Y+56	; 0x38
    2b94:	89 ad       	ldd	r24, Y+57	; 0x39
    2b96:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e8       	ldi	r20, 0x80	; 128
    2b9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ba0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ba4:	88 23       	and	r24, r24
    2ba6:	1c f4       	brge	.+6      	; 0x2bae <LCD_voidInit+0x1ce>
		__ticks = 1;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	8e ab       	std	Y+54, r24	; 0x36
    2bac:	91 c0       	rjmp	.+290    	; 0x2cd0 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    2bae:	6f a9       	ldd	r22, Y+55	; 0x37
    2bb0:	78 ad       	ldd	r23, Y+56	; 0x38
    2bb2:	89 ad       	ldd	r24, Y+57	; 0x39
    2bb4:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	4f e7       	ldi	r20, 0x7F	; 127
    2bbc:	53 e4       	ldi	r21, 0x43	; 67
    2bbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bc2:	18 16       	cp	r1, r24
    2bc4:	0c f0       	brlt	.+2      	; 0x2bc8 <LCD_voidInit+0x1e8>
    2bc6:	7b c0       	rjmp	.+246    	; 0x2cbe <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    2bc8:	6b ad       	ldd	r22, Y+59	; 0x3b
    2bca:	7c ad       	ldd	r23, Y+60	; 0x3c
    2bcc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bce:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	4a e7       	ldi	r20, 0x7A	; 122
    2bd6:	54 e4       	ldi	r21, 0x44	; 68
    2bd8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	8a ab       	std	Y+50, r24	; 0x32
    2be2:	9b ab       	std	Y+51, r25	; 0x33
    2be4:	ac ab       	std	Y+52, r26	; 0x34
    2be6:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be8:	6a a9       	ldd	r22, Y+50	; 0x32
    2bea:	7b a9       	ldd	r23, Y+51	; 0x33
    2bec:	8c a9       	ldd	r24, Y+52	; 0x34
    2bee:	9d a9       	ldd	r25, Y+53	; 0x35
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	4a ef       	ldi	r20, 0xFA	; 250
    2bf6:	54 e4       	ldi	r21, 0x44	; 68
    2bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	8e a7       	std	Y+46, r24	; 0x2e
    2c02:	9f a7       	std	Y+47, r25	; 0x2f
    2c04:	a8 ab       	std	Y+48, r26	; 0x30
    2c06:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2c08:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c0a:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c0c:	88 a9       	ldd	r24, Y+48	; 0x30
    2c0e:	99 a9       	ldd	r25, Y+49	; 0x31
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	40 e8       	ldi	r20, 0x80	; 128
    2c16:	5f e3       	ldi	r21, 0x3F	; 63
    2c18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c1c:	88 23       	and	r24, r24
    2c1e:	2c f4       	brge	.+10     	; 0x2c2a <LCD_voidInit+0x24a>
		__ticks = 1;
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	9d a7       	std	Y+45, r25	; 0x2d
    2c26:	8c a7       	std	Y+44, r24	; 0x2c
    2c28:	3f c0       	rjmp	.+126    	; 0x2ca8 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    2c2a:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c2c:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c2e:	88 a9       	ldd	r24, Y+48	; 0x30
    2c30:	99 a9       	ldd	r25, Y+49	; 0x31
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	3f ef       	ldi	r19, 0xFF	; 255
    2c36:	4f e7       	ldi	r20, 0x7F	; 127
    2c38:	57 e4       	ldi	r21, 0x47	; 71
    2c3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c3e:	18 16       	cp	r1, r24
    2c40:	4c f5       	brge	.+82     	; 0x2c94 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c42:	6a a9       	ldd	r22, Y+50	; 0x32
    2c44:	7b a9       	ldd	r23, Y+51	; 0x33
    2c46:	8c a9       	ldd	r24, Y+52	; 0x34
    2c48:	9d a9       	ldd	r25, Y+53	; 0x35
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e2       	ldi	r20, 0x20	; 32
    2c50:	51 e4       	ldi	r21, 0x41	; 65
    2c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	bc 01       	movw	r22, r24
    2c5c:	cd 01       	movw	r24, r26
    2c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	9d a7       	std	Y+45, r25	; 0x2d
    2c68:	8c a7       	std	Y+44, r24	; 0x2c
    2c6a:	0f c0       	rjmp	.+30     	; 0x2c8a <LCD_voidInit+0x2aa>
    2c6c:	88 ec       	ldi	r24, 0xC8	; 200
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	9b a7       	std	Y+43, r25	; 0x2b
    2c72:	8a a7       	std	Y+42, r24	; 0x2a
    2c74:	8a a5       	ldd	r24, Y+42	; 0x2a
    2c76:	9b a5       	ldd	r25, Y+43	; 0x2b
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	f1 f7       	brne	.-4      	; 0x2c78 <LCD_voidInit+0x298>
    2c7c:	9b a7       	std	Y+43, r25	; 0x2b
    2c7e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c80:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c82:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	9d a7       	std	Y+45, r25	; 0x2d
    2c88:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c8c:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	69 f7       	brne	.-38     	; 0x2c6c <LCD_voidInit+0x28c>
    2c92:	24 c0       	rjmp	.+72     	; 0x2cdc <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c94:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c96:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c98:	88 a9       	ldd	r24, Y+48	; 0x30
    2c9a:	99 a9       	ldd	r25, Y+49	; 0x31
    2c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	9d a7       	std	Y+45, r25	; 0x2d
    2ca6:	8c a7       	std	Y+44, r24	; 0x2c
    2ca8:	8c a5       	ldd	r24, Y+44	; 0x2c
    2caa:	9d a5       	ldd	r25, Y+45	; 0x2d
    2cac:	99 a7       	std	Y+41, r25	; 0x29
    2cae:	88 a7       	std	Y+40, r24	; 0x28
    2cb0:	88 a5       	ldd	r24, Y+40	; 0x28
    2cb2:	99 a5       	ldd	r25, Y+41	; 0x29
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <LCD_voidInit+0x2d4>
    2cb8:	99 a7       	std	Y+41, r25	; 0x29
    2cba:	88 a7       	std	Y+40, r24	; 0x28
    2cbc:	0f c0       	rjmp	.+30     	; 0x2cdc <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cbe:	6f a9       	ldd	r22, Y+55	; 0x37
    2cc0:	78 ad       	ldd	r23, Y+56	; 0x38
    2cc2:	89 ad       	ldd	r24, Y+57	; 0x39
    2cc4:	9a ad       	ldd	r25, Y+58	; 0x3a
    2cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	8e ab       	std	Y+54, r24	; 0x36
    2cd0:	8e a9       	ldd	r24, Y+54	; 0x36
    2cd2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cd4:	8f a1       	ldd	r24, Y+39	; 0x27
    2cd6:	8a 95       	dec	r24
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <LCD_voidInit+0x2f6>
    2cda:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmnd(0b00001111);
    2cdc:	8f e0       	ldi	r24, 0x0F	; 15
    2cde:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <LCD_voidSendCmnd>
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	a0 e2       	ldi	r26, 0x20	; 32
    2ce8:	b2 e4       	ldi	r27, 0x42	; 66
    2cea:	8b a3       	std	Y+35, r24	; 0x23
    2cec:	9c a3       	std	Y+36, r25	; 0x24
    2cee:	ad a3       	std	Y+37, r26	; 0x25
    2cf0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cf2:	6b a1       	ldd	r22, Y+35	; 0x23
    2cf4:	7c a1       	ldd	r23, Y+36	; 0x24
    2cf6:	8d a1       	ldd	r24, Y+37	; 0x25
    2cf8:	9e a1       	ldd	r25, Y+38	; 0x26
    2cfa:	2b ea       	ldi	r18, 0xAB	; 171
    2cfc:	3a ea       	ldi	r19, 0xAA	; 170
    2cfe:	4a e2       	ldi	r20, 0x2A	; 42
    2d00:	50 e4       	ldi	r21, 0x40	; 64
    2d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	8f 8f       	std	Y+31, r24	; 0x1f
    2d0c:	98 a3       	std	Y+32, r25	; 0x20
    2d0e:	a9 a3       	std	Y+33, r26	; 0x21
    2d10:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2d12:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d14:	78 a1       	ldd	r23, Y+32	; 0x20
    2d16:	89 a1       	ldd	r24, Y+33	; 0x21
    2d18:	9a a1       	ldd	r25, Y+34	; 0x22
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e8       	ldi	r20, 0x80	; 128
    2d20:	5f e3       	ldi	r21, 0x3F	; 63
    2d22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d26:	88 23       	and	r24, r24
    2d28:	1c f4       	brge	.+6      	; 0x2d30 <LCD_voidInit+0x350>
		__ticks = 1;
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	8e 8f       	std	Y+30, r24	; 0x1e
    2d2e:	91 c0       	rjmp	.+290    	; 0x2e52 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    2d30:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d32:	78 a1       	ldd	r23, Y+32	; 0x20
    2d34:	89 a1       	ldd	r24, Y+33	; 0x21
    2d36:	9a a1       	ldd	r25, Y+34	; 0x22
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	4f e7       	ldi	r20, 0x7F	; 127
    2d3e:	53 e4       	ldi	r21, 0x43	; 67
    2d40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d44:	18 16       	cp	r1, r24
    2d46:	0c f0       	brlt	.+2      	; 0x2d4a <LCD_voidInit+0x36a>
    2d48:	7b c0       	rjmp	.+246    	; 0x2e40 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2d4a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d4c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d4e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d50:	9e a1       	ldd	r25, Y+38	; 0x26
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	4a e7       	ldi	r20, 0x7A	; 122
    2d58:	54 e4       	ldi	r21, 0x44	; 68
    2d5a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	8a 8f       	std	Y+26, r24	; 0x1a
    2d64:	9b 8f       	std	Y+27, r25	; 0x1b
    2d66:	ac 8f       	std	Y+28, r26	; 0x1c
    2d68:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2d6c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2d6e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d70:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	4a ef       	ldi	r20, 0xFA	; 250
    2d78:	54 e4       	ldi	r21, 0x44	; 68
    2d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	8e 8b       	std	Y+22, r24	; 0x16
    2d84:	9f 8b       	std	Y+23, r25	; 0x17
    2d86:	a8 8f       	std	Y+24, r26	; 0x18
    2d88:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2d8a:	6e 89       	ldd	r22, Y+22	; 0x16
    2d8c:	7f 89       	ldd	r23, Y+23	; 0x17
    2d8e:	88 8d       	ldd	r24, Y+24	; 0x18
    2d90:	99 8d       	ldd	r25, Y+25	; 0x19
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e8       	ldi	r20, 0x80	; 128
    2d98:	5f e3       	ldi	r21, 0x3F	; 63
    2d9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d9e:	88 23       	and	r24, r24
    2da0:	2c f4       	brge	.+10     	; 0x2dac <LCD_voidInit+0x3cc>
		__ticks = 1;
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	9d 8b       	std	Y+21, r25	; 0x15
    2da8:	8c 8b       	std	Y+20, r24	; 0x14
    2daa:	3f c0       	rjmp	.+126    	; 0x2e2a <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    2dac:	6e 89       	ldd	r22, Y+22	; 0x16
    2dae:	7f 89       	ldd	r23, Y+23	; 0x17
    2db0:	88 8d       	ldd	r24, Y+24	; 0x18
    2db2:	99 8d       	ldd	r25, Y+25	; 0x19
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	3f ef       	ldi	r19, 0xFF	; 255
    2db8:	4f e7       	ldi	r20, 0x7F	; 127
    2dba:	57 e4       	ldi	r21, 0x47	; 71
    2dbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc0:	18 16       	cp	r1, r24
    2dc2:	4c f5       	brge	.+82     	; 0x2e16 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2dc6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2dc8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e2       	ldi	r20, 0x20	; 32
    2dd2:	51 e4       	ldi	r21, 0x41	; 65
    2dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	bc 01       	movw	r22, r24
    2dde:	cd 01       	movw	r24, r26
    2de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	9d 8b       	std	Y+21, r25	; 0x15
    2dea:	8c 8b       	std	Y+20, r24	; 0x14
    2dec:	0f c0       	rjmp	.+30     	; 0x2e0c <LCD_voidInit+0x42c>
    2dee:	88 ec       	ldi	r24, 0xC8	; 200
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	9b 8b       	std	Y+19, r25	; 0x13
    2df4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2df6:	8a 89       	ldd	r24, Y+18	; 0x12
    2df8:	9b 89       	ldd	r25, Y+19	; 0x13
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	f1 f7       	brne	.-4      	; 0x2dfa <LCD_voidInit+0x41a>
    2dfe:	9b 8b       	std	Y+19, r25	; 0x13
    2e00:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e02:	8c 89       	ldd	r24, Y+20	; 0x14
    2e04:	9d 89       	ldd	r25, Y+21	; 0x15
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	9d 8b       	std	Y+21, r25	; 0x15
    2e0a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0c:	8c 89       	ldd	r24, Y+20	; 0x14
    2e0e:	9d 89       	ldd	r25, Y+21	; 0x15
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	69 f7       	brne	.-38     	; 0x2dee <LCD_voidInit+0x40e>
    2e14:	24 c0       	rjmp	.+72     	; 0x2e5e <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e16:	6e 89       	ldd	r22, Y+22	; 0x16
    2e18:	7f 89       	ldd	r23, Y+23	; 0x17
    2e1a:	88 8d       	ldd	r24, Y+24	; 0x18
    2e1c:	99 8d       	ldd	r25, Y+25	; 0x19
    2e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	9d 8b       	std	Y+21, r25	; 0x15
    2e28:	8c 8b       	std	Y+20, r24	; 0x14
    2e2a:	8c 89       	ldd	r24, Y+20	; 0x14
    2e2c:	9d 89       	ldd	r25, Y+21	; 0x15
    2e2e:	99 8b       	std	Y+17, r25	; 0x11
    2e30:	88 8b       	std	Y+16, r24	; 0x10
    2e32:	88 89       	ldd	r24, Y+16	; 0x10
    2e34:	99 89       	ldd	r25, Y+17	; 0x11
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <LCD_voidInit+0x456>
    2e3a:	99 8b       	std	Y+17, r25	; 0x11
    2e3c:	88 8b       	std	Y+16, r24	; 0x10
    2e3e:	0f c0       	rjmp	.+30     	; 0x2e5e <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e40:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2e42:	78 a1       	ldd	r23, Y+32	; 0x20
    2e44:	89 a1       	ldd	r24, Y+33	; 0x21
    2e46:	9a a1       	ldd	r25, Y+34	; 0x22
    2e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	8e 8f       	std	Y+30, r24	; 0x1e
    2e52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e54:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e58:	8a 95       	dec	r24
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <LCD_voidInit+0x478>
    2e5c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmnd(0b00000001);
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <LCD_voidSendCmnd>
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	a0 e0       	ldi	r26, 0x00	; 0
    2e6a:	b0 e4       	ldi	r27, 0x40	; 64
    2e6c:	8b 87       	std	Y+11, r24	; 0x0b
    2e6e:	9c 87       	std	Y+12, r25	; 0x0c
    2e70:	ad 87       	std	Y+13, r26	; 0x0d
    2e72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	4a ef       	ldi	r20, 0xFA	; 250
    2e82:	54 e4       	ldi	r21, 0x44	; 68
    2e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	8f 83       	std	Y+7, r24	; 0x07
    2e8e:	98 87       	std	Y+8, r25	; 0x08
    2e90:	a9 87       	std	Y+9, r26	; 0x09
    2e92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e94:	6f 81       	ldd	r22, Y+7	; 0x07
    2e96:	78 85       	ldd	r23, Y+8	; 0x08
    2e98:	89 85       	ldd	r24, Y+9	; 0x09
    2e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e8       	ldi	r20, 0x80	; 128
    2ea2:	5f e3       	ldi	r21, 0x3F	; 63
    2ea4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ea8:	88 23       	and	r24, r24
    2eaa:	2c f4       	brge	.+10     	; 0x2eb6 <LCD_voidInit+0x4d6>
		__ticks = 1;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	9e 83       	std	Y+6, r25	; 0x06
    2eb2:	8d 83       	std	Y+5, r24	; 0x05
    2eb4:	3f c0       	rjmp	.+126    	; 0x2f34 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    2eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb8:	78 85       	ldd	r23, Y+8	; 0x08
    2eba:	89 85       	ldd	r24, Y+9	; 0x09
    2ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	3f ef       	ldi	r19, 0xFF	; 255
    2ec2:	4f e7       	ldi	r20, 0x7F	; 127
    2ec4:	57 e4       	ldi	r21, 0x47	; 71
    2ec6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eca:	18 16       	cp	r1, r24
    2ecc:	4c f5       	brge	.+82     	; 0x2f20 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ece:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	40 e2       	ldi	r20, 0x20	; 32
    2edc:	51 e4       	ldi	r21, 0x41	; 65
    2ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	bc 01       	movw	r22, r24
    2ee8:	cd 01       	movw	r24, r26
    2eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	9e 83       	std	Y+6, r25	; 0x06
    2ef4:	8d 83       	std	Y+5, r24	; 0x05
    2ef6:	0f c0       	rjmp	.+30     	; 0x2f16 <LCD_voidInit+0x536>
    2ef8:	88 ec       	ldi	r24, 0xC8	; 200
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	9c 83       	std	Y+4, r25	; 0x04
    2efe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f00:	8b 81       	ldd	r24, Y+3	; 0x03
    2f02:	9c 81       	ldd	r25, Y+4	; 0x04
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	f1 f7       	brne	.-4      	; 0x2f04 <LCD_voidInit+0x524>
    2f08:	9c 83       	std	Y+4, r25	; 0x04
    2f0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	9e 83       	std	Y+6, r25	; 0x06
    2f14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f16:	8d 81       	ldd	r24, Y+5	; 0x05
    2f18:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	69 f7       	brne	.-38     	; 0x2ef8 <LCD_voidInit+0x518>
    2f1e:	14 c0       	rjmp	.+40     	; 0x2f48 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f20:	6f 81       	ldd	r22, Y+7	; 0x07
    2f22:	78 85       	ldd	r23, Y+8	; 0x08
    2f24:	89 85       	ldd	r24, Y+9	; 0x09
    2f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	9e 83       	std	Y+6, r25	; 0x06
    2f32:	8d 83       	std	Y+5, r24	; 0x05
    2f34:	8d 81       	ldd	r24, Y+5	; 0x05
    2f36:	9e 81       	ldd	r25, Y+6	; 0x06
    2f38:	9a 83       	std	Y+2, r25	; 0x02
    2f3a:	89 83       	std	Y+1, r24	; 0x01
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	f1 f7       	brne	.-4      	; 0x2f40 <LCD_voidInit+0x560>
    2f44:	9a 83       	std	Y+2, r25	; 0x02
    2f46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmnd(0b00000110);
    2f48:	86 e0       	ldi	r24, 0x06	; 6
    2f4a:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <LCD_voidSendCmnd>
}
    2f4e:	c4 5b       	subi	r28, 0xB4	; 180
    2f50:	df 4f       	sbci	r29, 0xFF	; 255
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	f8 94       	cli
    2f56:	de bf       	out	0x3e, r29	; 62
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	cd bf       	out	0x3d, r28	; 61
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	1f 91       	pop	r17
    2f62:	0f 91       	pop	r16
    2f64:	08 95       	ret

00002f66 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    2f66:	df 93       	push	r29
    2f68:	cf 93       	push	r28
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
    2f6e:	69 97       	sbiw	r28, 0x19	; 25
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	cd bf       	out	0x3d, r28	; 61
    2f7a:	89 8f       	std	Y+25, r24	; 0x19
		//  Rs = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rs_PIN ,DIO_u8_LOW); // portA, Pin0 ,LOW
    2f7c:	83 e0       	ldi	r24, 0x03	; 3
    2f7e:	60 e0       	ldi	r22, 0x00	; 0
    2f80:	40 e0       	ldi	r20, 0x00	; 0
    2f82:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
		//  Rw = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rw_PIN ,DIO_u8_LOW); // portA, Pin1 ,LOW
    2f86:	83 e0       	ldi	r24, 0x03	; 3
    2f88:	61 e0       	ldi	r22, 0x01	; 1
    2f8a:	40 e0       	ldi	r20, 0x00	; 0
    2f8c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
		/* Write Cmnd */
		DIO_u8SetPortValue(LCD_u8_DATA_PORT , Copy_u8Cmnd); // Port D
    2f90:	82 e0       	ldi	r24, 0x02	; 2
    2f92:	69 8d       	ldd	r22, Y+25	; 0x19
    2f94:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <DIO_u8SetPortValue>
		// E = 1
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_HIGH); // portA, Pin2 ,HIGH
    2f98:	83 e0       	ldi	r24, 0x03	; 3
    2f9a:	63 e0       	ldi	r22, 0x03	; 3
    2f9c:	41 e0       	ldi	r20, 0x01	; 1
    2f9e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	a0 e8       	ldi	r26, 0x80	; 128
    2fa8:	bf e3       	ldi	r27, 0x3F	; 63
    2faa:	8d 8b       	std	Y+21, r24	; 0x15
    2fac:	9e 8b       	std	Y+22, r25	; 0x16
    2fae:	af 8b       	std	Y+23, r26	; 0x17
    2fb0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2fb2:	6d 89       	ldd	r22, Y+21	; 0x15
    2fb4:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb6:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb8:	98 8d       	ldd	r25, Y+24	; 0x18
    2fba:	2b ea       	ldi	r18, 0xAB	; 171
    2fbc:	3a ea       	ldi	r19, 0xAA	; 170
    2fbe:	4a e2       	ldi	r20, 0x2A	; 42
    2fc0:	50 e4       	ldi	r21, 0x40	; 64
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	89 8b       	std	Y+17, r24	; 0x11
    2fcc:	9a 8b       	std	Y+18, r25	; 0x12
    2fce:	ab 8b       	std	Y+19, r26	; 0x13
    2fd0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2fd2:	69 89       	ldd	r22, Y+17	; 0x11
    2fd4:	7a 89       	ldd	r23, Y+18	; 0x12
    2fd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd8:	9c 89       	ldd	r25, Y+20	; 0x14
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e8       	ldi	r20, 0x80	; 128
    2fe0:	5f e3       	ldi	r21, 0x3F	; 63
    2fe2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fe6:	88 23       	and	r24, r24
    2fe8:	1c f4       	brge	.+6      	; 0x2ff0 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	88 8b       	std	Y+16, r24	; 0x10
    2fee:	91 c0       	rjmp	.+290    	; 0x3112 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    2ff0:	69 89       	ldd	r22, Y+17	; 0x11
    2ff2:	7a 89       	ldd	r23, Y+18	; 0x12
    2ff4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	4f e7       	ldi	r20, 0x7F	; 127
    2ffe:	53 e4       	ldi	r21, 0x43	; 67
    3000:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3004:	18 16       	cp	r1, r24
    3006:	0c f0       	brlt	.+2      	; 0x300a <LCD_voidSendCmnd+0xa4>
    3008:	7b c0       	rjmp	.+246    	; 0x3100 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    300a:	6d 89       	ldd	r22, Y+21	; 0x15
    300c:	7e 89       	ldd	r23, Y+22	; 0x16
    300e:	8f 89       	ldd	r24, Y+23	; 0x17
    3010:	98 8d       	ldd	r25, Y+24	; 0x18
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	4a e7       	ldi	r20, 0x7A	; 122
    3018:	54 e4       	ldi	r21, 0x44	; 68
    301a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	8c 87       	std	Y+12, r24	; 0x0c
    3024:	9d 87       	std	Y+13, r25	; 0x0d
    3026:	ae 87       	std	Y+14, r26	; 0x0e
    3028:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    302a:	6c 85       	ldd	r22, Y+12	; 0x0c
    302c:	7d 85       	ldd	r23, Y+13	; 0x0d
    302e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3030:	9f 85       	ldd	r25, Y+15	; 0x0f
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	4a ef       	ldi	r20, 0xFA	; 250
    3038:	54 e4       	ldi	r21, 0x44	; 68
    303a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	88 87       	std	Y+8, r24	; 0x08
    3044:	99 87       	std	Y+9, r25	; 0x09
    3046:	aa 87       	std	Y+10, r26	; 0x0a
    3048:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    304a:	68 85       	ldd	r22, Y+8	; 0x08
    304c:	79 85       	ldd	r23, Y+9	; 0x09
    304e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3050:	9b 85       	ldd	r25, Y+11	; 0x0b
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	40 e8       	ldi	r20, 0x80	; 128
    3058:	5f e3       	ldi	r21, 0x3F	; 63
    305a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    305e:	88 23       	and	r24, r24
    3060:	2c f4       	brge	.+10     	; 0x306c <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	9f 83       	std	Y+7, r25	; 0x07
    3068:	8e 83       	std	Y+6, r24	; 0x06
    306a:	3f c0       	rjmp	.+126    	; 0x30ea <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    306c:	68 85       	ldd	r22, Y+8	; 0x08
    306e:	79 85       	ldd	r23, Y+9	; 0x09
    3070:	8a 85       	ldd	r24, Y+10	; 0x0a
    3072:	9b 85       	ldd	r25, Y+11	; 0x0b
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	3f ef       	ldi	r19, 0xFF	; 255
    3078:	4f e7       	ldi	r20, 0x7F	; 127
    307a:	57 e4       	ldi	r21, 0x47	; 71
    307c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3080:	18 16       	cp	r1, r24
    3082:	4c f5       	brge	.+82     	; 0x30d6 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3084:	6c 85       	ldd	r22, Y+12	; 0x0c
    3086:	7d 85       	ldd	r23, Y+13	; 0x0d
    3088:	8e 85       	ldd	r24, Y+14	; 0x0e
    308a:	9f 85       	ldd	r25, Y+15	; 0x0f
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	40 e2       	ldi	r20, 0x20	; 32
    3092:	51 e4       	ldi	r21, 0x41	; 65
    3094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	bc 01       	movw	r22, r24
    309e:	cd 01       	movw	r24, r26
    30a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	9f 83       	std	Y+7, r25	; 0x07
    30aa:	8e 83       	std	Y+6, r24	; 0x06
    30ac:	0f c0       	rjmp	.+30     	; 0x30cc <LCD_voidSendCmnd+0x166>
    30ae:	88 ec       	ldi	r24, 0xC8	; 200
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	9d 83       	std	Y+5, r25	; 0x05
    30b4:	8c 83       	std	Y+4, r24	; 0x04
    30b6:	8c 81       	ldd	r24, Y+4	; 0x04
    30b8:	9d 81       	ldd	r25, Y+5	; 0x05
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <LCD_voidSendCmnd+0x154>
    30be:	9d 83       	std	Y+5, r25	; 0x05
    30c0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c2:	8e 81       	ldd	r24, Y+6	; 0x06
    30c4:	9f 81       	ldd	r25, Y+7	; 0x07
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	9f 83       	std	Y+7, r25	; 0x07
    30ca:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30cc:	8e 81       	ldd	r24, Y+6	; 0x06
    30ce:	9f 81       	ldd	r25, Y+7	; 0x07
    30d0:	00 97       	sbiw	r24, 0x00	; 0
    30d2:	69 f7       	brne	.-38     	; 0x30ae <LCD_voidSendCmnd+0x148>
    30d4:	24 c0       	rjmp	.+72     	; 0x311e <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d6:	68 85       	ldd	r22, Y+8	; 0x08
    30d8:	79 85       	ldd	r23, Y+9	; 0x09
    30da:	8a 85       	ldd	r24, Y+10	; 0x0a
    30dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    30de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	9f 83       	std	Y+7, r25	; 0x07
    30e8:	8e 83       	std	Y+6, r24	; 0x06
    30ea:	8e 81       	ldd	r24, Y+6	; 0x06
    30ec:	9f 81       	ldd	r25, Y+7	; 0x07
    30ee:	9b 83       	std	Y+3, r25	; 0x03
    30f0:	8a 83       	std	Y+2, r24	; 0x02
    30f2:	8a 81       	ldd	r24, Y+2	; 0x02
    30f4:	9b 81       	ldd	r25, Y+3	; 0x03
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	f1 f7       	brne	.-4      	; 0x30f6 <LCD_voidSendCmnd+0x190>
    30fa:	9b 83       	std	Y+3, r25	; 0x03
    30fc:	8a 83       	std	Y+2, r24	; 0x02
    30fe:	0f c0       	rjmp	.+30     	; 0x311e <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3100:	69 89       	ldd	r22, Y+17	; 0x11
    3102:	7a 89       	ldd	r23, Y+18	; 0x12
    3104:	8b 89       	ldd	r24, Y+19	; 0x13
    3106:	9c 89       	ldd	r25, Y+20	; 0x14
    3108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	88 8b       	std	Y+16, r24	; 0x10
    3112:	88 89       	ldd	r24, Y+16	; 0x10
    3114:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	8a 95       	dec	r24
    311a:	f1 f7       	brne	.-4      	; 0x3118 <LCD_voidSendCmnd+0x1b2>
    311c:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		// E = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_LOW); // portA, Pin2 ,LOW
    311e:	83 e0       	ldi	r24, 0x03	; 3
    3120:	63 e0       	ldi	r22, 0x03	; 3
    3122:	40 e0       	ldi	r20, 0x00	; 0
    3124:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
}
    3128:	69 96       	adiw	r28, 0x19	; 25
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	69 97       	sbiw	r28, 0x19	; 25
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	89 8f       	std	Y+25, r24	; 0x19
		// STEP 1 Rs = 1
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rs_PIN ,DIO_u8_HIGH); // portA, Pin0 , HIGH
    3150:	83 e0       	ldi	r24, 0x03	; 3
    3152:	60 e0       	ldi	r22, 0x00	; 0
    3154:	41 e0       	ldi	r20, 0x01	; 1
    3156:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
		// step 2 Rw = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rw_PIN ,DIO_u8_LOW); // portA, Pin1 , LOW
    315a:	83 e0       	ldi	r24, 0x03	; 3
    315c:	61 e0       	ldi	r22, 0x01	; 1
    315e:	40 e0       	ldi	r20, 0x00	; 0
    3160:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
		/* Write Char */
		DIO_u8SetPortValue(LCD_u8_DATA_PORT , Copy_u8Char); // Port D
    3164:	82 e0       	ldi	r24, 0x02	; 2
    3166:	69 8d       	ldd	r22, Y+25	; 0x19
    3168:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <DIO_u8SetPortValue>
		// E = 1
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_HIGH); // portA, Pin2 , HIGH
    316c:	83 e0       	ldi	r24, 0x03	; 3
    316e:	63 e0       	ldi	r22, 0x03	; 3
    3170:	41 e0       	ldi	r20, 0x01	; 1
    3172:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	a0 e8       	ldi	r26, 0x80	; 128
    317c:	bf e3       	ldi	r27, 0x3F	; 63
    317e:	8d 8b       	std	Y+21, r24	; 0x15
    3180:	9e 8b       	std	Y+22, r25	; 0x16
    3182:	af 8b       	std	Y+23, r26	; 0x17
    3184:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3186:	6d 89       	ldd	r22, Y+21	; 0x15
    3188:	7e 89       	ldd	r23, Y+22	; 0x16
    318a:	8f 89       	ldd	r24, Y+23	; 0x17
    318c:	98 8d       	ldd	r25, Y+24	; 0x18
    318e:	2b ea       	ldi	r18, 0xAB	; 171
    3190:	3a ea       	ldi	r19, 0xAA	; 170
    3192:	4a e2       	ldi	r20, 0x2A	; 42
    3194:	50 e4       	ldi	r21, 0x40	; 64
    3196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	89 8b       	std	Y+17, r24	; 0x11
    31a0:	9a 8b       	std	Y+18, r25	; 0x12
    31a2:	ab 8b       	std	Y+19, r26	; 0x13
    31a4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    31a6:	69 89       	ldd	r22, Y+17	; 0x11
    31a8:	7a 89       	ldd	r23, Y+18	; 0x12
    31aa:	8b 89       	ldd	r24, Y+19	; 0x13
    31ac:	9c 89       	ldd	r25, Y+20	; 0x14
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	40 e8       	ldi	r20, 0x80	; 128
    31b4:	5f e3       	ldi	r21, 0x3F	; 63
    31b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ba:	88 23       	and	r24, r24
    31bc:	1c f4       	brge	.+6      	; 0x31c4 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	88 8b       	std	Y+16, r24	; 0x10
    31c2:	91 c0       	rjmp	.+290    	; 0x32e6 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    31c4:	69 89       	ldd	r22, Y+17	; 0x11
    31c6:	7a 89       	ldd	r23, Y+18	; 0x12
    31c8:	8b 89       	ldd	r24, Y+19	; 0x13
    31ca:	9c 89       	ldd	r25, Y+20	; 0x14
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	4f e7       	ldi	r20, 0x7F	; 127
    31d2:	53 e4       	ldi	r21, 0x43	; 67
    31d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31d8:	18 16       	cp	r1, r24
    31da:	0c f0       	brlt	.+2      	; 0x31de <LCD_voidSendChar+0xa4>
    31dc:	7b c0       	rjmp	.+246    	; 0x32d4 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    31de:	6d 89       	ldd	r22, Y+21	; 0x15
    31e0:	7e 89       	ldd	r23, Y+22	; 0x16
    31e2:	8f 89       	ldd	r24, Y+23	; 0x17
    31e4:	98 8d       	ldd	r25, Y+24	; 0x18
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	4a e7       	ldi	r20, 0x7A	; 122
    31ec:	54 e4       	ldi	r21, 0x44	; 68
    31ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	8c 87       	std	Y+12, r24	; 0x0c
    31f8:	9d 87       	std	Y+13, r25	; 0x0d
    31fa:	ae 87       	std	Y+14, r26	; 0x0e
    31fc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    3200:	7d 85       	ldd	r23, Y+13	; 0x0d
    3202:	8e 85       	ldd	r24, Y+14	; 0x0e
    3204:	9f 85       	ldd	r25, Y+15	; 0x0f
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	4a ef       	ldi	r20, 0xFA	; 250
    320c:	54 e4       	ldi	r21, 0x44	; 68
    320e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	88 87       	std	Y+8, r24	; 0x08
    3218:	99 87       	std	Y+9, r25	; 0x09
    321a:	aa 87       	std	Y+10, r26	; 0x0a
    321c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    321e:	68 85       	ldd	r22, Y+8	; 0x08
    3220:	79 85       	ldd	r23, Y+9	; 0x09
    3222:	8a 85       	ldd	r24, Y+10	; 0x0a
    3224:	9b 85       	ldd	r25, Y+11	; 0x0b
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	40 e8       	ldi	r20, 0x80	; 128
    322c:	5f e3       	ldi	r21, 0x3F	; 63
    322e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3232:	88 23       	and	r24, r24
    3234:	2c f4       	brge	.+10     	; 0x3240 <LCD_voidSendChar+0x106>
		__ticks = 1;
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	9f 83       	std	Y+7, r25	; 0x07
    323c:	8e 83       	std	Y+6, r24	; 0x06
    323e:	3f c0       	rjmp	.+126    	; 0x32be <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    3240:	68 85       	ldd	r22, Y+8	; 0x08
    3242:	79 85       	ldd	r23, Y+9	; 0x09
    3244:	8a 85       	ldd	r24, Y+10	; 0x0a
    3246:	9b 85       	ldd	r25, Y+11	; 0x0b
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	3f ef       	ldi	r19, 0xFF	; 255
    324c:	4f e7       	ldi	r20, 0x7F	; 127
    324e:	57 e4       	ldi	r21, 0x47	; 71
    3250:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3254:	18 16       	cp	r1, r24
    3256:	4c f5       	brge	.+82     	; 0x32aa <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3258:	6c 85       	ldd	r22, Y+12	; 0x0c
    325a:	7d 85       	ldd	r23, Y+13	; 0x0d
    325c:	8e 85       	ldd	r24, Y+14	; 0x0e
    325e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	40 e2       	ldi	r20, 0x20	; 32
    3266:	51 e4       	ldi	r21, 0x41	; 65
    3268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	bc 01       	movw	r22, r24
    3272:	cd 01       	movw	r24, r26
    3274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	9f 83       	std	Y+7, r25	; 0x07
    327e:	8e 83       	std	Y+6, r24	; 0x06
    3280:	0f c0       	rjmp	.+30     	; 0x32a0 <LCD_voidSendChar+0x166>
    3282:	88 ec       	ldi	r24, 0xC8	; 200
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	9d 83       	std	Y+5, r25	; 0x05
    3288:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    328a:	8c 81       	ldd	r24, Y+4	; 0x04
    328c:	9d 81       	ldd	r25, Y+5	; 0x05
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	f1 f7       	brne	.-4      	; 0x328e <LCD_voidSendChar+0x154>
    3292:	9d 83       	std	Y+5, r25	; 0x05
    3294:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3296:	8e 81       	ldd	r24, Y+6	; 0x06
    3298:	9f 81       	ldd	r25, Y+7	; 0x07
    329a:	01 97       	sbiw	r24, 0x01	; 1
    329c:	9f 83       	std	Y+7, r25	; 0x07
    329e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a0:	8e 81       	ldd	r24, Y+6	; 0x06
    32a2:	9f 81       	ldd	r25, Y+7	; 0x07
    32a4:	00 97       	sbiw	r24, 0x00	; 0
    32a6:	69 f7       	brne	.-38     	; 0x3282 <LCD_voidSendChar+0x148>
    32a8:	24 c0       	rjmp	.+72     	; 0x32f2 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32aa:	68 85       	ldd	r22, Y+8	; 0x08
    32ac:	79 85       	ldd	r23, Y+9	; 0x09
    32ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    32b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    32b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	9f 83       	std	Y+7, r25	; 0x07
    32bc:	8e 83       	std	Y+6, r24	; 0x06
    32be:	8e 81       	ldd	r24, Y+6	; 0x06
    32c0:	9f 81       	ldd	r25, Y+7	; 0x07
    32c2:	9b 83       	std	Y+3, r25	; 0x03
    32c4:	8a 83       	std	Y+2, r24	; 0x02
    32c6:	8a 81       	ldd	r24, Y+2	; 0x02
    32c8:	9b 81       	ldd	r25, Y+3	; 0x03
    32ca:	01 97       	sbiw	r24, 0x01	; 1
    32cc:	f1 f7       	brne	.-4      	; 0x32ca <LCD_voidSendChar+0x190>
    32ce:	9b 83       	std	Y+3, r25	; 0x03
    32d0:	8a 83       	std	Y+2, r24	; 0x02
    32d2:	0f c0       	rjmp	.+30     	; 0x32f2 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32d4:	69 89       	ldd	r22, Y+17	; 0x11
    32d6:	7a 89       	ldd	r23, Y+18	; 0x12
    32d8:	8b 89       	ldd	r24, Y+19	; 0x13
    32da:	9c 89       	ldd	r25, Y+20	; 0x14
    32dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	88 8b       	std	Y+16, r24	; 0x10
    32e6:	88 89       	ldd	r24, Y+16	; 0x10
    32e8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	8a 95       	dec	r24
    32ee:	f1 f7       	brne	.-4      	; 0x32ec <LCD_voidSendChar+0x1b2>
    32f0:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		// E = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_LOW); // portA, Pin2 , LOW
    32f2:	83 e0       	ldi	r24, 0x03	; 3
    32f4:	63 e0       	ldi	r22, 0x03	; 3
    32f6:	40 e0       	ldi	r20, 0x00	; 0
    32f8:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
}
    32fc:	69 96       	adiw	r28, 0x19	; 25
    32fe:	0f b6       	in	r0, 0x3f	; 63
    3300:	f8 94       	cli
    3302:	de bf       	out	0x3e, r29	; 62
    3304:	0f be       	out	0x3f, r0	; 63
    3306:	cd bf       	out	0x3d, r28	; 61
    3308:	cf 91       	pop	r28
    330a:	df 91       	pop	r29
    330c:	08 95       	ret

0000330e <LCD_u8GoToXY>:

u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	00 d0       	rcall	.+0      	; 0x3314 <LCD_u8GoToXY+0x6>
    3314:	00 d0       	rcall	.+0      	; 0x3316 <LCD_u8GoToXY+0x8>
    3316:	0f 92       	push	r0
    3318:	cd b7       	in	r28, 0x3d	; 61
    331a:	de b7       	in	r29, 0x3e	; 62
    331c:	8a 83       	std	Y+2, r24	; 0x02
    331e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    3324:	8b 81       	ldd	r24, Y+3	; 0x03
    3326:	88 32       	cpi	r24, 0x28	; 40
    3328:	e0 f4       	brcc	.+56     	; 0x3362 <LCD_u8GoToXY+0x54>
	{
		switch (Copy_u8LineNum)
    332a:	8a 81       	ldd	r24, Y+2	; 0x02
    332c:	28 2f       	mov	r18, r24
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	3d 83       	std	Y+5, r19	; 0x05
    3332:	2c 83       	std	Y+4, r18	; 0x04
    3334:	8c 81       	ldd	r24, Y+4	; 0x04
    3336:	9d 81       	ldd	r25, Y+5	; 0x05
    3338:	81 30       	cpi	r24, 0x01	; 1
    333a:	91 05       	cpc	r25, r1
    333c:	31 f0       	breq	.+12     	; 0x334a <LCD_u8GoToXY+0x3c>
    333e:	2c 81       	ldd	r18, Y+4	; 0x04
    3340:	3d 81       	ldd	r19, Y+5	; 0x05
    3342:	22 30       	cpi	r18, 0x02	; 2
    3344:	31 05       	cpc	r19, r1
    3346:	31 f0       	breq	.+12     	; 0x3354 <LCD_u8GoToXY+0x46>
    3348:	0a c0       	rjmp	.+20     	; 0x335e <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1 : LCD_voidSendCmnd(0x80+Copy_u8Location);break;
    334a:	8b 81       	ldd	r24, Y+3	; 0x03
    334c:	80 58       	subi	r24, 0x80	; 128
    334e:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <LCD_voidSendCmnd>
    3352:	08 c0       	rjmp	.+16     	; 0x3364 <LCD_u8GoToXY+0x56>
			case LCD_u8_LINE2 : LCD_voidSendCmnd(0xc0+Copy_u8Location);break;
    3354:	8b 81       	ldd	r24, Y+3	; 0x03
    3356:	80 54       	subi	r24, 0x40	; 64
    3358:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <LCD_voidSendCmnd>
    335c:	03 c0       	rjmp	.+6      	; 0x3364 <LCD_u8GoToXY+0x56>
			default : Local_u8ErrorState = STD_TYPES_NOK;
    335e:	19 82       	std	Y+1, r1	; 0x01
    3360:	01 c0       	rjmp	.+2      	; 0x3364 <LCD_u8GoToXY+0x56>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3362:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3364:	89 81       	ldd	r24, Y+1	; 0x01
}
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	cf 91       	pop	r28
    3372:	df 91       	pop	r29
    3374:	08 95       	ret

00003376 <LCD_SendString>:

u8 LCD_SendString(u8 * Copy_pu8_String){
    3376:	df 93       	push	r29
    3378:	cf 93       	push	r28
    337a:	00 d0       	rcall	.+0      	; 0x337c <LCD_SendString+0x6>
    337c:	0f 92       	push	r0
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
    3382:	9b 83       	std	Y+3, r25	; 0x03
    3384:	8a 83       	std	Y+2, r24	; 0x02
    for(u8 i=0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    3386:	19 82       	std	Y+1, r1	; 0x01
    3388:	0e c0       	rjmp	.+28     	; 0x33a6 <LCD_SendString+0x30>
    	LCD_voidSendChar(Copy_pu8_String[i]);
    338a:	89 81       	ldd	r24, Y+1	; 0x01
    338c:	28 2f       	mov	r18, r24
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	8a 81       	ldd	r24, Y+2	; 0x02
    3392:	9b 81       	ldd	r25, Y+3	; 0x03
    3394:	fc 01       	movw	r30, r24
    3396:	e2 0f       	add	r30, r18
    3398:	f3 1f       	adc	r31, r19
    339a:	80 81       	ld	r24, Z
    339c:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_voidSendChar>
	}
	return Local_u8ErrorState;
}

u8 LCD_SendString(u8 * Copy_pu8_String){
    for(u8 i=0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	8f 5f       	subi	r24, 0xFF	; 255
    33a4:	89 83       	std	Y+1, r24	; 0x01
    33a6:	89 81       	ldd	r24, Y+1	; 0x01
    33a8:	28 2f       	mov	r18, r24
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	8a 81       	ldd	r24, Y+2	; 0x02
    33ae:	9b 81       	ldd	r25, Y+3	; 0x03
    33b0:	fc 01       	movw	r30, r24
    33b2:	e2 0f       	add	r30, r18
    33b4:	f3 1f       	adc	r31, r19
    33b6:	80 81       	ld	r24, Z
    33b8:	88 23       	and	r24, r24
    33ba:	39 f7       	brne	.-50     	; 0x338a <LCD_SendString+0x14>
    	LCD_voidSendChar(Copy_pu8_String[i]);
    }
    return STD_TYPES_OK;
    33bc:	81 e0       	ldi	r24, 0x01	; 1
}
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	cf 91       	pop	r28
    33c6:	df 91       	pop	r29
    33c8:	08 95       	ret

000033ca <LCD_SendNum>:

u8 LCD_SendNum(u32 Copy_u32_Num){
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	df 93       	push	r29
    33d0:	cf 93       	push	r28
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	60 97       	sbiw	r28, 0x10	; 16
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	f8 94       	cli
    33dc:	de bf       	out	0x3e, r29	; 62
    33de:	0f be       	out	0x3f, r0	; 63
    33e0:	cd bf       	out	0x3d, r28	; 61
    33e2:	6d 87       	std	Y+13, r22	; 0x0d
    33e4:	7e 87       	std	Y+14, r23	; 0x0e
    33e6:	8f 87       	std	Y+15, r24	; 0x0f
    33e8:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0,Local_u8_iterator2 = 0;
    33ea:	1a 82       	std	Y+2, r1	; 0x02
    33ec:	19 82       	std	Y+1, r1	; 0x01
	    if(Copy_u32_Num == 0)
    33ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f2:	af 85       	ldd	r26, Y+15	; 0x0f
    33f4:	b8 89       	ldd	r27, Y+16	; 0x10
    33f6:	00 97       	sbiw	r24, 0x00	; 0
    33f8:	a1 05       	cpc	r26, r1
    33fa:	b1 05       	cpc	r27, r1
    33fc:	89 f5       	brne	.+98     	; 0x3460 <LCD_SendNum+0x96>
	    	LCD_voidSendChar('0');
    33fe:	80 e3       	ldi	r24, 0x30	; 48
    3400:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_voidSendChar>
    3404:	4d c0       	rjmp	.+154    	; 0x34a0 <LCD_SendNum+0xd6>
	    else{
			while(Copy_u32_Num != 0){
				Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
    3406:	8a 81       	ldd	r24, Y+2	; 0x02
    3408:	08 2f       	mov	r16, r24
    340a:	10 e0       	ldi	r17, 0x00	; 0
    340c:	8d 85       	ldd	r24, Y+13	; 0x0d
    340e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3410:	af 85       	ldd	r26, Y+15	; 0x0f
    3412:	b8 89       	ldd	r27, Y+16	; 0x10
    3414:	2a e0       	ldi	r18, 0x0A	; 10
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e0       	ldi	r20, 0x00	; 0
    341a:	50 e0       	ldi	r21, 0x00	; 0
    341c:	bc 01       	movw	r22, r24
    341e:	cd 01       	movw	r24, r26
    3420:	0e 94 1b 1c 	call	0x3836	; 0x3836 <__udivmodsi4>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	28 2f       	mov	r18, r24
    342a:	ce 01       	movw	r24, r28
    342c:	03 96       	adiw	r24, 0x03	; 3
    342e:	fc 01       	movw	r30, r24
    3430:	e0 0f       	add	r30, r16
    3432:	f1 1f       	adc	r31, r17
    3434:	20 83       	st	Z, r18
				Copy_u32_Num /= 10;
    3436:	8d 85       	ldd	r24, Y+13	; 0x0d
    3438:	9e 85       	ldd	r25, Y+14	; 0x0e
    343a:	af 85       	ldd	r26, Y+15	; 0x0f
    343c:	b8 89       	ldd	r27, Y+16	; 0x10
    343e:	2a e0       	ldi	r18, 0x0A	; 10
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	40 e0       	ldi	r20, 0x00	; 0
    3444:	50 e0       	ldi	r21, 0x00	; 0
    3446:	bc 01       	movw	r22, r24
    3448:	cd 01       	movw	r24, r26
    344a:	0e 94 1b 1c 	call	0x3836	; 0x3836 <__udivmodsi4>
    344e:	da 01       	movw	r26, r20
    3450:	c9 01       	movw	r24, r18
    3452:	8d 87       	std	Y+13, r24	; 0x0d
    3454:	9e 87       	std	Y+14, r25	; 0x0e
    3456:	af 87       	std	Y+15, r26	; 0x0f
    3458:	b8 8b       	std	Y+16, r27	; 0x10
				Local_u8_iterator1++;
    345a:	8a 81       	ldd	r24, Y+2	; 0x02
    345c:	8f 5f       	subi	r24, 0xFF	; 255
    345e:	8a 83       	std	Y+2, r24	; 0x02
u8 LCD_SendNum(u32 Copy_u32_Num){
	u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0,Local_u8_iterator2 = 0;
	    if(Copy_u32_Num == 0)
	    	LCD_voidSendChar('0');
	    else{
			while(Copy_u32_Num != 0){
    3460:	8d 85       	ldd	r24, Y+13	; 0x0d
    3462:	9e 85       	ldd	r25, Y+14	; 0x0e
    3464:	af 85       	ldd	r26, Y+15	; 0x0f
    3466:	b8 89       	ldd	r27, Y+16	; 0x10
    3468:	00 97       	sbiw	r24, 0x00	; 0
    346a:	a1 05       	cpc	r26, r1
    346c:	b1 05       	cpc	r27, r1
    346e:	59 f6       	brne	.-106    	; 0x3406 <LCD_SendNum+0x3c>
				Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
				Copy_u32_Num /= 10;
				Local_u8_iterator1++;
			}
			for(Local_u8_iterator2 = Local_u8_iterator1 ;Local_u8_iterator2>0; Local_u8_iterator2--){
    3470:	8a 81       	ldd	r24, Y+2	; 0x02
    3472:	89 83       	std	Y+1, r24	; 0x01
    3474:	12 c0       	rjmp	.+36     	; 0x349a <LCD_SendNum+0xd0>
				LCD_voidSendChar(Local_u8_numArr[Local_u8_iterator2-1]+'0');
    3476:	89 81       	ldd	r24, Y+1	; 0x01
    3478:	88 2f       	mov	r24, r24
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	9c 01       	movw	r18, r24
    347e:	21 50       	subi	r18, 0x01	; 1
    3480:	30 40       	sbci	r19, 0x00	; 0
    3482:	ce 01       	movw	r24, r28
    3484:	03 96       	adiw	r24, 0x03	; 3
    3486:	fc 01       	movw	r30, r24
    3488:	e2 0f       	add	r30, r18
    348a:	f3 1f       	adc	r31, r19
    348c:	80 81       	ld	r24, Z
    348e:	80 5d       	subi	r24, 0xD0	; 208
    3490:	0e 94 9d 18 	call	0x313a	; 0x313a <LCD_voidSendChar>
			while(Copy_u32_Num != 0){
				Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
				Copy_u32_Num /= 10;
				Local_u8_iterator1++;
			}
			for(Local_u8_iterator2 = Local_u8_iterator1 ;Local_u8_iterator2>0; Local_u8_iterator2--){
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	81 50       	subi	r24, 0x01	; 1
    3498:	89 83       	std	Y+1, r24	; 0x01
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	88 23       	and	r24, r24
    349e:	59 f7       	brne	.-42     	; 0x3476 <LCD_SendNum+0xac>
				LCD_voidSendChar(Local_u8_numArr[Local_u8_iterator2-1]+'0');
			}
	    }
	    return STD_TYPES_OK;
    34a0:	81 e0       	ldi	r24, 0x01	; 1
}
    34a2:	60 96       	adiw	r28, 0x10	; 16
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	de bf       	out	0x3e, r29	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	cf 91       	pop	r28
    34b0:	df 91       	pop	r29
    34b2:	1f 91       	pop	r17
    34b4:	0f 91       	pop	r16
    34b6:	08 95       	ret

000034b8 <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};


u8 KPD_u8GetKeyState(u8 * Copy_pu8ReturnedKey)
{
    34b8:	df 93       	push	r29
    34ba:	cf 93       	push	r28
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
    34c0:	65 97       	sbiw	r28, 0x15	; 21
    34c2:	0f b6       	in	r0, 0x3f	; 63
    34c4:	f8 94       	cli
    34c6:	de bf       	out	0x3e, r29	; 62
    34c8:	0f be       	out	0x3f, r0	; 63
    34ca:	cd bf       	out	0x3d, r28	; 61
    34cc:	9d 8b       	std	Y+21, r25	; 0x15
    34ce:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
    34d4:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey != NULL)
    34d6:	8c 89       	ldd	r24, Y+20	; 0x14
    34d8:	9d 89       	ldd	r25, Y+21	; 0x15
    34da:	00 97       	sbiw	r24, 0x00	; 0
    34dc:	09 f4       	brne	.+2      	; 0x34e0 <KPD_u8GetKeyState+0x28>
    34de:	f0 c0       	rjmp	.+480    	; 0x36c0 <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    34e0:	ec 89       	ldd	r30, Y+20	; 0x14
    34e2:	fd 89       	ldd	r31, Y+21	; 0x15
    34e4:	8f ef       	ldi	r24, 0xFF	; 255
    34e6:	80 83       	st	Z, r24
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    34e8:	19 8a       	std	Y+17, r1	; 0x11
    34ea:	e5 c0       	rjmp	.+458    	; 0x36b6 <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_R_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    34ec:	89 89       	ldd	r24, Y+17	; 0x11
    34ee:	88 2f       	mov	r24, r24
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	fc 01       	movw	r30, r24
    34f4:	e8 58       	subi	r30, 0x88	; 136
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	90 81       	ld	r25, Z
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	69 2f       	mov	r22, r25
    34fe:	40 e0       	ldi	r20, 0x00	; 0
    3500:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
			/* Check Which Input Pin Has Zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    3504:	18 8a       	std	Y+16, r1	; 0x10
    3506:	c1 c0       	rjmp	.+386    	; 0x368a <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    3508:	88 89       	ldd	r24, Y+16	; 0x10
    350a:	88 2f       	mov	r24, r24
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	fc 01       	movw	r30, r24
    3510:	e4 58       	subi	r30, 0x84	; 132
    3512:	ff 4f       	sbci	r31, 0xFF	; 255
    3514:	90 81       	ld	r25, Z
    3516:	9e 01       	movw	r18, r28
    3518:	2d 5e       	subi	r18, 0xED	; 237
    351a:	3f 4f       	sbci	r19, 0xFF	; 255
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	69 2f       	mov	r22, r25
    3520:	a9 01       	movw	r20, r18
    3522:	0e 94 a4 0c 	call	0x1948	; 0x1948 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)/* Switch is Pressed */
    3526:	8b 89       	ldd	r24, Y+19	; 0x13
    3528:	88 23       	and	r24, r24
    352a:	09 f0       	breq	.+2      	; 0x352e <KPD_u8GetKeyState+0x76>
    352c:	ab c0       	rjmp	.+342    	; 0x3684 <KPD_u8GetKeyState+0x1cc>
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	a0 ea       	ldi	r26, 0xA0	; 160
    3534:	b1 e4       	ldi	r27, 0x41	; 65
    3536:	8b 87       	std	Y+11, r24	; 0x0b
    3538:	9c 87       	std	Y+12, r25	; 0x0c
    353a:	ad 87       	std	Y+13, r26	; 0x0d
    353c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3540:	7c 85       	ldd	r23, Y+12	; 0x0c
    3542:	8d 85       	ldd	r24, Y+13	; 0x0d
    3544:	9e 85       	ldd	r25, Y+14	; 0x0e
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	4a ef       	ldi	r20, 0xFA	; 250
    354c:	54 e4       	ldi	r21, 0x44	; 68
    354e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	8f 83       	std	Y+7, r24	; 0x07
    3558:	98 87       	std	Y+8, r25	; 0x08
    355a:	a9 87       	std	Y+9, r26	; 0x09
    355c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    355e:	6f 81       	ldd	r22, Y+7	; 0x07
    3560:	78 85       	ldd	r23, Y+8	; 0x08
    3562:	89 85       	ldd	r24, Y+9	; 0x09
    3564:	9a 85       	ldd	r25, Y+10	; 0x0a
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e8       	ldi	r20, 0x80	; 128
    356c:	5f e3       	ldi	r21, 0x3F	; 63
    356e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3572:	88 23       	and	r24, r24
    3574:	2c f4       	brge	.+10     	; 0x3580 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	9e 83       	std	Y+6, r25	; 0x06
    357c:	8d 83       	std	Y+5, r24	; 0x05
    357e:	3f c0       	rjmp	.+126    	; 0x35fe <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    3580:	6f 81       	ldd	r22, Y+7	; 0x07
    3582:	78 85       	ldd	r23, Y+8	; 0x08
    3584:	89 85       	ldd	r24, Y+9	; 0x09
    3586:	9a 85       	ldd	r25, Y+10	; 0x0a
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	3f ef       	ldi	r19, 0xFF	; 255
    358c:	4f e7       	ldi	r20, 0x7F	; 127
    358e:	57 e4       	ldi	r21, 0x47	; 71
    3590:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3594:	18 16       	cp	r1, r24
    3596:	4c f5       	brge	.+82     	; 0x35ea <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3598:	6b 85       	ldd	r22, Y+11	; 0x0b
    359a:	7c 85       	ldd	r23, Y+12	; 0x0c
    359c:	8d 85       	ldd	r24, Y+13	; 0x0d
    359e:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	40 e2       	ldi	r20, 0x20	; 32
    35a6:	51 e4       	ldi	r21, 0x41	; 65
    35a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	bc 01       	movw	r22, r24
    35b2:	cd 01       	movw	r24, r26
    35b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	9e 83       	std	Y+6, r25	; 0x06
    35be:	8d 83       	std	Y+5, r24	; 0x05
    35c0:	0f c0       	rjmp	.+30     	; 0x35e0 <KPD_u8GetKeyState+0x128>
    35c2:	88 ec       	ldi	r24, 0xC8	; 200
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	9c 83       	std	Y+4, r25	; 0x04
    35c8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35ca:	8b 81       	ldd	r24, Y+3	; 0x03
    35cc:	9c 81       	ldd	r25, Y+4	; 0x04
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	f1 f7       	brne	.-4      	; 0x35ce <KPD_u8GetKeyState+0x116>
    35d2:	9c 83       	std	Y+4, r25	; 0x04
    35d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d6:	8d 81       	ldd	r24, Y+5	; 0x05
    35d8:	9e 81       	ldd	r25, Y+6	; 0x06
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	9e 83       	std	Y+6, r25	; 0x06
    35de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e0:	8d 81       	ldd	r24, Y+5	; 0x05
    35e2:	9e 81       	ldd	r25, Y+6	; 0x06
    35e4:	00 97       	sbiw	r24, 0x00	; 0
    35e6:	69 f7       	brne	.-38     	; 0x35c2 <KPD_u8GetKeyState+0x10a>
    35e8:	14 c0       	rjmp	.+40     	; 0x3612 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ea:	6f 81       	ldd	r22, Y+7	; 0x07
    35ec:	78 85       	ldd	r23, Y+8	; 0x08
    35ee:	89 85       	ldd	r24, Y+9	; 0x09
    35f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	9e 83       	std	Y+6, r25	; 0x06
    35fc:	8d 83       	std	Y+5, r24	; 0x05
    35fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3600:	9e 81       	ldd	r25, Y+6	; 0x06
    3602:	9a 83       	std	Y+2, r25	; 0x02
    3604:	89 83       	std	Y+1, r24	; 0x01
    3606:	89 81       	ldd	r24, Y+1	; 0x01
    3608:	9a 81       	ldd	r25, Y+2	; 0x02
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	f1 f7       	brne	.-4      	; 0x360a <KPD_u8GetKeyState+0x152>
    360e:	9a 83       	std	Y+2, r25	; 0x02
    3610:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    3612:	88 89       	ldd	r24, Y+16	; 0x10
    3614:	88 2f       	mov	r24, r24
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	fc 01       	movw	r30, r24
    361a:	e4 58       	subi	r30, 0x84	; 132
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	90 81       	ld	r25, Z
    3620:	9e 01       	movw	r18, r28
    3622:	2d 5e       	subi	r18, 0xED	; 237
    3624:	3f 4f       	sbci	r19, 0xFF	; 255
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	69 2f       	mov	r22, r25
    362a:	a9 01       	movw	r20, r18
    362c:	0e 94 a4 0c 	call	0x1948	; 0x1948 <DIO_u8GetPinValue>
    3630:	0f c0       	rjmp	.+30     	; 0x3650 <KPD_u8GetKeyState+0x198>
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    3632:	88 89       	ldd	r24, Y+16	; 0x10
    3634:	88 2f       	mov	r24, r24
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	fc 01       	movw	r30, r24
    363a:	e4 58       	subi	r30, 0x84	; 132
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	90 81       	ld	r25, Z
    3640:	9e 01       	movw	r18, r28
    3642:	2d 5e       	subi	r18, 0xED	; 237
    3644:	3f 4f       	sbci	r19, 0xFF	; 255
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	69 2f       	mov	r22, r25
    364a:	a9 01       	movw	r20, r18
    364c:	0e 94 a4 0c 	call	0x1948	; 0x1948 <DIO_u8GetPinValue>
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
    3650:	8b 89       	ldd	r24, Y+19	; 0x13
    3652:	88 23       	and	r24, r24
    3654:	71 f3       	breq	.-36     	; 0x3632 <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    3656:	89 89       	ldd	r24, Y+17	; 0x11
    3658:	48 2f       	mov	r20, r24
    365a:	50 e0       	ldi	r21, 0x00	; 0
    365c:	88 89       	ldd	r24, Y+16	; 0x10
    365e:	28 2f       	mov	r18, r24
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	ca 01       	movw	r24, r20
    3664:	88 0f       	add	r24, r24
    3666:	99 1f       	adc	r25, r25
    3668:	88 0f       	add	r24, r24
    366a:	99 1f       	adc	r25, r25
    366c:	82 0f       	add	r24, r18
    366e:	93 1f       	adc	r25, r19
    3670:	fc 01       	movw	r30, r24
    3672:	e8 59       	subi	r30, 0x98	; 152
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	80 81       	ld	r24, Z
    3678:	ec 89       	ldd	r30, Y+20	; 0x14
    367a:	fd 89       	ldd	r31, Y+21	; 0x15
    367c:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	8f 87       	std	Y+15, r24	; 0x0f
    3682:	07 c0       	rjmp	.+14     	; 0x3692 <KPD_u8GetKeyState+0x1da>
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
		{
			DIO_u8SetPinValue(KPD_u8_R_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
			/* Check Which Input Pin Has Zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    3684:	88 89       	ldd	r24, Y+16	; 0x10
    3686:	8f 5f       	subi	r24, 0xFF	; 255
    3688:	88 8b       	std	Y+16, r24	; 0x10
    368a:	88 89       	ldd	r24, Y+16	; 0x10
    368c:	84 30       	cpi	r24, 0x04	; 4
    368e:	08 f4       	brcc	.+2      	; 0x3692 <KPD_u8GetKeyState+0x1da>
    3690:	3b cf       	rjmp	.-394    	; 0x3508 <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;						
				}
			}
			/* Deactivate Row */
			DIO_u8SetPinValue(KPD_u8_R_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    3692:	89 89       	ldd	r24, Y+17	; 0x11
    3694:	88 2f       	mov	r24, r24
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	fc 01       	movw	r30, r24
    369a:	e8 58       	subi	r30, 0x88	; 136
    369c:	ff 4f       	sbci	r31, 0xFF	; 255
    369e:	90 81       	ld	r25, Z
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	69 2f       	mov	r22, r25
    36a4:	41 e0       	ldi	r20, 0x01	; 1
    36a6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
			if(Local_u8Flag == 1)
    36aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ac:	81 30       	cpi	r24, 0x01	; 1
    36ae:	49 f0       	breq	.+18     	; 0x36c2 <KPD_u8GetKeyState+0x20a>
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    36b0:	89 89       	ldd	r24, Y+17	; 0x11
    36b2:	8f 5f       	subi	r24, 0xFF	; 255
    36b4:	89 8b       	std	Y+17, r24	; 0x11
    36b6:	89 89       	ldd	r24, Y+17	; 0x11
    36b8:	84 30       	cpi	r24, 0x04	; 4
    36ba:	08 f4       	brcc	.+2      	; 0x36be <KPD_u8GetKeyState+0x206>
    36bc:	17 cf       	rjmp	.-466    	; 0x34ec <KPD_u8GetKeyState+0x34>
    36be:	01 c0       	rjmp	.+2      	; 0x36c2 <KPD_u8GetKeyState+0x20a>
			}
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    36c0:	1a 8a       	std	Y+18, r1	; 0x12
	}
	return Local_u8ErrorState;
    36c2:	8a 89       	ldd	r24, Y+18	; 0x12
}
    36c4:	65 96       	adiw	r28, 0x15	; 21
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	f8 94       	cli
    36ca:	de bf       	out	0x3e, r29	; 62
    36cc:	0f be       	out	0x3f, r0	; 63
    36ce:	cd bf       	out	0x3d, r28	; 61
    36d0:	cf 91       	pop	r28
    36d2:	df 91       	pop	r29
    36d4:	08 95       	ret

000036d6 <DCM_u8_ROTATE_CW>:
#include "DCM_interface.h"
#include "DCM_private.h"
#include "DCM_config.h"

u8 DCM_u8_ROTATE_CW()
{
    36d6:	df 93       	push	r29
    36d8:	cf 93       	push	r28
    36da:	cd b7       	in	r28, 0x3d	; 61
    36dc:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_IN1_PORT,MOTOR_IN1_PIN,DIO_u8_HIGH);
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	64 e0       	ldi	r22, 0x04	; 4
    36e2:	41 e0       	ldi	r20, 0x01	; 1
    36e4:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_IN2_PORT,MOTOR_IN2_PIN,DIO_u8_LOW);
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	65 e0       	ldi	r22, 0x05	; 5
    36ec:	40 e0       	ldi	r20, 0x00	; 0
    36ee:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    36f2:	81 e0       	ldi	r24, 0x01	; 1
}
    36f4:	cf 91       	pop	r28
    36f6:	df 91       	pop	r29
    36f8:	08 95       	ret

000036fa <DCM_u8_ROTATE_CCW>:

u8 DCM_u8_ROTATE_CCW()
{
    36fa:	df 93       	push	r29
    36fc:	cf 93       	push	r28
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_IN1_PORT,MOTOR_IN1_PIN,DIO_u8_LOW);
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	64 e0       	ldi	r22, 0x04	; 4
    3706:	40 e0       	ldi	r20, 0x00	; 0
    3708:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_IN2_PORT,MOTOR_IN2_PIN,DIO_u8_HIGH);
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	65 e0       	ldi	r22, 0x05	; 5
    3710:	41 e0       	ldi	r20, 0x01	; 1
    3712:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    3716:	81 e0       	ldi	r24, 0x01	; 1
}
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	08 95       	ret

0000371e <DCM_u8_ROTATE_STOP>:

u8 DCM_u8_ROTATE_STOP()
{
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
		DIO_u8SetPinValue(MOTOR_IN1_PORT,MOTOR_IN1_PIN,DIO_u8_LOW);
    3726:	81 e0       	ldi	r24, 0x01	; 1
    3728:	64 e0       	ldi	r22, 0x04	; 4
    372a:	40 e0       	ldi	r20, 0x00	; 0
    372c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(MOTOR_IN2_PORT,MOTOR_IN2_PIN,DIO_u8_LOW);
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	65 e0       	ldi	r22, 0x05	; 5
    3734:	40 e0       	ldi	r20, 0x00	; 0
    3736:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>

		return STD_TYPES_OK;
    373a:	81 e0       	ldi	r24, 0x01	; 1

}
    373c:	cf 91       	pop	r28
    373e:	df 91       	pop	r29
    3740:	08 95       	ret

00003742 <DCM_u8_H_ROTATE_CW>:


/********************* FOR HARDWARE PART **********************/

u8 DCM_u8_H_ROTATE_CW()
{
    3742:	df 93       	push	r29
    3744:	cf 93       	push	r28
    3746:	cd b7       	in	r28, 0x3d	; 61
    3748:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CW_PIN,DIO_u8_HIGH);
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	64 e0       	ldi	r22, 0x04	; 4
    374e:	41 e0       	ldi	r20, 0x01	; 1
    3750:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CW_PIN,DIO_u8_HIGH);
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	65 e0       	ldi	r22, 0x05	; 5
    3758:	41 e0       	ldi	r20, 0x01	; 1
    375a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CCW_PIN,DIO_u8_LOW);
    375e:	81 e0       	ldi	r24, 0x01	; 1
    3760:	66 e0       	ldi	r22, 0x06	; 6
    3762:	40 e0       	ldi	r20, 0x00	; 0
    3764:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CCW_PIN,DIO_u8_LOW);
    3768:	81 e0       	ldi	r24, 0x01	; 1
    376a:	67 e0       	ldi	r22, 0x07	; 7
    376c:	40 e0       	ldi	r20, 0x00	; 0
    376e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    3772:	81 e0       	ldi	r24, 0x01	; 1
}
    3774:	cf 91       	pop	r28
    3776:	df 91       	pop	r29
    3778:	08 95       	ret

0000377a <DCM_u8_H_ROTATE_CCW>:

u8 DCM_u8_H_ROTATE_CCW()
{
    377a:	df 93       	push	r29
    377c:	cf 93       	push	r28
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CW_PIN,DIO_u8_LOW);
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	64 e0       	ldi	r22, 0x04	; 4
    3786:	40 e0       	ldi	r20, 0x00	; 0
    3788:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CW_PIN,DIO_u8_LOW);
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	65 e0       	ldi	r22, 0x05	; 5
    3790:	40 e0       	ldi	r20, 0x00	; 0
    3792:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CCW_PIN,DIO_u8_HIGH);
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	66 e0       	ldi	r22, 0x06	; 6
    379a:	41 e0       	ldi	r20, 0x01	; 1
    379c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CCW_PIN,DIO_u8_HIGH);
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	67 e0       	ldi	r22, 0x07	; 7
    37a4:	41 e0       	ldi	r20, 0x01	; 1
    37a6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    37aa:	81 e0       	ldi	r24, 0x01	; 1
}
    37ac:	cf 91       	pop	r28
    37ae:	df 91       	pop	r29
    37b0:	08 95       	ret

000037b2 <DCM_u8_H_ROTATE_STOP>:

u8 DCM_u8_H_ROTATE_STOP()
{
    37b2:	df 93       	push	r29
    37b4:	cf 93       	push	r28
    37b6:	cd b7       	in	r28, 0x3d	; 61
    37b8:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CW_PIN,DIO_u8_LOW);
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	64 e0       	ldi	r22, 0x04	; 4
    37be:	40 e0       	ldi	r20, 0x00	; 0
    37c0:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CW_PIN,DIO_u8_LOW);
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	65 e0       	ldi	r22, 0x05	; 5
    37c8:	40 e0       	ldi	r20, 0x00	; 0
    37ca:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CCW_PIN,DIO_u8_LOW);
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	66 e0       	ldi	r22, 0x06	; 6
    37d2:	40 e0       	ldi	r20, 0x00	; 0
    37d4:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CCW_PIN,DIO_u8_LOW);
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	67 e0       	ldi	r22, 0x07	; 7
    37dc:	40 e0       	ldi	r20, 0x00	; 0
    37de:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    37e2:	81 e0       	ldi	r24, 0x01	; 1
}
    37e4:	cf 91       	pop	r28
    37e6:	df 91       	pop	r29
    37e8:	08 95       	ret

000037ea <App_voidTogLed>:
#include <util/delay.h>



void App_voidTogLed(void)
{
    37ea:	df 93       	push	r29
    37ec:	cf 93       	push	r28
    37ee:	cd b7       	in	r28, 0x3d	; 61
    37f0:	de b7       	in	r29, 0x3e	; 62
	static u8 flag = 0;
	if(flag == 0)
    37f2:	80 91 91 00 	lds	r24, 0x0091
    37f6:	88 23       	and	r24, r24
    37f8:	49 f4       	brne	.+18     	; 0x380c <App_voidTogLed+0x22>
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
    37fa:	80 e0       	ldi	r24, 0x00	; 0
    37fc:	60 e0       	ldi	r22, 0x00	; 0
    37fe:	41 e0       	ldi	r20, 0x01	; 1
    3800:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
		flag = 1;
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	80 93 91 00 	sts	0x0091, r24
    380a:	07 c0       	rjmp	.+14     	; 0x381a <App_voidTogLed+0x30>
	}
	else
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    380c:	80 e0       	ldi	r24, 0x00	; 0
    380e:	60 e0       	ldi	r22, 0x00	; 0
    3810:	40 e0       	ldi	r20, 0x00	; 0
    3812:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <DIO_u8SetPinValue>
		flag = 0;
    3816:	10 92 91 00 	sts	0x0091, r1
	}
}
    381a:	cf 91       	pop	r28
    381c:	df 91       	pop	r29
    381e:	08 95       	ret

00003820 <main>:




u8 main(void)
{
    3820:	df 93       	push	r29
    3822:	cf 93       	push	r28
    3824:	0f 92       	push	r0
    3826:	cd b7       	in	r28, 0x3d	; 61
    3828:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8CompareMatchValue = 0;
    382a:	19 82       	std	Y+1, r1	; 0x01
	// initialization of DIO
	DIO_voidInit();
    382c:	0e 94 22 0a 	call	0x1444	; 0x1444 <DIO_voidInit>
//	// initialization of GI
//	GI_voidGlobalEnable();
//	// Set Call Back
//	TIMERS_u8Timer0CTCSetCallBack(&App_voidTogLed);
	// initialization of TIMER
	TIMERS_voidTimer1Init();
    3830:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TIMERS_voidTimer1Init>
    3834:	ff cf       	rjmp	.-2      	; 0x3834 <main+0x14>

00003836 <__udivmodsi4>:
    3836:	a1 e2       	ldi	r26, 0x21	; 33
    3838:	1a 2e       	mov	r1, r26
    383a:	aa 1b       	sub	r26, r26
    383c:	bb 1b       	sub	r27, r27
    383e:	fd 01       	movw	r30, r26
    3840:	0d c0       	rjmp	.+26     	; 0x385c <__udivmodsi4_ep>

00003842 <__udivmodsi4_loop>:
    3842:	aa 1f       	adc	r26, r26
    3844:	bb 1f       	adc	r27, r27
    3846:	ee 1f       	adc	r30, r30
    3848:	ff 1f       	adc	r31, r31
    384a:	a2 17       	cp	r26, r18
    384c:	b3 07       	cpc	r27, r19
    384e:	e4 07       	cpc	r30, r20
    3850:	f5 07       	cpc	r31, r21
    3852:	20 f0       	brcs	.+8      	; 0x385c <__udivmodsi4_ep>
    3854:	a2 1b       	sub	r26, r18
    3856:	b3 0b       	sbc	r27, r19
    3858:	e4 0b       	sbc	r30, r20
    385a:	f5 0b       	sbc	r31, r21

0000385c <__udivmodsi4_ep>:
    385c:	66 1f       	adc	r22, r22
    385e:	77 1f       	adc	r23, r23
    3860:	88 1f       	adc	r24, r24
    3862:	99 1f       	adc	r25, r25
    3864:	1a 94       	dec	r1
    3866:	69 f7       	brne	.-38     	; 0x3842 <__udivmodsi4_loop>
    3868:	60 95       	com	r22
    386a:	70 95       	com	r23
    386c:	80 95       	com	r24
    386e:	90 95       	com	r25
    3870:	9b 01       	movw	r18, r22
    3872:	ac 01       	movw	r20, r24
    3874:	bd 01       	movw	r22, r26
    3876:	cf 01       	movw	r24, r30
    3878:	08 95       	ret

0000387a <__prologue_saves__>:
    387a:	2f 92       	push	r2
    387c:	3f 92       	push	r3
    387e:	4f 92       	push	r4
    3880:	5f 92       	push	r5
    3882:	6f 92       	push	r6
    3884:	7f 92       	push	r7
    3886:	8f 92       	push	r8
    3888:	9f 92       	push	r9
    388a:	af 92       	push	r10
    388c:	bf 92       	push	r11
    388e:	cf 92       	push	r12
    3890:	df 92       	push	r13
    3892:	ef 92       	push	r14
    3894:	ff 92       	push	r15
    3896:	0f 93       	push	r16
    3898:	1f 93       	push	r17
    389a:	cf 93       	push	r28
    389c:	df 93       	push	r29
    389e:	cd b7       	in	r28, 0x3d	; 61
    38a0:	de b7       	in	r29, 0x3e	; 62
    38a2:	ca 1b       	sub	r28, r26
    38a4:	db 0b       	sbc	r29, r27
    38a6:	0f b6       	in	r0, 0x3f	; 63
    38a8:	f8 94       	cli
    38aa:	de bf       	out	0x3e, r29	; 62
    38ac:	0f be       	out	0x3f, r0	; 63
    38ae:	cd bf       	out	0x3d, r28	; 61
    38b0:	09 94       	ijmp

000038b2 <__epilogue_restores__>:
    38b2:	2a 88       	ldd	r2, Y+18	; 0x12
    38b4:	39 88       	ldd	r3, Y+17	; 0x11
    38b6:	48 88       	ldd	r4, Y+16	; 0x10
    38b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    38ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    38bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    38be:	8c 84       	ldd	r8, Y+12	; 0x0c
    38c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    38c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    38c4:	b9 84       	ldd	r11, Y+9	; 0x09
    38c6:	c8 84       	ldd	r12, Y+8	; 0x08
    38c8:	df 80       	ldd	r13, Y+7	; 0x07
    38ca:	ee 80       	ldd	r14, Y+6	; 0x06
    38cc:	fd 80       	ldd	r15, Y+5	; 0x05
    38ce:	0c 81       	ldd	r16, Y+4	; 0x04
    38d0:	1b 81       	ldd	r17, Y+3	; 0x03
    38d2:	aa 81       	ldd	r26, Y+2	; 0x02
    38d4:	b9 81       	ldd	r27, Y+1	; 0x01
    38d6:	ce 0f       	add	r28, r30
    38d8:	d1 1d       	adc	r29, r1
    38da:	0f b6       	in	r0, 0x3f	; 63
    38dc:	f8 94       	cli
    38de:	de bf       	out	0x3e, r29	; 62
    38e0:	0f be       	out	0x3f, r0	; 63
    38e2:	cd bf       	out	0x3d, r28	; 61
    38e4:	ed 01       	movw	r28, r26
    38e6:	08 95       	ret

000038e8 <_exit>:
    38e8:	f8 94       	cli

000038ea <__stop_program>:
    38ea:	ff cf       	rjmp	.-2      	; 0x38ea <__stop_program>
