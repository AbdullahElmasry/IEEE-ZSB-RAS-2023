
TIMER_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003834  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00003834  000038c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800080  00800080  000038e8  2**0
                  ALLOC
  3 .stab         0000369c  00000000  00000000  000038e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001307  00000000  00000000  00006f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000828b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000083eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000857a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a5bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c644  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ca86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d314  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 26 09 	jmp	0x124c	; 0x124c <__vector_1>
       8:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__vector_2>
       c:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__vector_10>
      2c:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ad 1b 	call	0x375a	; 0x375a <main>
      8a:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fd 1b 	jmp	0x37fa	; 0x37fa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fd 1b 	jmp	0x37fa	; 0x37fa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TIMERS_voidTimer0Init>:
/* Global Pointer to Function of Timer0 CTC */
static void(*TIMERS_pfTimer0CTC) (void) = NULL;


void TIMERS_voidTimer0Init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/* Select Mode => Normal Mode */
//	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
//	CLR_BIT(TIMERS_u8_TCCR0_REG,3);

	/* Select Mode => CTC Mode */
	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
     ca6:	a3 e5       	ldi	r26, 0x53	; 83
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e3 e5       	ldi	r30, 0x53	; 83
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 7b       	andi	r24, 0xBF	; 191
     cb2:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,3);
     cb4:	a3 e5       	ldi	r26, 0x53	; 83
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e3 e5       	ldi	r30, 0x53	; 83
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	88 60       	ori	r24, 0x08	; 8
     cc0:	8c 93       	st	X, r24

	/* Enable OVF Interrupt */
//	SET_BIT(TIMERS_u8_TIMSK_REG,0);

	/* Enable CTC Interrupt */
	SET_BIT(TIMERS_u8_TIMSK_REG,1);
     cc2:	a9 e5       	ldi	r26, 0x59	; 89
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e9 e5       	ldi	r30, 0x59	; 89
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	82 60       	ori	r24, 0x02	; 2
     cce:	8c 93       	st	X, r24

	/* Set Compare Match Unit Register */
	TIMERS_u8_OCR0_REG = 99;
     cd0:	ec e5       	ldi	r30, 0x5C	; 92
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	83 e6       	ldi	r24, 0x63	; 99
     cd6:	80 83       	st	Z, r24

	/* Set Preload Value */
//	TIMERS_u8_TCNT0_REG = 192  ;

	/* Set Prescaler Value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
     cd8:	a3 e5       	ldi	r26, 0x53	; 83
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e3 e5       	ldi	r30, 0x53	; 83
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	8b 7f       	andi	r24, 0xFB	; 251
     ce4:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,1);
     ce6:	a3 e5       	ldi	r26, 0x53	; 83
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e3 e5       	ldi	r30, 0x53	; 83
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	8d 7f       	andi	r24, 0xFD	; 253
     cf2:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,0);
     cf4:	a3 e5       	ldi	r26, 0x53	; 83
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e3 e5       	ldi	r30, 0x53	; 83
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	8e 7f       	andi	r24, 0xFE	; 254
     d00:	8c 93       	st	X, r24
}
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	08 95       	ret

00000d08 <TIMERS_u8Timer0SetCallBack>:


u8 TIMERS_u8Timer0SetCallBack(void(*Copy_pf)(void))
{
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <TIMERS_u8Timer0SetCallBack+0x6>
     d0e:	0f 92       	push	r0
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	9b 83       	std	Y+3, r25	; 0x03
     d16:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	9b 81       	ldd	r25, Y+3	; 0x03
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	39 f0       	breq	.+14     	; 0xd32 <TIMERS_u8Timer0SetCallBack+0x2a>
	{
		TIMERS_pfTimer0OVF = Copy_pf;
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	9b 81       	ldd	r25, Y+3	; 0x03
     d28:	90 93 81 00 	sts	0x0081, r25
     d2c:	80 93 80 00 	sts	0x0080, r24
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <TIMERS_u8Timer0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     d32:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     d34:	89 81       	ldd	r24, Y+1	; 0x01
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <TIMERS_u8Timer0CTCSetCallBack>:


u8 TIMERS_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	00 d0       	rcall	.+0      	; 0xd48 <TIMERS_u8Timer0CTCSetCallBack+0x6>
     d48:	0f 92       	push	r0
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	9b 83       	std	Y+3, r25	; 0x03
     d50:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	9b 81       	ldd	r25, Y+3	; 0x03
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	39 f0       	breq	.+14     	; 0xd6c <TIMERS_u8Timer0CTCSetCallBack+0x2a>
	{
		TIMERS_pfTimer0CTC = Copy_pf;
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	9b 81       	ldd	r25, Y+3	; 0x03
     d62:	90 93 83 00 	sts	0x0083, r25
     d66:	80 93 82 00 	sts	0x0082, r24
     d6a:	01 c0       	rjmp	.+2      	; 0xd6e <TIMERS_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     d6c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <__vector_11>:


/* Prototype for ISR of TIMER0 OVF */
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
     d7c:	1f 92       	push	r1
     d7e:	0f 92       	push	r0
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	0f 92       	push	r0
     d84:	11 24       	eor	r1, r1
     d86:	2f 93       	push	r18
     d88:	3f 93       	push	r19
     d8a:	4f 93       	push	r20
     d8c:	5f 93       	push	r21
     d8e:	6f 93       	push	r22
     d90:	7f 93       	push	r23
     d92:	8f 93       	push	r24
     d94:	9f 93       	push	r25
     d96:	af 93       	push	r26
     d98:	bf 93       	push	r27
     d9a:	ef 93       	push	r30
     d9c:	ff 93       	push	r31
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
     da6:	80 91 84 00 	lds	r24, 0x0084
     daa:	90 91 85 00 	lds	r25, 0x0085
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	90 93 85 00 	sts	0x0085, r25
     db4:	80 93 84 00 	sts	0x0084, r24
	if(Local_u16CounterOVF == 3907)
     db8:	80 91 84 00 	lds	r24, 0x0084
     dbc:	90 91 85 00 	lds	r25, 0x0085
     dc0:	2f e0       	ldi	r18, 0x0F	; 15
     dc2:	83 34       	cpi	r24, 0x43	; 67
     dc4:	92 07       	cpc	r25, r18
     dc6:	99 f4       	brne	.+38     	; 0xdee <__vector_11+0x72>
	{
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
     dc8:	e2 e5       	ldi	r30, 0x52	; 82
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 ec       	ldi	r24, 0xC0	; 192
     dce:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
     dd0:	10 92 85 00 	sts	0x0085, r1
     dd4:	10 92 84 00 	sts	0x0084, r1
		/* Call App Function */
		if(TIMERS_pfTimer0OVF != NULL)
     dd8:	80 91 80 00 	lds	r24, 0x0080
     ddc:	90 91 81 00 	lds	r25, 0x0081
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	29 f0       	breq	.+10     	; 0xdee <__vector_11+0x72>
		{
			TIMERS_pfTimer0OVF();
     de4:	e0 91 80 00 	lds	r30, 0x0080
     de8:	f0 91 81 00 	lds	r31, 0x0081
     dec:	09 95       	icall
		}
	}
}
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	ff 91       	pop	r31
     df4:	ef 91       	pop	r30
     df6:	bf 91       	pop	r27
     df8:	af 91       	pop	r26
     dfa:	9f 91       	pop	r25
     dfc:	8f 91       	pop	r24
     dfe:	7f 91       	pop	r23
     e00:	6f 91       	pop	r22
     e02:	5f 91       	pop	r21
     e04:	4f 91       	pop	r20
     e06:	3f 91       	pop	r19
     e08:	2f 91       	pop	r18
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0
     e10:	1f 90       	pop	r1
     e12:	18 95       	reti

00000e14 <__vector_10>:


/* Prototype for ISR of TIMER0 CTC */
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
     e14:	1f 92       	push	r1
     e16:	0f 92       	push	r0
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	0f 92       	push	r0
     e1c:	11 24       	eor	r1, r1
     e1e:	2f 93       	push	r18
     e20:	3f 93       	push	r19
     e22:	4f 93       	push	r20
     e24:	5f 93       	push	r21
     e26:	6f 93       	push	r22
     e28:	7f 93       	push	r23
     e2a:	8f 93       	push	r24
     e2c:	9f 93       	push	r25
     e2e:	af 93       	push	r26
     e30:	bf 93       	push	r27
     e32:	ef 93       	push	r30
     e34:	ff 93       	push	r31
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
     e3e:	80 91 86 00 	lds	r24, 0x0086
     e42:	90 91 87 00 	lds	r25, 0x0087
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	90 93 87 00 	sts	0x0087, r25
     e4c:	80 93 86 00 	sts	0x0086, r24
	if(Local_u16CounterCTC == 10000)
     e50:	80 91 86 00 	lds	r24, 0x0086
     e54:	90 91 87 00 	lds	r25, 0x0087
     e58:	27 e2       	ldi	r18, 0x27	; 39
     e5a:	80 31       	cpi	r24, 0x10	; 16
     e5c:	92 07       	cpc	r25, r18
     e5e:	79 f4       	brne	.+30     	; 0xe7e <__vector_10+0x6a>
	{
		/* Clear Counter */
		Local_u16CounterCTC = 0;
     e60:	10 92 87 00 	sts	0x0087, r1
     e64:	10 92 86 00 	sts	0x0086, r1
		/* Call Back Function */
		if(TIMERS_pfTimer0CTC != NULL)
     e68:	80 91 82 00 	lds	r24, 0x0082
     e6c:	90 91 83 00 	lds	r25, 0x0083
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	29 f0       	breq	.+10     	; 0xe7e <__vector_10+0x6a>
		{
			TIMERS_pfTimer0CTC();
     e74:	e0 91 82 00 	lds	r30, 0x0082
     e78:	f0 91 83 00 	lds	r31, 0x0083
     e7c:	09 95       	icall
		}
	}
}
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	ff 91       	pop	r31
     e84:	ef 91       	pop	r30
     e86:	bf 91       	pop	r27
     e88:	af 91       	pop	r26
     e8a:	9f 91       	pop	r25
     e8c:	8f 91       	pop	r24
     e8e:	7f 91       	pop	r23
     e90:	6f 91       	pop	r22
     e92:	5f 91       	pop	r21
     e94:	4f 91       	pop	r20
     e96:	3f 91       	pop	r19
     e98:	2f 91       	pop	r18
     e9a:	0f 90       	pop	r0
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	0f 90       	pop	r0
     ea0:	1f 90       	pop	r1
     ea2:	18 95       	reti

00000ea4 <GI_voidGlobalEnable>:

#include "GI_interface.h"
#include "../DIO/DIO_interface.h"

/* Enable Global Interrupt Function */
void GI_voidGlobalEnable(void){
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
     eac:	af e5       	ldi	r26, 0x5F	; 95
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	ef e5       	ldi	r30, 0x5F	; 95
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	80 68       	ori	r24, 0x80	; 128
     eb8:	8c 93       	st	X, r24
}
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <GI_voidGlobalDisable>:

/* Disable Global Interrupt Function */
void GI_voidGlobalDisable(void){
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
     ec8:	af e5       	ldi	r26, 0x5F	; 95
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	ef e5       	ldi	r30, 0x5F	; 95
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8f 77       	andi	r24, 0x7F	; 127
     ed4:	8c 93       	st	X, r24
}
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <EXTI_u8Enable>:

/***************** NO ADDED MACORS TO REGISTERES YET *****************/

/* Enable EXTI Function */
u8    EXTI_u8Enable(u8 Copy_u8EXTIIndex,u8 Copy_u8EdgeIndex)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	2b 97       	sbiw	r28, 0x0b	; 11
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	8a 83       	std	Y+2, r24	; 0x02
     ef2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8EXTIIndex)
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3b 87       	std	Y+11, r19	; 0x0b
     f00:	2a 87       	std	Y+10, r18	; 0x0a
     f02:	8a 85       	ldd	r24, Y+10	; 0x0a
     f04:	9b 85       	ldd	r25, Y+11	; 0x0b
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	91 05       	cpc	r25, r1
     f0a:	09 f4       	brne	.+2      	; 0xf0e <EXTI_u8Enable+0x32>
     f0c:	85 c0       	rjmp	.+266    	; 0x1018 <EXTI_u8Enable+0x13c>
     f0e:	2a 85       	ldd	r18, Y+10	; 0x0a
     f10:	3b 85       	ldd	r19, Y+11	; 0x0b
     f12:	22 30       	cpi	r18, 0x02	; 2
     f14:	31 05       	cpc	r19, r1
     f16:	09 f4       	brne	.+2      	; 0xf1a <EXTI_u8Enable+0x3e>
     f18:	f9 c0       	rjmp	.+498    	; 0x110c <EXTI_u8Enable+0x230>
     f1a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f1c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	09 f0       	breq	.+2      	; 0xf24 <EXTI_u8Enable+0x48>
     f22:	23 c1       	rjmp	.+582    	; 0x116a <EXTI_u8Enable+0x28e>
	{
		case EXTI_u8_INT0:
			switch(Copy_u8EdgeIndex)
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	39 87       	std	Y+9, r19	; 0x09
     f2c:	28 87       	std	Y+8, r18	; 0x08
     f2e:	88 85       	ldd	r24, Y+8	; 0x08
     f30:	99 85       	ldd	r25, Y+9	; 0x09
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	91 05       	cpc	r25, r1
     f36:	61 f1       	breq	.+88     	; 0xf90 <EXTI_u8Enable+0xb4>
     f38:	28 85       	ldd	r18, Y+8	; 0x08
     f3a:	39 85       	ldd	r19, Y+9	; 0x09
     f3c:	22 30       	cpi	r18, 0x02	; 2
     f3e:	31 05       	cpc	r19, r1
     f40:	2c f4       	brge	.+10     	; 0xf4c <EXTI_u8Enable+0x70>
     f42:	88 85       	ldd	r24, Y+8	; 0x08
     f44:	99 85       	ldd	r25, Y+9	; 0x09
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	69 f0       	breq	.+26     	; 0xf64 <EXTI_u8Enable+0x88>
     f4a:	64 c0       	rjmp	.+200    	; 0x1014 <EXTI_u8Enable+0x138>
     f4c:	28 85       	ldd	r18, Y+8	; 0x08
     f4e:	39 85       	ldd	r19, Y+9	; 0x09
     f50:	22 30       	cpi	r18, 0x02	; 2
     f52:	31 05       	cpc	r19, r1
     f54:	99 f1       	breq	.+102    	; 0xfbc <EXTI_u8Enable+0xe0>
     f56:	88 85       	ldd	r24, Y+8	; 0x08
     f58:	99 85       	ldd	r25, Y+9	; 0x09
     f5a:	83 30       	cpi	r24, 0x03	; 3
     f5c:	91 05       	cpc	r25, r1
     f5e:	09 f4       	brne	.+2      	; 0xf62 <EXTI_u8Enable+0x86>
     f60:	43 c0       	rjmp	.+134    	; 0xfe8 <EXTI_u8Enable+0x10c>
     f62:	58 c0       	rjmp	.+176    	; 0x1014 <EXTI_u8Enable+0x138>
			{
				case EXTI_u8_RAISING_EDGE:
					SET_BIT(EXTI_u8_MCUCR,1);
     f64:	a5 e5       	ldi	r26, 0x55	; 85
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e5 e5       	ldi	r30, 0x55	; 85
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	82 60       	ori	r24, 0x02	; 2
     f70:	8c 93       	st	X, r24
					SET_BIT(EXTI_u8_MCUCR,0);
     f72:	a5 e5       	ldi	r26, 0x55	; 85
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e5 e5       	ldi	r30, 0x55	; 85
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	81 60       	ori	r24, 0x01	; 1
     f7e:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
     f80:	ab e5       	ldi	r26, 0x5B	; 91
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	eb e5       	ldi	r30, 0x5B	; 91
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	80 64       	ori	r24, 0x40	; 64
     f8c:	8c 93       	st	X, r24
     f8e:	ee c0       	rjmp	.+476    	; 0x116c <EXTI_u8Enable+0x290>
					break;

				case EXTI_u8_FALLING_EDGE:
					SET_BIT(EXTI_u8_MCUCR,1);
     f90:	a5 e5       	ldi	r26, 0x55	; 85
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e5 e5       	ldi	r30, 0x55	; 85
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	82 60       	ori	r24, 0x02	; 2
     f9c:	8c 93       	st	X, r24
					CLR_BIT(EXTI_u8_MCUCR,0);
     f9e:	a5 e5       	ldi	r26, 0x55	; 85
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e5 e5       	ldi	r30, 0x55	; 85
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	8e 7f       	andi	r24, 0xFE	; 254
     faa:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
     fac:	ab e5       	ldi	r26, 0x5B	; 91
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	eb e5       	ldi	r30, 0x5B	; 91
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	80 64       	ori	r24, 0x40	; 64
     fb8:	8c 93       	st	X, r24
     fba:	d8 c0       	rjmp	.+432    	; 0x116c <EXTI_u8Enable+0x290>
					break;

				case EXTI_u8_ANY_LOGICAL_CHANGE:
					CLR_BIT(EXTI_u8_MCUCR,1);
     fbc:	a5 e5       	ldi	r26, 0x55	; 85
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e5 e5       	ldi	r30, 0x55	; 85
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8d 7f       	andi	r24, 0xFD	; 253
     fc8:	8c 93       	st	X, r24
					SET_BIT(EXTI_u8_MCUCR,0);
     fca:	a5 e5       	ldi	r26, 0x55	; 85
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e5 e5       	ldi	r30, 0x55	; 85
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	81 60       	ori	r24, 0x01	; 1
     fd6:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
     fd8:	ab e5       	ldi	r26, 0x5B	; 91
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	eb e5       	ldi	r30, 0x5B	; 91
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	80 64       	ori	r24, 0x40	; 64
     fe4:	8c 93       	st	X, r24
     fe6:	c2 c0       	rjmp	.+388    	; 0x116c <EXTI_u8Enable+0x290>
					break;

				case EXTI_u8_LOW_LEVEL:
					CLR_BIT(EXTI_u8_MCUCR,1);
     fe8:	a5 e5       	ldi	r26, 0x55	; 85
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e5 e5       	ldi	r30, 0x55	; 85
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	8d 7f       	andi	r24, 0xFD	; 253
     ff4:	8c 93       	st	X, r24
					CLR_BIT(EXTI_u8_MCUCR,0);
     ff6:	a5 e5       	ldi	r26, 0x55	; 85
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e5 e5       	ldi	r30, 0x55	; 85
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	8e 7f       	andi	r24, 0xFE	; 254
    1002:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    1004:	ab e5       	ldi	r26, 0x5B	; 91
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	eb e5       	ldi	r30, 0x5B	; 91
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 64       	ori	r24, 0x40	; 64
    1010:	8c 93       	st	X, r24
    1012:	ac c0       	rjmp	.+344    	; 0x116c <EXTI_u8Enable+0x290>
					break;
				default : Local_u8ErrorState = STD_TYPES_NOK;
    1014:	19 82       	std	Y+1, r1	; 0x01
    1016:	aa c0       	rjmp	.+340    	; 0x116c <EXTI_u8Enable+0x290>
			}
		break;

			case EXTI_u8_INT1:
				switch(Copy_u8EdgeIndex)
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3f 83       	std	Y+7, r19	; 0x07
    1020:	2e 83       	std	Y+6, r18	; 0x06
    1022:	8e 81       	ldd	r24, Y+6	; 0x06
    1024:	9f 81       	ldd	r25, Y+7	; 0x07
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	91 05       	cpc	r25, r1
    102a:	61 f1       	breq	.+88     	; 0x1084 <EXTI_u8Enable+0x1a8>
    102c:	2e 81       	ldd	r18, Y+6	; 0x06
    102e:	3f 81       	ldd	r19, Y+7	; 0x07
    1030:	22 30       	cpi	r18, 0x02	; 2
    1032:	31 05       	cpc	r19, r1
    1034:	2c f4       	brge	.+10     	; 0x1040 <EXTI_u8Enable+0x164>
    1036:	8e 81       	ldd	r24, Y+6	; 0x06
    1038:	9f 81       	ldd	r25, Y+7	; 0x07
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	69 f0       	breq	.+26     	; 0x1058 <EXTI_u8Enable+0x17c>
    103e:	64 c0       	rjmp	.+200    	; 0x1108 <EXTI_u8Enable+0x22c>
    1040:	2e 81       	ldd	r18, Y+6	; 0x06
    1042:	3f 81       	ldd	r19, Y+7	; 0x07
    1044:	22 30       	cpi	r18, 0x02	; 2
    1046:	31 05       	cpc	r19, r1
    1048:	99 f1       	breq	.+102    	; 0x10b0 <EXTI_u8Enable+0x1d4>
    104a:	8e 81       	ldd	r24, Y+6	; 0x06
    104c:	9f 81       	ldd	r25, Y+7	; 0x07
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	91 05       	cpc	r25, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <EXTI_u8Enable+0x17a>
    1054:	43 c0       	rjmp	.+134    	; 0x10dc <EXTI_u8Enable+0x200>
    1056:	58 c0       	rjmp	.+176    	; 0x1108 <EXTI_u8Enable+0x22c>
				{
					case EXTI_u8_RAISING_EDGE:
						SET_BIT(EXTI_u8_MCUCR,3);
    1058:	a5 e5       	ldi	r26, 0x55	; 85
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e5 e5       	ldi	r30, 0x55	; 85
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	88 60       	ori	r24, 0x08	; 8
    1064:	8c 93       	st	X, r24
						SET_BIT(EXTI_u8_MCUCR,2);
    1066:	a5 e5       	ldi	r26, 0x55	; 85
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e5 e5       	ldi	r30, 0x55	; 85
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	84 60       	ori	r24, 0x04	; 4
    1072:	8c 93       	st	X, r24
						/* Enable EXTI0 */
						SET_BIT(EXTI_u8_GICR,7);
    1074:	ab e5       	ldi	r26, 0x5B	; 91
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	eb e5       	ldi	r30, 0x5B	; 91
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	80 68       	ori	r24, 0x80	; 128
    1080:	8c 93       	st	X, r24
    1082:	74 c0       	rjmp	.+232    	; 0x116c <EXTI_u8Enable+0x290>
						break;

					case EXTI_u8_FALLING_EDGE:
						SET_BIT(EXTI_u8_MCUCR,3);
    1084:	a5 e5       	ldi	r26, 0x55	; 85
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e5 e5       	ldi	r30, 0x55	; 85
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	88 60       	ori	r24, 0x08	; 8
    1090:	8c 93       	st	X, r24
						CLR_BIT(EXTI_u8_MCUCR,2);
    1092:	a5 e5       	ldi	r26, 0x55	; 85
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e5 e5       	ldi	r30, 0x55	; 85
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8b 7f       	andi	r24, 0xFB	; 251
    109e:	8c 93       	st	X, r24
						/* Enable EXTI0 */
						SET_BIT(EXTI_u8_GICR,7);
    10a0:	ab e5       	ldi	r26, 0x5B	; 91
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	eb e5       	ldi	r30, 0x5B	; 91
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 68       	ori	r24, 0x80	; 128
    10ac:	8c 93       	st	X, r24
    10ae:	5e c0       	rjmp	.+188    	; 0x116c <EXTI_u8Enable+0x290>
						break;

					case EXTI_u8_ANY_LOGICAL_CHANGE:
						CLR_BIT(EXTI_u8_MCUCR,3);
    10b0:	a5 e5       	ldi	r26, 0x55	; 85
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e5 e5       	ldi	r30, 0x55	; 85
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	87 7f       	andi	r24, 0xF7	; 247
    10bc:	8c 93       	st	X, r24
						SET_BIT(EXTI_u8_MCUCR,2);
    10be:	a5 e5       	ldi	r26, 0x55	; 85
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e5 e5       	ldi	r30, 0x55	; 85
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	84 60       	ori	r24, 0x04	; 4
    10ca:	8c 93       	st	X, r24
						/* Enable EXTI0 */
						SET_BIT(EXTI_u8_GICR,7);
    10cc:	ab e5       	ldi	r26, 0x5B	; 91
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	eb e5       	ldi	r30, 0x5B	; 91
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	80 68       	ori	r24, 0x80	; 128
    10d8:	8c 93       	st	X, r24
    10da:	48 c0       	rjmp	.+144    	; 0x116c <EXTI_u8Enable+0x290>
						break;

					case EXTI_u8_LOW_LEVEL:
						CLR_BIT(EXTI_u8_MCUCR,3);
    10dc:	a5 e5       	ldi	r26, 0x55	; 85
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e5 e5       	ldi	r30, 0x55	; 85
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	87 7f       	andi	r24, 0xF7	; 247
    10e8:	8c 93       	st	X, r24
						CLR_BIT(EXTI_u8_MCUCR,2);
    10ea:	a5 e5       	ldi	r26, 0x55	; 85
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e5 e5       	ldi	r30, 0x55	; 85
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	8b 7f       	andi	r24, 0xFB	; 251
    10f6:	8c 93       	st	X, r24
						/* Enable EXTI0 */
						SET_BIT(EXTI_u8_GICR,7);
    10f8:	ab e5       	ldi	r26, 0x5B	; 91
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	eb e5       	ldi	r30, 0x5B	; 91
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	80 68       	ori	r24, 0x80	; 128
    1104:	8c 93       	st	X, r24
    1106:	32 c0       	rjmp	.+100    	; 0x116c <EXTI_u8Enable+0x290>
						break;
					default : Local_u8ErrorState = STD_TYPES_NOK;
    1108:	19 82       	std	Y+1, r1	; 0x01
    110a:	30 c0       	rjmp	.+96     	; 0x116c <EXTI_u8Enable+0x290>
				}
			break;

				case EXTI_u8_INT2:
					switch(Copy_u8EdgeIndex)
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	3d 83       	std	Y+5, r19	; 0x05
    1114:	2c 83       	std	Y+4, r18	; 0x04
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	9d 81       	ldd	r25, Y+5	; 0x05
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	31 f0       	breq	.+12     	; 0x112a <EXTI_u8Enable+0x24e>
    111e:	2c 81       	ldd	r18, Y+4	; 0x04
    1120:	3d 81       	ldd	r19, Y+5	; 0x05
    1122:	21 30       	cpi	r18, 0x01	; 1
    1124:	31 05       	cpc	r19, r1
    1126:	81 f0       	breq	.+32     	; 0x1148 <EXTI_u8Enable+0x26c>
    1128:	1e c0       	rjmp	.+60     	; 0x1166 <EXTI_u8Enable+0x28a>
					{
						case EXTI_u8_RAISING_EDGE:
							SET_BIT(EXTI_u8_MCUCR,6);
    112a:	a5 e5       	ldi	r26, 0x55	; 85
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e5 e5       	ldi	r30, 0x55	; 85
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	80 64       	ori	r24, 0x40	; 64
    1136:	8c 93       	st	X, r24
							/* Enable EXTI0 */
							SET_BIT(EXTI_u8_GICR,5);
    1138:	ab e5       	ldi	r26, 0x5B	; 91
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	eb e5       	ldi	r30, 0x5B	; 91
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	80 62       	ori	r24, 0x20	; 32
    1144:	8c 93       	st	X, r24
    1146:	12 c0       	rjmp	.+36     	; 0x116c <EXTI_u8Enable+0x290>
							break;

						case EXTI_u8_FALLING_EDGE:
							SET_BIT(EXTI_u8_MCUCR,6);
    1148:	a5 e5       	ldi	r26, 0x55	; 85
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e5 e5       	ldi	r30, 0x55	; 85
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	80 64       	ori	r24, 0x40	; 64
    1154:	8c 93       	st	X, r24
							/* Enable EXTI0 */
							SET_BIT(EXTI_u8_GICR,5);
    1156:	ab e5       	ldi	r26, 0x5B	; 91
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	eb e5       	ldi	r30, 0x5B	; 91
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 62       	ori	r24, 0x20	; 32
    1162:	8c 93       	st	X, r24
    1164:	03 c0       	rjmp	.+6      	; 0x116c <EXTI_u8Enable+0x290>
							break;

						default : Local_u8ErrorState = STD_TYPES_NOK;
    1166:	19 82       	std	Y+1, r1	; 0x01
    1168:	01 c0       	rjmp	.+2      	; 0x116c <EXTI_u8Enable+0x290>
					}
				break;
				default : Local_u8ErrorState = STD_TYPES_NOK;
    116a:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    116c:	89 81       	ldd	r24, Y+1	; 0x01
}
    116e:	2b 96       	adiw	r28, 0x0b	; 11
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <EXTI_u8EXTIDisable>:



u8    EXTI_u8EXTIDisable(u8 Copy_u8EXTIIndex){
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	00 d0       	rcall	.+0      	; 0x1186 <EXTI_u8EXTIDisable+0x6>
    1186:	00 d0       	rcall	.+0      	; 0x1188 <EXTI_u8EXTIDisable+0x8>
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8EXTIIndex)
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3c 83       	std	Y+4, r19	; 0x04
    119a:	2b 83       	std	Y+3, r18	; 0x03
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	91 05       	cpc	r25, r1
    11a4:	89 f0       	breq	.+34     	; 0x11c8 <EXTI_u8EXTIDisable+0x48>
    11a6:	2b 81       	ldd	r18, Y+3	; 0x03
    11a8:	3c 81       	ldd	r19, Y+4	; 0x04
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	a1 f0       	breq	.+40     	; 0x11d8 <EXTI_u8EXTIDisable+0x58>
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	c1 f4       	brne	.+48     	; 0x11e8 <EXTI_u8EXTIDisable+0x68>
	{
		case EXTI_u8_INT0 :
			/* Disable EXTI0 */
			CLR_BIT(EXTI_u8_GICR,6);
    11b8:	ab e5       	ldi	r26, 0x5B	; 91
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	eb e5       	ldi	r30, 0x5B	; 91
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	8f 7b       	andi	r24, 0xBF	; 191
    11c4:	8c 93       	st	X, r24
    11c6:	11 c0       	rjmp	.+34     	; 0x11ea <EXTI_u8EXTIDisable+0x6a>
			break;

		case EXTI_u8_INT1 :
			/* Disable EXTI1 */
			CLR_BIT(EXTI_u8_GICR,7);
    11c8:	ab e5       	ldi	r26, 0x5B	; 91
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	eb e5       	ldi	r30, 0x5B	; 91
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8f 77       	andi	r24, 0x7F	; 127
    11d4:	8c 93       	st	X, r24
    11d6:	09 c0       	rjmp	.+18     	; 0x11ea <EXTI_u8EXTIDisable+0x6a>
			break;

		case EXTI_u8_INT2 :
			/* Disable EXTI2 */
			CLR_BIT(EXTI_u8_GICR,5);
    11d8:	ab e5       	ldi	r26, 0x5B	; 91
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	eb e5       	ldi	r30, 0x5B	; 91
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	8f 7d       	andi	r24, 0xDF	; 223
    11e4:	8c 93       	st	X, r24
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <EXTI_u8EXTIDisable+0x6a>
			break;
		default : Local_u8ErrorState = STD_TYPES_NOK;
    11e8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <EXTI_u8EXTISetCallBack>:


u8    EXTI_u8EXTISetCallBack(u8 Copy_u8EXTIIndex, void(*Copy_pf)(void)){
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <EXTI_u8EXTISetCallBack+0x6>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <EXTI_u8EXTISetCallBack+0x8>
    1202:	0f 92       	push	r0
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	8a 83       	std	Y+2, r24	; 0x02
    120a:	7c 83       	std	Y+4, r23	; 0x04
    120c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8EXTIIndex <= EXTI_u8_INT2) && (Copy_pf != NULL)){
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	88 f4       	brcc	.+34     	; 0x123a <EXTI_u8EXTISetCallBack+0x40>
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	69 f0       	breq	.+26     	; 0x123a <EXTI_u8EXTISetCallBack+0x40>
		EXTI_ApfEXTI[Copy_u8EXTIIndex] = Copy_pf;
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	88 2f       	mov	r24, r24
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	fc 01       	movw	r30, r24
    122c:	e8 57       	subi	r30, 0x78	; 120
    122e:	ff 4f       	sbci	r31, 0xFF	; 255
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24
    1238:	01 c0       	rjmp	.+2      	; 0x123c <EXTI_u8EXTISetCallBack+0x42>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    123a:	19 82       	std	Y+1, r1	; 0x01
	}
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <__vector_1>:


/* Prototype for ISR of EXTI0 */
void __vector_1(void)    __attribute__((signal)); // to avoid optimizer changes
void __vector_1(void)
{
    124c:	1f 92       	push	r1
    124e:	0f 92       	push	r0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	0f 92       	push	r0
    1254:	11 24       	eor	r1, r1
    1256:	2f 93       	push	r18
    1258:	3f 93       	push	r19
    125a:	4f 93       	push	r20
    125c:	5f 93       	push	r21
    125e:	6f 93       	push	r22
    1260:	7f 93       	push	r23
    1262:	8f 93       	push	r24
    1264:	9f 93       	push	r25
    1266:	af 93       	push	r26
    1268:	bf 93       	push	r27
    126a:	ef 93       	push	r30
    126c:	ff 93       	push	r31
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT0] != NULL)
    1276:	80 91 88 00 	lds	r24, 0x0088
    127a:	90 91 89 00 	lds	r25, 0x0089
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	29 f0       	breq	.+10     	; 0x128c <__vector_1+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INT0]();
    1282:	e0 91 88 00 	lds	r30, 0x0088
    1286:	f0 91 89 00 	lds	r31, 0x0089
    128a:	09 95       	icall
	}

}
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	ff 91       	pop	r31
    1292:	ef 91       	pop	r30
    1294:	bf 91       	pop	r27
    1296:	af 91       	pop	r26
    1298:	9f 91       	pop	r25
    129a:	8f 91       	pop	r24
    129c:	7f 91       	pop	r23
    129e:	6f 91       	pop	r22
    12a0:	5f 91       	pop	r21
    12a2:	4f 91       	pop	r20
    12a4:	3f 91       	pop	r19
    12a6:	2f 91       	pop	r18
    12a8:	0f 90       	pop	r0
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	0f 90       	pop	r0
    12ae:	1f 90       	pop	r1
    12b0:	18 95       	reti

000012b2 <__vector_2>:

/* Prototype for ISR of EXTI2 */
void __vector_2(void)    __attribute__((signal)); // to avoid optimizer changes
void __vector_2(void)
{
    12b2:	1f 92       	push	r1
    12b4:	0f 92       	push	r0
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	0f 92       	push	r0
    12ba:	11 24       	eor	r1, r1
    12bc:	2f 93       	push	r18
    12be:	3f 93       	push	r19
    12c0:	4f 93       	push	r20
    12c2:	5f 93       	push	r21
    12c4:	6f 93       	push	r22
    12c6:	7f 93       	push	r23
    12c8:	8f 93       	push	r24
    12ca:	9f 93       	push	r25
    12cc:	af 93       	push	r26
    12ce:	bf 93       	push	r27
    12d0:	ef 93       	push	r30
    12d2:	ff 93       	push	r31
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT1] != NULL)
    12dc:	80 91 8a 00 	lds	r24, 0x008A
    12e0:	90 91 8b 00 	lds	r25, 0x008B
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	29 f0       	breq	.+10     	; 0x12f2 <__vector_2+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INT1]();
    12e8:	e0 91 8a 00 	lds	r30, 0x008A
    12ec:	f0 91 8b 00 	lds	r31, 0x008B
    12f0:	09 95       	icall
	}
}
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	bf 91       	pop	r27
    12fc:	af 91       	pop	r26
    12fe:	9f 91       	pop	r25
    1300:	8f 91       	pop	r24
    1302:	7f 91       	pop	r23
    1304:	6f 91       	pop	r22
    1306:	5f 91       	pop	r21
    1308:	4f 91       	pop	r20
    130a:	3f 91       	pop	r19
    130c:	2f 91       	pop	r18
    130e:	0f 90       	pop	r0
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	0f 90       	pop	r0
    1314:	1f 90       	pop	r1
    1316:	18 95       	reti

00001318 <__vector_3>:

/* Prototype for ISR of EXTI3 */
void __vector_3(void)    __attribute__((signal)); // to avoid optimizer changes
void __vector_3(void)
{
    1318:	1f 92       	push	r1
    131a:	0f 92       	push	r0
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	0f 92       	push	r0
    1320:	11 24       	eor	r1, r1
    1322:	2f 93       	push	r18
    1324:	3f 93       	push	r19
    1326:	4f 93       	push	r20
    1328:	5f 93       	push	r21
    132a:	6f 93       	push	r22
    132c:	7f 93       	push	r23
    132e:	8f 93       	push	r24
    1330:	9f 93       	push	r25
    1332:	af 93       	push	r26
    1334:	bf 93       	push	r27
    1336:	ef 93       	push	r30
    1338:	ff 93       	push	r31
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT2] != NULL)
    1342:	80 91 8c 00 	lds	r24, 0x008C
    1346:	90 91 8d 00 	lds	r25, 0x008D
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	29 f0       	breq	.+10     	; 0x1358 <__vector_3+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INT2]();
    134e:	e0 91 8c 00 	lds	r30, 0x008C
    1352:	f0 91 8d 00 	lds	r31, 0x008D
    1356:	09 95       	icall
	}
}
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	ff 91       	pop	r31
    135e:	ef 91       	pop	r30
    1360:	bf 91       	pop	r27
    1362:	af 91       	pop	r26
    1364:	9f 91       	pop	r25
    1366:	8f 91       	pop	r24
    1368:	7f 91       	pop	r23
    136a:	6f 91       	pop	r22
    136c:	5f 91       	pop	r21
    136e:	4f 91       	pop	r20
    1370:	3f 91       	pop	r19
    1372:	2f 91       	pop	r18
    1374:	0f 90       	pop	r0
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	0f 90       	pop	r0
    137a:	1f 90       	pop	r1
    137c:	18 95       	reti

0000137e <DIO_voidInit>:
#include "DIO_config.h"



void DIO_voidInit(void)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    1386:	ea e3       	ldi	r30, 0x3A	; 58
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	8f e7       	ldi	r24, 0x7F	; 127
    138c:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    138e:	e7 e3       	ldi	r30, 0x37	; 55
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 ef       	ldi	r24, 0xF0	; 240
    1394:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    1396:	e4 e3       	ldi	r30, 0x34	; 52
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	80 83       	st	Z, r24

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    139e:	e1 e3       	ldi	r30, 0x31	; 49
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	8b e0       	ldi	r24, 0x0B	; 11
    13a4:	80 83       	st	Z, r24
	/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA0_INITIAL_VALUE);
    13a6:	eb e3       	ldi	r30, 0x3B	; 59
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	88 e7       	ldi	r24, 0x78	; 120
    13ac:	80 83       	st	Z, r24

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB0_INITIAL_VALUE);
    13ae:	e8 e3       	ldi	r30, 0x38	; 56
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
    13b4:	80 83       	st	Z, r24

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC0_INITIAL_VALUE);
    13b6:	e5 e3       	ldi	r30, 0x35	; 53
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD0_INITIAL_VALUE);
    13bc:	e2 e3       	ldi	r30, 0x32	; 50
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	84 e0       	ldi	r24, 0x04	; 4
    13c2:	80 83       	st	Z, r24

}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <DIO_u8SetPinDirection>:




u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	2e 97       	sbiw	r28, 0x0e	; 14
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	8a 83       	std	Y+2, r24	; 0x02
    13e0:	6b 83       	std	Y+3, r22	; 0x03
    13e2:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	84 30       	cpi	r24, 0x04	; 4
    13ec:	08 f0       	brcs	.+2      	; 0x13f0 <DIO_u8SetPinDirection+0x26>
    13ee:	0d c1       	rjmp	.+538    	; 0x160a <DIO_u8SetPinDirection+0x240>
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	88 30       	cpi	r24, 0x08	; 8
    13f4:	08 f0       	brcs	.+2      	; 0x13f8 <DIO_u8SetPinDirection+0x2e>
    13f6:	09 c1       	rjmp	.+530    	; 0x160a <DIO_u8SetPinDirection+0x240>
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	88 23       	and	r24, r24
    13fc:	21 f0       	breq	.+8      	; 0x1406 <DIO_u8SetPinDirection+0x3c>
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	09 f0       	breq	.+2      	; 0x1406 <DIO_u8SetPinDirection+0x3c>
    1404:	02 c1       	rjmp	.+516    	; 0x160a <DIO_u8SetPinDirection+0x240>
	{

		switch (Copy_u8PortId)
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	3e 87       	std	Y+14, r19	; 0x0e
    140e:	2d 87       	std	Y+13, r18	; 0x0d
    1410:	8d 85       	ldd	r24, Y+13	; 0x0d
    1412:	9e 85       	ldd	r25, Y+14	; 0x0e
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	91 05       	cpc	r25, r1
    1418:	09 f4       	brne	.+2      	; 0x141c <DIO_u8SetPinDirection+0x52>
    141a:	4f c0       	rjmp	.+158    	; 0x14ba <DIO_u8SetPinDirection+0xf0>
    141c:	2d 85       	ldd	r18, Y+13	; 0x0d
    141e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1420:	22 30       	cpi	r18, 0x02	; 2
    1422:	31 05       	cpc	r19, r1
    1424:	2c f4       	brge	.+10     	; 0x1430 <DIO_u8SetPinDirection+0x66>
    1426:	8d 85       	ldd	r24, Y+13	; 0x0d
    1428:	9e 85       	ldd	r25, Y+14	; 0x0e
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	71 f0       	breq	.+28     	; 0x144a <DIO_u8SetPinDirection+0x80>
    142e:	ee c0       	rjmp	.+476    	; 0x160c <DIO_u8SetPinDirection+0x242>
    1430:	2d 85       	ldd	r18, Y+13	; 0x0d
    1432:	3e 85       	ldd	r19, Y+14	; 0x0e
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	09 f4       	brne	.+2      	; 0x143c <DIO_u8SetPinDirection+0x72>
    143a:	77 c0       	rjmp	.+238    	; 0x152a <DIO_u8SetPinDirection+0x160>
    143c:	8d 85       	ldd	r24, Y+13	; 0x0d
    143e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1440:	83 30       	cpi	r24, 0x03	; 3
    1442:	91 05       	cpc	r25, r1
    1444:	09 f4       	brne	.+2      	; 0x1448 <DIO_u8SetPinDirection+0x7e>
    1446:	a9 c0       	rjmp	.+338    	; 0x159a <DIO_u8SetPinDirection+0x1d0>
    1448:	e1 c0       	rjmp	.+450    	; 0x160c <DIO_u8SetPinDirection+0x242>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	3c 87       	std	Y+12, r19	; 0x0c
    1452:	2b 87       	std	Y+11, r18	; 0x0b
    1454:	8b 85       	ldd	r24, Y+11	; 0x0b
    1456:	9c 85       	ldd	r25, Y+12	; 0x0c
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	31 f0       	breq	.+12     	; 0x1468 <DIO_u8SetPinDirection+0x9e>
    145c:	2b 85       	ldd	r18, Y+11	; 0x0b
    145e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1460:	21 30       	cpi	r18, 0x01	; 1
    1462:	31 05       	cpc	r19, r1
    1464:	a9 f0       	breq	.+42     	; 0x1490 <DIO_u8SetPinDirection+0xc6>
    1466:	d2 c0       	rjmp	.+420    	; 0x160c <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1468:	aa e3       	ldi	r26, 0x3A	; 58
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ea e3       	ldi	r30, 0x3A	; 58
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_u8SetPinDirection+0xbc>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_u8SetPinDirection+0xb8>
    148a:	84 2b       	or	r24, r20
    148c:	8c 93       	st	X, r24
    148e:	be c0       	rjmp	.+380    	; 0x160c <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1490:	aa e3       	ldi	r26, 0x3A	; 58
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ea e3       	ldi	r30, 0x3A	; 58
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_u8SetPinDirection+0xe4>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <DIO_u8SetPinDirection+0xe0>
    14b2:	80 95       	com	r24
    14b4:	84 23       	and	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	a9 c0       	rjmp	.+338    	; 0x160c <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	3a 87       	std	Y+10, r19	; 0x0a
    14c2:	29 87       	std	Y+9, r18	; 0x09
    14c4:	89 85       	ldd	r24, Y+9	; 0x09
    14c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	31 f0       	breq	.+12     	; 0x14d8 <DIO_u8SetPinDirection+0x10e>
    14cc:	29 85       	ldd	r18, Y+9	; 0x09
    14ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    14d0:	21 30       	cpi	r18, 0x01	; 1
    14d2:	31 05       	cpc	r19, r1
    14d4:	a9 f0       	breq	.+42     	; 0x1500 <DIO_u8SetPinDirection+0x136>
    14d6:	9a c0       	rjmp	.+308    	; 0x160c <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    14d8:	a7 e3       	ldi	r26, 0x37	; 55
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e7 e3       	ldi	r30, 0x37	; 55
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_u8SetPinDirection+0x12c>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_u8SetPinDirection+0x128>
    14fa:	84 2b       	or	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	86 c0       	rjmp	.+268    	; 0x160c <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1500:	a7 e3       	ldi	r26, 0x37	; 55
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e7 e3       	ldi	r30, 0x37	; 55
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	48 2f       	mov	r20, r24
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	02 2e       	mov	r0, r18
    1518:	02 c0       	rjmp	.+4      	; 0x151e <DIO_u8SetPinDirection+0x154>
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	0a 94       	dec	r0
    1520:	e2 f7       	brpl	.-8      	; 0x151a <DIO_u8SetPinDirection+0x150>
    1522:	80 95       	com	r24
    1524:	84 23       	and	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	71 c0       	rjmp	.+226    	; 0x160c <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    152a:	8c 81       	ldd	r24, Y+4	; 0x04
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	38 87       	std	Y+8, r19	; 0x08
    1532:	2f 83       	std	Y+7, r18	; 0x07
    1534:	8f 81       	ldd	r24, Y+7	; 0x07
    1536:	98 85       	ldd	r25, Y+8	; 0x08
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	31 f0       	breq	.+12     	; 0x1548 <DIO_u8SetPinDirection+0x17e>
    153c:	2f 81       	ldd	r18, Y+7	; 0x07
    153e:	38 85       	ldd	r19, Y+8	; 0x08
    1540:	21 30       	cpi	r18, 0x01	; 1
    1542:	31 05       	cpc	r19, r1
    1544:	a9 f0       	breq	.+42     	; 0x1570 <DIO_u8SetPinDirection+0x1a6>
    1546:	62 c0       	rjmp	.+196    	; 0x160c <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1548:	a4 e3       	ldi	r26, 0x34	; 52
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e4 e3       	ldi	r30, 0x34	; 52
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_u8SetPinDirection+0x19c>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_u8SetPinDirection+0x198>
    156a:	84 2b       	or	r24, r20
    156c:	8c 93       	st	X, r24
    156e:	4e c0       	rjmp	.+156    	; 0x160c <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1570:	a4 e3       	ldi	r26, 0x34	; 52
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e4 e3       	ldi	r30, 0x34	; 52
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 2e       	mov	r0, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_u8SetPinDirection+0x1c4>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <DIO_u8SetPinDirection+0x1c0>
    1592:	80 95       	com	r24
    1594:	84 23       	and	r24, r20
    1596:	8c 93       	st	X, r24
    1598:	39 c0       	rjmp	.+114    	; 0x160c <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	3e 83       	std	Y+6, r19	; 0x06
    15a2:	2d 83       	std	Y+5, r18	; 0x05
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	31 f0       	breq	.+12     	; 0x15b8 <DIO_u8SetPinDirection+0x1ee>
    15ac:	2d 81       	ldd	r18, Y+5	; 0x05
    15ae:	3e 81       	ldd	r19, Y+6	; 0x06
    15b0:	21 30       	cpi	r18, 0x01	; 1
    15b2:	31 05       	cpc	r19, r1
    15b4:	a9 f0       	breq	.+42     	; 0x15e0 <DIO_u8SetPinDirection+0x216>
    15b6:	2a c0       	rjmp	.+84     	; 0x160c <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    15b8:	a1 e3       	ldi	r26, 0x31	; 49
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e1 e3       	ldi	r30, 0x31	; 49
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_u8SetPinDirection+0x20c>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_u8SetPinDirection+0x208>
    15da:	84 2b       	or	r24, r20
    15dc:	8c 93       	st	X, r24
    15de:	16 c0       	rjmp	.+44     	; 0x160c <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    15e0:	a1 e3       	ldi	r26, 0x31	; 49
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e1 e3       	ldi	r30, 0x31	; 49
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 2e       	mov	r0, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <DIO_u8SetPinDirection+0x234>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <DIO_u8SetPinDirection+0x230>
    1602:	80 95       	com	r24
    1604:	84 23       	and	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	01 c0       	rjmp	.+2      	; 0x160c <DIO_u8SetPinDirection+0x242>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    160a:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    160c:	89 81       	ldd	r24, Y+1	; 0x01
}
    160e:	2e 96       	adiw	r28, 0x0e	; 14
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	2e 97       	sbiw	r28, 0x0e	; 14
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	8a 83       	std	Y+2, r24	; 0x02
    1636:	6b 83       	std	Y+3, r22	; 0x03
    1638:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	84 30       	cpi	r24, 0x04	; 4
    1642:	08 f0       	brcs	.+2      	; 0x1646 <DIO_u8SetPinValue+0x26>
    1644:	13 c1       	rjmp	.+550    	; 0x186c <DIO_u8SetPinValue+0x24c>
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	88 30       	cpi	r24, 0x08	; 8
    164a:	08 f0       	brcs	.+2      	; 0x164e <DIO_u8SetPinValue+0x2e>
    164c:	0f c1       	rjmp	.+542    	; 0x186c <DIO_u8SetPinValue+0x24c>
    164e:	8c 81       	ldd	r24, Y+4	; 0x04
    1650:	88 23       	and	r24, r24
    1652:	21 f0       	breq	.+8      	; 0x165c <DIO_u8SetPinValue+0x3c>
    1654:	8c 81       	ldd	r24, Y+4	; 0x04
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	09 f0       	breq	.+2      	; 0x165c <DIO_u8SetPinValue+0x3c>
    165a:	08 c1       	rjmp	.+528    	; 0x186c <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	3e 87       	std	Y+14, r19	; 0x0e
    1664:	2d 87       	std	Y+13, r18	; 0x0d
    1666:	8d 85       	ldd	r24, Y+13	; 0x0d
    1668:	9e 85       	ldd	r25, Y+14	; 0x0e
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	91 05       	cpc	r25, r1
    166e:	09 f4       	brne	.+2      	; 0x1672 <DIO_u8SetPinValue+0x52>
    1670:	50 c0       	rjmp	.+160    	; 0x1712 <DIO_u8SetPinValue+0xf2>
    1672:	2d 85       	ldd	r18, Y+13	; 0x0d
    1674:	3e 85       	ldd	r19, Y+14	; 0x0e
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	2c f4       	brge	.+10     	; 0x1686 <DIO_u8SetPinValue+0x66>
    167c:	8d 85       	ldd	r24, Y+13	; 0x0d
    167e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	71 f0       	breq	.+28     	; 0x16a0 <DIO_u8SetPinValue+0x80>
    1684:	f4 c0       	rjmp	.+488    	; 0x186e <DIO_u8SetPinValue+0x24e>
    1686:	2d 85       	ldd	r18, Y+13	; 0x0d
    1688:	3e 85       	ldd	r19, Y+14	; 0x0e
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	09 f4       	brne	.+2      	; 0x1692 <DIO_u8SetPinValue+0x72>
    1690:	79 c0       	rjmp	.+242    	; 0x1784 <DIO_u8SetPinValue+0x164>
    1692:	8d 85       	ldd	r24, Y+13	; 0x0d
    1694:	9e 85       	ldd	r25, Y+14	; 0x0e
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	91 05       	cpc	r25, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <DIO_u8SetPinValue+0x7e>
    169c:	ad c0       	rjmp	.+346    	; 0x17f8 <DIO_u8SetPinValue+0x1d8>
    169e:	e7 c0       	rjmp	.+462    	; 0x186e <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	3c 87       	std	Y+12, r19	; 0x0c
    16a8:	2b 87       	std	Y+11, r18	; 0x0b
    16aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	c9 f0       	breq	.+50     	; 0x16e4 <DIO_u8SetPinValue+0xc4>
    16b2:	2b 85       	ldd	r18, Y+11	; 0x0b
    16b4:	3c 85       	ldd	r19, Y+12	; 0x0c
    16b6:	21 30       	cpi	r18, 0x01	; 1
    16b8:	31 05       	cpc	r19, r1
    16ba:	49 f5       	brne	.+82     	; 0x170e <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    16bc:	ab e3       	ldi	r26, 0x3B	; 59
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	eb e3       	ldi	r30, 0x3B	; 59
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_u8SetPinValue+0xba>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <DIO_u8SetPinValue+0xb6>
    16de:	84 2b       	or	r24, r20
    16e0:	8c 93       	st	X, r24
    16e2:	c5 c0       	rjmp	.+394    	; 0x186e <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    16e4:	ab e3       	ldi	r26, 0x3B	; 59
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	eb e3       	ldi	r30, 0x3B	; 59
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <DIO_u8SetPinValue+0xe2>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <DIO_u8SetPinValue+0xde>
    1706:	80 95       	com	r24
    1708:	84 23       	and	r24, r20
    170a:	8c 93       	st	X, r24
    170c:	b0 c0       	rjmp	.+352    	; 0x186e <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    170e:	19 82       	std	Y+1, r1	; 0x01
    1710:	ae c0       	rjmp	.+348    	; 0x186e <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	3a 87       	std	Y+10, r19	; 0x0a
    171a:	29 87       	std	Y+9, r18	; 0x09
    171c:	89 85       	ldd	r24, Y+9	; 0x09
    171e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	c9 f0       	breq	.+50     	; 0x1756 <DIO_u8SetPinValue+0x136>
    1724:	29 85       	ldd	r18, Y+9	; 0x09
    1726:	3a 85       	ldd	r19, Y+10	; 0x0a
    1728:	21 30       	cpi	r18, 0x01	; 1
    172a:	31 05       	cpc	r19, r1
    172c:	49 f5       	brne	.+82     	; 0x1780 <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    172e:	a8 e3       	ldi	r26, 0x38	; 56
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e8 e3       	ldi	r30, 0x38	; 56
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	48 2f       	mov	r20, r24
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	02 2e       	mov	r0, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <DIO_u8SetPinValue+0x12c>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	0a 94       	dec	r0
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <DIO_u8SetPinValue+0x128>
    1750:	84 2b       	or	r24, r20
    1752:	8c 93       	st	X, r24
    1754:	8c c0       	rjmp	.+280    	; 0x186e <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1756:	a8 e3       	ldi	r26, 0x38	; 56
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e8 e3       	ldi	r30, 0x38	; 56
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	48 2f       	mov	r20, r24
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 2e       	mov	r0, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <DIO_u8SetPinValue+0x154>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	0a 94       	dec	r0
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <DIO_u8SetPinValue+0x150>
    1778:	80 95       	com	r24
    177a:	84 23       	and	r24, r20
    177c:	8c 93       	st	X, r24
    177e:	77 c0       	rjmp	.+238    	; 0x186e <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1780:	19 82       	std	Y+1, r1	; 0x01
    1782:	75 c0       	rjmp	.+234    	; 0x186e <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	38 87       	std	Y+8, r19	; 0x08
    178c:	2f 83       	std	Y+7, r18	; 0x07
    178e:	8f 81       	ldd	r24, Y+7	; 0x07
    1790:	98 85       	ldd	r25, Y+8	; 0x08
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	31 f0       	breq	.+12     	; 0x17a2 <DIO_u8SetPinValue+0x182>
    1796:	2f 81       	ldd	r18, Y+7	; 0x07
    1798:	38 85       	ldd	r19, Y+8	; 0x08
    179a:	21 30       	cpi	r18, 0x01	; 1
    179c:	31 05       	cpc	r19, r1
    179e:	b1 f0       	breq	.+44     	; 0x17cc <DIO_u8SetPinValue+0x1ac>
    17a0:	29 c0       	rjmp	.+82     	; 0x17f4 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    17a2:	a5 e3       	ldi	r26, 0x35	; 53
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e5 e3       	ldi	r30, 0x35	; 53
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <DIO_u8SetPinValue+0x1a0>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <DIO_u8SetPinValue+0x19c>
    17c4:	80 95       	com	r24
    17c6:	84 23       	and	r24, r20
    17c8:	8c 93       	st	X, r24
    17ca:	51 c0       	rjmp	.+162    	; 0x186e <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    17cc:	a5 e3       	ldi	r26, 0x35	; 53
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e5 e3       	ldi	r30, 0x35	; 53
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	48 2f       	mov	r20, r24
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	02 2e       	mov	r0, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <DIO_u8SetPinValue+0x1ca>
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	0a 94       	dec	r0
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <DIO_u8SetPinValue+0x1c6>
    17ee:	84 2b       	or	r24, r20
    17f0:	8c 93       	st	X, r24
    17f2:	3d c0       	rjmp	.+122    	; 0x186e <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    17f4:	19 82       	std	Y+1, r1	; 0x01
    17f6:	3b c0       	rjmp	.+118    	; 0x186e <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    17f8:	8c 81       	ldd	r24, Y+4	; 0x04
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	3e 83       	std	Y+6, r19	; 0x06
    1800:	2d 83       	std	Y+5, r18	; 0x05
    1802:	8d 81       	ldd	r24, Y+5	; 0x05
    1804:	9e 81       	ldd	r25, Y+6	; 0x06
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	31 f0       	breq	.+12     	; 0x1816 <DIO_u8SetPinValue+0x1f6>
    180a:	2d 81       	ldd	r18, Y+5	; 0x05
    180c:	3e 81       	ldd	r19, Y+6	; 0x06
    180e:	21 30       	cpi	r18, 0x01	; 1
    1810:	31 05       	cpc	r19, r1
    1812:	b1 f0       	breq	.+44     	; 0x1840 <DIO_u8SetPinValue+0x220>
    1814:	29 c0       	rjmp	.+82     	; 0x1868 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1816:	a2 e3       	ldi	r26, 0x32	; 50
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e2 e3       	ldi	r30, 0x32	; 50
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	48 2f       	mov	r20, r24
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	02 2e       	mov	r0, r18
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <DIO_u8SetPinValue+0x214>
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	0a 94       	dec	r0
    1836:	e2 f7       	brpl	.-8      	; 0x1830 <DIO_u8SetPinValue+0x210>
    1838:	80 95       	com	r24
    183a:	84 23       	and	r24, r20
    183c:	8c 93       	st	X, r24
    183e:	17 c0       	rjmp	.+46     	; 0x186e <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1840:	a2 e3       	ldi	r26, 0x32	; 50
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e2 e3       	ldi	r30, 0x32	; 50
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	48 2f       	mov	r20, r24
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 2e       	mov	r0, r18
    1858:	02 c0       	rjmp	.+4      	; 0x185e <DIO_u8SetPinValue+0x23e>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <DIO_u8SetPinValue+0x23a>
    1862:	84 2b       	or	r24, r20
    1864:	8c 93       	st	X, r24
    1866:	03 c0       	rjmp	.+6      	; 0x186e <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1868:	19 82       	std	Y+1, r1	; 0x01
    186a:	01 c0       	rjmp	.+2      	; 0x186e <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		 Local_u8ErrorState = STD_TYPES_NOK;
    186c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    186e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1870:	2e 96       	adiw	r28, 0x0e	; 14
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	28 97       	sbiw	r28, 0x08	; 8
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	8b 83       	std	Y+3, r24	; 0x03
    1898:	6c 83       	std	Y+4, r22	; 0x04
    189a:	5e 83       	std	Y+6, r21	; 0x06
    189c:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	84 30       	cpi	r24, 0x04	; 4
    18a6:	08 f0       	brcs	.+2      	; 0x18aa <DIO_u8GetPinValue+0x28>
    18a8:	9f c0       	rjmp	.+318    	; 0x19e8 <DIO_u8GetPinValue+0x166>
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	88 30       	cpi	r24, 0x08	; 8
    18ae:	08 f0       	brcs	.+2      	; 0x18b2 <DIO_u8GetPinValue+0x30>
    18b0:	9b c0       	rjmp	.+310    	; 0x19e8 <DIO_u8GetPinValue+0x166>
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	9e 81       	ldd	r25, Y+6	; 0x06
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	09 f4       	brne	.+2      	; 0x18bc <DIO_u8GetPinValue+0x3a>
    18ba:	96 c0       	rjmp	.+300    	; 0x19e8 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	38 87       	std	Y+8, r19	; 0x08
    18c4:	2f 83       	std	Y+7, r18	; 0x07
    18c6:	4f 81       	ldd	r20, Y+7	; 0x07
    18c8:	58 85       	ldd	r21, Y+8	; 0x08
    18ca:	41 30       	cpi	r20, 0x01	; 1
    18cc:	51 05       	cpc	r21, r1
    18ce:	a9 f1       	breq	.+106    	; 0x193a <DIO_u8GetPinValue+0xb8>
    18d0:	8f 81       	ldd	r24, Y+7	; 0x07
    18d2:	98 85       	ldd	r25, Y+8	; 0x08
    18d4:	82 30       	cpi	r24, 0x02	; 2
    18d6:	91 05       	cpc	r25, r1
    18d8:	34 f4       	brge	.+12     	; 0x18e6 <DIO_u8GetPinValue+0x64>
    18da:	2f 81       	ldd	r18, Y+7	; 0x07
    18dc:	38 85       	ldd	r19, Y+8	; 0x08
    18de:	21 15       	cp	r18, r1
    18e0:	31 05       	cpc	r19, r1
    18e2:	71 f0       	breq	.+28     	; 0x1900 <DIO_u8GetPinValue+0x7e>
    18e4:	82 c0       	rjmp	.+260    	; 0x19ea <DIO_u8GetPinValue+0x168>
    18e6:	4f 81       	ldd	r20, Y+7	; 0x07
    18e8:	58 85       	ldd	r21, Y+8	; 0x08
    18ea:	42 30       	cpi	r20, 0x02	; 2
    18ec:	51 05       	cpc	r21, r1
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <DIO_u8GetPinValue+0x70>
    18f0:	41 c0       	rjmp	.+130    	; 0x1974 <DIO_u8GetPinValue+0xf2>
    18f2:	8f 81       	ldd	r24, Y+7	; 0x07
    18f4:	98 85       	ldd	r25, Y+8	; 0x08
    18f6:	83 30       	cpi	r24, 0x03	; 3
    18f8:	91 05       	cpc	r25, r1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <DIO_u8GetPinValue+0x7c>
    18fc:	58 c0       	rjmp	.+176    	; 0x19ae <DIO_u8GetPinValue+0x12c>
    18fe:	75 c0       	rjmp	.+234    	; 0x19ea <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    1900:	e9 e3       	ldi	r30, 0x39	; 57
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	88 2f       	mov	r24, r24
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	a9 01       	movw	r20, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <DIO_u8GetPinValue+0x96>
    1914:	55 95       	asr	r21
    1916:	47 95       	ror	r20
    1918:	8a 95       	dec	r24
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <DIO_u8GetPinValue+0x92>
    191c:	ca 01       	movw	r24, r20
    191e:	81 70       	andi	r24, 0x01	; 1
    1920:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	88 23       	and	r24, r24
    1926:	21 f4       	brne	.+8      	; 0x1930 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1928:	ed 81       	ldd	r30, Y+5	; 0x05
    192a:	fe 81       	ldd	r31, Y+6	; 0x06
    192c:	10 82       	st	Z, r1
    192e:	5d c0       	rjmp	.+186    	; 0x19ea <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1930:	ed 81       	ldd	r30, Y+5	; 0x05
    1932:	fe 81       	ldd	r31, Y+6	; 0x06
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	80 83       	st	Z, r24
    1938:	58 c0       	rjmp	.+176    	; 0x19ea <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    193a:	e6 e3       	ldi	r30, 0x36	; 54
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	8c 81       	ldd	r24, Y+4	; 0x04
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a9 01       	movw	r20, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <DIO_u8GetPinValue+0xd0>
    194e:	55 95       	asr	r21
    1950:	47 95       	ror	r20
    1952:	8a 95       	dec	r24
    1954:	e2 f7       	brpl	.-8      	; 0x194e <DIO_u8GetPinValue+0xcc>
    1956:	ca 01       	movw	r24, r20
    1958:	81 70       	andi	r24, 0x01	; 1
    195a:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	88 23       	and	r24, r24
    1960:	21 f4       	brne	.+8      	; 0x196a <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1962:	ed 81       	ldd	r30, Y+5	; 0x05
    1964:	fe 81       	ldd	r31, Y+6	; 0x06
    1966:	10 82       	st	Z, r1
    1968:	40 c0       	rjmp	.+128    	; 0x19ea <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    196a:	ed 81       	ldd	r30, Y+5	; 0x05
    196c:	fe 81       	ldd	r31, Y+6	; 0x06
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	80 83       	st	Z, r24
    1972:	3b c0       	rjmp	.+118    	; 0x19ea <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    1974:	e3 e3       	ldi	r30, 0x33	; 51
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	8c 81       	ldd	r24, Y+4	; 0x04
    1980:	88 2f       	mov	r24, r24
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a9 01       	movw	r20, r18
    1986:	02 c0       	rjmp	.+4      	; 0x198c <DIO_u8GetPinValue+0x10a>
    1988:	55 95       	asr	r21
    198a:	47 95       	ror	r20
    198c:	8a 95       	dec	r24
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <DIO_u8GetPinValue+0x106>
    1990:	ca 01       	movw	r24, r20
    1992:	81 70       	andi	r24, 0x01	; 1
    1994:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	88 23       	and	r24, r24
    199a:	21 f4       	brne	.+8      	; 0x19a4 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    199c:	ed 81       	ldd	r30, Y+5	; 0x05
    199e:	fe 81       	ldd	r31, Y+6	; 0x06
    19a0:	10 82       	st	Z, r1
    19a2:	23 c0       	rjmp	.+70     	; 0x19ea <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    19a4:	ed 81       	ldd	r30, Y+5	; 0x05
    19a6:	fe 81       	ldd	r31, Y+6	; 0x06
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	80 83       	st	Z, r24
    19ac:	1e c0       	rjmp	.+60     	; 0x19ea <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    19ae:	e0 e3       	ldi	r30, 0x30	; 48
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	88 2f       	mov	r24, r24
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	a9 01       	movw	r20, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <DIO_u8GetPinValue+0x144>
    19c2:	55 95       	asr	r21
    19c4:	47 95       	ror	r20
    19c6:	8a 95       	dec	r24
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <DIO_u8GetPinValue+0x140>
    19ca:	ca 01       	movw	r24, r20
    19cc:	81 70       	andi	r24, 0x01	; 1
    19ce:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	88 23       	and	r24, r24
    19d4:	21 f4       	brne	.+8      	; 0x19de <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    19d6:	ed 81       	ldd	r30, Y+5	; 0x05
    19d8:	fe 81       	ldd	r31, Y+6	; 0x06
    19da:	10 82       	st	Z, r1
    19dc:	06 c0       	rjmp	.+12     	; 0x19ea <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    19de:	ed 81       	ldd	r30, Y+5	; 0x05
    19e0:	fe 81       	ldd	r31, Y+6	; 0x06
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	80 83       	st	Z, r24
    19e6:	01 c0       	rjmp	.+2      	; 0x19ea <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    19e8:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
}
    19ec:	28 96       	adiw	r28, 0x08	; 8
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	2d 97       	sbiw	r28, 0x0d	; 13
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	3d 87       	std	Y+13, r19	; 0x0d
    1a1e:	2c 87       	std	Y+12, r18	; 0x0c
    1a20:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a22:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	91 05       	cpc	r25, r1
    1a28:	71 f1       	breq	.+92     	; 0x1a86 <DIO_u8SetPortDirection+0x88>
    1a2a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a2c:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a2e:	22 30       	cpi	r18, 0x02	; 2
    1a30:	31 05       	cpc	r19, r1
    1a32:	2c f4       	brge	.+10     	; 0x1a3e <DIO_u8SetPortDirection+0x40>
    1a34:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a36:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	69 f0       	breq	.+26     	; 0x1a56 <DIO_u8SetPortDirection+0x58>
    1a3c:	69 c0       	rjmp	.+210    	; 0x1b10 <DIO_u8SetPortDirection+0x112>
    1a3e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a40:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a42:	22 30       	cpi	r18, 0x02	; 2
    1a44:	31 05       	cpc	r19, r1
    1a46:	b1 f1       	breq	.+108    	; 0x1ab4 <DIO_u8SetPortDirection+0xb6>
    1a48:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a4a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a4c:	83 30       	cpi	r24, 0x03	; 3
    1a4e:	91 05       	cpc	r25, r1
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <DIO_u8SetPortDirection+0x56>
    1a52:	47 c0       	rjmp	.+142    	; 0x1ae2 <DIO_u8SetPortDirection+0xe4>
    1a54:	5d c0       	rjmp	.+186    	; 0x1b10 <DIO_u8SetPortDirection+0x112>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	3b 87       	std	Y+11, r19	; 0x0b
    1a5e:	2a 87       	std	Y+10, r18	; 0x0a
    1a60:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a62:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	51 f0       	breq	.+20     	; 0x1a7c <DIO_u8SetPortDirection+0x7e>
    1a68:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a6a:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a6c:	21 30       	cpi	r18, 0x01	; 1
    1a6e:	31 05       	cpc	r19, r1
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <DIO_u8SetPortDirection+0x76>
    1a72:	50 c0       	rjmp	.+160    	; 0x1b14 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    1a74:	ea e3       	ldi	r30, 0x3A	; 58
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	10 82       	st	Z, r1
    1a7a:	4c c0       	rjmp	.+152    	; 0x1b14 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    1a7c:	ea e3       	ldi	r30, 0x3A	; 58
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	8f ef       	ldi	r24, 0xFF	; 255
    1a82:	80 83       	st	Z, r24
    1a84:	47 c0       	rjmp	.+142    	; 0x1b14 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	39 87       	std	Y+9, r19	; 0x09
    1a8e:	28 87       	std	Y+8, r18	; 0x08
    1a90:	88 85       	ldd	r24, Y+8	; 0x08
    1a92:	99 85       	ldd	r25, Y+9	; 0x09
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	49 f0       	breq	.+18     	; 0x1aaa <DIO_u8SetPortDirection+0xac>
    1a98:	28 85       	ldd	r18, Y+8	; 0x08
    1a9a:	39 85       	ldd	r19, Y+9	; 0x09
    1a9c:	21 30       	cpi	r18, 0x01	; 1
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	c9 f5       	brne	.+114    	; 0x1b14 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    1aa2:	e7 e3       	ldi	r30, 0x37	; 55
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	10 82       	st	Z, r1
    1aa8:	35 c0       	rjmp	.+106    	; 0x1b14 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    1aaa:	e7 e3       	ldi	r30, 0x37	; 55
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	8f ef       	ldi	r24, 0xFF	; 255
    1ab0:	80 83       	st	Z, r24
    1ab2:	30 c0       	rjmp	.+96     	; 0x1b14 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	3f 83       	std	Y+7, r19	; 0x07
    1abc:	2e 83       	std	Y+6, r18	; 0x06
    1abe:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	49 f0       	breq	.+18     	; 0x1ad8 <DIO_u8SetPortDirection+0xda>
    1ac6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ac8:	3f 81       	ldd	r19, Y+7	; 0x07
    1aca:	21 30       	cpi	r18, 0x01	; 1
    1acc:	31 05       	cpc	r19, r1
    1ace:	11 f5       	brne	.+68     	; 0x1b14 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    1ad0:	e4 e3       	ldi	r30, 0x34	; 52
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	10 82       	st	Z, r1
    1ad6:	1e c0       	rjmp	.+60     	; 0x1b14 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    1ad8:	e4 e3       	ldi	r30, 0x34	; 52
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	8f ef       	ldi	r24, 0xFF	; 255
    1ade:	80 83       	st	Z, r24
    1ae0:	19 c0       	rjmp	.+50     	; 0x1b14 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	3d 83       	std	Y+5, r19	; 0x05
    1aea:	2c 83       	std	Y+4, r18	; 0x04
    1aec:	8c 81       	ldd	r24, Y+4	; 0x04
    1aee:	9d 81       	ldd	r25, Y+5	; 0x05
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	49 f0       	breq	.+18     	; 0x1b06 <DIO_u8SetPortDirection+0x108>
    1af4:	2c 81       	ldd	r18, Y+4	; 0x04
    1af6:	3d 81       	ldd	r19, Y+5	; 0x05
    1af8:	21 30       	cpi	r18, 0x01	; 1
    1afa:	31 05       	cpc	r19, r1
    1afc:	59 f4       	brne	.+22     	; 0x1b14 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    1afe:	e1 e3       	ldi	r30, 0x31	; 49
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	10 82       	st	Z, r1
    1b04:	07 c0       	rjmp	.+14     	; 0x1b14 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    1b06:	e1 e3       	ldi	r30, 0x31	; 49
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	8f ef       	ldi	r24, 0xFF	; 255
    1b0c:	80 83       	st	Z, r24
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;
		default:
			return STD_TYPES_NOK;
    1b10:	1b 82       	std	Y+3, r1	; 0x03
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <DIO_u8SetPortDirection+0x11a>
			break;
	}
	return STD_TYPES_OK;
    1b14:	31 e0       	ldi	r19, 0x01	; 1
    1b16:	3b 83       	std	Y+3, r19	; 0x03
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1b1a:	2d 96       	adiw	r28, 0x0d	; 13
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <DIO_u8SetPortValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortVlaue)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <DIO_u8SetPortValue+0x6>
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <DIO_u8SetPortValue+0x8>
    1b34:	0f 92       	push	r0
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId){
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	3d 83       	std	Y+5, r19	; 0x05
    1b46:	2c 83       	std	Y+4, r18	; 0x04
    1b48:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	91 05       	cpc	r25, r1
    1b50:	d1 f0       	breq	.+52     	; 0x1b86 <DIO_u8SetPortValue+0x5a>
    1b52:	2c 81       	ldd	r18, Y+4	; 0x04
    1b54:	3d 81       	ldd	r19, Y+5	; 0x05
    1b56:	22 30       	cpi	r18, 0x02	; 2
    1b58:	31 05       	cpc	r19, r1
    1b5a:	2c f4       	brge	.+10     	; 0x1b66 <DIO_u8SetPortValue+0x3a>
    1b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	61 f0       	breq	.+24     	; 0x1b7c <DIO_u8SetPortValue+0x50>
    1b64:	1f c0       	rjmp	.+62     	; 0x1ba4 <DIO_u8SetPortValue+0x78>
    1b66:	2c 81       	ldd	r18, Y+4	; 0x04
    1b68:	3d 81       	ldd	r19, Y+5	; 0x05
    1b6a:	22 30       	cpi	r18, 0x02	; 2
    1b6c:	31 05       	cpc	r19, r1
    1b6e:	81 f0       	breq	.+32     	; 0x1b90 <DIO_u8SetPortValue+0x64>
    1b70:	8c 81       	ldd	r24, Y+4	; 0x04
    1b72:	9d 81       	ldd	r25, Y+5	; 0x05
    1b74:	83 30       	cpi	r24, 0x03	; 3
    1b76:	91 05       	cpc	r25, r1
    1b78:	81 f0       	breq	.+32     	; 0x1b9a <DIO_u8SetPortValue+0x6e>
    1b7a:	14 c0       	rjmp	.+40     	; 0x1ba4 <DIO_u8SetPortValue+0x78>
	case DIO_u8_PORTA:
		DIO_u8_PORTA_REG = Copy_u8PortVlaue;
    1b7c:	eb e3       	ldi	r30, 0x3B	; 59
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	80 83       	st	Z, r24
    1b84:	11 c0       	rjmp	.+34     	; 0x1ba8 <DIO_u8SetPortValue+0x7c>
		break;
	case DIO_u8_PORTB:
		DIO_u8_PORTB_REG = Copy_u8PortVlaue;
    1b86:	e8 e3       	ldi	r30, 0x38	; 56
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	80 83       	st	Z, r24
    1b8e:	0c c0       	rjmp	.+24     	; 0x1ba8 <DIO_u8SetPortValue+0x7c>
		break;
	case DIO_u8_PORTC:
		DIO_u8_PORTC_REG = Copy_u8PortVlaue;
    1b90:	e5 e3       	ldi	r30, 0x35	; 53
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	80 83       	st	Z, r24
    1b98:	07 c0       	rjmp	.+14     	; 0x1ba8 <DIO_u8SetPortValue+0x7c>
		break;
	case DIO_u8_PORTD:
		DIO_u8_PORTD_REG = Copy_u8PortVlaue;
    1b9a:	e2 e3       	ldi	r30, 0x32	; 50
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	80 83       	st	Z, r24
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <DIO_u8SetPortValue+0x7c>
		break;
	default:
		return STD_TYPES_NOK;
    1ba4:	1b 82       	std	Y+3, r1	; 0x03
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <DIO_u8SetPortValue+0x80>
		break;
	}
	return 1;
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	9b 83       	std	Y+3, r25	; 0x03
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <DIO_u8GetPortValue+0x6>
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <DIO_u8GetPortValue+0x8>
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <DIO_u8GetPortValue+0xa>
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	8a 83       	std	Y+2, r24	; 0x02
    1bce:	7c 83       	std	Y+4, r23	; 0x04
    1bd0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	84 30       	cpi	r24, 0x04	; 4
    1bda:	08 f0       	brcs	.+2      	; 0x1bde <DIO_u8GetPortValue+0x20>
    1bdc:	3f c0       	rjmp	.+126    	; 0x1c5c <DIO_u8GetPortValue+0x9e>
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	d9 f1       	breq	.+118    	; 0x1c5c <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	3e 83       	std	Y+6, r19	; 0x06
    1bee:	2d 83       	std	Y+5, r18	; 0x05
    1bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	e1 f0       	breq	.+56     	; 0x1c32 <DIO_u8GetPortValue+0x74>
    1bfa:	2d 81       	ldd	r18, Y+5	; 0x05
    1bfc:	3e 81       	ldd	r19, Y+6	; 0x06
    1bfe:	22 30       	cpi	r18, 0x02	; 2
    1c00:	31 05       	cpc	r19, r1
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <DIO_u8GetPortValue+0x50>
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	61 f0       	breq	.+24     	; 0x1c24 <DIO_u8GetPortValue+0x66>
    1c0c:	28 c0       	rjmp	.+80     	; 0x1c5e <DIO_u8GetPortValue+0xa0>
    1c0e:	2d 81       	ldd	r18, Y+5	; 0x05
    1c10:	3e 81       	ldd	r19, Y+6	; 0x06
    1c12:	22 30       	cpi	r18, 0x02	; 2
    1c14:	31 05       	cpc	r19, r1
    1c16:	a1 f0       	breq	.+40     	; 0x1c40 <DIO_u8GetPortValue+0x82>
    1c18:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1c:	83 30       	cpi	r24, 0x03	; 3
    1c1e:	91 05       	cpc	r25, r1
    1c20:	b1 f0       	breq	.+44     	; 0x1c4e <DIO_u8GetPortValue+0x90>
    1c22:	1d c0       	rjmp	.+58     	; 0x1c5e <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    1c24:	e9 e3       	ldi	r30, 0x39	; 57
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c2e:	80 83       	st	Z, r24
    1c30:	16 c0       	rjmp	.+44     	; 0x1c5e <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    1c32:	e6 e3       	ldi	r30, 0x36	; 54
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	eb 81       	ldd	r30, Y+3	; 0x03
    1c3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c3c:	80 83       	st	Z, r24
    1c3e:	0f c0       	rjmp	.+30     	; 0x1c5e <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    1c40:	e3 e3       	ldi	r30, 0x33	; 51
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	eb 81       	ldd	r30, Y+3	; 0x03
    1c48:	fc 81       	ldd	r31, Y+4	; 0x04
    1c4a:	80 83       	st	Z, r24
    1c4c:	08 c0       	rjmp	.+16     	; 0x1c5e <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    1c4e:	e0 e3       	ldi	r30, 0x30	; 48
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	eb 81       	ldd	r30, Y+3	; 0x03
    1c56:	fc 81       	ldd	r31, Y+4	; 0x04
    1c58:	80 83       	st	Z, r24
    1c5a:	01 c0       	rjmp	.+2      	; 0x1c5e <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1c5c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1c60:	26 96       	adiw	r28, 0x06	; 6
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <ADC_voidInit>:
static void(*ADC_pfNotification)(u16) = NULL;
/* ADC busy flag */
static u8 ADC_u8BusyFlag = 0;

void ADC_voidInit(void)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
		2- Right Adjust
		3- Disable AutoTrigger
		4- Select CLK/64
		5- Enable ADC
	 */
	CLR_BIT(ADC_u8_ADMUX_REG,7);
    1c7a:	a7 e2       	ldi	r26, 0x27	; 39
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e7 e2       	ldi	r30, 0x27	; 39
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	8f 77       	andi	r24, 0x7F	; 127
    1c86:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
    1c88:	a7 e2       	ldi	r26, 0x27	; 39
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e7 e2       	ldi	r30, 0x27	; 39
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	80 64       	ori	r24, 0x40	; 64
    1c94:	8c 93       	st	X, r24

	CLR_BIT(ADC_u8_ADMUX_REG,5);
    1c96:	a7 e2       	ldi	r26, 0x27	; 39
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e7 e2       	ldi	r30, 0x27	; 39
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8f 7d       	andi	r24, 0xDF	; 223
    1ca2:	8c 93       	st	X, r24

	CLR_BIT(ADC_u8_ADCSRA_REG,5);
    1ca4:	a6 e2       	ldi	r26, 0x26	; 38
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e6 e2       	ldi	r30, 0x26	; 38
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	8f 7d       	andi	r24, 0xDF	; 223
    1cb0:	8c 93       	st	X, r24

	SET_BIT(ADC_u8_ADCSRA_REG,2);
    1cb2:	a6 e2       	ldi	r26, 0x26	; 38
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e6 e2       	ldi	r30, 0x26	; 38
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	84 60       	ori	r24, 0x04	; 4
    1cbe:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
    1cc0:	a6 e2       	ldi	r26, 0x26	; 38
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e6 e2       	ldi	r30, 0x26	; 38
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	82 60       	ori	r24, 0x02	; 2
    1ccc:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
    1cce:	a6 e2       	ldi	r26, 0x26	; 38
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e6 e2       	ldi	r30, 0x26	; 38
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	8e 7f       	andi	r24, 0xFE	; 254
    1cda:	8c 93       	st	X, r24

	SET_BIT(ADC_u8_ADCSRA_REG,7);
    1cdc:	a6 e2       	ldi	r26, 0x26	; 38
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e6 e2       	ldi	r30, 0x26	; 38
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	80 68       	ori	r24, 0x80	; 128
    1ce8:	8c 93       	st	X, r24
}
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <ADC_u8GetDigitalValueSynchNonBlocking>:

u8   ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNb, u16 * Copy_pu16DigitalValue)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	28 97       	sbiw	r28, 0x08	; 8
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	8e 83       	std	Y+6, r24	; 0x06
    1d06:	78 87       	std	Y+8, r23	; 0x08
    1d08:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    1d0e:	19 82       	std	Y+1, r1	; 0x01
    1d10:	1a 82       	std	Y+2, r1	; 0x02
    1d12:	1b 82       	std	Y+3, r1	; 0x03
    1d14:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNb < 32) && (Copy_pu16DigitalValue != NULL))
    1d16:	8e 81       	ldd	r24, Y+6	; 0x06
    1d18:	80 32       	cpi	r24, 0x20	; 32
    1d1a:	08 f0       	brcs	.+2      	; 0x1d1e <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
    1d1c:	5b c0       	rjmp	.+182    	; 0x1dd4 <ADC_u8GetDigitalValueSynchNonBlocking+0xe4>
    1d1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d20:	98 85       	ldd	r25, Y+8	; 0x08
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
    1d26:	56 c0       	rjmp	.+172    	; 0x1dd4 <ADC_u8GetDigitalValueSynchNonBlocking+0xe4>
	{
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    1d28:	a7 e2       	ldi	r26, 0x27	; 39
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e7 e2       	ldi	r30, 0x27	; 39
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	80 7e       	andi	r24, 0xE0	; 224
    1d34:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
    1d36:	a7 e2       	ldi	r26, 0x27	; 39
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	e7 e2       	ldi	r30, 0x27	; 39
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	90 81       	ld	r25, Z
    1d40:	8e 81       	ldd	r24, Y+6	; 0x06
    1d42:	89 2b       	or	r24, r25
    1d44:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
    1d46:	a6 e2       	ldi	r26, 0x26	; 38
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e6 e2       	ldi	r30, 0x26	; 38
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	80 64       	ori	r24, 0x40	; 64
    1d52:	8c 93       	st	X, r24
    1d54:	0b c0       	rjmp	.+22     	; 0x1d6c <ADC_u8GetDigitalValueSynchNonBlocking+0x7c>
		/* Wait flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)== 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
		{
			Local_u32TimeOutCounter++;
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	ab 81       	ldd	r26, Y+3	; 0x03
    1d5c:	bc 81       	ldd	r27, Y+4	; 0x04
    1d5e:	01 96       	adiw	r24, 0x01	; 1
    1d60:	a1 1d       	adc	r26, r1
    1d62:	b1 1d       	adc	r27, r1
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	9a 83       	std	Y+2, r25	; 0x02
    1d68:	ab 83       	std	Y+3, r26	; 0x03
    1d6a:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/* Wait flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)== 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
    1d6c:	e6 e2       	ldi	r30, 0x26	; 38
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	82 95       	swap	r24
    1d74:	8f 70       	andi	r24, 0x0F	; 15
    1d76:	88 2f       	mov	r24, r24
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	81 70       	andi	r24, 0x01	; 1
    1d7c:	90 70       	andi	r25, 0x00	; 0
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	61 f4       	brne	.+24     	; 0x1d9a <ADC_u8GetDigitalValueSynchNonBlocking+0xaa>
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	9a 81       	ldd	r25, Y+2	; 0x02
    1d86:	ab 81       	ldd	r26, Y+3	; 0x03
    1d88:	bc 81       	ldd	r27, Y+4	; 0x04
    1d8a:	80 35       	cpi	r24, 0x50	; 80
    1d8c:	23 ec       	ldi	r18, 0xC3	; 195
    1d8e:	92 07       	cpc	r25, r18
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	a2 07       	cpc	r26, r18
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	b2 07       	cpc	r27, r18
    1d98:	f0 f2       	brcs	.-68     	; 0x1d56 <ADC_u8GetDigitalValueSynchNonBlocking+0x66>
		{
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)!= 0)//(Local_u32TimeOutCounter<ADC_u32_TIME_OUT_MAX_VALUE)
    1d9a:	e6 e2       	ldi	r30, 0x26	; 38
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	82 95       	swap	r24
    1da2:	8f 70       	andi	r24, 0x0F	; 15
    1da4:	88 2f       	mov	r24, r24
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	81 70       	andi	r24, 0x01	; 1
    1daa:	90 70       	andi	r25, 0x00	; 0
    1dac:	88 23       	and	r24, r24
    1dae:	81 f0       	breq	.+32     	; 0x1dd0 <ADC_u8GetDigitalValueSynchNonBlocking+0xe0>
		{
			/* Clear flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
    1db0:	a6 e2       	ldi	r26, 0x26	; 38
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e6 e2       	ldi	r30, 0x26	; 38
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	80 61       	ori	r24, 0x10	; 16
    1dbc:	8c 93       	st	X, r24
			/* Read the Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
    1dbe:	e4 e2       	ldi	r30, 0x24	; 36
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	91 81       	ldd	r25, Z+1	; 0x01
    1dc6:	ef 81       	ldd	r30, Y+7	; 0x07
    1dc8:	f8 85       	ldd	r31, Y+8	; 0x08
    1dca:	91 83       	std	Z+1, r25	; 0x01
    1dcc:	80 83       	st	Z, r24
    1dce:	03 c0       	rjmp	.+6      	; 0x1dd6 <ADC_u8GetDigitalValueSynchNonBlocking+0xe6>
		}
		else
		{
			Local_u8ErrorState = STD_TYPES_NOK;
    1dd0:	1d 82       	std	Y+5, r1	; 0x05
    1dd2:	01 c0       	rjmp	.+2      	; 0x1dd6 <ADC_u8GetDigitalValueSynchNonBlocking+0xe6>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1dd4:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1dd8:	28 96       	adiw	r28, 0x08	; 8
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <ADC_u8GetDigitalValueAsynch>:
u8   ADC_u8GetDigitalValueAsynch          (u8 Copy_u8ChannelNb,void(*Copy_pfNotification)(u16))
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <ADC_u8GetDigitalValueAsynch+0x6>
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <ADC_u8GetDigitalValueAsynch+0x8>
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	8a 83       	std	Y+2, r24	; 0x02
    1df8:	7c 83       	std	Y+4, r23	; 0x04
    1dfa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32) && (Copy_pfNotification != NULL) && (ADC_u8BusyFlag == 0))
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	80 32       	cpi	r24, 0x20	; 32
    1e04:	78 f5       	brcc	.+94     	; 0x1e64 <ADC_u8GetDigitalValueAsynch+0x7a>
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	59 f1       	breq	.+86     	; 0x1e64 <ADC_u8GetDigitalValueAsynch+0x7a>
    1e0e:	80 91 90 00 	lds	r24, 0x0090
    1e12:	88 23       	and	r24, r24
    1e14:	39 f5       	brne	.+78     	; 0x1e64 <ADC_u8GetDigitalValueAsynch+0x7a>
	{
		/* Set Flag to make ADC is Busy */
		ADC_u8BusyFlag = 1;
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	80 93 90 00 	sts	0x0090, r24
		/* update Global Pointer to a function */
		ADC_pfNotification = Copy_pfNotification;
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	90 93 8f 00 	sts	0x008F, r25
    1e24:	80 93 8e 00 	sts	0x008E, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
    1e28:	a6 e2       	ldi	r26, 0x26	; 38
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e6 e2       	ldi	r30, 0x26	; 38
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	88 60       	ori	r24, 0x08	; 8
    1e34:	8c 93       	st	X, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    1e36:	a7 e2       	ldi	r26, 0x27	; 39
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e7 e2       	ldi	r30, 0x27	; 39
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	80 7e       	andi	r24, 0xE0	; 224
    1e42:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
    1e44:	a7 e2       	ldi	r26, 0x27	; 39
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e7 e2       	ldi	r30, 0x27	; 39
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	90 81       	ld	r25, Z
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	89 2b       	or	r24, r25
    1e52:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
    1e54:	a6 e2       	ldi	r26, 0x26	; 38
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e6 e2       	ldi	r30, 0x26	; 38
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	80 64       	ori	r24, 0x40	; 64
    1e60:	8c 93       	st	X, r24
    1e62:	01 c0       	rjmp	.+2      	; 0x1e66 <ADC_u8GetDigitalValueAsynch+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1e64:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <ADC_u8GetADCRegValue>:
u8   ADC_u8GetADCRegValue                 (u16 * Copy_pu16ADCValue)
{
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <ADC_u8GetADCRegValue+0x6>
    1e7c:	0f 92       	push	r0
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	9b 83       	std	Y+3, r25	; 0x03
    1e84:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCValue != NULL)
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	49 f0       	breq	.+18     	; 0x1ea4 <ADC_u8GetADCRegValue+0x2e>
	{
		/* Read ADC Register */
		*Copy_pu16ADCValue = ADC_u16_ADC_REG;
    1e92:	e4 e2       	ldi	r30, 0x24	; 36
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	80 83       	st	Z, r24
    1ea2:	01 c0       	rjmp	.+2      	; 0x1ea6 <ADC_u8GetADCRegValue+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1ea4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState ;
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <__vector_16>:

/* Prototype for ADC ISR */
void __vector_16(void)     __attribute__((signal));
void __vector_16(void)
{
    1eb4:	1f 92       	push	r1
    1eb6:	0f 92       	push	r0
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	0f 92       	push	r0
    1ebc:	11 24       	eor	r1, r1
    1ebe:	2f 93       	push	r18
    1ec0:	3f 93       	push	r19
    1ec2:	4f 93       	push	r20
    1ec4:	5f 93       	push	r21
    1ec6:	6f 93       	push	r22
    1ec8:	7f 93       	push	r23
    1eca:	8f 93       	push	r24
    1ecc:	9f 93       	push	r25
    1ece:	af 93       	push	r26
    1ed0:	bf 93       	push	r27
    1ed2:	ef 93       	push	r30
    1ed4:	ff 93       	push	r31
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
    1ede:	80 91 8e 00 	lds	r24, 0x008E
    1ee2:	90 91 8f 00 	lds	r25, 0x008F
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	99 f0       	breq	.+38     	; 0x1f10 <__vector_16+0x5c>
	{
		/* Clear Flag */
		ADC_u8BusyFlag = 0;
    1eea:	10 92 90 00 	sts	0x0090, r1
		/* Clear PIE of ADC */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
    1eee:	a6 e2       	ldi	r26, 0x26	; 38
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e6 e2       	ldi	r30, 0x26	; 38
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	87 7f       	andi	r24, 0xF7	; 247
    1efa:	8c 93       	st	X, r24
		/* Calling Notification function */
		ADC_pfNotification(ADC_u16_ADC_REG);
    1efc:	20 91 8e 00 	lds	r18, 0x008E
    1f00:	30 91 8f 00 	lds	r19, 0x008F
    1f04:	e4 e2       	ldi	r30, 0x24	; 36
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	91 81       	ldd	r25, Z+1	; 0x01
    1f0c:	f9 01       	movw	r30, r18
    1f0e:	09 95       	icall
	}
}
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	ff 91       	pop	r31
    1f16:	ef 91       	pop	r30
    1f18:	bf 91       	pop	r27
    1f1a:	af 91       	pop	r26
    1f1c:	9f 91       	pop	r25
    1f1e:	8f 91       	pop	r24
    1f20:	7f 91       	pop	r23
    1f22:	6f 91       	pop	r22
    1f24:	5f 91       	pop	r21
    1f26:	4f 91       	pop	r20
    1f28:	3f 91       	pop	r19
    1f2a:	2f 91       	pop	r18
    1f2c:	0f 90       	pop	r0
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	0f 90       	pop	r0
    1f32:	1f 90       	pop	r1
    1f34:	18 95       	reti

00001f36 <STM_u8_Rotate_CW>:
#include "STM_interface.h"
#include "STM_config.h"


u8 STM_u8_Rotate_CW()
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	e8 97       	sbiw	r28, 0x38	; 56
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
	// FIRST STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_LOW);
    1f4a:	83 e0       	ldi	r24, 0x03	; 3
    1f4c:	64 e0       	ldi	r22, 0x04	; 4
    1f4e:	40 e0       	ldi	r20, 0x00	; 0
    1f50:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    1f54:	83 e0       	ldi	r24, 0x03	; 3
    1f56:	65 e0       	ldi	r22, 0x05	; 5
    1f58:	41 e0       	ldi	r20, 0x01	; 1
    1f5a:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    1f5e:	83 e0       	ldi	r24, 0x03	; 3
    1f60:	66 e0       	ldi	r22, 0x06	; 6
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    1f68:	83 e0       	ldi	r24, 0x03	; 3
    1f6a:	67 e0       	ldi	r22, 0x07	; 7
    1f6c:	41 e0       	ldi	r20, 0x01	; 1
    1f6e:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	a0 e2       	ldi	r26, 0x20	; 32
    1f78:	b1 e4       	ldi	r27, 0x41	; 65
    1f7a:	8d ab       	std	Y+53, r24	; 0x35
    1f7c:	9e ab       	std	Y+54, r25	; 0x36
    1f7e:	af ab       	std	Y+55, r26	; 0x37
    1f80:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f82:	6d a9       	ldd	r22, Y+53	; 0x35
    1f84:	7e a9       	ldd	r23, Y+54	; 0x36
    1f86:	8f a9       	ldd	r24, Y+55	; 0x37
    1f88:	98 ad       	ldd	r25, Y+56	; 0x38
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	4a ef       	ldi	r20, 0xFA	; 250
    1f90:	54 e4       	ldi	r21, 0x44	; 68
    1f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	89 ab       	std	Y+49, r24	; 0x31
    1f9c:	9a ab       	std	Y+50, r25	; 0x32
    1f9e:	ab ab       	std	Y+51, r26	; 0x33
    1fa0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fa2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fa4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa8:	9c a9       	ldd	r25, Y+52	; 0x34
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e8       	ldi	r20, 0x80	; 128
    1fb0:	5f e3       	ldi	r21, 0x3F	; 63
    1fb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fb6:	88 23       	and	r24, r24
    1fb8:	2c f4       	brge	.+10     	; 0x1fc4 <STM_u8_Rotate_CW+0x8e>
		__ticks = 1;
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	98 ab       	std	Y+48, r25	; 0x30
    1fc0:	8f a7       	std	Y+47, r24	; 0x2f
    1fc2:	3f c0       	rjmp	.+126    	; 0x2042 <STM_u8_Rotate_CW+0x10c>
	else if (__tmp > 65535)
    1fc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1fc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1fca:	9c a9       	ldd	r25, Y+52	; 0x34
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	3f ef       	ldi	r19, 0xFF	; 255
    1fd0:	4f e7       	ldi	r20, 0x7F	; 127
    1fd2:	57 e4       	ldi	r21, 0x47	; 71
    1fd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd8:	18 16       	cp	r1, r24
    1fda:	4c f5       	brge	.+82     	; 0x202e <STM_u8_Rotate_CW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fdc:	6d a9       	ldd	r22, Y+53	; 0x35
    1fde:	7e a9       	ldd	r23, Y+54	; 0x36
    1fe0:	8f a9       	ldd	r24, Y+55	; 0x37
    1fe2:	98 ad       	ldd	r25, Y+56	; 0x38
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e2       	ldi	r20, 0x20	; 32
    1fea:	51 e4       	ldi	r21, 0x41	; 65
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	bc 01       	movw	r22, r24
    1ff6:	cd 01       	movw	r24, r26
    1ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	98 ab       	std	Y+48, r25	; 0x30
    2002:	8f a7       	std	Y+47, r24	; 0x2f
    2004:	0f c0       	rjmp	.+30     	; 0x2024 <STM_u8_Rotate_CW+0xee>
    2006:	88 ec       	ldi	r24, 0xC8	; 200
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	9e a7       	std	Y+46, r25	; 0x2e
    200c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    200e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2010:	9e a5       	ldd	r25, Y+46	; 0x2e
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	f1 f7       	brne	.-4      	; 0x2012 <STM_u8_Rotate_CW+0xdc>
    2016:	9e a7       	std	Y+46, r25	; 0x2e
    2018:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201a:	8f a5       	ldd	r24, Y+47	; 0x2f
    201c:	98 a9       	ldd	r25, Y+48	; 0x30
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	98 ab       	std	Y+48, r25	; 0x30
    2022:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2024:	8f a5       	ldd	r24, Y+47	; 0x2f
    2026:	98 a9       	ldd	r25, Y+48	; 0x30
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	69 f7       	brne	.-38     	; 0x2006 <STM_u8_Rotate_CW+0xd0>
    202c:	14 c0       	rjmp	.+40     	; 0x2056 <STM_u8_Rotate_CW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202e:	69 a9       	ldd	r22, Y+49	; 0x31
    2030:	7a a9       	ldd	r23, Y+50	; 0x32
    2032:	8b a9       	ldd	r24, Y+51	; 0x33
    2034:	9c a9       	ldd	r25, Y+52	; 0x34
    2036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	98 ab       	std	Y+48, r25	; 0x30
    2040:	8f a7       	std	Y+47, r24	; 0x2f
    2042:	8f a5       	ldd	r24, Y+47	; 0x2f
    2044:	98 a9       	ldd	r25, Y+48	; 0x30
    2046:	9c a7       	std	Y+44, r25	; 0x2c
    2048:	8b a7       	std	Y+43, r24	; 0x2b
    204a:	8b a5       	ldd	r24, Y+43	; 0x2b
    204c:	9c a5       	ldd	r25, Y+44	; 0x2c
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <STM_u8_Rotate_CW+0x118>
    2052:	9c a7       	std	Y+44, r25	; 0x2c
    2054:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	// SECOND STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    2056:	83 e0       	ldi	r24, 0x03	; 3
    2058:	64 e0       	ldi	r22, 0x04	; 4
    205a:	41 e0       	ldi	r20, 0x01	; 1
    205c:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_LOW);
    2060:	83 e0       	ldi	r24, 0x03	; 3
    2062:	65 e0       	ldi	r22, 0x05	; 5
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    206a:	83 e0       	ldi	r24, 0x03	; 3
    206c:	66 e0       	ldi	r22, 0x06	; 6
    206e:	41 e0       	ldi	r20, 0x01	; 1
    2070:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    2074:	83 e0       	ldi	r24, 0x03	; 3
    2076:	67 e0       	ldi	r22, 0x07	; 7
    2078:	41 e0       	ldi	r20, 0x01	; 1
    207a:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	a0 e2       	ldi	r26, 0x20	; 32
    2084:	b1 e4       	ldi	r27, 0x41	; 65
    2086:	8f a3       	std	Y+39, r24	; 0x27
    2088:	98 a7       	std	Y+40, r25	; 0x28
    208a:	a9 a7       	std	Y+41, r26	; 0x29
    208c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208e:	6f a1       	ldd	r22, Y+39	; 0x27
    2090:	78 a5       	ldd	r23, Y+40	; 0x28
    2092:	89 a5       	ldd	r24, Y+41	; 0x29
    2094:	9a a5       	ldd	r25, Y+42	; 0x2a
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	4a ef       	ldi	r20, 0xFA	; 250
    209c:	54 e4       	ldi	r21, 0x44	; 68
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	8b a3       	std	Y+35, r24	; 0x23
    20a8:	9c a3       	std	Y+36, r25	; 0x24
    20aa:	ad a3       	std	Y+37, r26	; 0x25
    20ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ae:	6b a1       	ldd	r22, Y+35	; 0x23
    20b0:	7c a1       	ldd	r23, Y+36	; 0x24
    20b2:	8d a1       	ldd	r24, Y+37	; 0x25
    20b4:	9e a1       	ldd	r25, Y+38	; 0x26
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e8       	ldi	r20, 0x80	; 128
    20bc:	5f e3       	ldi	r21, 0x3F	; 63
    20be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c2:	88 23       	and	r24, r24
    20c4:	2c f4       	brge	.+10     	; 0x20d0 <STM_u8_Rotate_CW+0x19a>
		__ticks = 1;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	9a a3       	std	Y+34, r25	; 0x22
    20cc:	89 a3       	std	Y+33, r24	; 0x21
    20ce:	3f c0       	rjmp	.+126    	; 0x214e <STM_u8_Rotate_CW+0x218>
	else if (__tmp > 65535)
    20d0:	6b a1       	ldd	r22, Y+35	; 0x23
    20d2:	7c a1       	ldd	r23, Y+36	; 0x24
    20d4:	8d a1       	ldd	r24, Y+37	; 0x25
    20d6:	9e a1       	ldd	r25, Y+38	; 0x26
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	3f ef       	ldi	r19, 0xFF	; 255
    20dc:	4f e7       	ldi	r20, 0x7F	; 127
    20de:	57 e4       	ldi	r21, 0x47	; 71
    20e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e4:	18 16       	cp	r1, r24
    20e6:	4c f5       	brge	.+82     	; 0x213a <STM_u8_Rotate_CW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e8:	6f a1       	ldd	r22, Y+39	; 0x27
    20ea:	78 a5       	ldd	r23, Y+40	; 0x28
    20ec:	89 a5       	ldd	r24, Y+41	; 0x29
    20ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e2       	ldi	r20, 0x20	; 32
    20f6:	51 e4       	ldi	r21, 0x41	; 65
    20f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	bc 01       	movw	r22, r24
    2102:	cd 01       	movw	r24, r26
    2104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9a a3       	std	Y+34, r25	; 0x22
    210e:	89 a3       	std	Y+33, r24	; 0x21
    2110:	0f c0       	rjmp	.+30     	; 0x2130 <STM_u8_Rotate_CW+0x1fa>
    2112:	88 ec       	ldi	r24, 0xC8	; 200
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	98 a3       	std	Y+32, r25	; 0x20
    2118:	8f 8f       	std	Y+31, r24	; 0x1f
    211a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    211c:	98 a1       	ldd	r25, Y+32	; 0x20
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <STM_u8_Rotate_CW+0x1e8>
    2122:	98 a3       	std	Y+32, r25	; 0x20
    2124:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2126:	89 a1       	ldd	r24, Y+33	; 0x21
    2128:	9a a1       	ldd	r25, Y+34	; 0x22
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	9a a3       	std	Y+34, r25	; 0x22
    212e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2130:	89 a1       	ldd	r24, Y+33	; 0x21
    2132:	9a a1       	ldd	r25, Y+34	; 0x22
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	69 f7       	brne	.-38     	; 0x2112 <STM_u8_Rotate_CW+0x1dc>
    2138:	14 c0       	rjmp	.+40     	; 0x2162 <STM_u8_Rotate_CW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213a:	6b a1       	ldd	r22, Y+35	; 0x23
    213c:	7c a1       	ldd	r23, Y+36	; 0x24
    213e:	8d a1       	ldd	r24, Y+37	; 0x25
    2140:	9e a1       	ldd	r25, Y+38	; 0x26
    2142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9a a3       	std	Y+34, r25	; 0x22
    214c:	89 a3       	std	Y+33, r24	; 0x21
    214e:	89 a1       	ldd	r24, Y+33	; 0x21
    2150:	9a a1       	ldd	r25, Y+34	; 0x22
    2152:	9e 8f       	std	Y+30, r25	; 0x1e
    2154:	8d 8f       	std	Y+29, r24	; 0x1d
    2156:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2158:	9e 8d       	ldd	r25, Y+30	; 0x1e
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <STM_u8_Rotate_CW+0x224>
    215e:	9e 8f       	std	Y+30, r25	; 0x1e
    2160:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	// FOURTH STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    2162:	83 e0       	ldi	r24, 0x03	; 3
    2164:	64 e0       	ldi	r22, 0x04	; 4
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    216c:	83 e0       	ldi	r24, 0x03	; 3
    216e:	65 e0       	ldi	r22, 0x05	; 5
    2170:	41 e0       	ldi	r20, 0x01	; 1
    2172:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_LOW);
    2176:	83 e0       	ldi	r24, 0x03	; 3
    2178:	66 e0       	ldi	r22, 0x06	; 6
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    2180:	83 e0       	ldi	r24, 0x03	; 3
    2182:	67 e0       	ldi	r22, 0x07	; 7
    2184:	41 e0       	ldi	r20, 0x01	; 1
    2186:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	a0 e2       	ldi	r26, 0x20	; 32
    2190:	b1 e4       	ldi	r27, 0x41	; 65
    2192:	89 8f       	std	Y+25, r24	; 0x19
    2194:	9a 8f       	std	Y+26, r25	; 0x1a
    2196:	ab 8f       	std	Y+27, r26	; 0x1b
    2198:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219a:	69 8d       	ldd	r22, Y+25	; 0x19
    219c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    219e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	4a ef       	ldi	r20, 0xFA	; 250
    21a8:	54 e4       	ldi	r21, 0x44	; 68
    21aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	8d 8b       	std	Y+21, r24	; 0x15
    21b4:	9e 8b       	std	Y+22, r25	; 0x16
    21b6:	af 8b       	std	Y+23, r26	; 0x17
    21b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21ba:	6d 89       	ldd	r22, Y+21	; 0x15
    21bc:	7e 89       	ldd	r23, Y+22	; 0x16
    21be:	8f 89       	ldd	r24, Y+23	; 0x17
    21c0:	98 8d       	ldd	r25, Y+24	; 0x18
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e8       	ldi	r20, 0x80	; 128
    21c8:	5f e3       	ldi	r21, 0x3F	; 63
    21ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ce:	88 23       	and	r24, r24
    21d0:	2c f4       	brge	.+10     	; 0x21dc <STM_u8_Rotate_CW+0x2a6>
		__ticks = 1;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	9c 8b       	std	Y+20, r25	; 0x14
    21d8:	8b 8b       	std	Y+19, r24	; 0x13
    21da:	3f c0       	rjmp	.+126    	; 0x225a <STM_u8_Rotate_CW+0x324>
	else if (__tmp > 65535)
    21dc:	6d 89       	ldd	r22, Y+21	; 0x15
    21de:	7e 89       	ldd	r23, Y+22	; 0x16
    21e0:	8f 89       	ldd	r24, Y+23	; 0x17
    21e2:	98 8d       	ldd	r25, Y+24	; 0x18
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	3f ef       	ldi	r19, 0xFF	; 255
    21e8:	4f e7       	ldi	r20, 0x7F	; 127
    21ea:	57 e4       	ldi	r21, 0x47	; 71
    21ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21f0:	18 16       	cp	r1, r24
    21f2:	4c f5       	brge	.+82     	; 0x2246 <STM_u8_Rotate_CW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f4:	69 8d       	ldd	r22, Y+25	; 0x19
    21f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e2       	ldi	r20, 0x20	; 32
    2202:	51 e4       	ldi	r21, 0x41	; 65
    2204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	bc 01       	movw	r22, r24
    220e:	cd 01       	movw	r24, r26
    2210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	9c 8b       	std	Y+20, r25	; 0x14
    221a:	8b 8b       	std	Y+19, r24	; 0x13
    221c:	0f c0       	rjmp	.+30     	; 0x223c <STM_u8_Rotate_CW+0x306>
    221e:	88 ec       	ldi	r24, 0xC8	; 200
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9a 8b       	std	Y+18, r25	; 0x12
    2224:	89 8b       	std	Y+17, r24	; 0x11
    2226:	89 89       	ldd	r24, Y+17	; 0x11
    2228:	9a 89       	ldd	r25, Y+18	; 0x12
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	f1 f7       	brne	.-4      	; 0x222a <STM_u8_Rotate_CW+0x2f4>
    222e:	9a 8b       	std	Y+18, r25	; 0x12
    2230:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2232:	8b 89       	ldd	r24, Y+19	; 0x13
    2234:	9c 89       	ldd	r25, Y+20	; 0x14
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	9c 8b       	std	Y+20, r25	; 0x14
    223a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223c:	8b 89       	ldd	r24, Y+19	; 0x13
    223e:	9c 89       	ldd	r25, Y+20	; 0x14
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	69 f7       	brne	.-38     	; 0x221e <STM_u8_Rotate_CW+0x2e8>
    2244:	14 c0       	rjmp	.+40     	; 0x226e <STM_u8_Rotate_CW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2246:	6d 89       	ldd	r22, Y+21	; 0x15
    2248:	7e 89       	ldd	r23, Y+22	; 0x16
    224a:	8f 89       	ldd	r24, Y+23	; 0x17
    224c:	98 8d       	ldd	r25, Y+24	; 0x18
    224e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	9c 8b       	std	Y+20, r25	; 0x14
    2258:	8b 8b       	std	Y+19, r24	; 0x13
    225a:	8b 89       	ldd	r24, Y+19	; 0x13
    225c:	9c 89       	ldd	r25, Y+20	; 0x14
    225e:	98 8b       	std	Y+16, r25	; 0x10
    2260:	8f 87       	std	Y+15, r24	; 0x0f
    2262:	8f 85       	ldd	r24, Y+15	; 0x0f
    2264:	98 89       	ldd	r25, Y+16	; 0x10
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	f1 f7       	brne	.-4      	; 0x2266 <STM_u8_Rotate_CW+0x330>
    226a:	98 8b       	std	Y+16, r25	; 0x10
    226c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	// FOURTH STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    226e:	83 e0       	ldi	r24, 0x03	; 3
    2270:	64 e0       	ldi	r22, 0x04	; 4
    2272:	41 e0       	ldi	r20, 0x01	; 1
    2274:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    2278:	83 e0       	ldi	r24, 0x03	; 3
    227a:	65 e0       	ldi	r22, 0x05	; 5
    227c:	41 e0       	ldi	r20, 0x01	; 1
    227e:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    2282:	83 e0       	ldi	r24, 0x03	; 3
    2284:	66 e0       	ldi	r22, 0x06	; 6
    2286:	41 e0       	ldi	r20, 0x01	; 1
    2288:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_LOW);
    228c:	83 e0       	ldi	r24, 0x03	; 3
    228e:	67 e0       	ldi	r22, 0x07	; 7
    2290:	40 e0       	ldi	r20, 0x00	; 0
    2292:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	a0 e2       	ldi	r26, 0x20	; 32
    229c:	b1 e4       	ldi	r27, 0x41	; 65
    229e:	8b 87       	std	Y+11, r24	; 0x0b
    22a0:	9c 87       	std	Y+12, r25	; 0x0c
    22a2:	ad 87       	std	Y+13, r26	; 0x0d
    22a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	4a ef       	ldi	r20, 0xFA	; 250
    22b4:	54 e4       	ldi	r21, 0x44	; 68
    22b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	8f 83       	std	Y+7, r24	; 0x07
    22c0:	98 87       	std	Y+8, r25	; 0x08
    22c2:	a9 87       	std	Y+9, r26	; 0x09
    22c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22c6:	6f 81       	ldd	r22, Y+7	; 0x07
    22c8:	78 85       	ldd	r23, Y+8	; 0x08
    22ca:	89 85       	ldd	r24, Y+9	; 0x09
    22cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e8       	ldi	r20, 0x80	; 128
    22d4:	5f e3       	ldi	r21, 0x3F	; 63
    22d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22da:	88 23       	and	r24, r24
    22dc:	2c f4       	brge	.+10     	; 0x22e8 <STM_u8_Rotate_CW+0x3b2>
		__ticks = 1;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	9e 83       	std	Y+6, r25	; 0x06
    22e4:	8d 83       	std	Y+5, r24	; 0x05
    22e6:	3f c0       	rjmp	.+126    	; 0x2366 <STM_u8_Rotate_CW+0x430>
	else if (__tmp > 65535)
    22e8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ea:	78 85       	ldd	r23, Y+8	; 0x08
    22ec:	89 85       	ldd	r24, Y+9	; 0x09
    22ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	3f ef       	ldi	r19, 0xFF	; 255
    22f4:	4f e7       	ldi	r20, 0x7F	; 127
    22f6:	57 e4       	ldi	r21, 0x47	; 71
    22f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22fc:	18 16       	cp	r1, r24
    22fe:	4c f5       	brge	.+82     	; 0x2352 <STM_u8_Rotate_CW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2300:	6b 85       	ldd	r22, Y+11	; 0x0b
    2302:	7c 85       	ldd	r23, Y+12	; 0x0c
    2304:	8d 85       	ldd	r24, Y+13	; 0x0d
    2306:	9e 85       	ldd	r25, Y+14	; 0x0e
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e2       	ldi	r20, 0x20	; 32
    230e:	51 e4       	ldi	r21, 0x41	; 65
    2310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	bc 01       	movw	r22, r24
    231a:	cd 01       	movw	r24, r26
    231c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	9e 83       	std	Y+6, r25	; 0x06
    2326:	8d 83       	std	Y+5, r24	; 0x05
    2328:	0f c0       	rjmp	.+30     	; 0x2348 <STM_u8_Rotate_CW+0x412>
    232a:	88 ec       	ldi	r24, 0xC8	; 200
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	9c 83       	std	Y+4, r25	; 0x04
    2330:	8b 83       	std	Y+3, r24	; 0x03
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	9c 81       	ldd	r25, Y+4	; 0x04
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <STM_u8_Rotate_CW+0x400>
    233a:	9c 83       	std	Y+4, r25	; 0x04
    233c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	9e 83       	std	Y+6, r25	; 0x06
    2346:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2348:	8d 81       	ldd	r24, Y+5	; 0x05
    234a:	9e 81       	ldd	r25, Y+6	; 0x06
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	69 f7       	brne	.-38     	; 0x232a <STM_u8_Rotate_CW+0x3f4>
    2350:	14 c0       	rjmp	.+40     	; 0x237a <STM_u8_Rotate_CW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2352:	6f 81       	ldd	r22, Y+7	; 0x07
    2354:	78 85       	ldd	r23, Y+8	; 0x08
    2356:	89 85       	ldd	r24, Y+9	; 0x09
    2358:	9a 85       	ldd	r25, Y+10	; 0x0a
    235a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	8d 83       	std	Y+5, r24	; 0x05
    2366:	8d 81       	ldd	r24, Y+5	; 0x05
    2368:	9e 81       	ldd	r25, Y+6	; 0x06
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	f1 f7       	brne	.-4      	; 0x2372 <STM_u8_Rotate_CW+0x43c>
    2376:	9a 83       	std	Y+2, r25	; 0x02
    2378:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);


	return STD_TYPES_OK;
    237a:	81 e0       	ldi	r24, 0x01	; 1
}
    237c:	e8 96       	adiw	r28, 0x38	; 56
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret

0000238e <STM_u8_Rotate_CCW>:

u8 STM_u8_Rotate_CCW()
{
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    2396:	e8 97       	sbiw	r28, 0x38	; 56
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	f8 94       	cli
    239c:	de bf       	out	0x3e, r29	; 62
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	cd bf       	out	0x3d, r28	; 61
	// FIRST STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    23a2:	83 e0       	ldi	r24, 0x03	; 3
    23a4:	64 e0       	ldi	r22, 0x04	; 4
    23a6:	41 e0       	ldi	r20, 0x01	; 1
    23a8:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    23ac:	83 e0       	ldi	r24, 0x03	; 3
    23ae:	65 e0       	ldi	r22, 0x05	; 5
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    23b6:	83 e0       	ldi	r24, 0x03	; 3
    23b8:	66 e0       	ldi	r22, 0x06	; 6
    23ba:	41 e0       	ldi	r20, 0x01	; 1
    23bc:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_LOW);
    23c0:	83 e0       	ldi	r24, 0x03	; 3
    23c2:	67 e0       	ldi	r22, 0x07	; 7
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a0 e2       	ldi	r26, 0x20	; 32
    23d0:	b1 e4       	ldi	r27, 0x41	; 65
    23d2:	8d ab       	std	Y+53, r24	; 0x35
    23d4:	9e ab       	std	Y+54, r25	; 0x36
    23d6:	af ab       	std	Y+55, r26	; 0x37
    23d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23da:	6d a9       	ldd	r22, Y+53	; 0x35
    23dc:	7e a9       	ldd	r23, Y+54	; 0x36
    23de:	8f a9       	ldd	r24, Y+55	; 0x37
    23e0:	98 ad       	ldd	r25, Y+56	; 0x38
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	4a ef       	ldi	r20, 0xFA	; 250
    23e8:	54 e4       	ldi	r21, 0x44	; 68
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	89 ab       	std	Y+49, r24	; 0x31
    23f4:	9a ab       	std	Y+50, r25	; 0x32
    23f6:	ab ab       	std	Y+51, r26	; 0x33
    23f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23fa:	69 a9       	ldd	r22, Y+49	; 0x31
    23fc:	7a a9       	ldd	r23, Y+50	; 0x32
    23fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2400:	9c a9       	ldd	r25, Y+52	; 0x34
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	2c f4       	brge	.+10     	; 0x241c <STM_u8_Rotate_CCW+0x8e>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	98 ab       	std	Y+48, r25	; 0x30
    2418:	8f a7       	std	Y+47, r24	; 0x2f
    241a:	3f c0       	rjmp	.+126    	; 0x249a <STM_u8_Rotate_CCW+0x10c>
	else if (__tmp > 65535)
    241c:	69 a9       	ldd	r22, Y+49	; 0x31
    241e:	7a a9       	ldd	r23, Y+50	; 0x32
    2420:	8b a9       	ldd	r24, Y+51	; 0x33
    2422:	9c a9       	ldd	r25, Y+52	; 0x34
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	4c f5       	brge	.+82     	; 0x2486 <STM_u8_Rotate_CCW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2434:	6d a9       	ldd	r22, Y+53	; 0x35
    2436:	7e a9       	ldd	r23, Y+54	; 0x36
    2438:	8f a9       	ldd	r24, Y+55	; 0x37
    243a:	98 ad       	ldd	r25, Y+56	; 0x38
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	98 ab       	std	Y+48, r25	; 0x30
    245a:	8f a7       	std	Y+47, r24	; 0x2f
    245c:	0f c0       	rjmp	.+30     	; 0x247c <STM_u8_Rotate_CCW+0xee>
    245e:	88 ec       	ldi	r24, 0xC8	; 200
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9e a7       	std	Y+46, r25	; 0x2e
    2464:	8d a7       	std	Y+45, r24	; 0x2d
    2466:	8d a5       	ldd	r24, Y+45	; 0x2d
    2468:	9e a5       	ldd	r25, Y+46	; 0x2e
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <STM_u8_Rotate_CCW+0xdc>
    246e:	9e a7       	std	Y+46, r25	; 0x2e
    2470:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	8f a5       	ldd	r24, Y+47	; 0x2f
    2474:	98 a9       	ldd	r25, Y+48	; 0x30
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	98 ab       	std	Y+48, r25	; 0x30
    247a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	8f a5       	ldd	r24, Y+47	; 0x2f
    247e:	98 a9       	ldd	r25, Y+48	; 0x30
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	69 f7       	brne	.-38     	; 0x245e <STM_u8_Rotate_CCW+0xd0>
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <STM_u8_Rotate_CCW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	69 a9       	ldd	r22, Y+49	; 0x31
    2488:	7a a9       	ldd	r23, Y+50	; 0x32
    248a:	8b a9       	ldd	r24, Y+51	; 0x33
    248c:	9c a9       	ldd	r25, Y+52	; 0x34
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	98 ab       	std	Y+48, r25	; 0x30
    2498:	8f a7       	std	Y+47, r24	; 0x2f
    249a:	8f a5       	ldd	r24, Y+47	; 0x2f
    249c:	98 a9       	ldd	r25, Y+48	; 0x30
    249e:	9c a7       	std	Y+44, r25	; 0x2c
    24a0:	8b a7       	std	Y+43, r24	; 0x2b
    24a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    24a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <STM_u8_Rotate_CCW+0x118>
    24aa:	9c a7       	std	Y+44, r25	; 0x2c
    24ac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	// SECOND STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    24ae:	83 e0       	ldi	r24, 0x03	; 3
    24b0:	64 e0       	ldi	r22, 0x04	; 4
    24b2:	41 e0       	ldi	r20, 0x01	; 1
    24b4:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    24b8:	83 e0       	ldi	r24, 0x03	; 3
    24ba:	65 e0       	ldi	r22, 0x05	; 5
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_LOW);
    24c2:	83 e0       	ldi	r24, 0x03	; 3
    24c4:	66 e0       	ldi	r22, 0x06	; 6
    24c6:	40 e0       	ldi	r20, 0x00	; 0
    24c8:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	67 e0       	ldi	r22, 0x07	; 7
    24d0:	41 e0       	ldi	r20, 0x01	; 1
    24d2:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	a0 e2       	ldi	r26, 0x20	; 32
    24dc:	b1 e4       	ldi	r27, 0x41	; 65
    24de:	8f a3       	std	Y+39, r24	; 0x27
    24e0:	98 a7       	std	Y+40, r25	; 0x28
    24e2:	a9 a7       	std	Y+41, r26	; 0x29
    24e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e6:	6f a1       	ldd	r22, Y+39	; 0x27
    24e8:	78 a5       	ldd	r23, Y+40	; 0x28
    24ea:	89 a5       	ldd	r24, Y+41	; 0x29
    24ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	4a ef       	ldi	r20, 0xFA	; 250
    24f4:	54 e4       	ldi	r21, 0x44	; 68
    24f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	8b a3       	std	Y+35, r24	; 0x23
    2500:	9c a3       	std	Y+36, r25	; 0x24
    2502:	ad a3       	std	Y+37, r26	; 0x25
    2504:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2506:	6b a1       	ldd	r22, Y+35	; 0x23
    2508:	7c a1       	ldd	r23, Y+36	; 0x24
    250a:	8d a1       	ldd	r24, Y+37	; 0x25
    250c:	9e a1       	ldd	r25, Y+38	; 0x26
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e8       	ldi	r20, 0x80	; 128
    2514:	5f e3       	ldi	r21, 0x3F	; 63
    2516:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    251a:	88 23       	and	r24, r24
    251c:	2c f4       	brge	.+10     	; 0x2528 <STM_u8_Rotate_CCW+0x19a>
		__ticks = 1;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	9a a3       	std	Y+34, r25	; 0x22
    2524:	89 a3       	std	Y+33, r24	; 0x21
    2526:	3f c0       	rjmp	.+126    	; 0x25a6 <STM_u8_Rotate_CCW+0x218>
	else if (__tmp > 65535)
    2528:	6b a1       	ldd	r22, Y+35	; 0x23
    252a:	7c a1       	ldd	r23, Y+36	; 0x24
    252c:	8d a1       	ldd	r24, Y+37	; 0x25
    252e:	9e a1       	ldd	r25, Y+38	; 0x26
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	3f ef       	ldi	r19, 0xFF	; 255
    2534:	4f e7       	ldi	r20, 0x7F	; 127
    2536:	57 e4       	ldi	r21, 0x47	; 71
    2538:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    253c:	18 16       	cp	r1, r24
    253e:	4c f5       	brge	.+82     	; 0x2592 <STM_u8_Rotate_CCW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2540:	6f a1       	ldd	r22, Y+39	; 0x27
    2542:	78 a5       	ldd	r23, Y+40	; 0x28
    2544:	89 a5       	ldd	r24, Y+41	; 0x29
    2546:	9a a5       	ldd	r25, Y+42	; 0x2a
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e2       	ldi	r20, 0x20	; 32
    254e:	51 e4       	ldi	r21, 0x41	; 65
    2550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	bc 01       	movw	r22, r24
    255a:	cd 01       	movw	r24, r26
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	9a a3       	std	Y+34, r25	; 0x22
    2566:	89 a3       	std	Y+33, r24	; 0x21
    2568:	0f c0       	rjmp	.+30     	; 0x2588 <STM_u8_Rotate_CCW+0x1fa>
    256a:	88 ec       	ldi	r24, 0xC8	; 200
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	98 a3       	std	Y+32, r25	; 0x20
    2570:	8f 8f       	std	Y+31, r24	; 0x1f
    2572:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2574:	98 a1       	ldd	r25, Y+32	; 0x20
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <STM_u8_Rotate_CCW+0x1e8>
    257a:	98 a3       	std	Y+32, r25	; 0x20
    257c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257e:	89 a1       	ldd	r24, Y+33	; 0x21
    2580:	9a a1       	ldd	r25, Y+34	; 0x22
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	9a a3       	std	Y+34, r25	; 0x22
    2586:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2588:	89 a1       	ldd	r24, Y+33	; 0x21
    258a:	9a a1       	ldd	r25, Y+34	; 0x22
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	69 f7       	brne	.-38     	; 0x256a <STM_u8_Rotate_CCW+0x1dc>
    2590:	14 c0       	rjmp	.+40     	; 0x25ba <STM_u8_Rotate_CCW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2592:	6b a1       	ldd	r22, Y+35	; 0x23
    2594:	7c a1       	ldd	r23, Y+36	; 0x24
    2596:	8d a1       	ldd	r24, Y+37	; 0x25
    2598:	9e a1       	ldd	r25, Y+38	; 0x26
    259a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	9a a3       	std	Y+34, r25	; 0x22
    25a4:	89 a3       	std	Y+33, r24	; 0x21
    25a6:	89 a1       	ldd	r24, Y+33	; 0x21
    25a8:	9a a1       	ldd	r25, Y+34	; 0x22
    25aa:	9e 8f       	std	Y+30, r25	; 0x1e
    25ac:	8d 8f       	std	Y+29, r24	; 0x1d
    25ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <STM_u8_Rotate_CCW+0x224>
    25b6:	9e 8f       	std	Y+30, r25	; 0x1e
    25b8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	// THIRD STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    25ba:	83 e0       	ldi	r24, 0x03	; 3
    25bc:	64 e0       	ldi	r22, 0x04	; 4
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_LOW);
    25c4:	83 e0       	ldi	r24, 0x03	; 3
    25c6:	65 e0       	ldi	r22, 0x05	; 5
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    25ce:	83 e0       	ldi	r24, 0x03	; 3
    25d0:	66 e0       	ldi	r22, 0x06	; 6
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    25d8:	83 e0       	ldi	r24, 0x03	; 3
    25da:	67 e0       	ldi	r22, 0x07	; 7
    25dc:	41 e0       	ldi	r20, 0x01	; 1
    25de:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	a0 e2       	ldi	r26, 0x20	; 32
    25e8:	b1 e4       	ldi	r27, 0x41	; 65
    25ea:	89 8f       	std	Y+25, r24	; 0x19
    25ec:	9a 8f       	std	Y+26, r25	; 0x1a
    25ee:	ab 8f       	std	Y+27, r26	; 0x1b
    25f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f2:	69 8d       	ldd	r22, Y+25	; 0x19
    25f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	4a ef       	ldi	r20, 0xFA	; 250
    2600:	54 e4       	ldi	r21, 0x44	; 68
    2602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	8d 8b       	std	Y+21, r24	; 0x15
    260c:	9e 8b       	std	Y+22, r25	; 0x16
    260e:	af 8b       	std	Y+23, r26	; 0x17
    2610:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2612:	6d 89       	ldd	r22, Y+21	; 0x15
    2614:	7e 89       	ldd	r23, Y+22	; 0x16
    2616:	8f 89       	ldd	r24, Y+23	; 0x17
    2618:	98 8d       	ldd	r25, Y+24	; 0x18
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e8       	ldi	r20, 0x80	; 128
    2620:	5f e3       	ldi	r21, 0x3F	; 63
    2622:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2626:	88 23       	and	r24, r24
    2628:	2c f4       	brge	.+10     	; 0x2634 <STM_u8_Rotate_CCW+0x2a6>
		__ticks = 1;
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	9c 8b       	std	Y+20, r25	; 0x14
    2630:	8b 8b       	std	Y+19, r24	; 0x13
    2632:	3f c0       	rjmp	.+126    	; 0x26b2 <STM_u8_Rotate_CCW+0x324>
	else if (__tmp > 65535)
    2634:	6d 89       	ldd	r22, Y+21	; 0x15
    2636:	7e 89       	ldd	r23, Y+22	; 0x16
    2638:	8f 89       	ldd	r24, Y+23	; 0x17
    263a:	98 8d       	ldd	r25, Y+24	; 0x18
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	3f ef       	ldi	r19, 0xFF	; 255
    2640:	4f e7       	ldi	r20, 0x7F	; 127
    2642:	57 e4       	ldi	r21, 0x47	; 71
    2644:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2648:	18 16       	cp	r1, r24
    264a:	4c f5       	brge	.+82     	; 0x269e <STM_u8_Rotate_CCW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264c:	69 8d       	ldd	r22, Y+25	; 0x19
    264e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2650:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2652:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e2       	ldi	r20, 0x20	; 32
    265a:	51 e4       	ldi	r21, 0x41	; 65
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	bc 01       	movw	r22, r24
    2666:	cd 01       	movw	r24, r26
    2668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	9c 8b       	std	Y+20, r25	; 0x14
    2672:	8b 8b       	std	Y+19, r24	; 0x13
    2674:	0f c0       	rjmp	.+30     	; 0x2694 <STM_u8_Rotate_CCW+0x306>
    2676:	88 ec       	ldi	r24, 0xC8	; 200
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	9a 8b       	std	Y+18, r25	; 0x12
    267c:	89 8b       	std	Y+17, r24	; 0x11
    267e:	89 89       	ldd	r24, Y+17	; 0x11
    2680:	9a 89       	ldd	r25, Y+18	; 0x12
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <STM_u8_Rotate_CCW+0x2f4>
    2686:	9a 8b       	std	Y+18, r25	; 0x12
    2688:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268a:	8b 89       	ldd	r24, Y+19	; 0x13
    268c:	9c 89       	ldd	r25, Y+20	; 0x14
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	9c 8b       	std	Y+20, r25	; 0x14
    2692:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2694:	8b 89       	ldd	r24, Y+19	; 0x13
    2696:	9c 89       	ldd	r25, Y+20	; 0x14
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	69 f7       	brne	.-38     	; 0x2676 <STM_u8_Rotate_CCW+0x2e8>
    269c:	14 c0       	rjmp	.+40     	; 0x26c6 <STM_u8_Rotate_CCW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269e:	6d 89       	ldd	r22, Y+21	; 0x15
    26a0:	7e 89       	ldd	r23, Y+22	; 0x16
    26a2:	8f 89       	ldd	r24, Y+23	; 0x17
    26a4:	98 8d       	ldd	r25, Y+24	; 0x18
    26a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	9c 8b       	std	Y+20, r25	; 0x14
    26b0:	8b 8b       	std	Y+19, r24	; 0x13
    26b2:	8b 89       	ldd	r24, Y+19	; 0x13
    26b4:	9c 89       	ldd	r25, Y+20	; 0x14
    26b6:	98 8b       	std	Y+16, r25	; 0x10
    26b8:	8f 87       	std	Y+15, r24	; 0x0f
    26ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    26bc:	98 89       	ldd	r25, Y+16	; 0x10
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	f1 f7       	brne	.-4      	; 0x26be <STM_u8_Rotate_CCW+0x330>
    26c2:	98 8b       	std	Y+16, r25	; 0x10
    26c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	// FORTH STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_LOW);
    26c6:	83 e0       	ldi	r24, 0x03	; 3
    26c8:	64 e0       	ldi	r22, 0x04	; 4
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    26d0:	83 e0       	ldi	r24, 0x03	; 3
    26d2:	65 e0       	ldi	r22, 0x05	; 5
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    26da:	83 e0       	ldi	r24, 0x03	; 3
    26dc:	66 e0       	ldi	r22, 0x06	; 6
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    26e4:	83 e0       	ldi	r24, 0x03	; 3
    26e6:	67 e0       	ldi	r22, 0x07	; 7
    26e8:	41 e0       	ldi	r20, 0x01	; 1
    26ea:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a0 e2       	ldi	r26, 0x20	; 32
    26f4:	b1 e4       	ldi	r27, 0x41	; 65
    26f6:	8b 87       	std	Y+11, r24	; 0x0b
    26f8:	9c 87       	std	Y+12, r25	; 0x0c
    26fa:	ad 87       	std	Y+13, r26	; 0x0d
    26fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2700:	7c 85       	ldd	r23, Y+12	; 0x0c
    2702:	8d 85       	ldd	r24, Y+13	; 0x0d
    2704:	9e 85       	ldd	r25, Y+14	; 0x0e
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	4a ef       	ldi	r20, 0xFA	; 250
    270c:	54 e4       	ldi	r21, 0x44	; 68
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	8f 83       	std	Y+7, r24	; 0x07
    2718:	98 87       	std	Y+8, r25	; 0x08
    271a:	a9 87       	std	Y+9, r26	; 0x09
    271c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    271e:	6f 81       	ldd	r22, Y+7	; 0x07
    2720:	78 85       	ldd	r23, Y+8	; 0x08
    2722:	89 85       	ldd	r24, Y+9	; 0x09
    2724:	9a 85       	ldd	r25, Y+10	; 0x0a
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e8       	ldi	r20, 0x80	; 128
    272c:	5f e3       	ldi	r21, 0x3F	; 63
    272e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2732:	88 23       	and	r24, r24
    2734:	2c f4       	brge	.+10     	; 0x2740 <STM_u8_Rotate_CCW+0x3b2>
		__ticks = 1;
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	3f c0       	rjmp	.+126    	; 0x27be <STM_u8_Rotate_CCW+0x430>
	else if (__tmp > 65535)
    2740:	6f 81       	ldd	r22, Y+7	; 0x07
    2742:	78 85       	ldd	r23, Y+8	; 0x08
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	9a 85       	ldd	r25, Y+10	; 0x0a
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	3f ef       	ldi	r19, 0xFF	; 255
    274c:	4f e7       	ldi	r20, 0x7F	; 127
    274e:	57 e4       	ldi	r21, 0x47	; 71
    2750:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2754:	18 16       	cp	r1, r24
    2756:	4c f5       	brge	.+82     	; 0x27aa <STM_u8_Rotate_CCW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2758:	6b 85       	ldd	r22, Y+11	; 0x0b
    275a:	7c 85       	ldd	r23, Y+12	; 0x0c
    275c:	8d 85       	ldd	r24, Y+13	; 0x0d
    275e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e2       	ldi	r20, 0x20	; 32
    2766:	51 e4       	ldi	r21, 0x41	; 65
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	0f c0       	rjmp	.+30     	; 0x27a0 <STM_u8_Rotate_CCW+0x412>
    2782:	88 ec       	ldi	r24, 0xC8	; 200
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	8b 83       	std	Y+3, r24	; 0x03
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	9c 81       	ldd	r25, Y+4	; 0x04
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <STM_u8_Rotate_CCW+0x400>
    2792:	9c 83       	std	Y+4, r25	; 0x04
    2794:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	9e 83       	std	Y+6, r25	; 0x06
    279e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	9e 81       	ldd	r25, Y+6	; 0x06
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	69 f7       	brne	.-38     	; 0x2782 <STM_u8_Rotate_CCW+0x3f4>
    27a8:	14 c0       	rjmp	.+40     	; 0x27d2 <STM_u8_Rotate_CCW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27aa:	6f 81       	ldd	r22, Y+7	; 0x07
    27ac:	78 85       	ldd	r23, Y+8	; 0x08
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <STM_u8_Rotate_CCW+0x43c>
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	return STD_TYPES_OK;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
}
    27d4:	e8 96       	adiw	r28, 0x38	; 56
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	cf 91       	pop	r28
    27e2:	df 91       	pop	r29
    27e4:	08 95       	ret

000027e6 <STM_u8_STOP>:

u8 STM_u8_STOP()
{
    27e6:	df 93       	push	r29
    27e8:	cf 93       	push	r28
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	2e 97       	sbiw	r28, 0x0e	; 14
    27f0:	0f b6       	in	r0, 0x3f	; 63
    27f2:	f8 94       	cli
    27f4:	de bf       	out	0x3e, r29	; 62
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	cd bf       	out	0x3d, r28	; 61
	// STOP STEPPER MOTOR
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    27fa:	83 e0       	ldi	r24, 0x03	; 3
    27fc:	64 e0       	ldi	r22, 0x04	; 4
    27fe:	41 e0       	ldi	r20, 0x01	; 1
    2800:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    2804:	83 e0       	ldi	r24, 0x03	; 3
    2806:	65 e0       	ldi	r22, 0x05	; 5
    2808:	41 e0       	ldi	r20, 0x01	; 1
    280a:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    280e:	83 e0       	ldi	r24, 0x03	; 3
    2810:	66 e0       	ldi	r22, 0x06	; 6
    2812:	41 e0       	ldi	r20, 0x01	; 1
    2814:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    2818:	83 e0       	ldi	r24, 0x03	; 3
    281a:	67 e0       	ldi	r22, 0x07	; 7
    281c:	41 e0       	ldi	r20, 0x01	; 1
    281e:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	a0 e2       	ldi	r26, 0x20	; 32
    2828:	b1 e4       	ldi	r27, 0x41	; 65
    282a:	8b 87       	std	Y+11, r24	; 0x0b
    282c:	9c 87       	std	Y+12, r25	; 0x0c
    282e:	ad 87       	std	Y+13, r26	; 0x0d
    2830:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2832:	6b 85       	ldd	r22, Y+11	; 0x0b
    2834:	7c 85       	ldd	r23, Y+12	; 0x0c
    2836:	8d 85       	ldd	r24, Y+13	; 0x0d
    2838:	9e 85       	ldd	r25, Y+14	; 0x0e
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	4a ef       	ldi	r20, 0xFA	; 250
    2840:	54 e4       	ldi	r21, 0x44	; 68
    2842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	8f 83       	std	Y+7, r24	; 0x07
    284c:	98 87       	std	Y+8, r25	; 0x08
    284e:	a9 87       	std	Y+9, r26	; 0x09
    2850:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2852:	6f 81       	ldd	r22, Y+7	; 0x07
    2854:	78 85       	ldd	r23, Y+8	; 0x08
    2856:	89 85       	ldd	r24, Y+9	; 0x09
    2858:	9a 85       	ldd	r25, Y+10	; 0x0a
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e8       	ldi	r20, 0x80	; 128
    2860:	5f e3       	ldi	r21, 0x3F	; 63
    2862:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2866:	88 23       	and	r24, r24
    2868:	2c f4       	brge	.+10     	; 0x2874 <STM_u8_STOP+0x8e>
		__ticks = 1;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
    2872:	3f c0       	rjmp	.+126    	; 0x28f2 <STM_u8_STOP+0x10c>
	else if (__tmp > 65535)
    2874:	6f 81       	ldd	r22, Y+7	; 0x07
    2876:	78 85       	ldd	r23, Y+8	; 0x08
    2878:	89 85       	ldd	r24, Y+9	; 0x09
    287a:	9a 85       	ldd	r25, Y+10	; 0x0a
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	3f ef       	ldi	r19, 0xFF	; 255
    2880:	4f e7       	ldi	r20, 0x7F	; 127
    2882:	57 e4       	ldi	r21, 0x47	; 71
    2884:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2888:	18 16       	cp	r1, r24
    288a:	4c f5       	brge	.+82     	; 0x28de <STM_u8_STOP+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288c:	6b 85       	ldd	r22, Y+11	; 0x0b
    288e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2890:	8d 85       	ldd	r24, Y+13	; 0x0d
    2892:	9e 85       	ldd	r25, Y+14	; 0x0e
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e2       	ldi	r20, 0x20	; 32
    289a:	51 e4       	ldi	r21, 0x41	; 65
    289c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9e 83       	std	Y+6, r25	; 0x06
    28b2:	8d 83       	std	Y+5, r24	; 0x05
    28b4:	0f c0       	rjmp	.+30     	; 0x28d4 <STM_u8_STOP+0xee>
    28b6:	88 ec       	ldi	r24, 0xC8	; 200
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	9c 83       	std	Y+4, r25	; 0x04
    28bc:	8b 83       	std	Y+3, r24	; 0x03
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	9c 81       	ldd	r25, Y+4	; 0x04
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <STM_u8_STOP+0xdc>
    28c6:	9c 83       	std	Y+4, r25	; 0x04
    28c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ca:	8d 81       	ldd	r24, Y+5	; 0x05
    28cc:	9e 81       	ldd	r25, Y+6	; 0x06
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	9e 81       	ldd	r25, Y+6	; 0x06
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	69 f7       	brne	.-38     	; 0x28b6 <STM_u8_STOP+0xd0>
    28dc:	14 c0       	rjmp	.+40     	; 0x2906 <STM_u8_STOP+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28de:	6f 81       	ldd	r22, Y+7	; 0x07
    28e0:	78 85       	ldd	r23, Y+8	; 0x08
    28e2:	89 85       	ldd	r24, Y+9	; 0x09
    28e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9e 83       	std	Y+6, r25	; 0x06
    28f0:	8d 83       	std	Y+5, r24	; 0x05
    28f2:	8d 81       	ldd	r24, Y+5	; 0x05
    28f4:	9e 81       	ldd	r25, Y+6	; 0x06
    28f6:	9a 83       	std	Y+2, r25	; 0x02
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	9a 81       	ldd	r25, Y+2	; 0x02
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	f1 f7       	brne	.-4      	; 0x28fe <STM_u8_STOP+0x118>
    2902:	9a 83       	std	Y+2, r25	; 0x02
    2904:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	return STD_TYPES_OK;
    2906:	81 e0       	ldi	r24, 0x01	; 1
}
    2908:	2e 96       	adiw	r28, 0x0e	; 14
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	08 95       	ret

0000291a <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_voidInit(void)
{
    291a:	0f 93       	push	r16
    291c:	1f 93       	push	r17
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
    2926:	cc 54       	subi	r28, 0x4C	; 76
    2928:	d0 40       	sbci	r29, 0x00	; 0
    292a:	0f b6       	in	r0, 0x3f	; 63
    292c:	f8 94       	cli
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	cd bf       	out	0x3d, r28	; 61
    2934:	fe 01       	movw	r30, r28
    2936:	e7 5b       	subi	r30, 0xB7	; 183
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	ac e0       	ldi	r26, 0x0C	; 12
    2940:	b2 e4       	ldi	r27, 0x42	; 66
    2942:	80 83       	st	Z, r24
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	a2 83       	std	Z+2, r26	; 0x02
    2948:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294a:	8e 01       	movw	r16, r28
    294c:	0b 5b       	subi	r16, 0xBB	; 187
    294e:	1f 4f       	sbci	r17, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	e7 5b       	subi	r30, 0xB7	; 183
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	4a ef       	ldi	r20, 0xFA	; 250
    2964:	54 e4       	ldi	r21, 0x44	; 68
    2966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	f8 01       	movw	r30, r16
    2970:	80 83       	st	Z, r24
    2972:	91 83       	std	Z+1, r25	; 0x01
    2974:	a2 83       	std	Z+2, r26	; 0x02
    2976:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2978:	fe 01       	movw	r30, r28
    297a:	eb 5b       	subi	r30, 0xBB	; 187
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e8       	ldi	r20, 0x80	; 128
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2992:	88 23       	and	r24, r24
    2994:	44 f4       	brge	.+16     	; 0x29a6 <LCD_voidInit+0x8c>
		__ticks = 1;
    2996:	fe 01       	movw	r30, r28
    2998:	ed 5b       	subi	r30, 0xBD	; 189
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	91 83       	std	Z+1, r25	; 0x01
    29a2:	80 83       	st	Z, r24
    29a4:	64 c0       	rjmp	.+200    	; 0x2a6e <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    29a6:	fe 01       	movw	r30, r28
    29a8:	eb 5b       	subi	r30, 0xBB	; 187
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	60 81       	ld	r22, Z
    29ae:	71 81       	ldd	r23, Z+1	; 0x01
    29b0:	82 81       	ldd	r24, Z+2	; 0x02
    29b2:	93 81       	ldd	r25, Z+3	; 0x03
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	3f ef       	ldi	r19, 0xFF	; 255
    29b8:	4f e7       	ldi	r20, 0x7F	; 127
    29ba:	57 e4       	ldi	r21, 0x47	; 71
    29bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29c0:	18 16       	cp	r1, r24
    29c2:	0c f0       	brlt	.+2      	; 0x29c6 <LCD_voidInit+0xac>
    29c4:	43 c0       	rjmp	.+134    	; 0x2a4c <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c6:	fe 01       	movw	r30, r28
    29c8:	e7 5b       	subi	r30, 0xB7	; 183
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	60 81       	ld	r22, Z
    29ce:	71 81       	ldd	r23, Z+1	; 0x01
    29d0:	82 81       	ldd	r24, Z+2	; 0x02
    29d2:	93 81       	ldd	r25, Z+3	; 0x03
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e2       	ldi	r20, 0x20	; 32
    29da:	51 e4       	ldi	r21, 0x41	; 65
    29dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	8e 01       	movw	r16, r28
    29e6:	0d 5b       	subi	r16, 0xBD	; 189
    29e8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ea:	bc 01       	movw	r22, r24
    29ec:	cd 01       	movw	r24, r26
    29ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	f8 01       	movw	r30, r16
    29f8:	91 83       	std	Z+1, r25	; 0x01
    29fa:	80 83       	st	Z, r24
    29fc:	1f c0       	rjmp	.+62     	; 0x2a3c <LCD_voidInit+0x122>
    29fe:	fe 01       	movw	r30, r28
    2a00:	ef 5b       	subi	r30, 0xBF	; 191
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	88 ec       	ldi	r24, 0xC8	; 200
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	91 83       	std	Z+1, r25	; 0x01
    2a0a:	80 83       	st	Z, r24
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	ef 5b       	subi	r30, 0xBF	; 191
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	80 81       	ld	r24, Z
    2a14:	91 81       	ldd	r25, Z+1	; 0x01
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <LCD_voidInit+0xfc>
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	ef 5b       	subi	r30, 0xBF	; 191
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	91 83       	std	Z+1, r25	; 0x01
    2a22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a24:	de 01       	movw	r26, r28
    2a26:	ad 5b       	subi	r26, 0xBD	; 189
    2a28:	bf 4f       	sbci	r27, 0xFF	; 255
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	ed 5b       	subi	r30, 0xBD	; 189
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	80 81       	ld	r24, Z
    2a32:	91 81       	ldd	r25, Z+1	; 0x01
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	11 96       	adiw	r26, 0x01	; 1
    2a38:	9c 93       	st	X, r25
    2a3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ed 5b       	subi	r30, 0xBD	; 189
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	91 81       	ldd	r25, Z+1	; 0x01
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	d1 f6       	brne	.-76     	; 0x29fe <LCD_voidInit+0xe4>
    2a4a:	24 c0       	rjmp	.+72     	; 0x2a94 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4c:	8e 01       	movw	r16, r28
    2a4e:	0d 5b       	subi	r16, 0xBD	; 189
    2a50:	1f 4f       	sbci	r17, 0xFF	; 255
    2a52:	fe 01       	movw	r30, r28
    2a54:	eb 5b       	subi	r30, 0xBB	; 187
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	60 81       	ld	r22, Z
    2a5a:	71 81       	ldd	r23, Z+1	; 0x01
    2a5c:	82 81       	ldd	r24, Z+2	; 0x02
    2a5e:	93 81       	ldd	r25, Z+3	; 0x03
    2a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	f8 01       	movw	r30, r16
    2a6a:	91 83       	std	Z+1, r25	; 0x01
    2a6c:	80 83       	st	Z, r24
    2a6e:	fe 01       	movw	r30, r28
    2a70:	ed 5b       	subi	r30, 0xBD	; 189
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	80 81       	ld	r24, Z
    2a76:	91 81       	ldd	r25, Z+1	; 0x01
    2a78:	fe 01       	movw	r30, r28
    2a7a:	ff 96       	adiw	r30, 0x3f	; 63
    2a7c:	91 83       	std	Z+1, r25	; 0x01
    2a7e:	80 83       	st	Z, r24
    2a80:	fe 01       	movw	r30, r28
    2a82:	ff 96       	adiw	r30, 0x3f	; 63
    2a84:	80 81       	ld	r24, Z
    2a86:	91 81       	ldd	r25, Z+1	; 0x01
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	f1 f7       	brne	.-4      	; 0x2a88 <LCD_voidInit+0x16e>
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	ff 96       	adiw	r30, 0x3f	; 63
    2a90:	91 83       	std	Z+1, r25	; 0x01
    2a92:	80 83       	st	Z, r24
	_delay_ms(35);
	/* Function Set Cmnd */
	LCD_voidSendCmnd(0b00111000);
    2a94:	88 e3       	ldi	r24, 0x38	; 56
    2a96:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_voidSendCmnd>
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	a0 e2       	ldi	r26, 0x20	; 32
    2aa0:	b2 e4       	ldi	r27, 0x42	; 66
    2aa2:	8b af       	std	Y+59, r24	; 0x3b
    2aa4:	9c af       	std	Y+60, r25	; 0x3c
    2aa6:	ad af       	std	Y+61, r26	; 0x3d
    2aa8:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2aaa:	6b ad       	ldd	r22, Y+59	; 0x3b
    2aac:	7c ad       	ldd	r23, Y+60	; 0x3c
    2aae:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ab0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ab2:	2b ea       	ldi	r18, 0xAB	; 171
    2ab4:	3a ea       	ldi	r19, 0xAA	; 170
    2ab6:	4a e2       	ldi	r20, 0x2A	; 42
    2ab8:	50 e4       	ldi	r21, 0x40	; 64
    2aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	8f ab       	std	Y+55, r24	; 0x37
    2ac4:	98 af       	std	Y+56, r25	; 0x38
    2ac6:	a9 af       	std	Y+57, r26	; 0x39
    2ac8:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2aca:	6f a9       	ldd	r22, Y+55	; 0x37
    2acc:	78 ad       	ldd	r23, Y+56	; 0x38
    2ace:	89 ad       	ldd	r24, Y+57	; 0x39
    2ad0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e8       	ldi	r20, 0x80	; 128
    2ad8:	5f e3       	ldi	r21, 0x3F	; 63
    2ada:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ade:	88 23       	and	r24, r24
    2ae0:	1c f4       	brge	.+6      	; 0x2ae8 <LCD_voidInit+0x1ce>
		__ticks = 1;
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	8e ab       	std	Y+54, r24	; 0x36
    2ae6:	91 c0       	rjmp	.+290    	; 0x2c0a <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    2ae8:	6f a9       	ldd	r22, Y+55	; 0x37
    2aea:	78 ad       	ldd	r23, Y+56	; 0x38
    2aec:	89 ad       	ldd	r24, Y+57	; 0x39
    2aee:	9a ad       	ldd	r25, Y+58	; 0x3a
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	4f e7       	ldi	r20, 0x7F	; 127
    2af6:	53 e4       	ldi	r21, 0x43	; 67
    2af8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2afc:	18 16       	cp	r1, r24
    2afe:	0c f0       	brlt	.+2      	; 0x2b02 <LCD_voidInit+0x1e8>
    2b00:	7b c0       	rjmp	.+246    	; 0x2bf8 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    2b02:	6b ad       	ldd	r22, Y+59	; 0x3b
    2b04:	7c ad       	ldd	r23, Y+60	; 0x3c
    2b06:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b08:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	4a e7       	ldi	r20, 0x7A	; 122
    2b10:	54 e4       	ldi	r21, 0x44	; 68
    2b12:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	8a ab       	std	Y+50, r24	; 0x32
    2b1c:	9b ab       	std	Y+51, r25	; 0x33
    2b1e:	ac ab       	std	Y+52, r26	; 0x34
    2b20:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b22:	6a a9       	ldd	r22, Y+50	; 0x32
    2b24:	7b a9       	ldd	r23, Y+51	; 0x33
    2b26:	8c a9       	ldd	r24, Y+52	; 0x34
    2b28:	9d a9       	ldd	r25, Y+53	; 0x35
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	4a ef       	ldi	r20, 0xFA	; 250
    2b30:	54 e4       	ldi	r21, 0x44	; 68
    2b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	8e a7       	std	Y+46, r24	; 0x2e
    2b3c:	9f a7       	std	Y+47, r25	; 0x2f
    2b3e:	a8 ab       	std	Y+48, r26	; 0x30
    2b40:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2b42:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b44:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b46:	88 a9       	ldd	r24, Y+48	; 0x30
    2b48:	99 a9       	ldd	r25, Y+49	; 0x31
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e8       	ldi	r20, 0x80	; 128
    2b50:	5f e3       	ldi	r21, 0x3F	; 63
    2b52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b56:	88 23       	and	r24, r24
    2b58:	2c f4       	brge	.+10     	; 0x2b64 <LCD_voidInit+0x24a>
		__ticks = 1;
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	9d a7       	std	Y+45, r25	; 0x2d
    2b60:	8c a7       	std	Y+44, r24	; 0x2c
    2b62:	3f c0       	rjmp	.+126    	; 0x2be2 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    2b64:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b66:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b68:	88 a9       	ldd	r24, Y+48	; 0x30
    2b6a:	99 a9       	ldd	r25, Y+49	; 0x31
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	3f ef       	ldi	r19, 0xFF	; 255
    2b70:	4f e7       	ldi	r20, 0x7F	; 127
    2b72:	57 e4       	ldi	r21, 0x47	; 71
    2b74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b78:	18 16       	cp	r1, r24
    2b7a:	4c f5       	brge	.+82     	; 0x2bce <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b7c:	6a a9       	ldd	r22, Y+50	; 0x32
    2b7e:	7b a9       	ldd	r23, Y+51	; 0x33
    2b80:	8c a9       	ldd	r24, Y+52	; 0x34
    2b82:	9d a9       	ldd	r25, Y+53	; 0x35
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e2       	ldi	r20, 0x20	; 32
    2b8a:	51 e4       	ldi	r21, 0x41	; 65
    2b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	bc 01       	movw	r22, r24
    2b96:	cd 01       	movw	r24, r26
    2b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	9d a7       	std	Y+45, r25	; 0x2d
    2ba2:	8c a7       	std	Y+44, r24	; 0x2c
    2ba4:	0f c0       	rjmp	.+30     	; 0x2bc4 <LCD_voidInit+0x2aa>
    2ba6:	88 ec       	ldi	r24, 0xC8	; 200
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	9b a7       	std	Y+43, r25	; 0x2b
    2bac:	8a a7       	std	Y+42, r24	; 0x2a
    2bae:	8a a5       	ldd	r24, Y+42	; 0x2a
    2bb0:	9b a5       	ldd	r25, Y+43	; 0x2b
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	f1 f7       	brne	.-4      	; 0x2bb2 <LCD_voidInit+0x298>
    2bb6:	9b a7       	std	Y+43, r25	; 0x2b
    2bb8:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bba:	8c a5       	ldd	r24, Y+44	; 0x2c
    2bbc:	9d a5       	ldd	r25, Y+45	; 0x2d
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	9d a7       	std	Y+45, r25	; 0x2d
    2bc2:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc4:	8c a5       	ldd	r24, Y+44	; 0x2c
    2bc6:	9d a5       	ldd	r25, Y+45	; 0x2d
    2bc8:	00 97       	sbiw	r24, 0x00	; 0
    2bca:	69 f7       	brne	.-38     	; 0x2ba6 <LCD_voidInit+0x28c>
    2bcc:	24 c0       	rjmp	.+72     	; 0x2c16 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bce:	6e a5       	ldd	r22, Y+46	; 0x2e
    2bd0:	7f a5       	ldd	r23, Y+47	; 0x2f
    2bd2:	88 a9       	ldd	r24, Y+48	; 0x30
    2bd4:	99 a9       	ldd	r25, Y+49	; 0x31
    2bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9d a7       	std	Y+45, r25	; 0x2d
    2be0:	8c a7       	std	Y+44, r24	; 0x2c
    2be2:	8c a5       	ldd	r24, Y+44	; 0x2c
    2be4:	9d a5       	ldd	r25, Y+45	; 0x2d
    2be6:	99 a7       	std	Y+41, r25	; 0x29
    2be8:	88 a7       	std	Y+40, r24	; 0x28
    2bea:	88 a5       	ldd	r24, Y+40	; 0x28
    2bec:	99 a5       	ldd	r25, Y+41	; 0x29
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <LCD_voidInit+0x2d4>
    2bf2:	99 a7       	std	Y+41, r25	; 0x29
    2bf4:	88 a7       	std	Y+40, r24	; 0x28
    2bf6:	0f c0       	rjmp	.+30     	; 0x2c16 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bf8:	6f a9       	ldd	r22, Y+55	; 0x37
    2bfa:	78 ad       	ldd	r23, Y+56	; 0x38
    2bfc:	89 ad       	ldd	r24, Y+57	; 0x39
    2bfe:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	8e ab       	std	Y+54, r24	; 0x36
    2c0a:	8e a9       	ldd	r24, Y+54	; 0x36
    2c0c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c0e:	8f a1       	ldd	r24, Y+39	; 0x27
    2c10:	8a 95       	dec	r24
    2c12:	f1 f7       	brne	.-4      	; 0x2c10 <LCD_voidInit+0x2f6>
    2c14:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmnd(0b00001111);
    2c16:	8f e0       	ldi	r24, 0x0F	; 15
    2c18:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_voidSendCmnd>
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	a0 e2       	ldi	r26, 0x20	; 32
    2c22:	b2 e4       	ldi	r27, 0x42	; 66
    2c24:	8b a3       	std	Y+35, r24	; 0x23
    2c26:	9c a3       	std	Y+36, r25	; 0x24
    2c28:	ad a3       	std	Y+37, r26	; 0x25
    2c2a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c2c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c2e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c30:	8d a1       	ldd	r24, Y+37	; 0x25
    2c32:	9e a1       	ldd	r25, Y+38	; 0x26
    2c34:	2b ea       	ldi	r18, 0xAB	; 171
    2c36:	3a ea       	ldi	r19, 0xAA	; 170
    2c38:	4a e2       	ldi	r20, 0x2A	; 42
    2c3a:	50 e4       	ldi	r21, 0x40	; 64
    2c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	8f 8f       	std	Y+31, r24	; 0x1f
    2c46:	98 a3       	std	Y+32, r25	; 0x20
    2c48:	a9 a3       	std	Y+33, r26	; 0x21
    2c4a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2c4c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2c4e:	78 a1       	ldd	r23, Y+32	; 0x20
    2c50:	89 a1       	ldd	r24, Y+33	; 0x21
    2c52:	9a a1       	ldd	r25, Y+34	; 0x22
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	40 e8       	ldi	r20, 0x80	; 128
    2c5a:	5f e3       	ldi	r21, 0x3F	; 63
    2c5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c60:	88 23       	and	r24, r24
    2c62:	1c f4       	brge	.+6      	; 0x2c6a <LCD_voidInit+0x350>
		__ticks = 1;
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	8e 8f       	std	Y+30, r24	; 0x1e
    2c68:	91 c0       	rjmp	.+290    	; 0x2d8c <LCD_voidInit+0x472>
	else if (__tmp > 255)
    2c6a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2c6c:	78 a1       	ldd	r23, Y+32	; 0x20
    2c6e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c70:	9a a1       	ldd	r25, Y+34	; 0x22
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	4f e7       	ldi	r20, 0x7F	; 127
    2c78:	53 e4       	ldi	r21, 0x43	; 67
    2c7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c7e:	18 16       	cp	r1, r24
    2c80:	0c f0       	brlt	.+2      	; 0x2c84 <LCD_voidInit+0x36a>
    2c82:	7b c0       	rjmp	.+246    	; 0x2d7a <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2c84:	6b a1       	ldd	r22, Y+35	; 0x23
    2c86:	7c a1       	ldd	r23, Y+36	; 0x24
    2c88:	8d a1       	ldd	r24, Y+37	; 0x25
    2c8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	4a e7       	ldi	r20, 0x7A	; 122
    2c92:	54 e4       	ldi	r21, 0x44	; 68
    2c94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	8a 8f       	std	Y+26, r24	; 0x1a
    2c9e:	9b 8f       	std	Y+27, r25	; 0x1b
    2ca0:	ac 8f       	std	Y+28, r26	; 0x1c
    2ca2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2ca6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2ca8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2caa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	4a ef       	ldi	r20, 0xFA	; 250
    2cb2:	54 e4       	ldi	r21, 0x44	; 68
    2cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	8e 8b       	std	Y+22, r24	; 0x16
    2cbe:	9f 8b       	std	Y+23, r25	; 0x17
    2cc0:	a8 8f       	std	Y+24, r26	; 0x18
    2cc2:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2cc4:	6e 89       	ldd	r22, Y+22	; 0x16
    2cc6:	7f 89       	ldd	r23, Y+23	; 0x17
    2cc8:	88 8d       	ldd	r24, Y+24	; 0x18
    2cca:	99 8d       	ldd	r25, Y+25	; 0x19
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e8       	ldi	r20, 0x80	; 128
    2cd2:	5f e3       	ldi	r21, 0x3F	; 63
    2cd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cd8:	88 23       	and	r24, r24
    2cda:	2c f4       	brge	.+10     	; 0x2ce6 <LCD_voidInit+0x3cc>
		__ticks = 1;
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	9d 8b       	std	Y+21, r25	; 0x15
    2ce2:	8c 8b       	std	Y+20, r24	; 0x14
    2ce4:	3f c0       	rjmp	.+126    	; 0x2d64 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    2ce6:	6e 89       	ldd	r22, Y+22	; 0x16
    2ce8:	7f 89       	ldd	r23, Y+23	; 0x17
    2cea:	88 8d       	ldd	r24, Y+24	; 0x18
    2cec:	99 8d       	ldd	r25, Y+25	; 0x19
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	3f ef       	ldi	r19, 0xFF	; 255
    2cf2:	4f e7       	ldi	r20, 0x7F	; 127
    2cf4:	57 e4       	ldi	r21, 0x47	; 71
    2cf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cfa:	18 16       	cp	r1, r24
    2cfc:	4c f5       	brge	.+82     	; 0x2d50 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfe:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2d00:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2d02:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d04:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e2       	ldi	r20, 0x20	; 32
    2d0c:	51 e4       	ldi	r21, 0x41	; 65
    2d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	bc 01       	movw	r22, r24
    2d18:	cd 01       	movw	r24, r26
    2d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	9d 8b       	std	Y+21, r25	; 0x15
    2d24:	8c 8b       	std	Y+20, r24	; 0x14
    2d26:	0f c0       	rjmp	.+30     	; 0x2d46 <LCD_voidInit+0x42c>
    2d28:	88 ec       	ldi	r24, 0xC8	; 200
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	9b 8b       	std	Y+19, r25	; 0x13
    2d2e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d30:	8a 89       	ldd	r24, Y+18	; 0x12
    2d32:	9b 89       	ldd	r25, Y+19	; 0x13
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	f1 f7       	brne	.-4      	; 0x2d34 <LCD_voidInit+0x41a>
    2d38:	9b 8b       	std	Y+19, r25	; 0x13
    2d3a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3c:	8c 89       	ldd	r24, Y+20	; 0x14
    2d3e:	9d 89       	ldd	r25, Y+21	; 0x15
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	9d 8b       	std	Y+21, r25	; 0x15
    2d44:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d46:	8c 89       	ldd	r24, Y+20	; 0x14
    2d48:	9d 89       	ldd	r25, Y+21	; 0x15
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	69 f7       	brne	.-38     	; 0x2d28 <LCD_voidInit+0x40e>
    2d4e:	24 c0       	rjmp	.+72     	; 0x2d98 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d50:	6e 89       	ldd	r22, Y+22	; 0x16
    2d52:	7f 89       	ldd	r23, Y+23	; 0x17
    2d54:	88 8d       	ldd	r24, Y+24	; 0x18
    2d56:	99 8d       	ldd	r25, Y+25	; 0x19
    2d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	9d 8b       	std	Y+21, r25	; 0x15
    2d62:	8c 8b       	std	Y+20, r24	; 0x14
    2d64:	8c 89       	ldd	r24, Y+20	; 0x14
    2d66:	9d 89       	ldd	r25, Y+21	; 0x15
    2d68:	99 8b       	std	Y+17, r25	; 0x11
    2d6a:	88 8b       	std	Y+16, r24	; 0x10
    2d6c:	88 89       	ldd	r24, Y+16	; 0x10
    2d6e:	99 89       	ldd	r25, Y+17	; 0x11
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <LCD_voidInit+0x456>
    2d74:	99 8b       	std	Y+17, r25	; 0x11
    2d76:	88 8b       	std	Y+16, r24	; 0x10
    2d78:	0f c0       	rjmp	.+30     	; 0x2d98 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d7a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d7c:	78 a1       	ldd	r23, Y+32	; 0x20
    2d7e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d80:	9a a1       	ldd	r25, Y+34	; 0x22
    2d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	8e 8f       	std	Y+30, r24	; 0x1e
    2d8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d8e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d92:	8a 95       	dec	r24
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <LCD_voidInit+0x478>
    2d96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmnd(0b00000001);
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_voidSendCmnd>
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	a0 e0       	ldi	r26, 0x00	; 0
    2da4:	b0 e4       	ldi	r27, 0x40	; 64
    2da6:	8b 87       	std	Y+11, r24	; 0x0b
    2da8:	9c 87       	std	Y+12, r25	; 0x0c
    2daa:	ad 87       	std	Y+13, r26	; 0x0d
    2dac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	4a ef       	ldi	r20, 0xFA	; 250
    2dbc:	54 e4       	ldi	r21, 0x44	; 68
    2dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	8f 83       	std	Y+7, r24	; 0x07
    2dc8:	98 87       	std	Y+8, r25	; 0x08
    2dca:	a9 87       	std	Y+9, r26	; 0x09
    2dcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dce:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd0:	78 85       	ldd	r23, Y+8	; 0x08
    2dd2:	89 85       	ldd	r24, Y+9	; 0x09
    2dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e8       	ldi	r20, 0x80	; 128
    2ddc:	5f e3       	ldi	r21, 0x3F	; 63
    2dde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2de2:	88 23       	and	r24, r24
    2de4:	2c f4       	brge	.+10     	; 0x2df0 <LCD_voidInit+0x4d6>
		__ticks = 1;
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	9e 83       	std	Y+6, r25	; 0x06
    2dec:	8d 83       	std	Y+5, r24	; 0x05
    2dee:	3f c0       	rjmp	.+126    	; 0x2e6e <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    2df0:	6f 81       	ldd	r22, Y+7	; 0x07
    2df2:	78 85       	ldd	r23, Y+8	; 0x08
    2df4:	89 85       	ldd	r24, Y+9	; 0x09
    2df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	3f ef       	ldi	r19, 0xFF	; 255
    2dfc:	4f e7       	ldi	r20, 0x7F	; 127
    2dfe:	57 e4       	ldi	r21, 0x47	; 71
    2e00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e04:	18 16       	cp	r1, r24
    2e06:	4c f5       	brge	.+82     	; 0x2e5a <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	40 e2       	ldi	r20, 0x20	; 32
    2e16:	51 e4       	ldi	r21, 0x41	; 65
    2e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	bc 01       	movw	r22, r24
    2e22:	cd 01       	movw	r24, r26
    2e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	9e 83       	std	Y+6, r25	; 0x06
    2e2e:	8d 83       	std	Y+5, r24	; 0x05
    2e30:	0f c0       	rjmp	.+30     	; 0x2e50 <LCD_voidInit+0x536>
    2e32:	88 ec       	ldi	r24, 0xC8	; 200
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	9c 83       	std	Y+4, r25	; 0x04
    2e38:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	f1 f7       	brne	.-4      	; 0x2e3e <LCD_voidInit+0x524>
    2e42:	9c 83       	std	Y+4, r25	; 0x04
    2e44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e46:	8d 81       	ldd	r24, Y+5	; 0x05
    2e48:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	9e 83       	std	Y+6, r25	; 0x06
    2e4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e50:	8d 81       	ldd	r24, Y+5	; 0x05
    2e52:	9e 81       	ldd	r25, Y+6	; 0x06
    2e54:	00 97       	sbiw	r24, 0x00	; 0
    2e56:	69 f7       	brne	.-38     	; 0x2e32 <LCD_voidInit+0x518>
    2e58:	14 c0       	rjmp	.+40     	; 0x2e82 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5c:	78 85       	ldd	r23, Y+8	; 0x08
    2e5e:	89 85       	ldd	r24, Y+9	; 0x09
    2e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	9e 83       	std	Y+6, r25	; 0x06
    2e6c:	8d 83       	std	Y+5, r24	; 0x05
    2e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e70:	9e 81       	ldd	r25, Y+6	; 0x06
    2e72:	9a 83       	std	Y+2, r25	; 0x02
    2e74:	89 83       	std	Y+1, r24	; 0x01
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	f1 f7       	brne	.-4      	; 0x2e7a <LCD_voidInit+0x560>
    2e7e:	9a 83       	std	Y+2, r25	; 0x02
    2e80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmnd(0b00000110);
    2e82:	86 e0       	ldi	r24, 0x06	; 6
    2e84:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_voidSendCmnd>
}
    2e88:	c4 5b       	subi	r28, 0xB4	; 180
    2e8a:	df 4f       	sbci	r29, 0xFF	; 255
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	f8 94       	cli
    2e90:	de bf       	out	0x3e, r29	; 62
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	cf 91       	pop	r28
    2e98:	df 91       	pop	r29
    2e9a:	1f 91       	pop	r17
    2e9c:	0f 91       	pop	r16
    2e9e:	08 95       	ret

00002ea0 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	69 97       	sbiw	r28, 0x19	; 25
    2eaa:	0f b6       	in	r0, 0x3f	; 63
    2eac:	f8 94       	cli
    2eae:	de bf       	out	0x3e, r29	; 62
    2eb0:	0f be       	out	0x3f, r0	; 63
    2eb2:	cd bf       	out	0x3d, r28	; 61
    2eb4:	89 8f       	std	Y+25, r24	; 0x19
		//  Rs = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rs_PIN ,DIO_u8_LOW); // portA, Pin0 ,LOW
    2eb6:	83 e0       	ldi	r24, 0x03	; 3
    2eb8:	60 e0       	ldi	r22, 0x00	; 0
    2eba:	40 e0       	ldi	r20, 0x00	; 0
    2ebc:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
		//  Rw = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rw_PIN ,DIO_u8_LOW); // portA, Pin1 ,LOW
    2ec0:	83 e0       	ldi	r24, 0x03	; 3
    2ec2:	61 e0       	ldi	r22, 0x01	; 1
    2ec4:	40 e0       	ldi	r20, 0x00	; 0
    2ec6:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
		/* Write Cmnd */
		DIO_u8SetPortValue(LCD_u8_DATA_PORT , Copy_u8Cmnd); // Port D
    2eca:	82 e0       	ldi	r24, 0x02	; 2
    2ecc:	69 8d       	ldd	r22, Y+25	; 0x19
    2ece:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <DIO_u8SetPortValue>
		// E = 1
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_HIGH); // portA, Pin2 ,HIGH
    2ed2:	83 e0       	ldi	r24, 0x03	; 3
    2ed4:	63 e0       	ldi	r22, 0x03	; 3
    2ed6:	41 e0       	ldi	r20, 0x01	; 1
    2ed8:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	a0 e8       	ldi	r26, 0x80	; 128
    2ee2:	bf e3       	ldi	r27, 0x3F	; 63
    2ee4:	8d 8b       	std	Y+21, r24	; 0x15
    2ee6:	9e 8b       	std	Y+22, r25	; 0x16
    2ee8:	af 8b       	std	Y+23, r26	; 0x17
    2eea:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2eec:	6d 89       	ldd	r22, Y+21	; 0x15
    2eee:	7e 89       	ldd	r23, Y+22	; 0x16
    2ef0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ef4:	2b ea       	ldi	r18, 0xAB	; 171
    2ef6:	3a ea       	ldi	r19, 0xAA	; 170
    2ef8:	4a e2       	ldi	r20, 0x2A	; 42
    2efa:	50 e4       	ldi	r21, 0x40	; 64
    2efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	89 8b       	std	Y+17, r24	; 0x11
    2f06:	9a 8b       	std	Y+18, r25	; 0x12
    2f08:	ab 8b       	std	Y+19, r26	; 0x13
    2f0a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2f0c:	69 89       	ldd	r22, Y+17	; 0x11
    2f0e:	7a 89       	ldd	r23, Y+18	; 0x12
    2f10:	8b 89       	ldd	r24, Y+19	; 0x13
    2f12:	9c 89       	ldd	r25, Y+20	; 0x14
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	40 e8       	ldi	r20, 0x80	; 128
    2f1a:	5f e3       	ldi	r21, 0x3F	; 63
    2f1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f20:	88 23       	and	r24, r24
    2f22:	1c f4       	brge	.+6      	; 0x2f2a <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	88 8b       	std	Y+16, r24	; 0x10
    2f28:	91 c0       	rjmp	.+290    	; 0x304c <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    2f2a:	69 89       	ldd	r22, Y+17	; 0x11
    2f2c:	7a 89       	ldd	r23, Y+18	; 0x12
    2f2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f30:	9c 89       	ldd	r25, Y+20	; 0x14
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	4f e7       	ldi	r20, 0x7F	; 127
    2f38:	53 e4       	ldi	r21, 0x43	; 67
    2f3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f3e:	18 16       	cp	r1, r24
    2f40:	0c f0       	brlt	.+2      	; 0x2f44 <LCD_voidSendCmnd+0xa4>
    2f42:	7b c0       	rjmp	.+246    	; 0x303a <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2f44:	6d 89       	ldd	r22, Y+21	; 0x15
    2f46:	7e 89       	ldd	r23, Y+22	; 0x16
    2f48:	8f 89       	ldd	r24, Y+23	; 0x17
    2f4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	4a e7       	ldi	r20, 0x7A	; 122
    2f52:	54 e4       	ldi	r21, 0x44	; 68
    2f54:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	8c 87       	std	Y+12, r24	; 0x0c
    2f5e:	9d 87       	std	Y+13, r25	; 0x0d
    2f60:	ae 87       	std	Y+14, r26	; 0x0e
    2f62:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f64:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f66:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f68:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f6a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	4a ef       	ldi	r20, 0xFA	; 250
    2f72:	54 e4       	ldi	r21, 0x44	; 68
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	88 87       	std	Y+8, r24	; 0x08
    2f7e:	99 87       	std	Y+9, r25	; 0x09
    2f80:	aa 87       	std	Y+10, r26	; 0x0a
    2f82:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f84:	68 85       	ldd	r22, Y+8	; 0x08
    2f86:	79 85       	ldd	r23, Y+9	; 0x09
    2f88:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e8       	ldi	r20, 0x80	; 128
    2f92:	5f e3       	ldi	r21, 0x3F	; 63
    2f94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f98:	88 23       	and	r24, r24
    2f9a:	2c f4       	brge	.+10     	; 0x2fa6 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	9f 83       	std	Y+7, r25	; 0x07
    2fa2:	8e 83       	std	Y+6, r24	; 0x06
    2fa4:	3f c0       	rjmp	.+126    	; 0x3024 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    2fa6:	68 85       	ldd	r22, Y+8	; 0x08
    2fa8:	79 85       	ldd	r23, Y+9	; 0x09
    2faa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fac:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	3f ef       	ldi	r19, 0xFF	; 255
    2fb2:	4f e7       	ldi	r20, 0x7F	; 127
    2fb4:	57 e4       	ldi	r21, 0x47	; 71
    2fb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fba:	18 16       	cp	r1, r24
    2fbc:	4c f5       	brge	.+82     	; 0x3010 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbe:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fc0:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fc2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fc4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	40 e2       	ldi	r20, 0x20	; 32
    2fcc:	51 e4       	ldi	r21, 0x41	; 65
    2fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	9f 83       	std	Y+7, r25	; 0x07
    2fe4:	8e 83       	std	Y+6, r24	; 0x06
    2fe6:	0f c0       	rjmp	.+30     	; 0x3006 <LCD_voidSendCmnd+0x166>
    2fe8:	88 ec       	ldi	r24, 0xC8	; 200
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	9d 83       	std	Y+5, r25	; 0x05
    2fee:	8c 83       	std	Y+4, r24	; 0x04
    2ff0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	f1 f7       	brne	.-4      	; 0x2ff4 <LCD_voidSendCmnd+0x154>
    2ff8:	9d 83       	std	Y+5, r25	; 0x05
    2ffa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ffe:	9f 81       	ldd	r25, Y+7	; 0x07
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	9f 83       	std	Y+7, r25	; 0x07
    3004:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3006:	8e 81       	ldd	r24, Y+6	; 0x06
    3008:	9f 81       	ldd	r25, Y+7	; 0x07
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	69 f7       	brne	.-38     	; 0x2fe8 <LCD_voidSendCmnd+0x148>
    300e:	24 c0       	rjmp	.+72     	; 0x3058 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3010:	68 85       	ldd	r22, Y+8	; 0x08
    3012:	79 85       	ldd	r23, Y+9	; 0x09
    3014:	8a 85       	ldd	r24, Y+10	; 0x0a
    3016:	9b 85       	ldd	r25, Y+11	; 0x0b
    3018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	9f 83       	std	Y+7, r25	; 0x07
    3022:	8e 83       	std	Y+6, r24	; 0x06
    3024:	8e 81       	ldd	r24, Y+6	; 0x06
    3026:	9f 81       	ldd	r25, Y+7	; 0x07
    3028:	9b 83       	std	Y+3, r25	; 0x03
    302a:	8a 83       	std	Y+2, r24	; 0x02
    302c:	8a 81       	ldd	r24, Y+2	; 0x02
    302e:	9b 81       	ldd	r25, Y+3	; 0x03
    3030:	01 97       	sbiw	r24, 0x01	; 1
    3032:	f1 f7       	brne	.-4      	; 0x3030 <LCD_voidSendCmnd+0x190>
    3034:	9b 83       	std	Y+3, r25	; 0x03
    3036:	8a 83       	std	Y+2, r24	; 0x02
    3038:	0f c0       	rjmp	.+30     	; 0x3058 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    303a:	69 89       	ldd	r22, Y+17	; 0x11
    303c:	7a 89       	ldd	r23, Y+18	; 0x12
    303e:	8b 89       	ldd	r24, Y+19	; 0x13
    3040:	9c 89       	ldd	r25, Y+20	; 0x14
    3042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	88 8b       	std	Y+16, r24	; 0x10
    304c:	88 89       	ldd	r24, Y+16	; 0x10
    304e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	8a 95       	dec	r24
    3054:	f1 f7       	brne	.-4      	; 0x3052 <LCD_voidSendCmnd+0x1b2>
    3056:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		// E = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_LOW); // portA, Pin2 ,LOW
    3058:	83 e0       	ldi	r24, 0x03	; 3
    305a:	63 e0       	ldi	r22, 0x03	; 3
    305c:	40 e0       	ldi	r20, 0x00	; 0
    305e:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
}
    3062:	69 96       	adiw	r28, 0x19	; 25
    3064:	0f b6       	in	r0, 0x3f	; 63
    3066:	f8 94       	cli
    3068:	de bf       	out	0x3e, r29	; 62
    306a:	0f be       	out	0x3f, r0	; 63
    306c:	cd bf       	out	0x3d, r28	; 61
    306e:	cf 91       	pop	r28
    3070:	df 91       	pop	r29
    3072:	08 95       	ret

00003074 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    3074:	df 93       	push	r29
    3076:	cf 93       	push	r28
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
    307c:	69 97       	sbiw	r28, 0x19	; 25
    307e:	0f b6       	in	r0, 0x3f	; 63
    3080:	f8 94       	cli
    3082:	de bf       	out	0x3e, r29	; 62
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	cd bf       	out	0x3d, r28	; 61
    3088:	89 8f       	std	Y+25, r24	; 0x19
		// STEP 1 Rs = 1
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rs_PIN ,DIO_u8_HIGH); // portA, Pin0 , HIGH
    308a:	83 e0       	ldi	r24, 0x03	; 3
    308c:	60 e0       	ldi	r22, 0x00	; 0
    308e:	41 e0       	ldi	r20, 0x01	; 1
    3090:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
		// step 2 Rw = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rw_PIN ,DIO_u8_LOW); // portA, Pin1 , LOW
    3094:	83 e0       	ldi	r24, 0x03	; 3
    3096:	61 e0       	ldi	r22, 0x01	; 1
    3098:	40 e0       	ldi	r20, 0x00	; 0
    309a:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
		/* Write Char */
		DIO_u8SetPortValue(LCD_u8_DATA_PORT , Copy_u8Char); // Port D
    309e:	82 e0       	ldi	r24, 0x02	; 2
    30a0:	69 8d       	ldd	r22, Y+25	; 0x19
    30a2:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <DIO_u8SetPortValue>
		// E = 1
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_HIGH); // portA, Pin2 , HIGH
    30a6:	83 e0       	ldi	r24, 0x03	; 3
    30a8:	63 e0       	ldi	r22, 0x03	; 3
    30aa:	41 e0       	ldi	r20, 0x01	; 1
    30ac:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	a0 e8       	ldi	r26, 0x80	; 128
    30b6:	bf e3       	ldi	r27, 0x3F	; 63
    30b8:	8d 8b       	std	Y+21, r24	; 0x15
    30ba:	9e 8b       	std	Y+22, r25	; 0x16
    30bc:	af 8b       	std	Y+23, r26	; 0x17
    30be:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30c0:	6d 89       	ldd	r22, Y+21	; 0x15
    30c2:	7e 89       	ldd	r23, Y+22	; 0x16
    30c4:	8f 89       	ldd	r24, Y+23	; 0x17
    30c6:	98 8d       	ldd	r25, Y+24	; 0x18
    30c8:	2b ea       	ldi	r18, 0xAB	; 171
    30ca:	3a ea       	ldi	r19, 0xAA	; 170
    30cc:	4a e2       	ldi	r20, 0x2A	; 42
    30ce:	50 e4       	ldi	r21, 0x40	; 64
    30d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	89 8b       	std	Y+17, r24	; 0x11
    30da:	9a 8b       	std	Y+18, r25	; 0x12
    30dc:	ab 8b       	std	Y+19, r26	; 0x13
    30de:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    30e0:	69 89       	ldd	r22, Y+17	; 0x11
    30e2:	7a 89       	ldd	r23, Y+18	; 0x12
    30e4:	8b 89       	ldd	r24, Y+19	; 0x13
    30e6:	9c 89       	ldd	r25, Y+20	; 0x14
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	40 e8       	ldi	r20, 0x80	; 128
    30ee:	5f e3       	ldi	r21, 0x3F	; 63
    30f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f4:	88 23       	and	r24, r24
    30f6:	1c f4       	brge	.+6      	; 0x30fe <LCD_voidSendChar+0x8a>
		__ticks = 1;
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	88 8b       	std	Y+16, r24	; 0x10
    30fc:	91 c0       	rjmp	.+290    	; 0x3220 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    30fe:	69 89       	ldd	r22, Y+17	; 0x11
    3100:	7a 89       	ldd	r23, Y+18	; 0x12
    3102:	8b 89       	ldd	r24, Y+19	; 0x13
    3104:	9c 89       	ldd	r25, Y+20	; 0x14
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	4f e7       	ldi	r20, 0x7F	; 127
    310c:	53 e4       	ldi	r21, 0x43	; 67
    310e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3112:	18 16       	cp	r1, r24
    3114:	0c f0       	brlt	.+2      	; 0x3118 <LCD_voidSendChar+0xa4>
    3116:	7b c0       	rjmp	.+246    	; 0x320e <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    3118:	6d 89       	ldd	r22, Y+21	; 0x15
    311a:	7e 89       	ldd	r23, Y+22	; 0x16
    311c:	8f 89       	ldd	r24, Y+23	; 0x17
    311e:	98 8d       	ldd	r25, Y+24	; 0x18
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	4a e7       	ldi	r20, 0x7A	; 122
    3126:	54 e4       	ldi	r21, 0x44	; 68
    3128:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	8c 87       	std	Y+12, r24	; 0x0c
    3132:	9d 87       	std	Y+13, r25	; 0x0d
    3134:	ae 87       	std	Y+14, r26	; 0x0e
    3136:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3138:	6c 85       	ldd	r22, Y+12	; 0x0c
    313a:	7d 85       	ldd	r23, Y+13	; 0x0d
    313c:	8e 85       	ldd	r24, Y+14	; 0x0e
    313e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	4a ef       	ldi	r20, 0xFA	; 250
    3146:	54 e4       	ldi	r21, 0x44	; 68
    3148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	88 87       	std	Y+8, r24	; 0x08
    3152:	99 87       	std	Y+9, r25	; 0x09
    3154:	aa 87       	std	Y+10, r26	; 0x0a
    3156:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3158:	68 85       	ldd	r22, Y+8	; 0x08
    315a:	79 85       	ldd	r23, Y+9	; 0x09
    315c:	8a 85       	ldd	r24, Y+10	; 0x0a
    315e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	40 e8       	ldi	r20, 0x80	; 128
    3166:	5f e3       	ldi	r21, 0x3F	; 63
    3168:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    316c:	88 23       	and	r24, r24
    316e:	2c f4       	brge	.+10     	; 0x317a <LCD_voidSendChar+0x106>
		__ticks = 1;
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	9f 83       	std	Y+7, r25	; 0x07
    3176:	8e 83       	std	Y+6, r24	; 0x06
    3178:	3f c0       	rjmp	.+126    	; 0x31f8 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    317a:	68 85       	ldd	r22, Y+8	; 0x08
    317c:	79 85       	ldd	r23, Y+9	; 0x09
    317e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3180:	9b 85       	ldd	r25, Y+11	; 0x0b
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	3f ef       	ldi	r19, 0xFF	; 255
    3186:	4f e7       	ldi	r20, 0x7F	; 127
    3188:	57 e4       	ldi	r21, 0x47	; 71
    318a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    318e:	18 16       	cp	r1, r24
    3190:	4c f5       	brge	.+82     	; 0x31e4 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3192:	6c 85       	ldd	r22, Y+12	; 0x0c
    3194:	7d 85       	ldd	r23, Y+13	; 0x0d
    3196:	8e 85       	ldd	r24, Y+14	; 0x0e
    3198:	9f 85       	ldd	r25, Y+15	; 0x0f
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	40 e2       	ldi	r20, 0x20	; 32
    31a0:	51 e4       	ldi	r21, 0x41	; 65
    31a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	bc 01       	movw	r22, r24
    31ac:	cd 01       	movw	r24, r26
    31ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	9f 83       	std	Y+7, r25	; 0x07
    31b8:	8e 83       	std	Y+6, r24	; 0x06
    31ba:	0f c0       	rjmp	.+30     	; 0x31da <LCD_voidSendChar+0x166>
    31bc:	88 ec       	ldi	r24, 0xC8	; 200
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	9d 83       	std	Y+5, r25	; 0x05
    31c2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31c4:	8c 81       	ldd	r24, Y+4	; 0x04
    31c6:	9d 81       	ldd	r25, Y+5	; 0x05
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <LCD_voidSendChar+0x154>
    31cc:	9d 83       	std	Y+5, r25	; 0x05
    31ce:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d0:	8e 81       	ldd	r24, Y+6	; 0x06
    31d2:	9f 81       	ldd	r25, Y+7	; 0x07
    31d4:	01 97       	sbiw	r24, 0x01	; 1
    31d6:	9f 83       	std	Y+7, r25	; 0x07
    31d8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31da:	8e 81       	ldd	r24, Y+6	; 0x06
    31dc:	9f 81       	ldd	r25, Y+7	; 0x07
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	69 f7       	brne	.-38     	; 0x31bc <LCD_voidSendChar+0x148>
    31e2:	24 c0       	rjmp	.+72     	; 0x322c <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e4:	68 85       	ldd	r22, Y+8	; 0x08
    31e6:	79 85       	ldd	r23, Y+9	; 0x09
    31e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    31ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    31ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	9f 83       	std	Y+7, r25	; 0x07
    31f6:	8e 83       	std	Y+6, r24	; 0x06
    31f8:	8e 81       	ldd	r24, Y+6	; 0x06
    31fa:	9f 81       	ldd	r25, Y+7	; 0x07
    31fc:	9b 83       	std	Y+3, r25	; 0x03
    31fe:	8a 83       	std	Y+2, r24	; 0x02
    3200:	8a 81       	ldd	r24, Y+2	; 0x02
    3202:	9b 81       	ldd	r25, Y+3	; 0x03
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	f1 f7       	brne	.-4      	; 0x3204 <LCD_voidSendChar+0x190>
    3208:	9b 83       	std	Y+3, r25	; 0x03
    320a:	8a 83       	std	Y+2, r24	; 0x02
    320c:	0f c0       	rjmp	.+30     	; 0x322c <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    320e:	69 89       	ldd	r22, Y+17	; 0x11
    3210:	7a 89       	ldd	r23, Y+18	; 0x12
    3212:	8b 89       	ldd	r24, Y+19	; 0x13
    3214:	9c 89       	ldd	r25, Y+20	; 0x14
    3216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	88 8b       	std	Y+16, r24	; 0x10
    3220:	88 89       	ldd	r24, Y+16	; 0x10
    3222:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	8a 95       	dec	r24
    3228:	f1 f7       	brne	.-4      	; 0x3226 <LCD_voidSendChar+0x1b2>
    322a:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		// E = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_LOW); // portA, Pin2 , LOW
    322c:	83 e0       	ldi	r24, 0x03	; 3
    322e:	63 e0       	ldi	r22, 0x03	; 3
    3230:	40 e0       	ldi	r20, 0x00	; 0
    3232:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
}
    3236:	69 96       	adiw	r28, 0x19	; 25
    3238:	0f b6       	in	r0, 0x3f	; 63
    323a:	f8 94       	cli
    323c:	de bf       	out	0x3e, r29	; 62
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	cd bf       	out	0x3d, r28	; 61
    3242:	cf 91       	pop	r28
    3244:	df 91       	pop	r29
    3246:	08 95       	ret

00003248 <LCD_u8GoToXY>:

u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    3248:	df 93       	push	r29
    324a:	cf 93       	push	r28
    324c:	00 d0       	rcall	.+0      	; 0x324e <LCD_u8GoToXY+0x6>
    324e:	00 d0       	rcall	.+0      	; 0x3250 <LCD_u8GoToXY+0x8>
    3250:	0f 92       	push	r0
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	8a 83       	std	Y+2, r24	; 0x02
    3258:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    325e:	8b 81       	ldd	r24, Y+3	; 0x03
    3260:	88 32       	cpi	r24, 0x28	; 40
    3262:	e0 f4       	brcc	.+56     	; 0x329c <LCD_u8GoToXY+0x54>
	{
		switch (Copy_u8LineNum)
    3264:	8a 81       	ldd	r24, Y+2	; 0x02
    3266:	28 2f       	mov	r18, r24
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	3d 83       	std	Y+5, r19	; 0x05
    326c:	2c 83       	std	Y+4, r18	; 0x04
    326e:	8c 81       	ldd	r24, Y+4	; 0x04
    3270:	9d 81       	ldd	r25, Y+5	; 0x05
    3272:	81 30       	cpi	r24, 0x01	; 1
    3274:	91 05       	cpc	r25, r1
    3276:	31 f0       	breq	.+12     	; 0x3284 <LCD_u8GoToXY+0x3c>
    3278:	2c 81       	ldd	r18, Y+4	; 0x04
    327a:	3d 81       	ldd	r19, Y+5	; 0x05
    327c:	22 30       	cpi	r18, 0x02	; 2
    327e:	31 05       	cpc	r19, r1
    3280:	31 f0       	breq	.+12     	; 0x328e <LCD_u8GoToXY+0x46>
    3282:	0a c0       	rjmp	.+20     	; 0x3298 <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1 : LCD_voidSendCmnd(0x80+Copy_u8Location);break;
    3284:	8b 81       	ldd	r24, Y+3	; 0x03
    3286:	80 58       	subi	r24, 0x80	; 128
    3288:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_voidSendCmnd>
    328c:	08 c0       	rjmp	.+16     	; 0x329e <LCD_u8GoToXY+0x56>
			case LCD_u8_LINE2 : LCD_voidSendCmnd(0xc0+Copy_u8Location);break;
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	80 54       	subi	r24, 0x40	; 64
    3292:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_voidSendCmnd>
    3296:	03 c0       	rjmp	.+6      	; 0x329e <LCD_u8GoToXY+0x56>
			default : Local_u8ErrorState = STD_TYPES_NOK;
    3298:	19 82       	std	Y+1, r1	; 0x01
    329a:	01 c0       	rjmp	.+2      	; 0x329e <LCD_u8GoToXY+0x56>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    329c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    329e:	89 81       	ldd	r24, Y+1	; 0x01
}
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <LCD_SendString>:

u8 LCD_SendString(u8 * Copy_pu8_String){
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	00 d0       	rcall	.+0      	; 0x32b6 <LCD_SendString+0x6>
    32b6:	0f 92       	push	r0
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
    32bc:	9b 83       	std	Y+3, r25	; 0x03
    32be:	8a 83       	std	Y+2, r24	; 0x02
    for(u8 i=0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    32c0:	19 82       	std	Y+1, r1	; 0x01
    32c2:	0e c0       	rjmp	.+28     	; 0x32e0 <LCD_SendString+0x30>
    	LCD_voidSendChar(Copy_pu8_String[i]);
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	28 2f       	mov	r18, r24
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	8a 81       	ldd	r24, Y+2	; 0x02
    32cc:	9b 81       	ldd	r25, Y+3	; 0x03
    32ce:	fc 01       	movw	r30, r24
    32d0:	e2 0f       	add	r30, r18
    32d2:	f3 1f       	adc	r31, r19
    32d4:	80 81       	ld	r24, Z
    32d6:	0e 94 3a 18 	call	0x3074	; 0x3074 <LCD_voidSendChar>
	}
	return Local_u8ErrorState;
}

u8 LCD_SendString(u8 * Copy_pu8_String){
    for(u8 i=0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	8f 5f       	subi	r24, 0xFF	; 255
    32de:	89 83       	std	Y+1, r24	; 0x01
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	28 2f       	mov	r18, r24
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	8a 81       	ldd	r24, Y+2	; 0x02
    32e8:	9b 81       	ldd	r25, Y+3	; 0x03
    32ea:	fc 01       	movw	r30, r24
    32ec:	e2 0f       	add	r30, r18
    32ee:	f3 1f       	adc	r31, r19
    32f0:	80 81       	ld	r24, Z
    32f2:	88 23       	and	r24, r24
    32f4:	39 f7       	brne	.-50     	; 0x32c4 <LCD_SendString+0x14>
    	LCD_voidSendChar(Copy_pu8_String[i]);
    }
    return STD_TYPES_OK;
    32f6:	81 e0       	ldi	r24, 0x01	; 1
}
    32f8:	0f 90       	pop	r0
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	cf 91       	pop	r28
    3300:	df 91       	pop	r29
    3302:	08 95       	ret

00003304 <LCD_SendNum>:

u8 LCD_SendNum(u32 Copy_u32_Num){
    3304:	0f 93       	push	r16
    3306:	1f 93       	push	r17
    3308:	df 93       	push	r29
    330a:	cf 93       	push	r28
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
    3310:	60 97       	sbiw	r28, 0x10	; 16
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	f8 94       	cli
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	cd bf       	out	0x3d, r28	; 61
    331c:	6d 87       	std	Y+13, r22	; 0x0d
    331e:	7e 87       	std	Y+14, r23	; 0x0e
    3320:	8f 87       	std	Y+15, r24	; 0x0f
    3322:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0,Local_u8_iterator2 = 0;
    3324:	1a 82       	std	Y+2, r1	; 0x02
    3326:	19 82       	std	Y+1, r1	; 0x01
	    if(Copy_u32_Num == 0)
    3328:	8d 85       	ldd	r24, Y+13	; 0x0d
    332a:	9e 85       	ldd	r25, Y+14	; 0x0e
    332c:	af 85       	ldd	r26, Y+15	; 0x0f
    332e:	b8 89       	ldd	r27, Y+16	; 0x10
    3330:	00 97       	sbiw	r24, 0x00	; 0
    3332:	a1 05       	cpc	r26, r1
    3334:	b1 05       	cpc	r27, r1
    3336:	89 f5       	brne	.+98     	; 0x339a <LCD_SendNum+0x96>
	    	LCD_voidSendChar('0');
    3338:	80 e3       	ldi	r24, 0x30	; 48
    333a:	0e 94 3a 18 	call	0x3074	; 0x3074 <LCD_voidSendChar>
    333e:	4d c0       	rjmp	.+154    	; 0x33da <LCD_SendNum+0xd6>
	    else{
			while(Copy_u32_Num != 0){
				Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
    3340:	8a 81       	ldd	r24, Y+2	; 0x02
    3342:	08 2f       	mov	r16, r24
    3344:	10 e0       	ldi	r17, 0x00	; 0
    3346:	8d 85       	ldd	r24, Y+13	; 0x0d
    3348:	9e 85       	ldd	r25, Y+14	; 0x0e
    334a:	af 85       	ldd	r26, Y+15	; 0x0f
    334c:	b8 89       	ldd	r27, Y+16	; 0x10
    334e:	2a e0       	ldi	r18, 0x0A	; 10
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	40 e0       	ldi	r20, 0x00	; 0
    3354:	50 e0       	ldi	r21, 0x00	; 0
    3356:	bc 01       	movw	r22, r24
    3358:	cd 01       	movw	r24, r26
    335a:	0e 94 bf 1b 	call	0x377e	; 0x377e <__udivmodsi4>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	28 2f       	mov	r18, r24
    3364:	ce 01       	movw	r24, r28
    3366:	03 96       	adiw	r24, 0x03	; 3
    3368:	fc 01       	movw	r30, r24
    336a:	e0 0f       	add	r30, r16
    336c:	f1 1f       	adc	r31, r17
    336e:	20 83       	st	Z, r18
				Copy_u32_Num /= 10;
    3370:	8d 85       	ldd	r24, Y+13	; 0x0d
    3372:	9e 85       	ldd	r25, Y+14	; 0x0e
    3374:	af 85       	ldd	r26, Y+15	; 0x0f
    3376:	b8 89       	ldd	r27, Y+16	; 0x10
    3378:	2a e0       	ldi	r18, 0x0A	; 10
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	40 e0       	ldi	r20, 0x00	; 0
    337e:	50 e0       	ldi	r21, 0x00	; 0
    3380:	bc 01       	movw	r22, r24
    3382:	cd 01       	movw	r24, r26
    3384:	0e 94 bf 1b 	call	0x377e	; 0x377e <__udivmodsi4>
    3388:	da 01       	movw	r26, r20
    338a:	c9 01       	movw	r24, r18
    338c:	8d 87       	std	Y+13, r24	; 0x0d
    338e:	9e 87       	std	Y+14, r25	; 0x0e
    3390:	af 87       	std	Y+15, r26	; 0x0f
    3392:	b8 8b       	std	Y+16, r27	; 0x10
				Local_u8_iterator1++;
    3394:	8a 81       	ldd	r24, Y+2	; 0x02
    3396:	8f 5f       	subi	r24, 0xFF	; 255
    3398:	8a 83       	std	Y+2, r24	; 0x02
u8 LCD_SendNum(u32 Copy_u32_Num){
	u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0,Local_u8_iterator2 = 0;
	    if(Copy_u32_Num == 0)
	    	LCD_voidSendChar('0');
	    else{
			while(Copy_u32_Num != 0){
    339a:	8d 85       	ldd	r24, Y+13	; 0x0d
    339c:	9e 85       	ldd	r25, Y+14	; 0x0e
    339e:	af 85       	ldd	r26, Y+15	; 0x0f
    33a0:	b8 89       	ldd	r27, Y+16	; 0x10
    33a2:	00 97       	sbiw	r24, 0x00	; 0
    33a4:	a1 05       	cpc	r26, r1
    33a6:	b1 05       	cpc	r27, r1
    33a8:	59 f6       	brne	.-106    	; 0x3340 <LCD_SendNum+0x3c>
				Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
				Copy_u32_Num /= 10;
				Local_u8_iterator1++;
			}
			for(Local_u8_iterator2 = Local_u8_iterator1 ;Local_u8_iterator2>0; Local_u8_iterator2--){
    33aa:	8a 81       	ldd	r24, Y+2	; 0x02
    33ac:	89 83       	std	Y+1, r24	; 0x01
    33ae:	12 c0       	rjmp	.+36     	; 0x33d4 <LCD_SendNum+0xd0>
				LCD_voidSendChar(Local_u8_numArr[Local_u8_iterator2-1]+'0');
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	88 2f       	mov	r24, r24
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	9c 01       	movw	r18, r24
    33b8:	21 50       	subi	r18, 0x01	; 1
    33ba:	30 40       	sbci	r19, 0x00	; 0
    33bc:	ce 01       	movw	r24, r28
    33be:	03 96       	adiw	r24, 0x03	; 3
    33c0:	fc 01       	movw	r30, r24
    33c2:	e2 0f       	add	r30, r18
    33c4:	f3 1f       	adc	r31, r19
    33c6:	80 81       	ld	r24, Z
    33c8:	80 5d       	subi	r24, 0xD0	; 208
    33ca:	0e 94 3a 18 	call	0x3074	; 0x3074 <LCD_voidSendChar>
			while(Copy_u32_Num != 0){
				Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
				Copy_u32_Num /= 10;
				Local_u8_iterator1++;
			}
			for(Local_u8_iterator2 = Local_u8_iterator1 ;Local_u8_iterator2>0; Local_u8_iterator2--){
    33ce:	89 81       	ldd	r24, Y+1	; 0x01
    33d0:	81 50       	subi	r24, 0x01	; 1
    33d2:	89 83       	std	Y+1, r24	; 0x01
    33d4:	89 81       	ldd	r24, Y+1	; 0x01
    33d6:	88 23       	and	r24, r24
    33d8:	59 f7       	brne	.-42     	; 0x33b0 <LCD_SendNum+0xac>
				LCD_voidSendChar(Local_u8_numArr[Local_u8_iterator2-1]+'0');
			}
	    }
	    return STD_TYPES_OK;
    33da:	81 e0       	ldi	r24, 0x01	; 1
}
    33dc:	60 96       	adiw	r28, 0x10	; 16
    33de:	0f b6       	in	r0, 0x3f	; 63
    33e0:	f8 94       	cli
    33e2:	de bf       	out	0x3e, r29	; 62
    33e4:	0f be       	out	0x3f, r0	; 63
    33e6:	cd bf       	out	0x3d, r28	; 61
    33e8:	cf 91       	pop	r28
    33ea:	df 91       	pop	r29
    33ec:	1f 91       	pop	r17
    33ee:	0f 91       	pop	r16
    33f0:	08 95       	ret

000033f2 <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};


u8 KPD_u8GetKeyState(u8 * Copy_pu8ReturnedKey)
{
    33f2:	df 93       	push	r29
    33f4:	cf 93       	push	r28
    33f6:	cd b7       	in	r28, 0x3d	; 61
    33f8:	de b7       	in	r29, 0x3e	; 62
    33fa:	65 97       	sbiw	r28, 0x15	; 21
    33fc:	0f b6       	in	r0, 0x3f	; 63
    33fe:	f8 94       	cli
    3400:	de bf       	out	0x3e, r29	; 62
    3402:	0f be       	out	0x3f, r0	; 63
    3404:	cd bf       	out	0x3d, r28	; 61
    3406:	9d 8b       	std	Y+21, r25	; 0x15
    3408:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
    340e:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey != NULL)
    3410:	8c 89       	ldd	r24, Y+20	; 0x14
    3412:	9d 89       	ldd	r25, Y+21	; 0x15
    3414:	00 97       	sbiw	r24, 0x00	; 0
    3416:	09 f4       	brne	.+2      	; 0x341a <KPD_u8GetKeyState+0x28>
    3418:	f0 c0       	rjmp	.+480    	; 0x35fa <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    341a:	ec 89       	ldd	r30, Y+20	; 0x14
    341c:	fd 89       	ldd	r31, Y+21	; 0x15
    341e:	8f ef       	ldi	r24, 0xFF	; 255
    3420:	80 83       	st	Z, r24
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    3422:	19 8a       	std	Y+17, r1	; 0x11
    3424:	e5 c0       	rjmp	.+458    	; 0x35f0 <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_R_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    3426:	89 89       	ldd	r24, Y+17	; 0x11
    3428:	88 2f       	mov	r24, r24
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	fc 01       	movw	r30, r24
    342e:	e8 58       	subi	r30, 0x88	; 136
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	90 81       	ld	r25, Z
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	69 2f       	mov	r22, r25
    3438:	40 e0       	ldi	r20, 0x00	; 0
    343a:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
			/* Check Which Input Pin Has Zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    343e:	18 8a       	std	Y+16, r1	; 0x10
    3440:	c1 c0       	rjmp	.+386    	; 0x35c4 <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    3442:	88 89       	ldd	r24, Y+16	; 0x10
    3444:	88 2f       	mov	r24, r24
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	fc 01       	movw	r30, r24
    344a:	e4 58       	subi	r30, 0x84	; 132
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	90 81       	ld	r25, Z
    3450:	9e 01       	movw	r18, r28
    3452:	2d 5e       	subi	r18, 0xED	; 237
    3454:	3f 4f       	sbci	r19, 0xFF	; 255
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	69 2f       	mov	r22, r25
    345a:	a9 01       	movw	r20, r18
    345c:	0e 94 41 0c 	call	0x1882	; 0x1882 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)/* Switch is Pressed */
    3460:	8b 89       	ldd	r24, Y+19	; 0x13
    3462:	88 23       	and	r24, r24
    3464:	09 f0       	breq	.+2      	; 0x3468 <KPD_u8GetKeyState+0x76>
    3466:	ab c0       	rjmp	.+342    	; 0x35be <KPD_u8GetKeyState+0x1cc>
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	a0 ea       	ldi	r26, 0xA0	; 160
    346e:	b1 e4       	ldi	r27, 0x41	; 65
    3470:	8b 87       	std	Y+11, r24	; 0x0b
    3472:	9c 87       	std	Y+12, r25	; 0x0c
    3474:	ad 87       	std	Y+13, r26	; 0x0d
    3476:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3478:	6b 85       	ldd	r22, Y+11	; 0x0b
    347a:	7c 85       	ldd	r23, Y+12	; 0x0c
    347c:	8d 85       	ldd	r24, Y+13	; 0x0d
    347e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	4a ef       	ldi	r20, 0xFA	; 250
    3486:	54 e4       	ldi	r21, 0x44	; 68
    3488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	8f 83       	std	Y+7, r24	; 0x07
    3492:	98 87       	std	Y+8, r25	; 0x08
    3494:	a9 87       	std	Y+9, r26	; 0x09
    3496:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3498:	6f 81       	ldd	r22, Y+7	; 0x07
    349a:	78 85       	ldd	r23, Y+8	; 0x08
    349c:	89 85       	ldd	r24, Y+9	; 0x09
    349e:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	40 e8       	ldi	r20, 0x80	; 128
    34a6:	5f e3       	ldi	r21, 0x3F	; 63
    34a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ac:	88 23       	and	r24, r24
    34ae:	2c f4       	brge	.+10     	; 0x34ba <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	9e 83       	std	Y+6, r25	; 0x06
    34b6:	8d 83       	std	Y+5, r24	; 0x05
    34b8:	3f c0       	rjmp	.+126    	; 0x3538 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    34ba:	6f 81       	ldd	r22, Y+7	; 0x07
    34bc:	78 85       	ldd	r23, Y+8	; 0x08
    34be:	89 85       	ldd	r24, Y+9	; 0x09
    34c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	3f ef       	ldi	r19, 0xFF	; 255
    34c6:	4f e7       	ldi	r20, 0x7F	; 127
    34c8:	57 e4       	ldi	r21, 0x47	; 71
    34ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ce:	18 16       	cp	r1, r24
    34d0:	4c f5       	brge	.+82     	; 0x3524 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    34d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    34d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	40 e2       	ldi	r20, 0x20	; 32
    34e0:	51 e4       	ldi	r21, 0x41	; 65
    34e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	bc 01       	movw	r22, r24
    34ec:	cd 01       	movw	r24, r26
    34ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f2:	dc 01       	movw	r26, r24
    34f4:	cb 01       	movw	r24, r22
    34f6:	9e 83       	std	Y+6, r25	; 0x06
    34f8:	8d 83       	std	Y+5, r24	; 0x05
    34fa:	0f c0       	rjmp	.+30     	; 0x351a <KPD_u8GetKeyState+0x128>
    34fc:	88 ec       	ldi	r24, 0xC8	; 200
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	9c 83       	std	Y+4, r25	; 0x04
    3502:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3504:	8b 81       	ldd	r24, Y+3	; 0x03
    3506:	9c 81       	ldd	r25, Y+4	; 0x04
    3508:	01 97       	sbiw	r24, 0x01	; 1
    350a:	f1 f7       	brne	.-4      	; 0x3508 <KPD_u8GetKeyState+0x116>
    350c:	9c 83       	std	Y+4, r25	; 0x04
    350e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3510:	8d 81       	ldd	r24, Y+5	; 0x05
    3512:	9e 81       	ldd	r25, Y+6	; 0x06
    3514:	01 97       	sbiw	r24, 0x01	; 1
    3516:	9e 83       	std	Y+6, r25	; 0x06
    3518:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    351a:	8d 81       	ldd	r24, Y+5	; 0x05
    351c:	9e 81       	ldd	r25, Y+6	; 0x06
    351e:	00 97       	sbiw	r24, 0x00	; 0
    3520:	69 f7       	brne	.-38     	; 0x34fc <KPD_u8GetKeyState+0x10a>
    3522:	14 c0       	rjmp	.+40     	; 0x354c <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3524:	6f 81       	ldd	r22, Y+7	; 0x07
    3526:	78 85       	ldd	r23, Y+8	; 0x08
    3528:	89 85       	ldd	r24, Y+9	; 0x09
    352a:	9a 85       	ldd	r25, Y+10	; 0x0a
    352c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	9e 83       	std	Y+6, r25	; 0x06
    3536:	8d 83       	std	Y+5, r24	; 0x05
    3538:	8d 81       	ldd	r24, Y+5	; 0x05
    353a:	9e 81       	ldd	r25, Y+6	; 0x06
    353c:	9a 83       	std	Y+2, r25	; 0x02
    353e:	89 83       	std	Y+1, r24	; 0x01
    3540:	89 81       	ldd	r24, Y+1	; 0x01
    3542:	9a 81       	ldd	r25, Y+2	; 0x02
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	f1 f7       	brne	.-4      	; 0x3544 <KPD_u8GetKeyState+0x152>
    3548:	9a 83       	std	Y+2, r25	; 0x02
    354a:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    354c:	88 89       	ldd	r24, Y+16	; 0x10
    354e:	88 2f       	mov	r24, r24
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	fc 01       	movw	r30, r24
    3554:	e4 58       	subi	r30, 0x84	; 132
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	90 81       	ld	r25, Z
    355a:	9e 01       	movw	r18, r28
    355c:	2d 5e       	subi	r18, 0xED	; 237
    355e:	3f 4f       	sbci	r19, 0xFF	; 255
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	69 2f       	mov	r22, r25
    3564:	a9 01       	movw	r20, r18
    3566:	0e 94 41 0c 	call	0x1882	; 0x1882 <DIO_u8GetPinValue>
    356a:	0f c0       	rjmp	.+30     	; 0x358a <KPD_u8GetKeyState+0x198>
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    356c:	88 89       	ldd	r24, Y+16	; 0x10
    356e:	88 2f       	mov	r24, r24
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	fc 01       	movw	r30, r24
    3574:	e4 58       	subi	r30, 0x84	; 132
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	90 81       	ld	r25, Z
    357a:	9e 01       	movw	r18, r28
    357c:	2d 5e       	subi	r18, 0xED	; 237
    357e:	3f 4f       	sbci	r19, 0xFF	; 255
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	69 2f       	mov	r22, r25
    3584:	a9 01       	movw	r20, r18
    3586:	0e 94 41 0c 	call	0x1882	; 0x1882 <DIO_u8GetPinValue>
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
    358a:	8b 89       	ldd	r24, Y+19	; 0x13
    358c:	88 23       	and	r24, r24
    358e:	71 f3       	breq	.-36     	; 0x356c <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    3590:	89 89       	ldd	r24, Y+17	; 0x11
    3592:	48 2f       	mov	r20, r24
    3594:	50 e0       	ldi	r21, 0x00	; 0
    3596:	88 89       	ldd	r24, Y+16	; 0x10
    3598:	28 2f       	mov	r18, r24
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	ca 01       	movw	r24, r20
    359e:	88 0f       	add	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	88 0f       	add	r24, r24
    35a4:	99 1f       	adc	r25, r25
    35a6:	82 0f       	add	r24, r18
    35a8:	93 1f       	adc	r25, r19
    35aa:	fc 01       	movw	r30, r24
    35ac:	e8 59       	subi	r30, 0x98	; 152
    35ae:	ff 4f       	sbci	r31, 0xFF	; 255
    35b0:	80 81       	ld	r24, Z
    35b2:	ec 89       	ldd	r30, Y+20	; 0x14
    35b4:	fd 89       	ldd	r31, Y+21	; 0x15
    35b6:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	8f 87       	std	Y+15, r24	; 0x0f
    35bc:	07 c0       	rjmp	.+14     	; 0x35cc <KPD_u8GetKeyState+0x1da>
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
		{
			DIO_u8SetPinValue(KPD_u8_R_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
			/* Check Which Input Pin Has Zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    35be:	88 89       	ldd	r24, Y+16	; 0x10
    35c0:	8f 5f       	subi	r24, 0xFF	; 255
    35c2:	88 8b       	std	Y+16, r24	; 0x10
    35c4:	88 89       	ldd	r24, Y+16	; 0x10
    35c6:	84 30       	cpi	r24, 0x04	; 4
    35c8:	08 f4       	brcc	.+2      	; 0x35cc <KPD_u8GetKeyState+0x1da>
    35ca:	3b cf       	rjmp	.-394    	; 0x3442 <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;						
				}
			}
			/* Deactivate Row */
			DIO_u8SetPinValue(KPD_u8_R_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    35cc:	89 89       	ldd	r24, Y+17	; 0x11
    35ce:	88 2f       	mov	r24, r24
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	fc 01       	movw	r30, r24
    35d4:	e8 58       	subi	r30, 0x88	; 136
    35d6:	ff 4f       	sbci	r31, 0xFF	; 255
    35d8:	90 81       	ld	r25, Z
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	69 2f       	mov	r22, r25
    35de:	41 e0       	ldi	r20, 0x01	; 1
    35e0:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
			if(Local_u8Flag == 1)
    35e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    35e6:	81 30       	cpi	r24, 0x01	; 1
    35e8:	49 f0       	breq	.+18     	; 0x35fc <KPD_u8GetKeyState+0x20a>
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    35ea:	89 89       	ldd	r24, Y+17	; 0x11
    35ec:	8f 5f       	subi	r24, 0xFF	; 255
    35ee:	89 8b       	std	Y+17, r24	; 0x11
    35f0:	89 89       	ldd	r24, Y+17	; 0x11
    35f2:	84 30       	cpi	r24, 0x04	; 4
    35f4:	08 f4       	brcc	.+2      	; 0x35f8 <KPD_u8GetKeyState+0x206>
    35f6:	17 cf       	rjmp	.-466    	; 0x3426 <KPD_u8GetKeyState+0x34>
    35f8:	01 c0       	rjmp	.+2      	; 0x35fc <KPD_u8GetKeyState+0x20a>
			}
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    35fa:	1a 8a       	std	Y+18, r1	; 0x12
	}
	return Local_u8ErrorState;
    35fc:	8a 89       	ldd	r24, Y+18	; 0x12
}
    35fe:	65 96       	adiw	r28, 0x15	; 21
    3600:	0f b6       	in	r0, 0x3f	; 63
    3602:	f8 94       	cli
    3604:	de bf       	out	0x3e, r29	; 62
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	cd bf       	out	0x3d, r28	; 61
    360a:	cf 91       	pop	r28
    360c:	df 91       	pop	r29
    360e:	08 95       	ret

00003610 <DCM_u8_ROTATE_CW>:
#include "DCM_interface.h"
#include "DCM_private.h"
#include "DCM_config.h"

u8 DCM_u8_ROTATE_CW()
{
    3610:	df 93       	push	r29
    3612:	cf 93       	push	r28
    3614:	cd b7       	in	r28, 0x3d	; 61
    3616:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_IN1_PORT,MOTOR_IN1_PIN,DIO_u8_HIGH);
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	64 e0       	ldi	r22, 0x04	; 4
    361c:	41 e0       	ldi	r20, 0x01	; 1
    361e:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_IN2_PORT,MOTOR_IN2_PIN,DIO_u8_LOW);
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	65 e0       	ldi	r22, 0x05	; 5
    3626:	40 e0       	ldi	r20, 0x00	; 0
    3628:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    362c:	81 e0       	ldi	r24, 0x01	; 1
}
    362e:	cf 91       	pop	r28
    3630:	df 91       	pop	r29
    3632:	08 95       	ret

00003634 <DCM_u8_ROTATE_CCW>:

u8 DCM_u8_ROTATE_CCW()
{
    3634:	df 93       	push	r29
    3636:	cf 93       	push	r28
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_IN1_PORT,MOTOR_IN1_PIN,DIO_u8_LOW);
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	64 e0       	ldi	r22, 0x04	; 4
    3640:	40 e0       	ldi	r20, 0x00	; 0
    3642:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_IN2_PORT,MOTOR_IN2_PIN,DIO_u8_HIGH);
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	65 e0       	ldi	r22, 0x05	; 5
    364a:	41 e0       	ldi	r20, 0x01	; 1
    364c:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    3650:	81 e0       	ldi	r24, 0x01	; 1
}
    3652:	cf 91       	pop	r28
    3654:	df 91       	pop	r29
    3656:	08 95       	ret

00003658 <DCM_u8_ROTATE_STOP>:

u8 DCM_u8_ROTATE_STOP()
{
    3658:	df 93       	push	r29
    365a:	cf 93       	push	r28
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62
		DIO_u8SetPinValue(MOTOR_IN1_PORT,MOTOR_IN1_PIN,DIO_u8_LOW);
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	64 e0       	ldi	r22, 0x04	; 4
    3664:	40 e0       	ldi	r20, 0x00	; 0
    3666:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(MOTOR_IN2_PORT,MOTOR_IN2_PIN,DIO_u8_LOW);
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	65 e0       	ldi	r22, 0x05	; 5
    366e:	40 e0       	ldi	r20, 0x00	; 0
    3670:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>

		return STD_TYPES_OK;
    3674:	81 e0       	ldi	r24, 0x01	; 1

}
    3676:	cf 91       	pop	r28
    3678:	df 91       	pop	r29
    367a:	08 95       	ret

0000367c <DCM_u8_H_ROTATE_CW>:


/********************* FOR HARDWARE PART **********************/

u8 DCM_u8_H_ROTATE_CW()
{
    367c:	df 93       	push	r29
    367e:	cf 93       	push	r28
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CW_PIN,DIO_u8_HIGH);
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	64 e0       	ldi	r22, 0x04	; 4
    3688:	41 e0       	ldi	r20, 0x01	; 1
    368a:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CW_PIN,DIO_u8_HIGH);
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	65 e0       	ldi	r22, 0x05	; 5
    3692:	41 e0       	ldi	r20, 0x01	; 1
    3694:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CCW_PIN,DIO_u8_LOW);
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	66 e0       	ldi	r22, 0x06	; 6
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CCW_PIN,DIO_u8_LOW);
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	67 e0       	ldi	r22, 0x07	; 7
    36a6:	40 e0       	ldi	r20, 0x00	; 0
    36a8:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    36ac:	81 e0       	ldi	r24, 0x01	; 1
}
    36ae:	cf 91       	pop	r28
    36b0:	df 91       	pop	r29
    36b2:	08 95       	ret

000036b4 <DCM_u8_H_ROTATE_CCW>:

u8 DCM_u8_H_ROTATE_CCW()
{
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	cd b7       	in	r28, 0x3d	; 61
    36ba:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CW_PIN,DIO_u8_LOW);
    36bc:	81 e0       	ldi	r24, 0x01	; 1
    36be:	64 e0       	ldi	r22, 0x04	; 4
    36c0:	40 e0       	ldi	r20, 0x00	; 0
    36c2:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CW_PIN,DIO_u8_LOW);
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	65 e0       	ldi	r22, 0x05	; 5
    36ca:	40 e0       	ldi	r20, 0x00	; 0
    36cc:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CCW_PIN,DIO_u8_HIGH);
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	66 e0       	ldi	r22, 0x06	; 6
    36d4:	41 e0       	ldi	r20, 0x01	; 1
    36d6:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CCW_PIN,DIO_u8_HIGH);
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	67 e0       	ldi	r22, 0x07	; 7
    36de:	41 e0       	ldi	r20, 0x01	; 1
    36e0:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    36e4:	81 e0       	ldi	r24, 0x01	; 1
}
    36e6:	cf 91       	pop	r28
    36e8:	df 91       	pop	r29
    36ea:	08 95       	ret

000036ec <DCM_u8_H_ROTATE_STOP>:

u8 DCM_u8_H_ROTATE_STOP()
{
    36ec:	df 93       	push	r29
    36ee:	cf 93       	push	r28
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CW_PIN,DIO_u8_LOW);
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	64 e0       	ldi	r22, 0x04	; 4
    36f8:	40 e0       	ldi	r20, 0x00	; 0
    36fa:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CW_PIN,DIO_u8_LOW);
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	65 e0       	ldi	r22, 0x05	; 5
    3702:	40 e0       	ldi	r20, 0x00	; 0
    3704:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CCW_PIN,DIO_u8_LOW);
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	66 e0       	ldi	r22, 0x06	; 6
    370c:	40 e0       	ldi	r20, 0x00	; 0
    370e:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CCW_PIN,DIO_u8_LOW);
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	67 e0       	ldi	r22, 0x07	; 7
    3716:	40 e0       	ldi	r20, 0x00	; 0
    3718:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    371c:	81 e0       	ldi	r24, 0x01	; 1
}
    371e:	cf 91       	pop	r28
    3720:	df 91       	pop	r29
    3722:	08 95       	ret

00003724 <App_voidTogLed>:
#define F_CPU 8000000UL



void App_voidTogLed(void)
{
    3724:	df 93       	push	r29
    3726:	cf 93       	push	r28
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62
	static u8 flag = 0;
	if(flag == 0)
    372c:	80 91 91 00 	lds	r24, 0x0091
    3730:	88 23       	and	r24, r24
    3732:	49 f4       	brne	.+18     	; 0x3746 <App_voidTogLed+0x22>
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	60 e0       	ldi	r22, 0x00	; 0
    3738:	41 e0       	ldi	r20, 0x01	; 1
    373a:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
		flag = 1;
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	80 93 91 00 	sts	0x0091, r24
    3744:	07 c0       	rjmp	.+14     	; 0x3754 <App_voidTogLed+0x30>
	}
	else
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	60 e0       	ldi	r22, 0x00	; 0
    374a:	40 e0       	ldi	r20, 0x00	; 0
    374c:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_u8SetPinValue>
		flag = 0;
    3750:	10 92 91 00 	sts	0x0091, r1
	}
}
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	08 95       	ret

0000375a <main>:




u8 main(void)
{
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62

	// initialization of DIO
	DIO_u8SetPinDirection(0,0,1);
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	60 e0       	ldi	r22, 0x00	; 0
    3766:	41 e0       	ldi	r20, 0x01	; 1
    3768:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinDirection>
//	DIO_u8SetPinValue(0,0,1);
	// initialization of GI
	GI_voidGlobalEnable();
    376c:	0e 94 52 07 	call	0xea4	; 0xea4 <GI_voidGlobalEnable>
	// Set Call Back
	TIMERS_u8Timer0CTCSetCallBack(&App_voidTogLed);
    3770:	82 e9       	ldi	r24, 0x92	; 146
    3772:	9b e1       	ldi	r25, 0x1B	; 27
    3774:	0e 94 a1 06 	call	0xd42	; 0xd42 <TIMERS_u8Timer0CTCSetCallBack>
	// initialization of TIMER
	TIMERS_voidTimer0Init();
    3778:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TIMERS_voidTimer0Init>
    377c:	ff cf       	rjmp	.-2      	; 0x377c <main+0x22>

0000377e <__udivmodsi4>:
    377e:	a1 e2       	ldi	r26, 0x21	; 33
    3780:	1a 2e       	mov	r1, r26
    3782:	aa 1b       	sub	r26, r26
    3784:	bb 1b       	sub	r27, r27
    3786:	fd 01       	movw	r30, r26
    3788:	0d c0       	rjmp	.+26     	; 0x37a4 <__udivmodsi4_ep>

0000378a <__udivmodsi4_loop>:
    378a:	aa 1f       	adc	r26, r26
    378c:	bb 1f       	adc	r27, r27
    378e:	ee 1f       	adc	r30, r30
    3790:	ff 1f       	adc	r31, r31
    3792:	a2 17       	cp	r26, r18
    3794:	b3 07       	cpc	r27, r19
    3796:	e4 07       	cpc	r30, r20
    3798:	f5 07       	cpc	r31, r21
    379a:	20 f0       	brcs	.+8      	; 0x37a4 <__udivmodsi4_ep>
    379c:	a2 1b       	sub	r26, r18
    379e:	b3 0b       	sbc	r27, r19
    37a0:	e4 0b       	sbc	r30, r20
    37a2:	f5 0b       	sbc	r31, r21

000037a4 <__udivmodsi4_ep>:
    37a4:	66 1f       	adc	r22, r22
    37a6:	77 1f       	adc	r23, r23
    37a8:	88 1f       	adc	r24, r24
    37aa:	99 1f       	adc	r25, r25
    37ac:	1a 94       	dec	r1
    37ae:	69 f7       	brne	.-38     	; 0x378a <__udivmodsi4_loop>
    37b0:	60 95       	com	r22
    37b2:	70 95       	com	r23
    37b4:	80 95       	com	r24
    37b6:	90 95       	com	r25
    37b8:	9b 01       	movw	r18, r22
    37ba:	ac 01       	movw	r20, r24
    37bc:	bd 01       	movw	r22, r26
    37be:	cf 01       	movw	r24, r30
    37c0:	08 95       	ret

000037c2 <__prologue_saves__>:
    37c2:	2f 92       	push	r2
    37c4:	3f 92       	push	r3
    37c6:	4f 92       	push	r4
    37c8:	5f 92       	push	r5
    37ca:	6f 92       	push	r6
    37cc:	7f 92       	push	r7
    37ce:	8f 92       	push	r8
    37d0:	9f 92       	push	r9
    37d2:	af 92       	push	r10
    37d4:	bf 92       	push	r11
    37d6:	cf 92       	push	r12
    37d8:	df 92       	push	r13
    37da:	ef 92       	push	r14
    37dc:	ff 92       	push	r15
    37de:	0f 93       	push	r16
    37e0:	1f 93       	push	r17
    37e2:	cf 93       	push	r28
    37e4:	df 93       	push	r29
    37e6:	cd b7       	in	r28, 0x3d	; 61
    37e8:	de b7       	in	r29, 0x3e	; 62
    37ea:	ca 1b       	sub	r28, r26
    37ec:	db 0b       	sbc	r29, r27
    37ee:	0f b6       	in	r0, 0x3f	; 63
    37f0:	f8 94       	cli
    37f2:	de bf       	out	0x3e, r29	; 62
    37f4:	0f be       	out	0x3f, r0	; 63
    37f6:	cd bf       	out	0x3d, r28	; 61
    37f8:	09 94       	ijmp

000037fa <__epilogue_restores__>:
    37fa:	2a 88       	ldd	r2, Y+18	; 0x12
    37fc:	39 88       	ldd	r3, Y+17	; 0x11
    37fe:	48 88       	ldd	r4, Y+16	; 0x10
    3800:	5f 84       	ldd	r5, Y+15	; 0x0f
    3802:	6e 84       	ldd	r6, Y+14	; 0x0e
    3804:	7d 84       	ldd	r7, Y+13	; 0x0d
    3806:	8c 84       	ldd	r8, Y+12	; 0x0c
    3808:	9b 84       	ldd	r9, Y+11	; 0x0b
    380a:	aa 84       	ldd	r10, Y+10	; 0x0a
    380c:	b9 84       	ldd	r11, Y+9	; 0x09
    380e:	c8 84       	ldd	r12, Y+8	; 0x08
    3810:	df 80       	ldd	r13, Y+7	; 0x07
    3812:	ee 80       	ldd	r14, Y+6	; 0x06
    3814:	fd 80       	ldd	r15, Y+5	; 0x05
    3816:	0c 81       	ldd	r16, Y+4	; 0x04
    3818:	1b 81       	ldd	r17, Y+3	; 0x03
    381a:	aa 81       	ldd	r26, Y+2	; 0x02
    381c:	b9 81       	ldd	r27, Y+1	; 0x01
    381e:	ce 0f       	add	r28, r30
    3820:	d1 1d       	adc	r29, r1
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	f8 94       	cli
    3826:	de bf       	out	0x3e, r29	; 62
    3828:	0f be       	out	0x3f, r0	; 63
    382a:	cd bf       	out	0x3d, r28	; 61
    382c:	ed 01       	movw	r28, r26
    382e:	08 95       	ret

00003830 <_exit>:
    3830:	f8 94       	cli

00003832 <__stop_program>:
    3832:	ff cf       	rjmp	.-2      	; 0x3832 <__stop_program>
