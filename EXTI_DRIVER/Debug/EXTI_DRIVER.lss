
EXTI_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000480e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00800060  0000480e  000048a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800136  00800136  00004978  2**0
                  ALLOC
  3 .stab         00003c24  00000000  00000000  00004978  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001111  00000000  00000000  0000859c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000096ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000980d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000999c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b9e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000cae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000da64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000dbe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000dea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e734  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__vector_1>
       8:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__vector_2>
       c:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 33       	cpi	r26, 0x3D	; 61
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ee 18 	call	0x31dc	; 0x31dc <main>
      8a:	0c 94 05 24 	jmp	0x480a	; 0x480a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e1       	ldi	r26, 0x15	; 21
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ea 23 	jmp	0x47d4	; 0x47d4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f6 23 	jmp	0x47ec	; 0x47ec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f6 23 	jmp	0x47ec	; 0x47ec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e1       	ldi	r24, 0x15	; 21
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ea 23 	jmp	0x47d4	; 0x47d4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e1       	ldi	r22, 0x15	; 21
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f6 23 	jmp	0x47ec	; 0x47ec <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f6 23 	jmp	0x47ec	; 0x47ec <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f6 23 	jmp	0x47ec	; 0x47ec <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 de 23 	jmp	0x47bc	; 0x47bc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 fa 23 	jmp	0x47f4	; 0x47f4 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GI_voidGlobalEnable>:

#include "GI_interface.h"
#include "../DIO/DIO_interface.h"

/* Enable Global Interrupt Function */
void GI_voidGlobalEnable(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
     ca6:	af e5       	ldi	r26, 0x5F	; 95
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ef e5       	ldi	r30, 0x5F	; 95
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	8c 93       	st	X, r24
}
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <GI_voidGlobalDisable>:

/* Disable Global Interrupt Function */
void GI_voidGlobalDisable(void){
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
     cc2:	af e5       	ldi	r26, 0x5F	; 95
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ef e5       	ldi	r30, 0x5F	; 95
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	8c 93       	st	X, r24
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <EXTI_u8Enable>:

/***************** NO ADDED MACORS TO REGISTERES YET *****************/

/* Enable EXTI Function */
u8    EXTI_u8Enable(u8 Copy_u8EXTIIndex,u8 Copy_u8EdgeIndex)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2b 97       	sbiw	r28, 0x0b	; 11
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	8a 83       	std	Y+2, r24	; 0x02
     cec:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8EXTIIndex)
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	3b 87       	std	Y+11, r19	; 0x0b
     cfa:	2a 87       	std	Y+10, r18	; 0x0a
     cfc:	8a 85       	ldd	r24, Y+10	; 0x0a
     cfe:	9b 85       	ldd	r25, Y+11	; 0x0b
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	91 05       	cpc	r25, r1
     d04:	09 f4       	brne	.+2      	; 0xd08 <EXTI_u8Enable+0x32>
     d06:	85 c0       	rjmp	.+266    	; 0xe12 <EXTI_u8Enable+0x13c>
     d08:	2a 85       	ldd	r18, Y+10	; 0x0a
     d0a:	3b 85       	ldd	r19, Y+11	; 0x0b
     d0c:	22 30       	cpi	r18, 0x02	; 2
     d0e:	31 05       	cpc	r19, r1
     d10:	09 f4       	brne	.+2      	; 0xd14 <EXTI_u8Enable+0x3e>
     d12:	f9 c0       	rjmp	.+498    	; 0xf06 <EXTI_u8Enable+0x230>
     d14:	8a 85       	ldd	r24, Y+10	; 0x0a
     d16:	9b 85       	ldd	r25, Y+11	; 0x0b
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	09 f0       	breq	.+2      	; 0xd1e <EXTI_u8Enable+0x48>
     d1c:	23 c1       	rjmp	.+582    	; 0xf64 <EXTI_u8Enable+0x28e>
	{
		case EXTI_u8_INT0:
			switch(Copy_u8EdgeIndex)
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	39 87       	std	Y+9, r19	; 0x09
     d26:	28 87       	std	Y+8, r18	; 0x08
     d28:	88 85       	ldd	r24, Y+8	; 0x08
     d2a:	99 85       	ldd	r25, Y+9	; 0x09
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	91 05       	cpc	r25, r1
     d30:	61 f1       	breq	.+88     	; 0xd8a <EXTI_u8Enable+0xb4>
     d32:	28 85       	ldd	r18, Y+8	; 0x08
     d34:	39 85       	ldd	r19, Y+9	; 0x09
     d36:	22 30       	cpi	r18, 0x02	; 2
     d38:	31 05       	cpc	r19, r1
     d3a:	2c f4       	brge	.+10     	; 0xd46 <EXTI_u8Enable+0x70>
     d3c:	88 85       	ldd	r24, Y+8	; 0x08
     d3e:	99 85       	ldd	r25, Y+9	; 0x09
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	69 f0       	breq	.+26     	; 0xd5e <EXTI_u8Enable+0x88>
     d44:	64 c0       	rjmp	.+200    	; 0xe0e <EXTI_u8Enable+0x138>
     d46:	28 85       	ldd	r18, Y+8	; 0x08
     d48:	39 85       	ldd	r19, Y+9	; 0x09
     d4a:	22 30       	cpi	r18, 0x02	; 2
     d4c:	31 05       	cpc	r19, r1
     d4e:	99 f1       	breq	.+102    	; 0xdb6 <EXTI_u8Enable+0xe0>
     d50:	88 85       	ldd	r24, Y+8	; 0x08
     d52:	99 85       	ldd	r25, Y+9	; 0x09
     d54:	83 30       	cpi	r24, 0x03	; 3
     d56:	91 05       	cpc	r25, r1
     d58:	09 f4       	brne	.+2      	; 0xd5c <EXTI_u8Enable+0x86>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <EXTI_u8Enable+0x10c>
     d5c:	58 c0       	rjmp	.+176    	; 0xe0e <EXTI_u8Enable+0x138>
			{
				case EXTI_u8_RAISING_EDGE:
					SET_BIT(EXTI_u8_MCUCR,1);
     d5e:	a5 e5       	ldi	r26, 0x55	; 85
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e5 e5       	ldi	r30, 0x55	; 85
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	82 60       	ori	r24, 0x02	; 2
     d6a:	8c 93       	st	X, r24
					SET_BIT(EXTI_u8_MCUCR,0);
     d6c:	a5 e5       	ldi	r26, 0x55	; 85
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e5 e5       	ldi	r30, 0x55	; 85
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	81 60       	ori	r24, 0x01	; 1
     d78:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
     d7a:	ab e5       	ldi	r26, 0x5B	; 91
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	eb e5       	ldi	r30, 0x5B	; 91
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	80 64       	ori	r24, 0x40	; 64
     d86:	8c 93       	st	X, r24
     d88:	ee c0       	rjmp	.+476    	; 0xf66 <EXTI_u8Enable+0x290>
					break;

				case EXTI_u8_FALLING_EDGE:
					SET_BIT(EXTI_u8_MCUCR,1);
     d8a:	a5 e5       	ldi	r26, 0x55	; 85
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e5 e5       	ldi	r30, 0x55	; 85
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	82 60       	ori	r24, 0x02	; 2
     d96:	8c 93       	st	X, r24
					CLR_BIT(EXTI_u8_MCUCR,0);
     d98:	a5 e5       	ldi	r26, 0x55	; 85
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e5 e5       	ldi	r30, 0x55	; 85
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8e 7f       	andi	r24, 0xFE	; 254
     da4:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
     da6:	ab e5       	ldi	r26, 0x5B	; 91
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	eb e5       	ldi	r30, 0x5B	; 91
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	80 64       	ori	r24, 0x40	; 64
     db2:	8c 93       	st	X, r24
     db4:	d8 c0       	rjmp	.+432    	; 0xf66 <EXTI_u8Enable+0x290>
					break;

				case EXTI_u8_ANY_LOGICAL_CHANGE:
					CLR_BIT(EXTI_u8_MCUCR,1);
     db6:	a5 e5       	ldi	r26, 0x55	; 85
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e5 e5       	ldi	r30, 0x55	; 85
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	8d 7f       	andi	r24, 0xFD	; 253
     dc2:	8c 93       	st	X, r24
					SET_BIT(EXTI_u8_MCUCR,0);
     dc4:	a5 e5       	ldi	r26, 0x55	; 85
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e5 e5       	ldi	r30, 0x55	; 85
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	81 60       	ori	r24, 0x01	; 1
     dd0:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
     dd2:	ab e5       	ldi	r26, 0x5B	; 91
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	eb e5       	ldi	r30, 0x5B	; 91
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	80 64       	ori	r24, 0x40	; 64
     dde:	8c 93       	st	X, r24
     de0:	c2 c0       	rjmp	.+388    	; 0xf66 <EXTI_u8Enable+0x290>
					break;

				case EXTI_u8_LOW_LEVEL:
					CLR_BIT(EXTI_u8_MCUCR,1);
     de2:	a5 e5       	ldi	r26, 0x55	; 85
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e5 e5       	ldi	r30, 0x55	; 85
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	8d 7f       	andi	r24, 0xFD	; 253
     dee:	8c 93       	st	X, r24
					CLR_BIT(EXTI_u8_MCUCR,0);
     df0:	a5 e5       	ldi	r26, 0x55	; 85
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e5 e5       	ldi	r30, 0x55	; 85
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8e 7f       	andi	r24, 0xFE	; 254
     dfc:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
     dfe:	ab e5       	ldi	r26, 0x5B	; 91
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	eb e5       	ldi	r30, 0x5B	; 91
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	80 64       	ori	r24, 0x40	; 64
     e0a:	8c 93       	st	X, r24
     e0c:	ac c0       	rjmp	.+344    	; 0xf66 <EXTI_u8Enable+0x290>
					break;
				default : Local_u8ErrorState = STD_TYPES_NOK;
     e0e:	19 82       	std	Y+1, r1	; 0x01
     e10:	aa c0       	rjmp	.+340    	; 0xf66 <EXTI_u8Enable+0x290>
			}
		break;

			case EXTI_u8_INT1:
				switch(Copy_u8EdgeIndex)
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	3f 83       	std	Y+7, r19	; 0x07
     e1a:	2e 83       	std	Y+6, r18	; 0x06
     e1c:	8e 81       	ldd	r24, Y+6	; 0x06
     e1e:	9f 81       	ldd	r25, Y+7	; 0x07
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	91 05       	cpc	r25, r1
     e24:	61 f1       	breq	.+88     	; 0xe7e <EXTI_u8Enable+0x1a8>
     e26:	2e 81       	ldd	r18, Y+6	; 0x06
     e28:	3f 81       	ldd	r19, Y+7	; 0x07
     e2a:	22 30       	cpi	r18, 0x02	; 2
     e2c:	31 05       	cpc	r19, r1
     e2e:	2c f4       	brge	.+10     	; 0xe3a <EXTI_u8Enable+0x164>
     e30:	8e 81       	ldd	r24, Y+6	; 0x06
     e32:	9f 81       	ldd	r25, Y+7	; 0x07
     e34:	00 97       	sbiw	r24, 0x00	; 0
     e36:	69 f0       	breq	.+26     	; 0xe52 <EXTI_u8Enable+0x17c>
     e38:	64 c0       	rjmp	.+200    	; 0xf02 <EXTI_u8Enable+0x22c>
     e3a:	2e 81       	ldd	r18, Y+6	; 0x06
     e3c:	3f 81       	ldd	r19, Y+7	; 0x07
     e3e:	22 30       	cpi	r18, 0x02	; 2
     e40:	31 05       	cpc	r19, r1
     e42:	99 f1       	breq	.+102    	; 0xeaa <EXTI_u8Enable+0x1d4>
     e44:	8e 81       	ldd	r24, Y+6	; 0x06
     e46:	9f 81       	ldd	r25, Y+7	; 0x07
     e48:	83 30       	cpi	r24, 0x03	; 3
     e4a:	91 05       	cpc	r25, r1
     e4c:	09 f4       	brne	.+2      	; 0xe50 <EXTI_u8Enable+0x17a>
     e4e:	43 c0       	rjmp	.+134    	; 0xed6 <EXTI_u8Enable+0x200>
     e50:	58 c0       	rjmp	.+176    	; 0xf02 <EXTI_u8Enable+0x22c>
				{
					case EXTI_u8_RAISING_EDGE:
						SET_BIT(EXTI_u8_MCUCR,3);
     e52:	a5 e5       	ldi	r26, 0x55	; 85
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e5       	ldi	r30, 0x55	; 85
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	88 60       	ori	r24, 0x08	; 8
     e5e:	8c 93       	st	X, r24
						SET_BIT(EXTI_u8_MCUCR,2);
     e60:	a5 e5       	ldi	r26, 0x55	; 85
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e5 e5       	ldi	r30, 0x55	; 85
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	84 60       	ori	r24, 0x04	; 4
     e6c:	8c 93       	st	X, r24
						/* Enable EXTI0 */
						SET_BIT(EXTI_u8_GICR,7);
     e6e:	ab e5       	ldi	r26, 0x5B	; 91
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	eb e5       	ldi	r30, 0x5B	; 91
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 68       	ori	r24, 0x80	; 128
     e7a:	8c 93       	st	X, r24
     e7c:	74 c0       	rjmp	.+232    	; 0xf66 <EXTI_u8Enable+0x290>
						break;

					case EXTI_u8_FALLING_EDGE:
						SET_BIT(EXTI_u8_MCUCR,3);
     e7e:	a5 e5       	ldi	r26, 0x55	; 85
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e5 e5       	ldi	r30, 0x55	; 85
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	88 60       	ori	r24, 0x08	; 8
     e8a:	8c 93       	st	X, r24
						CLR_BIT(EXTI_u8_MCUCR,2);
     e8c:	a5 e5       	ldi	r26, 0x55	; 85
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e5       	ldi	r30, 0x55	; 85
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	8b 7f       	andi	r24, 0xFB	; 251
     e98:	8c 93       	st	X, r24
						/* Enable EXTI0 */
						SET_BIT(EXTI_u8_GICR,7);
     e9a:	ab e5       	ldi	r26, 0x5B	; 91
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	eb e5       	ldi	r30, 0x5B	; 91
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	80 68       	ori	r24, 0x80	; 128
     ea6:	8c 93       	st	X, r24
     ea8:	5e c0       	rjmp	.+188    	; 0xf66 <EXTI_u8Enable+0x290>
						break;

					case EXTI_u8_ANY_LOGICAL_CHANGE:
						CLR_BIT(EXTI_u8_MCUCR,3);
     eaa:	a5 e5       	ldi	r26, 0x55	; 85
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e5 e5       	ldi	r30, 0x55	; 85
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	87 7f       	andi	r24, 0xF7	; 247
     eb6:	8c 93       	st	X, r24
						SET_BIT(EXTI_u8_MCUCR,2);
     eb8:	a5 e5       	ldi	r26, 0x55	; 85
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e5 e5       	ldi	r30, 0x55	; 85
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	84 60       	ori	r24, 0x04	; 4
     ec4:	8c 93       	st	X, r24
						/* Enable EXTI0 */
						SET_BIT(EXTI_u8_GICR,7);
     ec6:	ab e5       	ldi	r26, 0x5B	; 91
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	eb e5       	ldi	r30, 0x5B	; 91
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	80 68       	ori	r24, 0x80	; 128
     ed2:	8c 93       	st	X, r24
     ed4:	48 c0       	rjmp	.+144    	; 0xf66 <EXTI_u8Enable+0x290>
						break;

					case EXTI_u8_LOW_LEVEL:
						CLR_BIT(EXTI_u8_MCUCR,3);
     ed6:	a5 e5       	ldi	r26, 0x55	; 85
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e5 e5       	ldi	r30, 0x55	; 85
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	87 7f       	andi	r24, 0xF7	; 247
     ee2:	8c 93       	st	X, r24
						CLR_BIT(EXTI_u8_MCUCR,2);
     ee4:	a5 e5       	ldi	r26, 0x55	; 85
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e5 e5       	ldi	r30, 0x55	; 85
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
						/* Enable EXTI0 */
						SET_BIT(EXTI_u8_GICR,7);
     ef2:	ab e5       	ldi	r26, 0x5B	; 91
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	eb e5       	ldi	r30, 0x5B	; 91
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 68       	ori	r24, 0x80	; 128
     efe:	8c 93       	st	X, r24
     f00:	32 c0       	rjmp	.+100    	; 0xf66 <EXTI_u8Enable+0x290>
						break;
					default : Local_u8ErrorState = STD_TYPES_NOK;
     f02:	19 82       	std	Y+1, r1	; 0x01
     f04:	30 c0       	rjmp	.+96     	; 0xf66 <EXTI_u8Enable+0x290>
				}
			break;

				case EXTI_u8_INT2:
					switch(Copy_u8EdgeIndex)
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	3d 83       	std	Y+5, r19	; 0x05
     f0e:	2c 83       	std	Y+4, r18	; 0x04
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	9d 81       	ldd	r25, Y+5	; 0x05
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	31 f0       	breq	.+12     	; 0xf24 <EXTI_u8Enable+0x24e>
     f18:	2c 81       	ldd	r18, Y+4	; 0x04
     f1a:	3d 81       	ldd	r19, Y+5	; 0x05
     f1c:	21 30       	cpi	r18, 0x01	; 1
     f1e:	31 05       	cpc	r19, r1
     f20:	81 f0       	breq	.+32     	; 0xf42 <EXTI_u8Enable+0x26c>
     f22:	1e c0       	rjmp	.+60     	; 0xf60 <EXTI_u8Enable+0x28a>
					{
						case EXTI_u8_RAISING_EDGE:
							SET_BIT(EXTI_u8_MCUCR,6);
     f24:	a5 e5       	ldi	r26, 0x55	; 85
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e5 e5       	ldi	r30, 0x55	; 85
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	80 64       	ori	r24, 0x40	; 64
     f30:	8c 93       	st	X, r24
							/* Enable EXTI0 */
							SET_BIT(EXTI_u8_GICR,5);
     f32:	ab e5       	ldi	r26, 0x5B	; 91
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	eb e5       	ldi	r30, 0x5B	; 91
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	80 62       	ori	r24, 0x20	; 32
     f3e:	8c 93       	st	X, r24
     f40:	12 c0       	rjmp	.+36     	; 0xf66 <EXTI_u8Enable+0x290>
							break;

						case EXTI_u8_FALLING_EDGE:
							SET_BIT(EXTI_u8_MCUCR,6);
     f42:	a5 e5       	ldi	r26, 0x55	; 85
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e5 e5       	ldi	r30, 0x55	; 85
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	80 64       	ori	r24, 0x40	; 64
     f4e:	8c 93       	st	X, r24
							/* Enable EXTI0 */
							SET_BIT(EXTI_u8_GICR,5);
     f50:	ab e5       	ldi	r26, 0x5B	; 91
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	eb e5       	ldi	r30, 0x5B	; 91
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	80 62       	ori	r24, 0x20	; 32
     f5c:	8c 93       	st	X, r24
     f5e:	03 c0       	rjmp	.+6      	; 0xf66 <EXTI_u8Enable+0x290>
							break;

						default : Local_u8ErrorState = STD_TYPES_NOK;
     f60:	19 82       	std	Y+1, r1	; 0x01
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <EXTI_u8Enable+0x290>
					}
				break;
				default : Local_u8ErrorState = STD_TYPES_NOK;
     f64:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     f66:	89 81       	ldd	r24, Y+1	; 0x01
}
     f68:	2b 96       	adiw	r28, 0x0b	; 11
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <EXTI_u8EXTIDisable>:



u8    EXTI_u8EXTIDisable(u8 Copy_u8EXTIIndex){
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <EXTI_u8EXTIDisable+0x6>
     f80:	00 d0       	rcall	.+0      	; 0xf82 <EXTI_u8EXTIDisable+0x8>
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8EXTIIndex)
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	3c 83       	std	Y+4, r19	; 0x04
     f94:	2b 83       	std	Y+3, r18	; 0x03
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	9c 81       	ldd	r25, Y+4	; 0x04
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	91 05       	cpc	r25, r1
     f9e:	89 f0       	breq	.+34     	; 0xfc2 <EXTI_u8EXTIDisable+0x48>
     fa0:	2b 81       	ldd	r18, Y+3	; 0x03
     fa2:	3c 81       	ldd	r19, Y+4	; 0x04
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	a1 f0       	breq	.+40     	; 0xfd2 <EXTI_u8EXTIDisable+0x58>
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	9c 81       	ldd	r25, Y+4	; 0x04
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	c1 f4       	brne	.+48     	; 0xfe2 <EXTI_u8EXTIDisable+0x68>
	{
		case EXTI_u8_INT0 :
			/* Disable EXTI0 */
			CLR_BIT(EXTI_u8_GICR,6);
     fb2:	ab e5       	ldi	r26, 0x5B	; 91
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	eb e5       	ldi	r30, 0x5B	; 91
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8f 7b       	andi	r24, 0xBF	; 191
     fbe:	8c 93       	st	X, r24
     fc0:	11 c0       	rjmp	.+34     	; 0xfe4 <EXTI_u8EXTIDisable+0x6a>
			break;

		case EXTI_u8_INT1 :
			/* Disable EXTI1 */
			CLR_BIT(EXTI_u8_GICR,7);
     fc2:	ab e5       	ldi	r26, 0x5B	; 91
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	eb e5       	ldi	r30, 0x5B	; 91
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8f 77       	andi	r24, 0x7F	; 127
     fce:	8c 93       	st	X, r24
     fd0:	09 c0       	rjmp	.+18     	; 0xfe4 <EXTI_u8EXTIDisable+0x6a>
			break;

		case EXTI_u8_INT2 :
			/* Disable EXTI2 */
			CLR_BIT(EXTI_u8_GICR,5);
     fd2:	ab e5       	ldi	r26, 0x5B	; 91
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	eb e5       	ldi	r30, 0x5B	; 91
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8f 7d       	andi	r24, 0xDF	; 223
     fde:	8c 93       	st	X, r24
     fe0:	01 c0       	rjmp	.+2      	; 0xfe4 <EXTI_u8EXTIDisable+0x6a>
			break;
		default : Local_u8ErrorState = STD_TYPES_NOK;
     fe2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <EXTI_u8EXTISetCallBack>:


u8    EXTI_u8EXTISetCallBack(u8 Copy_u8EXTIIndex, void(*Copy_pf)(void)){
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <EXTI_u8EXTISetCallBack+0x6>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <EXTI_u8EXTISetCallBack+0x8>
     ffc:	0f 92       	push	r0
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	8a 83       	std	Y+2, r24	; 0x02
    1004:	7c 83       	std	Y+4, r23	; 0x04
    1006:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8EXTIIndex <= EXTI_u8_INT2) && (Copy_pf != NULL)){
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	83 30       	cpi	r24, 0x03	; 3
    1010:	88 f4       	brcc	.+34     	; 0x1034 <EXTI_u8EXTISetCallBack+0x40>
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	69 f0       	breq	.+26     	; 0x1034 <EXTI_u8EXTISetCallBack+0x40>
		EXTI_ApfEXTI[Copy_u8EXTIIndex] = Copy_pf;
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	fc 01       	movw	r30, r24
    1026:	ea 5c       	subi	r30, 0xCA	; 202
    1028:	fe 4f       	sbci	r31, 0xFE	; 254
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	91 83       	std	Z+1, r25	; 0x01
    1030:	80 83       	st	Z, r24
    1032:	01 c0       	rjmp	.+2      	; 0x1036 <EXTI_u8EXTISetCallBack+0x42>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    1034:	19 82       	std	Y+1, r1	; 0x01
	}
}
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <__vector_1>:


/* Prototype for ISR of EXTI0 */
void __vector_1(void)    __attribute__((signal)); // to avoid optimizer changes
void __vector_1(void)
{
    1046:	1f 92       	push	r1
    1048:	0f 92       	push	r0
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	0f 92       	push	r0
    104e:	11 24       	eor	r1, r1
    1050:	2f 93       	push	r18
    1052:	3f 93       	push	r19
    1054:	4f 93       	push	r20
    1056:	5f 93       	push	r21
    1058:	6f 93       	push	r22
    105a:	7f 93       	push	r23
    105c:	8f 93       	push	r24
    105e:	9f 93       	push	r25
    1060:	af 93       	push	r26
    1062:	bf 93       	push	r27
    1064:	ef 93       	push	r30
    1066:	ff 93       	push	r31
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT0] != NULL)
    1070:	80 91 36 01 	lds	r24, 0x0136
    1074:	90 91 37 01 	lds	r25, 0x0137
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	29 f0       	breq	.+10     	; 0x1086 <__vector_1+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INT0]();
    107c:	e0 91 36 01 	lds	r30, 0x0136
    1080:	f0 91 37 01 	lds	r31, 0x0137
    1084:	09 95       	icall
	}

}
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	ff 91       	pop	r31
    108c:	ef 91       	pop	r30
    108e:	bf 91       	pop	r27
    1090:	af 91       	pop	r26
    1092:	9f 91       	pop	r25
    1094:	8f 91       	pop	r24
    1096:	7f 91       	pop	r23
    1098:	6f 91       	pop	r22
    109a:	5f 91       	pop	r21
    109c:	4f 91       	pop	r20
    109e:	3f 91       	pop	r19
    10a0:	2f 91       	pop	r18
    10a2:	0f 90       	pop	r0
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	0f 90       	pop	r0
    10a8:	1f 90       	pop	r1
    10aa:	18 95       	reti

000010ac <__vector_2>:

/* Prototype for ISR of EXTI2 */
void __vector_2(void)    __attribute__((signal)); // to avoid optimizer changes
void __vector_2(void)
{
    10ac:	1f 92       	push	r1
    10ae:	0f 92       	push	r0
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	0f 92       	push	r0
    10b4:	11 24       	eor	r1, r1
    10b6:	2f 93       	push	r18
    10b8:	3f 93       	push	r19
    10ba:	4f 93       	push	r20
    10bc:	5f 93       	push	r21
    10be:	6f 93       	push	r22
    10c0:	7f 93       	push	r23
    10c2:	8f 93       	push	r24
    10c4:	9f 93       	push	r25
    10c6:	af 93       	push	r26
    10c8:	bf 93       	push	r27
    10ca:	ef 93       	push	r30
    10cc:	ff 93       	push	r31
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT1] != NULL)
    10d6:	80 91 38 01 	lds	r24, 0x0138
    10da:	90 91 39 01 	lds	r25, 0x0139
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	29 f0       	breq	.+10     	; 0x10ec <__vector_2+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INT1]();
    10e2:	e0 91 38 01 	lds	r30, 0x0138
    10e6:	f0 91 39 01 	lds	r31, 0x0139
    10ea:	09 95       	icall
	}
}
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	ff 91       	pop	r31
    10f2:	ef 91       	pop	r30
    10f4:	bf 91       	pop	r27
    10f6:	af 91       	pop	r26
    10f8:	9f 91       	pop	r25
    10fa:	8f 91       	pop	r24
    10fc:	7f 91       	pop	r23
    10fe:	6f 91       	pop	r22
    1100:	5f 91       	pop	r21
    1102:	4f 91       	pop	r20
    1104:	3f 91       	pop	r19
    1106:	2f 91       	pop	r18
    1108:	0f 90       	pop	r0
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	0f 90       	pop	r0
    110e:	1f 90       	pop	r1
    1110:	18 95       	reti

00001112 <__vector_3>:

/* Prototype for ISR of EXTI3 */
void __vector_3(void)    __attribute__((signal)); // to avoid optimizer changes
void __vector_3(void)
{
    1112:	1f 92       	push	r1
    1114:	0f 92       	push	r0
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	0f 92       	push	r0
    111a:	11 24       	eor	r1, r1
    111c:	2f 93       	push	r18
    111e:	3f 93       	push	r19
    1120:	4f 93       	push	r20
    1122:	5f 93       	push	r21
    1124:	6f 93       	push	r22
    1126:	7f 93       	push	r23
    1128:	8f 93       	push	r24
    112a:	9f 93       	push	r25
    112c:	af 93       	push	r26
    112e:	bf 93       	push	r27
    1130:	ef 93       	push	r30
    1132:	ff 93       	push	r31
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT2] != NULL)
    113c:	80 91 3a 01 	lds	r24, 0x013A
    1140:	90 91 3b 01 	lds	r25, 0x013B
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	29 f0       	breq	.+10     	; 0x1152 <__vector_3+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INT2]();
    1148:	e0 91 3a 01 	lds	r30, 0x013A
    114c:	f0 91 3b 01 	lds	r31, 0x013B
    1150:	09 95       	icall
	}
}
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	ff 91       	pop	r31
    1158:	ef 91       	pop	r30
    115a:	bf 91       	pop	r27
    115c:	af 91       	pop	r26
    115e:	9f 91       	pop	r25
    1160:	8f 91       	pop	r24
    1162:	7f 91       	pop	r23
    1164:	6f 91       	pop	r22
    1166:	5f 91       	pop	r21
    1168:	4f 91       	pop	r20
    116a:	3f 91       	pop	r19
    116c:	2f 91       	pop	r18
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	0f 90       	pop	r0
    1174:	1f 90       	pop	r1
    1176:	18 95       	reti

00001178 <DIO_voidInit>:
#include "DIO_config.h"



void DIO_voidInit(void)
{
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    1180:	ea e3       	ldi	r30, 0x3A	; 58
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	8f e7       	ldi	r24, 0x7F	; 127
    1186:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    1188:	e7 e3       	ldi	r30, 0x37	; 55
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 ef       	ldi	r24, 0xF0	; 240
    118e:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    1190:	e4 e3       	ldi	r30, 0x34	; 52
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	8f ef       	ldi	r24, 0xFF	; 255
    1196:	80 83       	st	Z, r24

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    1198:	e1 e3       	ldi	r30, 0x31	; 49
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	83 e0       	ldi	r24, 0x03	; 3
    119e:	80 83       	st	Z, r24
	/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA0_INITIAL_VALUE);
    11a0:	eb e3       	ldi	r30, 0x3B	; 59
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	88 e7       	ldi	r24, 0x78	; 120
    11a6:	80 83       	st	Z, r24

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB0_INITIAL_VALUE);
    11a8:	e8 e3       	ldi	r30, 0x38	; 56
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8f e0       	ldi	r24, 0x0F	; 15
    11ae:	80 83       	st	Z, r24

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC0_INITIAL_VALUE);
    11b0:	e5 e3       	ldi	r30, 0x35	; 53
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD0_INITIAL_VALUE);
    11b6:	e2 e3       	ldi	r30, 0x32	; 50
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	84 e0       	ldi	r24, 0x04	; 4
    11bc:	80 83       	st	Z, r24

}
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <DIO_u8SetPinDirection>:




u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	2e 97       	sbiw	r28, 0x0e	; 14
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	8a 83       	std	Y+2, r24	; 0x02
    11da:	6b 83       	std	Y+3, r22	; 0x03
    11dc:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	84 30       	cpi	r24, 0x04	; 4
    11e6:	08 f0       	brcs	.+2      	; 0x11ea <DIO_u8SetPinDirection+0x26>
    11e8:	0d c1       	rjmp	.+538    	; 0x1404 <DIO_u8SetPinDirection+0x240>
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	88 30       	cpi	r24, 0x08	; 8
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <DIO_u8SetPinDirection+0x2e>
    11f0:	09 c1       	rjmp	.+530    	; 0x1404 <DIO_u8SetPinDirection+0x240>
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	88 23       	and	r24, r24
    11f6:	21 f0       	breq	.+8      	; 0x1200 <DIO_u8SetPinDirection+0x3c>
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	09 f0       	breq	.+2      	; 0x1200 <DIO_u8SetPinDirection+0x3c>
    11fe:	02 c1       	rjmp	.+516    	; 0x1404 <DIO_u8SetPinDirection+0x240>
	{

		switch (Copy_u8PortId)
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	3e 87       	std	Y+14, r19	; 0x0e
    1208:	2d 87       	std	Y+13, r18	; 0x0d
    120a:	8d 85       	ldd	r24, Y+13	; 0x0d
    120c:	9e 85       	ldd	r25, Y+14	; 0x0e
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	91 05       	cpc	r25, r1
    1212:	09 f4       	brne	.+2      	; 0x1216 <DIO_u8SetPinDirection+0x52>
    1214:	4f c0       	rjmp	.+158    	; 0x12b4 <DIO_u8SetPinDirection+0xf0>
    1216:	2d 85       	ldd	r18, Y+13	; 0x0d
    1218:	3e 85       	ldd	r19, Y+14	; 0x0e
    121a:	22 30       	cpi	r18, 0x02	; 2
    121c:	31 05       	cpc	r19, r1
    121e:	2c f4       	brge	.+10     	; 0x122a <DIO_u8SetPinDirection+0x66>
    1220:	8d 85       	ldd	r24, Y+13	; 0x0d
    1222:	9e 85       	ldd	r25, Y+14	; 0x0e
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	71 f0       	breq	.+28     	; 0x1244 <DIO_u8SetPinDirection+0x80>
    1228:	ee c0       	rjmp	.+476    	; 0x1406 <DIO_u8SetPinDirection+0x242>
    122a:	2d 85       	ldd	r18, Y+13	; 0x0d
    122c:	3e 85       	ldd	r19, Y+14	; 0x0e
    122e:	22 30       	cpi	r18, 0x02	; 2
    1230:	31 05       	cpc	r19, r1
    1232:	09 f4       	brne	.+2      	; 0x1236 <DIO_u8SetPinDirection+0x72>
    1234:	77 c0       	rjmp	.+238    	; 0x1324 <DIO_u8SetPinDirection+0x160>
    1236:	8d 85       	ldd	r24, Y+13	; 0x0d
    1238:	9e 85       	ldd	r25, Y+14	; 0x0e
    123a:	83 30       	cpi	r24, 0x03	; 3
    123c:	91 05       	cpc	r25, r1
    123e:	09 f4       	brne	.+2      	; 0x1242 <DIO_u8SetPinDirection+0x7e>
    1240:	a9 c0       	rjmp	.+338    	; 0x1394 <DIO_u8SetPinDirection+0x1d0>
    1242:	e1 c0       	rjmp	.+450    	; 0x1406 <DIO_u8SetPinDirection+0x242>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    1244:	8c 81       	ldd	r24, Y+4	; 0x04
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3c 87       	std	Y+12, r19	; 0x0c
    124c:	2b 87       	std	Y+11, r18	; 0x0b
    124e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1250:	9c 85       	ldd	r25, Y+12	; 0x0c
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	31 f0       	breq	.+12     	; 0x1262 <DIO_u8SetPinDirection+0x9e>
    1256:	2b 85       	ldd	r18, Y+11	; 0x0b
    1258:	3c 85       	ldd	r19, Y+12	; 0x0c
    125a:	21 30       	cpi	r18, 0x01	; 1
    125c:	31 05       	cpc	r19, r1
    125e:	a9 f0       	breq	.+42     	; 0x128a <DIO_u8SetPinDirection+0xc6>
    1260:	d2 c0       	rjmp	.+420    	; 0x1406 <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1262:	aa e3       	ldi	r26, 0x3A	; 58
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	ea e3       	ldi	r30, 0x3A	; 58
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_u8SetPinDirection+0xbc>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <DIO_u8SetPinDirection+0xb8>
    1284:	84 2b       	or	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	be c0       	rjmp	.+380    	; 0x1406 <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    128a:	aa e3       	ldi	r26, 0x3A	; 58
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	ea e3       	ldi	r30, 0x3A	; 58
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <DIO_u8SetPinDirection+0xe4>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <DIO_u8SetPinDirection+0xe0>
    12ac:	80 95       	com	r24
    12ae:	84 23       	and	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	a9 c0       	rjmp	.+338    	; 0x1406 <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	3a 87       	std	Y+10, r19	; 0x0a
    12bc:	29 87       	std	Y+9, r18	; 0x09
    12be:	89 85       	ldd	r24, Y+9	; 0x09
    12c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	31 f0       	breq	.+12     	; 0x12d2 <DIO_u8SetPinDirection+0x10e>
    12c6:	29 85       	ldd	r18, Y+9	; 0x09
    12c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    12ca:	21 30       	cpi	r18, 0x01	; 1
    12cc:	31 05       	cpc	r19, r1
    12ce:	a9 f0       	breq	.+42     	; 0x12fa <DIO_u8SetPinDirection+0x136>
    12d0:	9a c0       	rjmp	.+308    	; 0x1406 <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    12d2:	a7 e3       	ldi	r26, 0x37	; 55
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e7 e3       	ldi	r30, 0x37	; 55
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_u8SetPinDirection+0x12c>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_u8SetPinDirection+0x128>
    12f4:	84 2b       	or	r24, r20
    12f6:	8c 93       	st	X, r24
    12f8:	86 c0       	rjmp	.+268    	; 0x1406 <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    12fa:	a7 e3       	ldi	r26, 0x37	; 55
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e7 e3       	ldi	r30, 0x37	; 55
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_u8SetPinDirection+0x154>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_u8SetPinDirection+0x150>
    131c:	80 95       	com	r24
    131e:	84 23       	and	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	71 c0       	rjmp	.+226    	; 0x1406 <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    1324:	8c 81       	ldd	r24, Y+4	; 0x04
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	38 87       	std	Y+8, r19	; 0x08
    132c:	2f 83       	std	Y+7, r18	; 0x07
    132e:	8f 81       	ldd	r24, Y+7	; 0x07
    1330:	98 85       	ldd	r25, Y+8	; 0x08
    1332:	00 97       	sbiw	r24, 0x00	; 0
    1334:	31 f0       	breq	.+12     	; 0x1342 <DIO_u8SetPinDirection+0x17e>
    1336:	2f 81       	ldd	r18, Y+7	; 0x07
    1338:	38 85       	ldd	r19, Y+8	; 0x08
    133a:	21 30       	cpi	r18, 0x01	; 1
    133c:	31 05       	cpc	r19, r1
    133e:	a9 f0       	breq	.+42     	; 0x136a <DIO_u8SetPinDirection+0x1a6>
    1340:	62 c0       	rjmp	.+196    	; 0x1406 <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1342:	a4 e3       	ldi	r26, 0x34	; 52
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e4 e3       	ldi	r30, 0x34	; 52
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_u8SetPinDirection+0x19c>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <DIO_u8SetPinDirection+0x198>
    1364:	84 2b       	or	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	4e c0       	rjmp	.+156    	; 0x1406 <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    136a:	a4 e3       	ldi	r26, 0x34	; 52
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e4 e3       	ldi	r30, 0x34	; 52
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_u8SetPinDirection+0x1c4>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_u8SetPinDirection+0x1c0>
    138c:	80 95       	com	r24
    138e:	84 23       	and	r24, r20
    1390:	8c 93       	st	X, r24
    1392:	39 c0       	rjmp	.+114    	; 0x1406 <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	3e 83       	std	Y+6, r19	; 0x06
    139c:	2d 83       	std	Y+5, r18	; 0x05
    139e:	8d 81       	ldd	r24, Y+5	; 0x05
    13a0:	9e 81       	ldd	r25, Y+6	; 0x06
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	31 f0       	breq	.+12     	; 0x13b2 <DIO_u8SetPinDirection+0x1ee>
    13a6:	2d 81       	ldd	r18, Y+5	; 0x05
    13a8:	3e 81       	ldd	r19, Y+6	; 0x06
    13aa:	21 30       	cpi	r18, 0x01	; 1
    13ac:	31 05       	cpc	r19, r1
    13ae:	a9 f0       	breq	.+42     	; 0x13da <DIO_u8SetPinDirection+0x216>
    13b0:	2a c0       	rjmp	.+84     	; 0x1406 <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    13b2:	a1 e3       	ldi	r26, 0x31	; 49
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e1 e3       	ldi	r30, 0x31	; 49
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_u8SetPinDirection+0x20c>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_u8SetPinDirection+0x208>
    13d4:	84 2b       	or	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	16 c0       	rjmp	.+44     	; 0x1406 <DIO_u8SetPinDirection+0x242>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    13da:	a1 e3       	ldi	r26, 0x31	; 49
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e1 e3       	ldi	r30, 0x31	; 49
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_u8SetPinDirection+0x234>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_u8SetPinDirection+0x230>
    13fc:	80 95       	com	r24
    13fe:	84 23       	and	r24, r20
    1400:	8c 93       	st	X, r24
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <DIO_u8SetPinDirection+0x242>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1404:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1406:	89 81       	ldd	r24, Y+1	; 0x01
}
    1408:	2e 96       	adiw	r28, 0x0e	; 14
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	2e 97       	sbiw	r28, 0x0e	; 14
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	8a 83       	std	Y+2, r24	; 0x02
    1430:	6b 83       	std	Y+3, r22	; 0x03
    1432:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	84 30       	cpi	r24, 0x04	; 4
    143c:	08 f0       	brcs	.+2      	; 0x1440 <DIO_u8SetPinValue+0x26>
    143e:	13 c1       	rjmp	.+550    	; 0x1666 <DIO_u8SetPinValue+0x24c>
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	88 30       	cpi	r24, 0x08	; 8
    1444:	08 f0       	brcs	.+2      	; 0x1448 <DIO_u8SetPinValue+0x2e>
    1446:	0f c1       	rjmp	.+542    	; 0x1666 <DIO_u8SetPinValue+0x24c>
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	88 23       	and	r24, r24
    144c:	21 f0       	breq	.+8      	; 0x1456 <DIO_u8SetPinValue+0x3c>
    144e:	8c 81       	ldd	r24, Y+4	; 0x04
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	09 f0       	breq	.+2      	; 0x1456 <DIO_u8SetPinValue+0x3c>
    1454:	08 c1       	rjmp	.+528    	; 0x1666 <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3e 87       	std	Y+14, r19	; 0x0e
    145e:	2d 87       	std	Y+13, r18	; 0x0d
    1460:	8d 85       	ldd	r24, Y+13	; 0x0d
    1462:	9e 85       	ldd	r25, Y+14	; 0x0e
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	91 05       	cpc	r25, r1
    1468:	09 f4       	brne	.+2      	; 0x146c <DIO_u8SetPinValue+0x52>
    146a:	50 c0       	rjmp	.+160    	; 0x150c <DIO_u8SetPinValue+0xf2>
    146c:	2d 85       	ldd	r18, Y+13	; 0x0d
    146e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1470:	22 30       	cpi	r18, 0x02	; 2
    1472:	31 05       	cpc	r19, r1
    1474:	2c f4       	brge	.+10     	; 0x1480 <DIO_u8SetPinValue+0x66>
    1476:	8d 85       	ldd	r24, Y+13	; 0x0d
    1478:	9e 85       	ldd	r25, Y+14	; 0x0e
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	71 f0       	breq	.+28     	; 0x149a <DIO_u8SetPinValue+0x80>
    147e:	f4 c0       	rjmp	.+488    	; 0x1668 <DIO_u8SetPinValue+0x24e>
    1480:	2d 85       	ldd	r18, Y+13	; 0x0d
    1482:	3e 85       	ldd	r19, Y+14	; 0x0e
    1484:	22 30       	cpi	r18, 0x02	; 2
    1486:	31 05       	cpc	r19, r1
    1488:	09 f4       	brne	.+2      	; 0x148c <DIO_u8SetPinValue+0x72>
    148a:	79 c0       	rjmp	.+242    	; 0x157e <DIO_u8SetPinValue+0x164>
    148c:	8d 85       	ldd	r24, Y+13	; 0x0d
    148e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1490:	83 30       	cpi	r24, 0x03	; 3
    1492:	91 05       	cpc	r25, r1
    1494:	09 f4       	brne	.+2      	; 0x1498 <DIO_u8SetPinValue+0x7e>
    1496:	ad c0       	rjmp	.+346    	; 0x15f2 <DIO_u8SetPinValue+0x1d8>
    1498:	e7 c0       	rjmp	.+462    	; 0x1668 <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	3c 87       	std	Y+12, r19	; 0x0c
    14a2:	2b 87       	std	Y+11, r18	; 0x0b
    14a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    14a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	c9 f0       	breq	.+50     	; 0x14de <DIO_u8SetPinValue+0xc4>
    14ac:	2b 85       	ldd	r18, Y+11	; 0x0b
    14ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    14b0:	21 30       	cpi	r18, 0x01	; 1
    14b2:	31 05       	cpc	r19, r1
    14b4:	49 f5       	brne	.+82     	; 0x1508 <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    14b6:	ab e3       	ldi	r26, 0x3B	; 59
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	eb e3       	ldi	r30, 0x3B	; 59
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_u8SetPinValue+0xba>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_u8SetPinValue+0xb6>
    14d8:	84 2b       	or	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	c5 c0       	rjmp	.+394    	; 0x1668 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    14de:	ab e3       	ldi	r26, 0x3B	; 59
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	eb e3       	ldi	r30, 0x3B	; 59
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_u8SetPinValue+0xe2>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DIO_u8SetPinValue+0xde>
    1500:	80 95       	com	r24
    1502:	84 23       	and	r24, r20
    1504:	8c 93       	st	X, r24
    1506:	b0 c0       	rjmp	.+352    	; 0x1668 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1508:	19 82       	std	Y+1, r1	; 0x01
    150a:	ae c0       	rjmp	.+348    	; 0x1668 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    150c:	8c 81       	ldd	r24, Y+4	; 0x04
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	3a 87       	std	Y+10, r19	; 0x0a
    1514:	29 87       	std	Y+9, r18	; 0x09
    1516:	89 85       	ldd	r24, Y+9	; 0x09
    1518:	9a 85       	ldd	r25, Y+10	; 0x0a
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	c9 f0       	breq	.+50     	; 0x1550 <DIO_u8SetPinValue+0x136>
    151e:	29 85       	ldd	r18, Y+9	; 0x09
    1520:	3a 85       	ldd	r19, Y+10	; 0x0a
    1522:	21 30       	cpi	r18, 0x01	; 1
    1524:	31 05       	cpc	r19, r1
    1526:	49 f5       	brne	.+82     	; 0x157a <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1528:	a8 e3       	ldi	r26, 0x38	; 56
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e8 e3       	ldi	r30, 0x38	; 56
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <DIO_u8SetPinValue+0x12c>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <DIO_u8SetPinValue+0x128>
    154a:	84 2b       	or	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	8c c0       	rjmp	.+280    	; 0x1668 <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1550:	a8 e3       	ldi	r26, 0x38	; 56
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e8 e3       	ldi	r30, 0x38	; 56
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 2e       	mov	r0, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <DIO_u8SetPinValue+0x154>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	0a 94       	dec	r0
    1570:	e2 f7       	brpl	.-8      	; 0x156a <DIO_u8SetPinValue+0x150>
    1572:	80 95       	com	r24
    1574:	84 23       	and	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	77 c0       	rjmp	.+238    	; 0x1668 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    157a:	19 82       	std	Y+1, r1	; 0x01
    157c:	75 c0       	rjmp	.+234    	; 0x1668 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	38 87       	std	Y+8, r19	; 0x08
    1586:	2f 83       	std	Y+7, r18	; 0x07
    1588:	8f 81       	ldd	r24, Y+7	; 0x07
    158a:	98 85       	ldd	r25, Y+8	; 0x08
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	31 f0       	breq	.+12     	; 0x159c <DIO_u8SetPinValue+0x182>
    1590:	2f 81       	ldd	r18, Y+7	; 0x07
    1592:	38 85       	ldd	r19, Y+8	; 0x08
    1594:	21 30       	cpi	r18, 0x01	; 1
    1596:	31 05       	cpc	r19, r1
    1598:	b1 f0       	breq	.+44     	; 0x15c6 <DIO_u8SetPinValue+0x1ac>
    159a:	29 c0       	rjmp	.+82     	; 0x15ee <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    159c:	a5 e3       	ldi	r26, 0x35	; 53
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e5 e3       	ldi	r30, 0x35	; 53
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <DIO_u8SetPinValue+0x1a0>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <DIO_u8SetPinValue+0x19c>
    15be:	80 95       	com	r24
    15c0:	84 23       	and	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	51 c0       	rjmp	.+162    	; 0x1668 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    15c6:	a5 e3       	ldi	r26, 0x35	; 53
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e5 e3       	ldi	r30, 0x35	; 53
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <DIO_u8SetPinValue+0x1ca>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <DIO_u8SetPinValue+0x1c6>
    15e8:	84 2b       	or	r24, r20
    15ea:	8c 93       	st	X, r24
    15ec:	3d c0       	rjmp	.+122    	; 0x1668 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    15ee:	19 82       	std	Y+1, r1	; 0x01
    15f0:	3b c0       	rjmp	.+118    	; 0x1668 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	3e 83       	std	Y+6, r19	; 0x06
    15fa:	2d 83       	std	Y+5, r18	; 0x05
    15fc:	8d 81       	ldd	r24, Y+5	; 0x05
    15fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	31 f0       	breq	.+12     	; 0x1610 <DIO_u8SetPinValue+0x1f6>
    1604:	2d 81       	ldd	r18, Y+5	; 0x05
    1606:	3e 81       	ldd	r19, Y+6	; 0x06
    1608:	21 30       	cpi	r18, 0x01	; 1
    160a:	31 05       	cpc	r19, r1
    160c:	b1 f0       	breq	.+44     	; 0x163a <DIO_u8SetPinValue+0x220>
    160e:	29 c0       	rjmp	.+82     	; 0x1662 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1610:	a5 e3       	ldi	r26, 0x35	; 53
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e5 e3       	ldi	r30, 0x35	; 53
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 2e       	mov	r0, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_u8SetPinValue+0x214>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0a 94       	dec	r0
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_u8SetPinValue+0x210>
    1632:	80 95       	com	r24
    1634:	84 23       	and	r24, r20
    1636:	8c 93       	st	X, r24
    1638:	17 c0       	rjmp	.+46     	; 0x1668 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    163a:	a2 e3       	ldi	r26, 0x32	; 50
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e2 e3       	ldi	r30, 0x32	; 50
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_u8SetPinValue+0x23e>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <DIO_u8SetPinValue+0x23a>
    165c:	84 2b       	or	r24, r20
    165e:	8c 93       	st	X, r24
    1660:	03 c0       	rjmp	.+6      	; 0x1668 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1662:	19 82       	std	Y+1, r1	; 0x01
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		 Local_u8ErrorState = STD_TYPES_NOK;
    1666:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1668:	89 81       	ldd	r24, Y+1	; 0x01
}
    166a:	2e 96       	adiw	r28, 0x0e	; 14
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	28 97       	sbiw	r28, 0x08	; 8
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	8b 83       	std	Y+3, r24	; 0x03
    1692:	6c 83       	std	Y+4, r22	; 0x04
    1694:	5e 83       	std	Y+6, r21	; 0x06
    1696:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	84 30       	cpi	r24, 0x04	; 4
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <DIO_u8GetPinValue+0x28>
    16a2:	9f c0       	rjmp	.+318    	; 0x17e2 <DIO_u8GetPinValue+0x166>
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	88 30       	cpi	r24, 0x08	; 8
    16a8:	08 f0       	brcs	.+2      	; 0x16ac <DIO_u8GetPinValue+0x30>
    16aa:	9b c0       	rjmp	.+310    	; 0x17e2 <DIO_u8GetPinValue+0x166>
    16ac:	8d 81       	ldd	r24, Y+5	; 0x05
    16ae:	9e 81       	ldd	r25, Y+6	; 0x06
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <DIO_u8GetPinValue+0x3a>
    16b4:	96 c0       	rjmp	.+300    	; 0x17e2 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	38 87       	std	Y+8, r19	; 0x08
    16be:	2f 83       	std	Y+7, r18	; 0x07
    16c0:	4f 81       	ldd	r20, Y+7	; 0x07
    16c2:	58 85       	ldd	r21, Y+8	; 0x08
    16c4:	41 30       	cpi	r20, 0x01	; 1
    16c6:	51 05       	cpc	r21, r1
    16c8:	a9 f1       	breq	.+106    	; 0x1734 <DIO_u8GetPinValue+0xb8>
    16ca:	8f 81       	ldd	r24, Y+7	; 0x07
    16cc:	98 85       	ldd	r25, Y+8	; 0x08
    16ce:	82 30       	cpi	r24, 0x02	; 2
    16d0:	91 05       	cpc	r25, r1
    16d2:	34 f4       	brge	.+12     	; 0x16e0 <DIO_u8GetPinValue+0x64>
    16d4:	2f 81       	ldd	r18, Y+7	; 0x07
    16d6:	38 85       	ldd	r19, Y+8	; 0x08
    16d8:	21 15       	cp	r18, r1
    16da:	31 05       	cpc	r19, r1
    16dc:	71 f0       	breq	.+28     	; 0x16fa <DIO_u8GetPinValue+0x7e>
    16de:	82 c0       	rjmp	.+260    	; 0x17e4 <DIO_u8GetPinValue+0x168>
    16e0:	4f 81       	ldd	r20, Y+7	; 0x07
    16e2:	58 85       	ldd	r21, Y+8	; 0x08
    16e4:	42 30       	cpi	r20, 0x02	; 2
    16e6:	51 05       	cpc	r21, r1
    16e8:	09 f4       	brne	.+2      	; 0x16ec <DIO_u8GetPinValue+0x70>
    16ea:	41 c0       	rjmp	.+130    	; 0x176e <DIO_u8GetPinValue+0xf2>
    16ec:	8f 81       	ldd	r24, Y+7	; 0x07
    16ee:	98 85       	ldd	r25, Y+8	; 0x08
    16f0:	83 30       	cpi	r24, 0x03	; 3
    16f2:	91 05       	cpc	r25, r1
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <DIO_u8GetPinValue+0x7c>
    16f6:	58 c0       	rjmp	.+176    	; 0x17a8 <DIO_u8GetPinValue+0x12c>
    16f8:	75 c0       	rjmp	.+234    	; 0x17e4 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    16fa:	e9 e3       	ldi	r30, 0x39	; 57
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	8c 81       	ldd	r24, Y+4	; 0x04
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	a9 01       	movw	r20, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <DIO_u8GetPinValue+0x96>
    170e:	55 95       	asr	r21
    1710:	47 95       	ror	r20
    1712:	8a 95       	dec	r24
    1714:	e2 f7       	brpl	.-8      	; 0x170e <DIO_u8GetPinValue+0x92>
    1716:	ca 01       	movw	r24, r20
    1718:	81 70       	andi	r24, 0x01	; 1
    171a:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	88 23       	and	r24, r24
    1720:	21 f4       	brne	.+8      	; 0x172a <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1722:	ed 81       	ldd	r30, Y+5	; 0x05
    1724:	fe 81       	ldd	r31, Y+6	; 0x06
    1726:	10 82       	st	Z, r1
    1728:	5d c0       	rjmp	.+186    	; 0x17e4 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    172a:	ed 81       	ldd	r30, Y+5	; 0x05
    172c:	fe 81       	ldd	r31, Y+6	; 0x06
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	80 83       	st	Z, r24
    1732:	58 c0       	rjmp	.+176    	; 0x17e4 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    1734:	e6 e3       	ldi	r30, 0x36	; 54
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a9 01       	movw	r20, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <DIO_u8GetPinValue+0xd0>
    1748:	55 95       	asr	r21
    174a:	47 95       	ror	r20
    174c:	8a 95       	dec	r24
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <DIO_u8GetPinValue+0xcc>
    1750:	ca 01       	movw	r24, r20
    1752:	81 70       	andi	r24, 0x01	; 1
    1754:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	88 23       	and	r24, r24
    175a:	21 f4       	brne	.+8      	; 0x1764 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    175c:	ed 81       	ldd	r30, Y+5	; 0x05
    175e:	fe 81       	ldd	r31, Y+6	; 0x06
    1760:	10 82       	st	Z, r1
    1762:	40 c0       	rjmp	.+128    	; 0x17e4 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1764:	ed 81       	ldd	r30, Y+5	; 0x05
    1766:	fe 81       	ldd	r31, Y+6	; 0x06
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	80 83       	st	Z, r24
    176c:	3b c0       	rjmp	.+118    	; 0x17e4 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    176e:	e3 e3       	ldi	r30, 0x33	; 51
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	88 2f       	mov	r24, r24
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a9 01       	movw	r20, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <DIO_u8GetPinValue+0x10a>
    1782:	55 95       	asr	r21
    1784:	47 95       	ror	r20
    1786:	8a 95       	dec	r24
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <DIO_u8GetPinValue+0x106>
    178a:	ca 01       	movw	r24, r20
    178c:	81 70       	andi	r24, 0x01	; 1
    178e:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	88 23       	and	r24, r24
    1794:	21 f4       	brne	.+8      	; 0x179e <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1796:	ed 81       	ldd	r30, Y+5	; 0x05
    1798:	fe 81       	ldd	r31, Y+6	; 0x06
    179a:	10 82       	st	Z, r1
    179c:	23 c0       	rjmp	.+70     	; 0x17e4 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    179e:	ed 81       	ldd	r30, Y+5	; 0x05
    17a0:	fe 81       	ldd	r31, Y+6	; 0x06
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	80 83       	st	Z, r24
    17a6:	1e c0       	rjmp	.+60     	; 0x17e4 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    17a8:	e0 e3       	ldi	r30, 0x30	; 48
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a9 01       	movw	r20, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <DIO_u8GetPinValue+0x144>
    17bc:	55 95       	asr	r21
    17be:	47 95       	ror	r20
    17c0:	8a 95       	dec	r24
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <DIO_u8GetPinValue+0x140>
    17c4:	ca 01       	movw	r24, r20
    17c6:	81 70       	andi	r24, 0x01	; 1
    17c8:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	88 23       	and	r24, r24
    17ce:	21 f4       	brne	.+8      	; 0x17d8 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    17d0:	ed 81       	ldd	r30, Y+5	; 0x05
    17d2:	fe 81       	ldd	r31, Y+6	; 0x06
    17d4:	10 82       	st	Z, r1
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    17d8:	ed 81       	ldd	r30, Y+5	; 0x05
    17da:	fe 81       	ldd	r31, Y+6	; 0x06
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	80 83       	st	Z, r24
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    17e2:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17e6:	28 96       	adiw	r28, 0x08	; 8
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	2d 97       	sbiw	r28, 0x0d	; 13
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	3d 87       	std	Y+13, r19	; 0x0d
    1818:	2c 87       	std	Y+12, r18	; 0x0c
    181a:	8c 85       	ldd	r24, Y+12	; 0x0c
    181c:	9d 85       	ldd	r25, Y+13	; 0x0d
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	91 05       	cpc	r25, r1
    1822:	71 f1       	breq	.+92     	; 0x1880 <DIO_u8SetPortDirection+0x88>
    1824:	2c 85       	ldd	r18, Y+12	; 0x0c
    1826:	3d 85       	ldd	r19, Y+13	; 0x0d
    1828:	22 30       	cpi	r18, 0x02	; 2
    182a:	31 05       	cpc	r19, r1
    182c:	2c f4       	brge	.+10     	; 0x1838 <DIO_u8SetPortDirection+0x40>
    182e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1830:	9d 85       	ldd	r25, Y+13	; 0x0d
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	69 f0       	breq	.+26     	; 0x1850 <DIO_u8SetPortDirection+0x58>
    1836:	69 c0       	rjmp	.+210    	; 0x190a <DIO_u8SetPortDirection+0x112>
    1838:	2c 85       	ldd	r18, Y+12	; 0x0c
    183a:	3d 85       	ldd	r19, Y+13	; 0x0d
    183c:	22 30       	cpi	r18, 0x02	; 2
    183e:	31 05       	cpc	r19, r1
    1840:	b1 f1       	breq	.+108    	; 0x18ae <DIO_u8SetPortDirection+0xb6>
    1842:	8c 85       	ldd	r24, Y+12	; 0x0c
    1844:	9d 85       	ldd	r25, Y+13	; 0x0d
    1846:	83 30       	cpi	r24, 0x03	; 3
    1848:	91 05       	cpc	r25, r1
    184a:	09 f4       	brne	.+2      	; 0x184e <DIO_u8SetPortDirection+0x56>
    184c:	47 c0       	rjmp	.+142    	; 0x18dc <DIO_u8SetPortDirection+0xe4>
    184e:	5d c0       	rjmp	.+186    	; 0x190a <DIO_u8SetPortDirection+0x112>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	3b 87       	std	Y+11, r19	; 0x0b
    1858:	2a 87       	std	Y+10, r18	; 0x0a
    185a:	8a 85       	ldd	r24, Y+10	; 0x0a
    185c:	9b 85       	ldd	r25, Y+11	; 0x0b
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	51 f0       	breq	.+20     	; 0x1876 <DIO_u8SetPortDirection+0x7e>
    1862:	2a 85       	ldd	r18, Y+10	; 0x0a
    1864:	3b 85       	ldd	r19, Y+11	; 0x0b
    1866:	21 30       	cpi	r18, 0x01	; 1
    1868:	31 05       	cpc	r19, r1
    186a:	09 f0       	breq	.+2      	; 0x186e <DIO_u8SetPortDirection+0x76>
    186c:	50 c0       	rjmp	.+160    	; 0x190e <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    186e:	ea e3       	ldi	r30, 0x3A	; 58
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	10 82       	st	Z, r1
    1874:	4c c0       	rjmp	.+152    	; 0x190e <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    1876:	ea e3       	ldi	r30, 0x3A	; 58
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	8f ef       	ldi	r24, 0xFF	; 255
    187c:	80 83       	st	Z, r24
    187e:	47 c0       	rjmp	.+142    	; 0x190e <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	39 87       	std	Y+9, r19	; 0x09
    1888:	28 87       	std	Y+8, r18	; 0x08
    188a:	88 85       	ldd	r24, Y+8	; 0x08
    188c:	99 85       	ldd	r25, Y+9	; 0x09
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	49 f0       	breq	.+18     	; 0x18a4 <DIO_u8SetPortDirection+0xac>
    1892:	28 85       	ldd	r18, Y+8	; 0x08
    1894:	39 85       	ldd	r19, Y+9	; 0x09
    1896:	21 30       	cpi	r18, 0x01	; 1
    1898:	31 05       	cpc	r19, r1
    189a:	c9 f5       	brne	.+114    	; 0x190e <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    189c:	e7 e3       	ldi	r30, 0x37	; 55
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	10 82       	st	Z, r1
    18a2:	35 c0       	rjmp	.+106    	; 0x190e <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    18a4:	e7 e3       	ldi	r30, 0x37	; 55
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	8f ef       	ldi	r24, 0xFF	; 255
    18aa:	80 83       	st	Z, r24
    18ac:	30 c0       	rjmp	.+96     	; 0x190e <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3f 83       	std	Y+7, r19	; 0x07
    18b6:	2e 83       	std	Y+6, r18	; 0x06
    18b8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ba:	9f 81       	ldd	r25, Y+7	; 0x07
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	49 f0       	breq	.+18     	; 0x18d2 <DIO_u8SetPortDirection+0xda>
    18c0:	2e 81       	ldd	r18, Y+6	; 0x06
    18c2:	3f 81       	ldd	r19, Y+7	; 0x07
    18c4:	21 30       	cpi	r18, 0x01	; 1
    18c6:	31 05       	cpc	r19, r1
    18c8:	11 f5       	brne	.+68     	; 0x190e <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    18ca:	e4 e3       	ldi	r30, 0x34	; 52
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	10 82       	st	Z, r1
    18d0:	1e c0       	rjmp	.+60     	; 0x190e <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    18d2:	e4 e3       	ldi	r30, 0x34	; 52
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	8f ef       	ldi	r24, 0xFF	; 255
    18d8:	80 83       	st	Z, r24
    18da:	19 c0       	rjmp	.+50     	; 0x190e <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	3d 83       	std	Y+5, r19	; 0x05
    18e4:	2c 83       	std	Y+4, r18	; 0x04
    18e6:	8c 81       	ldd	r24, Y+4	; 0x04
    18e8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	49 f0       	breq	.+18     	; 0x1900 <DIO_u8SetPortDirection+0x108>
    18ee:	2c 81       	ldd	r18, Y+4	; 0x04
    18f0:	3d 81       	ldd	r19, Y+5	; 0x05
    18f2:	21 30       	cpi	r18, 0x01	; 1
    18f4:	31 05       	cpc	r19, r1
    18f6:	59 f4       	brne	.+22     	; 0x190e <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    18f8:	e1 e3       	ldi	r30, 0x31	; 49
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	10 82       	st	Z, r1
    18fe:	07 c0       	rjmp	.+14     	; 0x190e <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    1900:	e1 e3       	ldi	r30, 0x31	; 49
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	80 83       	st	Z, r24
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;
		default:
			return STD_TYPES_NOK;
    190a:	1b 82       	std	Y+3, r1	; 0x03
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <DIO_u8SetPortDirection+0x11a>
			break;
	}
	return STD_TYPES_OK;
    190e:	31 e0       	ldi	r19, 0x01	; 1
    1910:	3b 83       	std	Y+3, r19	; 0x03
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1914:	2d 96       	adiw	r28, 0x0d	; 13
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <DIO_u8SetPortValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortVlaue)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	00 d0       	rcall	.+0      	; 0x192c <DIO_u8SetPortValue+0x6>
    192c:	00 d0       	rcall	.+0      	; 0x192e <DIO_u8SetPortValue+0x8>
    192e:	0f 92       	push	r0
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId){
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	3d 83       	std	Y+5, r19	; 0x05
    1940:	2c 83       	std	Y+4, r18	; 0x04
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	9d 81       	ldd	r25, Y+5	; 0x05
    1946:	81 30       	cpi	r24, 0x01	; 1
    1948:	91 05       	cpc	r25, r1
    194a:	d1 f0       	breq	.+52     	; 0x1980 <DIO_u8SetPortValue+0x5a>
    194c:	2c 81       	ldd	r18, Y+4	; 0x04
    194e:	3d 81       	ldd	r19, Y+5	; 0x05
    1950:	22 30       	cpi	r18, 0x02	; 2
    1952:	31 05       	cpc	r19, r1
    1954:	2c f4       	brge	.+10     	; 0x1960 <DIO_u8SetPortValue+0x3a>
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	9d 81       	ldd	r25, Y+5	; 0x05
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	61 f0       	breq	.+24     	; 0x1976 <DIO_u8SetPortValue+0x50>
    195e:	1f c0       	rjmp	.+62     	; 0x199e <DIO_u8SetPortValue+0x78>
    1960:	2c 81       	ldd	r18, Y+4	; 0x04
    1962:	3d 81       	ldd	r19, Y+5	; 0x05
    1964:	22 30       	cpi	r18, 0x02	; 2
    1966:	31 05       	cpc	r19, r1
    1968:	81 f0       	breq	.+32     	; 0x198a <DIO_u8SetPortValue+0x64>
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	9d 81       	ldd	r25, Y+5	; 0x05
    196e:	83 30       	cpi	r24, 0x03	; 3
    1970:	91 05       	cpc	r25, r1
    1972:	81 f0       	breq	.+32     	; 0x1994 <DIO_u8SetPortValue+0x6e>
    1974:	14 c0       	rjmp	.+40     	; 0x199e <DIO_u8SetPortValue+0x78>
	case DIO_u8_PORTA:
		DIO_u8_PORTA_REG = Copy_u8PortVlaue;
    1976:	eb e3       	ldi	r30, 0x3B	; 59
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	80 83       	st	Z, r24
    197e:	11 c0       	rjmp	.+34     	; 0x19a2 <DIO_u8SetPortValue+0x7c>
		break;
	case DIO_u8_PORTB:
		DIO_u8_PORTB_REG = Copy_u8PortVlaue;
    1980:	e8 e3       	ldi	r30, 0x38	; 56
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	80 83       	st	Z, r24
    1988:	0c c0       	rjmp	.+24     	; 0x19a2 <DIO_u8SetPortValue+0x7c>
		break;
	case DIO_u8_PORTC:
		DIO_u8_PORTC_REG = Copy_u8PortVlaue;
    198a:	e5 e3       	ldi	r30, 0x35	; 53
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	80 83       	st	Z, r24
    1992:	07 c0       	rjmp	.+14     	; 0x19a2 <DIO_u8SetPortValue+0x7c>
		break;
	case DIO_u8_PORTD:
		DIO_u8_PORTD_REG = Copy_u8PortVlaue;
    1994:	e2 e3       	ldi	r30, 0x32	; 50
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	80 83       	st	Z, r24
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <DIO_u8SetPortValue+0x7c>
		break;
	default:
		return STD_TYPES_NOK;
    199e:	1b 82       	std	Y+3, r1	; 0x03
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <DIO_u8SetPortValue+0x80>
		break;
	}
	return 1;
    19a2:	91 e0       	ldi	r25, 0x01	; 1
    19a4:	9b 83       	std	Y+3, r25	; 0x03
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <DIO_u8GetPortValue+0x6>
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <DIO_u8GetPortValue+0x8>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <DIO_u8GetPortValue+0xa>
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	8a 83       	std	Y+2, r24	; 0x02
    19c8:	7c 83       	std	Y+4, r23	; 0x04
    19ca:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	84 30       	cpi	r24, 0x04	; 4
    19d4:	08 f0       	brcs	.+2      	; 0x19d8 <DIO_u8GetPortValue+0x20>
    19d6:	3f c0       	rjmp	.+126    	; 0x1a56 <DIO_u8GetPortValue+0x9e>
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	9c 81       	ldd	r25, Y+4	; 0x04
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	d9 f1       	breq	.+118    	; 0x1a56 <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	3e 83       	std	Y+6, r19	; 0x06
    19e8:	2d 83       	std	Y+5, r18	; 0x05
    19ea:	8d 81       	ldd	r24, Y+5	; 0x05
    19ec:	9e 81       	ldd	r25, Y+6	; 0x06
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	91 05       	cpc	r25, r1
    19f2:	e1 f0       	breq	.+56     	; 0x1a2c <DIO_u8GetPortValue+0x74>
    19f4:	2d 81       	ldd	r18, Y+5	; 0x05
    19f6:	3e 81       	ldd	r19, Y+6	; 0x06
    19f8:	22 30       	cpi	r18, 0x02	; 2
    19fa:	31 05       	cpc	r19, r1
    19fc:	2c f4       	brge	.+10     	; 0x1a08 <DIO_u8GetPortValue+0x50>
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	61 f0       	breq	.+24     	; 0x1a1e <DIO_u8GetPortValue+0x66>
    1a06:	28 c0       	rjmp	.+80     	; 0x1a58 <DIO_u8GetPortValue+0xa0>
    1a08:	2d 81       	ldd	r18, Y+5	; 0x05
    1a0a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a0c:	22 30       	cpi	r18, 0x02	; 2
    1a0e:	31 05       	cpc	r19, r1
    1a10:	a1 f0       	breq	.+40     	; 0x1a3a <DIO_u8GetPortValue+0x82>
    1a12:	8d 81       	ldd	r24, Y+5	; 0x05
    1a14:	9e 81       	ldd	r25, Y+6	; 0x06
    1a16:	83 30       	cpi	r24, 0x03	; 3
    1a18:	91 05       	cpc	r25, r1
    1a1a:	b1 f0       	breq	.+44     	; 0x1a48 <DIO_u8GetPortValue+0x90>
    1a1c:	1d c0       	rjmp	.+58     	; 0x1a58 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    1a1e:	e9 e3       	ldi	r30, 0x39	; 57
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	eb 81       	ldd	r30, Y+3	; 0x03
    1a26:	fc 81       	ldd	r31, Y+4	; 0x04
    1a28:	80 83       	st	Z, r24
    1a2a:	16 c0       	rjmp	.+44     	; 0x1a58 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    1a2c:	e6 e3       	ldi	r30, 0x36	; 54
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	eb 81       	ldd	r30, Y+3	; 0x03
    1a34:	fc 81       	ldd	r31, Y+4	; 0x04
    1a36:	80 83       	st	Z, r24
    1a38:	0f c0       	rjmp	.+30     	; 0x1a58 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    1a3a:	e3 e3       	ldi	r30, 0x33	; 51
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	eb 81       	ldd	r30, Y+3	; 0x03
    1a42:	fc 81       	ldd	r31, Y+4	; 0x04
    1a44:	80 83       	st	Z, r24
    1a46:	08 c0       	rjmp	.+16     	; 0x1a58 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    1a48:	e0 e3       	ldi	r30, 0x30	; 48
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a50:	fc 81       	ldd	r31, Y+4	; 0x04
    1a52:	80 83       	st	Z, r24
    1a54:	01 c0       	rjmp	.+2      	; 0x1a58 <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1a56:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1a5a:	26 96       	adiw	r28, 0x06	; 6
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <STM_u8_Rotate_CW>:
#include "STM_interface.h"
#include "STM_config.h"


u8 STM_u8_Rotate_CW()
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	e8 97       	sbiw	r28, 0x38	; 56
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
	// FIRST STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_LOW);
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	64 e0       	ldi	r22, 0x04	; 4
    1a84:	40 e0       	ldi	r20, 0x00	; 0
    1a86:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    1a8a:	83 e0       	ldi	r24, 0x03	; 3
    1a8c:	65 e0       	ldi	r22, 0x05	; 5
    1a8e:	41 e0       	ldi	r20, 0x01	; 1
    1a90:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	66 e0       	ldi	r22, 0x06	; 6
    1a98:	41 e0       	ldi	r20, 0x01	; 1
    1a9a:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    1a9e:	83 e0       	ldi	r24, 0x03	; 3
    1aa0:	67 e0       	ldi	r22, 0x07	; 7
    1aa2:	41 e0       	ldi	r20, 0x01	; 1
    1aa4:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a0 e2       	ldi	r26, 0x20	; 32
    1aae:	b1 e4       	ldi	r27, 0x41	; 65
    1ab0:	8d ab       	std	Y+53, r24	; 0x35
    1ab2:	9e ab       	std	Y+54, r25	; 0x36
    1ab4:	af ab       	std	Y+55, r26	; 0x37
    1ab6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aba:	7e a9       	ldd	r23, Y+54	; 0x36
    1abc:	8f a9       	ldd	r24, Y+55	; 0x37
    1abe:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	4a ef       	ldi	r20, 0xFA	; 250
    1ac6:	54 e4       	ldi	r21, 0x44	; 68
    1ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	89 ab       	std	Y+49, r24	; 0x31
    1ad2:	9a ab       	std	Y+50, r25	; 0x32
    1ad4:	ab ab       	std	Y+51, r26	; 0x33
    1ad6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ad8:	69 a9       	ldd	r22, Y+49	; 0x31
    1ada:	7a a9       	ldd	r23, Y+50	; 0x32
    1adc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ade:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e8       	ldi	r20, 0x80	; 128
    1ae6:	5f e3       	ldi	r21, 0x3F	; 63
    1ae8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aec:	88 23       	and	r24, r24
    1aee:	2c f4       	brge	.+10     	; 0x1afa <STM_u8_Rotate_CW+0x8e>
		__ticks = 1;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	98 ab       	std	Y+48, r25	; 0x30
    1af6:	8f a7       	std	Y+47, r24	; 0x2f
    1af8:	3f c0       	rjmp	.+126    	; 0x1b78 <STM_u8_Rotate_CW+0x10c>
	else if (__tmp > 65535)
    1afa:	69 a9       	ldd	r22, Y+49	; 0x31
    1afc:	7a a9       	ldd	r23, Y+50	; 0x32
    1afe:	8b a9       	ldd	r24, Y+51	; 0x33
    1b00:	9c a9       	ldd	r25, Y+52	; 0x34
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	3f ef       	ldi	r19, 0xFF	; 255
    1b06:	4f e7       	ldi	r20, 0x7F	; 127
    1b08:	57 e4       	ldi	r21, 0x47	; 71
    1b0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b0e:	18 16       	cp	r1, r24
    1b10:	4c f5       	brge	.+82     	; 0x1b64 <STM_u8_Rotate_CW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b12:	6d a9       	ldd	r22, Y+53	; 0x35
    1b14:	7e a9       	ldd	r23, Y+54	; 0x36
    1b16:	8f a9       	ldd	r24, Y+55	; 0x37
    1b18:	98 ad       	ldd	r25, Y+56	; 0x38
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e2       	ldi	r20, 0x20	; 32
    1b20:	51 e4       	ldi	r21, 0x41	; 65
    1b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	bc 01       	movw	r22, r24
    1b2c:	cd 01       	movw	r24, r26
    1b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	98 ab       	std	Y+48, r25	; 0x30
    1b38:	8f a7       	std	Y+47, r24	; 0x2f
    1b3a:	0f c0       	rjmp	.+30     	; 0x1b5a <STM_u8_Rotate_CW+0xee>
    1b3c:	88 ec       	ldi	r24, 0xC8	; 200
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	9e a7       	std	Y+46, r25	; 0x2e
    1b42:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b46:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <STM_u8_Rotate_CW+0xdc>
    1b4c:	9e a7       	std	Y+46, r25	; 0x2e
    1b4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b52:	98 a9       	ldd	r25, Y+48	; 0x30
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	98 ab       	std	Y+48, r25	; 0x30
    1b58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	69 f7       	brne	.-38     	; 0x1b3c <STM_u8_Rotate_CW+0xd0>
    1b62:	14 c0       	rjmp	.+40     	; 0x1b8c <STM_u8_Rotate_CW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b64:	69 a9       	ldd	r22, Y+49	; 0x31
    1b66:	7a a9       	ldd	r23, Y+50	; 0x32
    1b68:	8b a9       	ldd	r24, Y+51	; 0x33
    1b6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	98 ab       	std	Y+48, r25	; 0x30
    1b76:	8f a7       	std	Y+47, r24	; 0x2f
    1b78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b7c:	9c a7       	std	Y+44, r25	; 0x2c
    1b7e:	8b a7       	std	Y+43, r24	; 0x2b
    1b80:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b82:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <STM_u8_Rotate_CW+0x118>
    1b88:	9c a7       	std	Y+44, r25	; 0x2c
    1b8a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	// SECOND STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    1b8c:	83 e0       	ldi	r24, 0x03	; 3
    1b8e:	64 e0       	ldi	r22, 0x04	; 4
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_LOW);
    1b96:	83 e0       	ldi	r24, 0x03	; 3
    1b98:	65 e0       	ldi	r22, 0x05	; 5
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    1ba0:	83 e0       	ldi	r24, 0x03	; 3
    1ba2:	66 e0       	ldi	r22, 0x06	; 6
    1ba4:	41 e0       	ldi	r20, 0x01	; 1
    1ba6:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    1baa:	83 e0       	ldi	r24, 0x03	; 3
    1bac:	67 e0       	ldi	r22, 0x07	; 7
    1bae:	41 e0       	ldi	r20, 0x01	; 1
    1bb0:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a0 e2       	ldi	r26, 0x20	; 32
    1bba:	b1 e4       	ldi	r27, 0x41	; 65
    1bbc:	8f a3       	std	Y+39, r24	; 0x27
    1bbe:	98 a7       	std	Y+40, r25	; 0x28
    1bc0:	a9 a7       	std	Y+41, r26	; 0x29
    1bc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc4:	6f a1       	ldd	r22, Y+39	; 0x27
    1bc6:	78 a5       	ldd	r23, Y+40	; 0x28
    1bc8:	89 a5       	ldd	r24, Y+41	; 0x29
    1bca:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	4a ef       	ldi	r20, 0xFA	; 250
    1bd2:	54 e4       	ldi	r21, 0x44	; 68
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	8b a3       	std	Y+35, r24	; 0x23
    1bde:	9c a3       	std	Y+36, r25	; 0x24
    1be0:	ad a3       	std	Y+37, r26	; 0x25
    1be2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1be4:	6b a1       	ldd	r22, Y+35	; 0x23
    1be6:	7c a1       	ldd	r23, Y+36	; 0x24
    1be8:	8d a1       	ldd	r24, Y+37	; 0x25
    1bea:	9e a1       	ldd	r25, Y+38	; 0x26
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e8       	ldi	r20, 0x80	; 128
    1bf2:	5f e3       	ldi	r21, 0x3F	; 63
    1bf4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bf8:	88 23       	and	r24, r24
    1bfa:	2c f4       	brge	.+10     	; 0x1c06 <STM_u8_Rotate_CW+0x19a>
		__ticks = 1;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9a a3       	std	Y+34, r25	; 0x22
    1c02:	89 a3       	std	Y+33, r24	; 0x21
    1c04:	3f c0       	rjmp	.+126    	; 0x1c84 <STM_u8_Rotate_CW+0x218>
	else if (__tmp > 65535)
    1c06:	6b a1       	ldd	r22, Y+35	; 0x23
    1c08:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	3f ef       	ldi	r19, 0xFF	; 255
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	57 e4       	ldi	r21, 0x47	; 71
    1c16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	4c f5       	brge	.+82     	; 0x1c70 <STM_u8_Rotate_CW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1e:	6f a1       	ldd	r22, Y+39	; 0x27
    1c20:	78 a5       	ldd	r23, Y+40	; 0x28
    1c22:	89 a5       	ldd	r24, Y+41	; 0x29
    1c24:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e2       	ldi	r20, 0x20	; 32
    1c2c:	51 e4       	ldi	r21, 0x41	; 65
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9a a3       	std	Y+34, r25	; 0x22
    1c44:	89 a3       	std	Y+33, r24	; 0x21
    1c46:	0f c0       	rjmp	.+30     	; 0x1c66 <STM_u8_Rotate_CW+0x1fa>
    1c48:	88 ec       	ldi	r24, 0xC8	; 200
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	98 a3       	std	Y+32, r25	; 0x20
    1c4e:	8f 8f       	std	Y+31, r24	; 0x1f
    1c50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c52:	98 a1       	ldd	r25, Y+32	; 0x20
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <STM_u8_Rotate_CW+0x1e8>
    1c58:	98 a3       	std	Y+32, r25	; 0x20
    1c5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	9a a3       	std	Y+34, r25	; 0x22
    1c64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c66:	89 a1       	ldd	r24, Y+33	; 0x21
    1c68:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	69 f7       	brne	.-38     	; 0x1c48 <STM_u8_Rotate_CW+0x1dc>
    1c6e:	14 c0       	rjmp	.+40     	; 0x1c98 <STM_u8_Rotate_CW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c70:	6b a1       	ldd	r22, Y+35	; 0x23
    1c72:	7c a1       	ldd	r23, Y+36	; 0x24
    1c74:	8d a1       	ldd	r24, Y+37	; 0x25
    1c76:	9e a1       	ldd	r25, Y+38	; 0x26
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9a a3       	std	Y+34, r25	; 0x22
    1c82:	89 a3       	std	Y+33, r24	; 0x21
    1c84:	89 a1       	ldd	r24, Y+33	; 0x21
    1c86:	9a a1       	ldd	r25, Y+34	; 0x22
    1c88:	9e 8f       	std	Y+30, r25	; 0x1e
    1c8a:	8d 8f       	std	Y+29, r24	; 0x1d
    1c8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <STM_u8_Rotate_CW+0x224>
    1c94:	9e 8f       	std	Y+30, r25	; 0x1e
    1c96:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	// FOURTH STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    1c98:	83 e0       	ldi	r24, 0x03	; 3
    1c9a:	64 e0       	ldi	r22, 0x04	; 4
    1c9c:	41 e0       	ldi	r20, 0x01	; 1
    1c9e:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    1ca2:	83 e0       	ldi	r24, 0x03	; 3
    1ca4:	65 e0       	ldi	r22, 0x05	; 5
    1ca6:	41 e0       	ldi	r20, 0x01	; 1
    1ca8:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_LOW);
    1cac:	83 e0       	ldi	r24, 0x03	; 3
    1cae:	66 e0       	ldi	r22, 0x06	; 6
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    1cb6:	83 e0       	ldi	r24, 0x03	; 3
    1cb8:	67 e0       	ldi	r22, 0x07	; 7
    1cba:	41 e0       	ldi	r20, 0x01	; 1
    1cbc:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a0 e2       	ldi	r26, 0x20	; 32
    1cc6:	b1 e4       	ldi	r27, 0x41	; 65
    1cc8:	89 8f       	std	Y+25, r24	; 0x19
    1cca:	9a 8f       	std	Y+26, r25	; 0x1a
    1ccc:	ab 8f       	std	Y+27, r26	; 0x1b
    1cce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd0:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	4a ef       	ldi	r20, 0xFA	; 250
    1cde:	54 e4       	ldi	r21, 0x44	; 68
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	8d 8b       	std	Y+21, r24	; 0x15
    1cea:	9e 8b       	std	Y+22, r25	; 0x16
    1cec:	af 8b       	std	Y+23, r26	; 0x17
    1cee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cf0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e8       	ldi	r20, 0x80	; 128
    1cfe:	5f e3       	ldi	r21, 0x3F	; 63
    1d00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d04:	88 23       	and	r24, r24
    1d06:	2c f4       	brge	.+10     	; 0x1d12 <STM_u8_Rotate_CW+0x2a6>
		__ticks = 1;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	9c 8b       	std	Y+20, r25	; 0x14
    1d0e:	8b 8b       	std	Y+19, r24	; 0x13
    1d10:	3f c0       	rjmp	.+126    	; 0x1d90 <STM_u8_Rotate_CW+0x324>
	else if (__tmp > 65535)
    1d12:	6d 89       	ldd	r22, Y+21	; 0x15
    1d14:	7e 89       	ldd	r23, Y+22	; 0x16
    1d16:	8f 89       	ldd	r24, Y+23	; 0x17
    1d18:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	3f ef       	ldi	r19, 0xFF	; 255
    1d1e:	4f e7       	ldi	r20, 0x7F	; 127
    1d20:	57 e4       	ldi	r21, 0x47	; 71
    1d22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d26:	18 16       	cp	r1, r24
    1d28:	4c f5       	brge	.+82     	; 0x1d7c <STM_u8_Rotate_CW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e2       	ldi	r20, 0x20	; 32
    1d38:	51 e4       	ldi	r21, 0x41	; 65
    1d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	bc 01       	movw	r22, r24
    1d44:	cd 01       	movw	r24, r26
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9c 8b       	std	Y+20, r25	; 0x14
    1d50:	8b 8b       	std	Y+19, r24	; 0x13
    1d52:	0f c0       	rjmp	.+30     	; 0x1d72 <STM_u8_Rotate_CW+0x306>
    1d54:	88 ec       	ldi	r24, 0xC8	; 200
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9a 8b       	std	Y+18, r25	; 0x12
    1d5a:	89 8b       	std	Y+17, r24	; 0x11
    1d5c:	89 89       	ldd	r24, Y+17	; 0x11
    1d5e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <STM_u8_Rotate_CW+0x2f4>
    1d64:	9a 8b       	std	Y+18, r25	; 0x12
    1d66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d68:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	9c 8b       	std	Y+20, r25	; 0x14
    1d70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d72:	8b 89       	ldd	r24, Y+19	; 0x13
    1d74:	9c 89       	ldd	r25, Y+20	; 0x14
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	69 f7       	brne	.-38     	; 0x1d54 <STM_u8_Rotate_CW+0x2e8>
    1d7a:	14 c0       	rjmp	.+40     	; 0x1da4 <STM_u8_Rotate_CW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d80:	8f 89       	ldd	r24, Y+23	; 0x17
    1d82:	98 8d       	ldd	r25, Y+24	; 0x18
    1d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9c 8b       	std	Y+20, r25	; 0x14
    1d8e:	8b 8b       	std	Y+19, r24	; 0x13
    1d90:	8b 89       	ldd	r24, Y+19	; 0x13
    1d92:	9c 89       	ldd	r25, Y+20	; 0x14
    1d94:	98 8b       	std	Y+16, r25	; 0x10
    1d96:	8f 87       	std	Y+15, r24	; 0x0f
    1d98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9a:	98 89       	ldd	r25, Y+16	; 0x10
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <STM_u8_Rotate_CW+0x330>
    1da0:	98 8b       	std	Y+16, r25	; 0x10
    1da2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	// FOURTH STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    1da4:	83 e0       	ldi	r24, 0x03	; 3
    1da6:	64 e0       	ldi	r22, 0x04	; 4
    1da8:	41 e0       	ldi	r20, 0x01	; 1
    1daa:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    1dae:	83 e0       	ldi	r24, 0x03	; 3
    1db0:	65 e0       	ldi	r22, 0x05	; 5
    1db2:	41 e0       	ldi	r20, 0x01	; 1
    1db4:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    1db8:	83 e0       	ldi	r24, 0x03	; 3
    1dba:	66 e0       	ldi	r22, 0x06	; 6
    1dbc:	41 e0       	ldi	r20, 0x01	; 1
    1dbe:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_LOW);
    1dc2:	83 e0       	ldi	r24, 0x03	; 3
    1dc4:	67 e0       	ldi	r22, 0x07	; 7
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	a0 e2       	ldi	r26, 0x20	; 32
    1dd2:	b1 e4       	ldi	r27, 0x41	; 65
    1dd4:	8b 87       	std	Y+11, r24	; 0x0b
    1dd6:	9c 87       	std	Y+12, r25	; 0x0c
    1dd8:	ad 87       	std	Y+13, r26	; 0x0d
    1dda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ddc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	4a ef       	ldi	r20, 0xFA	; 250
    1dea:	54 e4       	ldi	r21, 0x44	; 68
    1dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	8f 83       	std	Y+7, r24	; 0x07
    1df6:	98 87       	std	Y+8, r25	; 0x08
    1df8:	a9 87       	std	Y+9, r26	; 0x09
    1dfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfe:	78 85       	ldd	r23, Y+8	; 0x08
    1e00:	89 85       	ldd	r24, Y+9	; 0x09
    1e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e8       	ldi	r20, 0x80	; 128
    1e0a:	5f e3       	ldi	r21, 0x3F	; 63
    1e0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e10:	88 23       	and	r24, r24
    1e12:	2c f4       	brge	.+10     	; 0x1e1e <STM_u8_Rotate_CW+0x3b2>
		__ticks = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	9e 83       	std	Y+6, r25	; 0x06
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
    1e1c:	3f c0       	rjmp	.+126    	; 0x1e9c <STM_u8_Rotate_CW+0x430>
	else if (__tmp > 65535)
    1e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e20:	78 85       	ldd	r23, Y+8	; 0x08
    1e22:	89 85       	ldd	r24, Y+9	; 0x09
    1e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	3f ef       	ldi	r19, 0xFF	; 255
    1e2a:	4f e7       	ldi	r20, 0x7F	; 127
    1e2c:	57 e4       	ldi	r21, 0x47	; 71
    1e2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e32:	18 16       	cp	r1, r24
    1e34:	4c f5       	brge	.+82     	; 0x1e88 <STM_u8_Rotate_CW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e2       	ldi	r20, 0x20	; 32
    1e44:	51 e4       	ldi	r21, 0x41	; 65
    1e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	bc 01       	movw	r22, r24
    1e50:	cd 01       	movw	r24, r26
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
    1e5e:	0f c0       	rjmp	.+30     	; 0x1e7e <STM_u8_Rotate_CW+0x412>
    1e60:	88 ec       	ldi	r24, 0xC8	; 200
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9c 83       	std	Y+4, r25	; 0x04
    1e66:	8b 83       	std	Y+3, r24	; 0x03
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <STM_u8_Rotate_CW+0x400>
    1e70:	9c 83       	std	Y+4, r25	; 0x04
    1e72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	9e 81       	ldd	r25, Y+6	; 0x06
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	9e 83       	std	Y+6, r25	; 0x06
    1e7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e80:	9e 81       	ldd	r25, Y+6	; 0x06
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	69 f7       	brne	.-38     	; 0x1e60 <STM_u8_Rotate_CW+0x3f4>
    1e86:	14 c0       	rjmp	.+40     	; 0x1eb0 <STM_u8_Rotate_CW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e88:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8a:	78 85       	ldd	r23, Y+8	; 0x08
    1e8c:	89 85       	ldd	r24, Y+9	; 0x09
    1e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	9e 83       	std	Y+6, r25	; 0x06
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <STM_u8_Rotate_CW+0x43c>
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);


	return STD_TYPES_OK;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
}
    1eb2:	e8 96       	adiw	r28, 0x38	; 56
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <STM_u8_Rotate_CCW>:

u8 STM_u8_Rotate_CCW()
{
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	e8 97       	sbiw	r28, 0x38	; 56
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
	// FIRST STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    1ed8:	83 e0       	ldi	r24, 0x03	; 3
    1eda:	64 e0       	ldi	r22, 0x04	; 4
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    1ee2:	83 e0       	ldi	r24, 0x03	; 3
    1ee4:	65 e0       	ldi	r22, 0x05	; 5
    1ee6:	41 e0       	ldi	r20, 0x01	; 1
    1ee8:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    1eec:	83 e0       	ldi	r24, 0x03	; 3
    1eee:	66 e0       	ldi	r22, 0x06	; 6
    1ef0:	41 e0       	ldi	r20, 0x01	; 1
    1ef2:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_LOW);
    1ef6:	83 e0       	ldi	r24, 0x03	; 3
    1ef8:	67 e0       	ldi	r22, 0x07	; 7
    1efa:	40 e0       	ldi	r20, 0x00	; 0
    1efc:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	a0 e2       	ldi	r26, 0x20	; 32
    1f06:	b1 e4       	ldi	r27, 0x41	; 65
    1f08:	8d ab       	std	Y+53, r24	; 0x35
    1f0a:	9e ab       	std	Y+54, r25	; 0x36
    1f0c:	af ab       	std	Y+55, r26	; 0x37
    1f0e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f10:	6d a9       	ldd	r22, Y+53	; 0x35
    1f12:	7e a9       	ldd	r23, Y+54	; 0x36
    1f14:	8f a9       	ldd	r24, Y+55	; 0x37
    1f16:	98 ad       	ldd	r25, Y+56	; 0x38
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	4a ef       	ldi	r20, 0xFA	; 250
    1f1e:	54 e4       	ldi	r21, 0x44	; 68
    1f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	89 ab       	std	Y+49, r24	; 0x31
    1f2a:	9a ab       	std	Y+50, r25	; 0x32
    1f2c:	ab ab       	std	Y+51, r26	; 0x33
    1f2e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f30:	69 a9       	ldd	r22, Y+49	; 0x31
    1f32:	7a a9       	ldd	r23, Y+50	; 0x32
    1f34:	8b a9       	ldd	r24, Y+51	; 0x33
    1f36:	9c a9       	ldd	r25, Y+52	; 0x34
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e8       	ldi	r20, 0x80	; 128
    1f3e:	5f e3       	ldi	r21, 0x3F	; 63
    1f40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f44:	88 23       	and	r24, r24
    1f46:	2c f4       	brge	.+10     	; 0x1f52 <STM_u8_Rotate_CCW+0x8e>
		__ticks = 1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	98 ab       	std	Y+48, r25	; 0x30
    1f4e:	8f a7       	std	Y+47, r24	; 0x2f
    1f50:	3f c0       	rjmp	.+126    	; 0x1fd0 <STM_u8_Rotate_CCW+0x10c>
	else if (__tmp > 65535)
    1f52:	69 a9       	ldd	r22, Y+49	; 0x31
    1f54:	7a a9       	ldd	r23, Y+50	; 0x32
    1f56:	8b a9       	ldd	r24, Y+51	; 0x33
    1f58:	9c a9       	ldd	r25, Y+52	; 0x34
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	3f ef       	ldi	r19, 0xFF	; 255
    1f5e:	4f e7       	ldi	r20, 0x7F	; 127
    1f60:	57 e4       	ldi	r21, 0x47	; 71
    1f62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f66:	18 16       	cp	r1, r24
    1f68:	4c f5       	brge	.+82     	; 0x1fbc <STM_u8_Rotate_CCW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f6c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f6e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f70:	98 ad       	ldd	r25, Y+56	; 0x38
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e2       	ldi	r20, 0x20	; 32
    1f78:	51 e4       	ldi	r21, 0x41	; 65
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	98 ab       	std	Y+48, r25	; 0x30
    1f90:	8f a7       	std	Y+47, r24	; 0x2f
    1f92:	0f c0       	rjmp	.+30     	; 0x1fb2 <STM_u8_Rotate_CCW+0xee>
    1f94:	88 ec       	ldi	r24, 0xC8	; 200
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9e a7       	std	Y+46, r25	; 0x2e
    1f9a:	8d a7       	std	Y+45, r24	; 0x2d
    1f9c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f9e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <STM_u8_Rotate_CCW+0xdc>
    1fa4:	9e a7       	std	Y+46, r25	; 0x2e
    1fa6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1faa:	98 a9       	ldd	r25, Y+48	; 0x30
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	98 ab       	std	Y+48, r25	; 0x30
    1fb0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	69 f7       	brne	.-38     	; 0x1f94 <STM_u8_Rotate_CCW+0xd0>
    1fba:	14 c0       	rjmp	.+40     	; 0x1fe4 <STM_u8_Rotate_CCW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbc:	69 a9       	ldd	r22, Y+49	; 0x31
    1fbe:	7a a9       	ldd	r23, Y+50	; 0x32
    1fc0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	98 ab       	std	Y+48, r25	; 0x30
    1fce:	8f a7       	std	Y+47, r24	; 0x2f
    1fd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fd4:	9c a7       	std	Y+44, r25	; 0x2c
    1fd6:	8b a7       	std	Y+43, r24	; 0x2b
    1fd8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fda:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <STM_u8_Rotate_CCW+0x118>
    1fe0:	9c a7       	std	Y+44, r25	; 0x2c
    1fe2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	// SECOND STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	64 e0       	ldi	r22, 0x04	; 4
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    1fee:	83 e0       	ldi	r24, 0x03	; 3
    1ff0:	65 e0       	ldi	r22, 0x05	; 5
    1ff2:	41 e0       	ldi	r20, 0x01	; 1
    1ff4:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_LOW);
    1ff8:	83 e0       	ldi	r24, 0x03	; 3
    1ffa:	66 e0       	ldi	r22, 0x06	; 6
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    2002:	83 e0       	ldi	r24, 0x03	; 3
    2004:	67 e0       	ldi	r22, 0x07	; 7
    2006:	41 e0       	ldi	r20, 0x01	; 1
    2008:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	a0 e2       	ldi	r26, 0x20	; 32
    2012:	b1 e4       	ldi	r27, 0x41	; 65
    2014:	8f a3       	std	Y+39, r24	; 0x27
    2016:	98 a7       	std	Y+40, r25	; 0x28
    2018:	a9 a7       	std	Y+41, r26	; 0x29
    201a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201c:	6f a1       	ldd	r22, Y+39	; 0x27
    201e:	78 a5       	ldd	r23, Y+40	; 0x28
    2020:	89 a5       	ldd	r24, Y+41	; 0x29
    2022:	9a a5       	ldd	r25, Y+42	; 0x2a
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	4a ef       	ldi	r20, 0xFA	; 250
    202a:	54 e4       	ldi	r21, 0x44	; 68
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	8b a3       	std	Y+35, r24	; 0x23
    2036:	9c a3       	std	Y+36, r25	; 0x24
    2038:	ad a3       	std	Y+37, r26	; 0x25
    203a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    203c:	6b a1       	ldd	r22, Y+35	; 0x23
    203e:	7c a1       	ldd	r23, Y+36	; 0x24
    2040:	8d a1       	ldd	r24, Y+37	; 0x25
    2042:	9e a1       	ldd	r25, Y+38	; 0x26
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e8       	ldi	r20, 0x80	; 128
    204a:	5f e3       	ldi	r21, 0x3F	; 63
    204c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2050:	88 23       	and	r24, r24
    2052:	2c f4       	brge	.+10     	; 0x205e <STM_u8_Rotate_CCW+0x19a>
		__ticks = 1;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9a a3       	std	Y+34, r25	; 0x22
    205a:	89 a3       	std	Y+33, r24	; 0x21
    205c:	3f c0       	rjmp	.+126    	; 0x20dc <STM_u8_Rotate_CCW+0x218>
	else if (__tmp > 65535)
    205e:	6b a1       	ldd	r22, Y+35	; 0x23
    2060:	7c a1       	ldd	r23, Y+36	; 0x24
    2062:	8d a1       	ldd	r24, Y+37	; 0x25
    2064:	9e a1       	ldd	r25, Y+38	; 0x26
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	3f ef       	ldi	r19, 0xFF	; 255
    206a:	4f e7       	ldi	r20, 0x7F	; 127
    206c:	57 e4       	ldi	r21, 0x47	; 71
    206e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2072:	18 16       	cp	r1, r24
    2074:	4c f5       	brge	.+82     	; 0x20c8 <STM_u8_Rotate_CCW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2076:	6f a1       	ldd	r22, Y+39	; 0x27
    2078:	78 a5       	ldd	r23, Y+40	; 0x28
    207a:	89 a5       	ldd	r24, Y+41	; 0x29
    207c:	9a a5       	ldd	r25, Y+42	; 0x2a
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e2       	ldi	r20, 0x20	; 32
    2084:	51 e4       	ldi	r21, 0x41	; 65
    2086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	9a a3       	std	Y+34, r25	; 0x22
    209c:	89 a3       	std	Y+33, r24	; 0x21
    209e:	0f c0       	rjmp	.+30     	; 0x20be <STM_u8_Rotate_CCW+0x1fa>
    20a0:	88 ec       	ldi	r24, 0xC8	; 200
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	98 a3       	std	Y+32, r25	; 0x20
    20a6:	8f 8f       	std	Y+31, r24	; 0x1f
    20a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20aa:	98 a1       	ldd	r25, Y+32	; 0x20
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <STM_u8_Rotate_CCW+0x1e8>
    20b0:	98 a3       	std	Y+32, r25	; 0x20
    20b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b4:	89 a1       	ldd	r24, Y+33	; 0x21
    20b6:	9a a1       	ldd	r25, Y+34	; 0x22
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	9a a3       	std	Y+34, r25	; 0x22
    20bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20be:	89 a1       	ldd	r24, Y+33	; 0x21
    20c0:	9a a1       	ldd	r25, Y+34	; 0x22
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	69 f7       	brne	.-38     	; 0x20a0 <STM_u8_Rotate_CCW+0x1dc>
    20c6:	14 c0       	rjmp	.+40     	; 0x20f0 <STM_u8_Rotate_CCW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c8:	6b a1       	ldd	r22, Y+35	; 0x23
    20ca:	7c a1       	ldd	r23, Y+36	; 0x24
    20cc:	8d a1       	ldd	r24, Y+37	; 0x25
    20ce:	9e a1       	ldd	r25, Y+38	; 0x26
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9a a3       	std	Y+34, r25	; 0x22
    20da:	89 a3       	std	Y+33, r24	; 0x21
    20dc:	89 a1       	ldd	r24, Y+33	; 0x21
    20de:	9a a1       	ldd	r25, Y+34	; 0x22
    20e0:	9e 8f       	std	Y+30, r25	; 0x1e
    20e2:	8d 8f       	std	Y+29, r24	; 0x1d
    20e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <STM_u8_Rotate_CCW+0x224>
    20ec:	9e 8f       	std	Y+30, r25	; 0x1e
    20ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	// THIRD STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    20f0:	83 e0       	ldi	r24, 0x03	; 3
    20f2:	64 e0       	ldi	r22, 0x04	; 4
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_LOW);
    20fa:	83 e0       	ldi	r24, 0x03	; 3
    20fc:	65 e0       	ldi	r22, 0x05	; 5
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    2104:	83 e0       	ldi	r24, 0x03	; 3
    2106:	66 e0       	ldi	r22, 0x06	; 6
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    210e:	83 e0       	ldi	r24, 0x03	; 3
    2110:	67 e0       	ldi	r22, 0x07	; 7
    2112:	41 e0       	ldi	r20, 0x01	; 1
    2114:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a0 e2       	ldi	r26, 0x20	; 32
    211e:	b1 e4       	ldi	r27, 0x41	; 65
    2120:	89 8f       	std	Y+25, r24	; 0x19
    2122:	9a 8f       	std	Y+26, r25	; 0x1a
    2124:	ab 8f       	std	Y+27, r26	; 0x1b
    2126:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2128:	69 8d       	ldd	r22, Y+25	; 0x19
    212a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    212c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    212e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4a ef       	ldi	r20, 0xFA	; 250
    2136:	54 e4       	ldi	r21, 0x44	; 68
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	8d 8b       	std	Y+21, r24	; 0x15
    2142:	9e 8b       	std	Y+22, r25	; 0x16
    2144:	af 8b       	std	Y+23, r26	; 0x17
    2146:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2148:	6d 89       	ldd	r22, Y+21	; 0x15
    214a:	7e 89       	ldd	r23, Y+22	; 0x16
    214c:	8f 89       	ldd	r24, Y+23	; 0x17
    214e:	98 8d       	ldd	r25, Y+24	; 0x18
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e8       	ldi	r20, 0x80	; 128
    2156:	5f e3       	ldi	r21, 0x3F	; 63
    2158:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    215c:	88 23       	and	r24, r24
    215e:	2c f4       	brge	.+10     	; 0x216a <STM_u8_Rotate_CCW+0x2a6>
		__ticks = 1;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9c 8b       	std	Y+20, r25	; 0x14
    2166:	8b 8b       	std	Y+19, r24	; 0x13
    2168:	3f c0       	rjmp	.+126    	; 0x21e8 <STM_u8_Rotate_CCW+0x324>
	else if (__tmp > 65535)
    216a:	6d 89       	ldd	r22, Y+21	; 0x15
    216c:	7e 89       	ldd	r23, Y+22	; 0x16
    216e:	8f 89       	ldd	r24, Y+23	; 0x17
    2170:	98 8d       	ldd	r25, Y+24	; 0x18
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	3f ef       	ldi	r19, 0xFF	; 255
    2176:	4f e7       	ldi	r20, 0x7F	; 127
    2178:	57 e4       	ldi	r21, 0x47	; 71
    217a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    217e:	18 16       	cp	r1, r24
    2180:	4c f5       	brge	.+82     	; 0x21d4 <STM_u8_Rotate_CCW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2182:	69 8d       	ldd	r22, Y+25	; 0x19
    2184:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2186:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2188:	9c 8d       	ldd	r25, Y+28	; 0x1c
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e2       	ldi	r20, 0x20	; 32
    2190:	51 e4       	ldi	r21, 0x41	; 65
    2192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9c 8b       	std	Y+20, r25	; 0x14
    21a8:	8b 8b       	std	Y+19, r24	; 0x13
    21aa:	0f c0       	rjmp	.+30     	; 0x21ca <STM_u8_Rotate_CCW+0x306>
    21ac:	88 ec       	ldi	r24, 0xC8	; 200
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9a 8b       	std	Y+18, r25	; 0x12
    21b2:	89 8b       	std	Y+17, r24	; 0x11
    21b4:	89 89       	ldd	r24, Y+17	; 0x11
    21b6:	9a 89       	ldd	r25, Y+18	; 0x12
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <STM_u8_Rotate_CCW+0x2f4>
    21bc:	9a 8b       	std	Y+18, r25	; 0x12
    21be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c0:	8b 89       	ldd	r24, Y+19	; 0x13
    21c2:	9c 89       	ldd	r25, Y+20	; 0x14
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	9c 8b       	std	Y+20, r25	; 0x14
    21c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ca:	8b 89       	ldd	r24, Y+19	; 0x13
    21cc:	9c 89       	ldd	r25, Y+20	; 0x14
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	69 f7       	brne	.-38     	; 0x21ac <STM_u8_Rotate_CCW+0x2e8>
    21d2:	14 c0       	rjmp	.+40     	; 0x21fc <STM_u8_Rotate_CCW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d4:	6d 89       	ldd	r22, Y+21	; 0x15
    21d6:	7e 89       	ldd	r23, Y+22	; 0x16
    21d8:	8f 89       	ldd	r24, Y+23	; 0x17
    21da:	98 8d       	ldd	r25, Y+24	; 0x18
    21dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	9c 8b       	std	Y+20, r25	; 0x14
    21e6:	8b 8b       	std	Y+19, r24	; 0x13
    21e8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ea:	9c 89       	ldd	r25, Y+20	; 0x14
    21ec:	98 8b       	std	Y+16, r25	; 0x10
    21ee:	8f 87       	std	Y+15, r24	; 0x0f
    21f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f2:	98 89       	ldd	r25, Y+16	; 0x10
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <STM_u8_Rotate_CCW+0x330>
    21f8:	98 8b       	std	Y+16, r25	; 0x10
    21fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	// FORTH STEP
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_LOW);
    21fc:	83 e0       	ldi	r24, 0x03	; 3
    21fe:	64 e0       	ldi	r22, 0x04	; 4
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    2206:	83 e0       	ldi	r24, 0x03	; 3
    2208:	65 e0       	ldi	r22, 0x05	; 5
    220a:	41 e0       	ldi	r20, 0x01	; 1
    220c:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    2210:	83 e0       	ldi	r24, 0x03	; 3
    2212:	66 e0       	ldi	r22, 0x06	; 6
    2214:	41 e0       	ldi	r20, 0x01	; 1
    2216:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    221a:	83 e0       	ldi	r24, 0x03	; 3
    221c:	67 e0       	ldi	r22, 0x07	; 7
    221e:	41 e0       	ldi	r20, 0x01	; 1
    2220:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	a0 e2       	ldi	r26, 0x20	; 32
    222a:	b1 e4       	ldi	r27, 0x41	; 65
    222c:	8b 87       	std	Y+11, r24	; 0x0b
    222e:	9c 87       	std	Y+12, r25	; 0x0c
    2230:	ad 87       	std	Y+13, r26	; 0x0d
    2232:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2234:	6b 85       	ldd	r22, Y+11	; 0x0b
    2236:	7c 85       	ldd	r23, Y+12	; 0x0c
    2238:	8d 85       	ldd	r24, Y+13	; 0x0d
    223a:	9e 85       	ldd	r25, Y+14	; 0x0e
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	4a ef       	ldi	r20, 0xFA	; 250
    2242:	54 e4       	ldi	r21, 0x44	; 68
    2244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	8f 83       	std	Y+7, r24	; 0x07
    224e:	98 87       	std	Y+8, r25	; 0x08
    2250:	a9 87       	std	Y+9, r26	; 0x09
    2252:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2254:	6f 81       	ldd	r22, Y+7	; 0x07
    2256:	78 85       	ldd	r23, Y+8	; 0x08
    2258:	89 85       	ldd	r24, Y+9	; 0x09
    225a:	9a 85       	ldd	r25, Y+10	; 0x0a
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	40 e8       	ldi	r20, 0x80	; 128
    2262:	5f e3       	ldi	r21, 0x3F	; 63
    2264:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2268:	88 23       	and	r24, r24
    226a:	2c f4       	brge	.+10     	; 0x2276 <STM_u8_Rotate_CCW+0x3b2>
		__ticks = 1;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	9e 83       	std	Y+6, r25	; 0x06
    2272:	8d 83       	std	Y+5, r24	; 0x05
    2274:	3f c0       	rjmp	.+126    	; 0x22f4 <STM_u8_Rotate_CCW+0x430>
	else if (__tmp > 65535)
    2276:	6f 81       	ldd	r22, Y+7	; 0x07
    2278:	78 85       	ldd	r23, Y+8	; 0x08
    227a:	89 85       	ldd	r24, Y+9	; 0x09
    227c:	9a 85       	ldd	r25, Y+10	; 0x0a
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	3f ef       	ldi	r19, 0xFF	; 255
    2282:	4f e7       	ldi	r20, 0x7F	; 127
    2284:	57 e4       	ldi	r21, 0x47	; 71
    2286:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    228a:	18 16       	cp	r1, r24
    228c:	4c f5       	brge	.+82     	; 0x22e0 <STM_u8_Rotate_CCW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2290:	7c 85       	ldd	r23, Y+12	; 0x0c
    2292:	8d 85       	ldd	r24, Y+13	; 0x0d
    2294:	9e 85       	ldd	r25, Y+14	; 0x0e
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e2       	ldi	r20, 0x20	; 32
    229c:	51 e4       	ldi	r21, 0x41	; 65
    229e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	bc 01       	movw	r22, r24
    22a8:	cd 01       	movw	r24, r26
    22aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	9e 83       	std	Y+6, r25	; 0x06
    22b4:	8d 83       	std	Y+5, r24	; 0x05
    22b6:	0f c0       	rjmp	.+30     	; 0x22d6 <STM_u8_Rotate_CCW+0x412>
    22b8:	88 ec       	ldi	r24, 0xC8	; 200
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9c 83       	std	Y+4, r25	; 0x04
    22be:	8b 83       	std	Y+3, r24	; 0x03
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	9c 81       	ldd	r25, Y+4	; 0x04
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <STM_u8_Rotate_CCW+0x400>
    22c8:	9c 83       	std	Y+4, r25	; 0x04
    22ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22cc:	8d 81       	ldd	r24, Y+5	; 0x05
    22ce:	9e 81       	ldd	r25, Y+6	; 0x06
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	9e 83       	std	Y+6, r25	; 0x06
    22d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d6:	8d 81       	ldd	r24, Y+5	; 0x05
    22d8:	9e 81       	ldd	r25, Y+6	; 0x06
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	69 f7       	brne	.-38     	; 0x22b8 <STM_u8_Rotate_CCW+0x3f4>
    22de:	14 c0       	rjmp	.+40     	; 0x2308 <STM_u8_Rotate_CCW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e0:	6f 81       	ldd	r22, Y+7	; 0x07
    22e2:	78 85       	ldd	r23, Y+8	; 0x08
    22e4:	89 85       	ldd	r24, Y+9	; 0x09
    22e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	8d 83       	std	Y+5, r24	; 0x05
    22f4:	8d 81       	ldd	r24, Y+5	; 0x05
    22f6:	9e 81       	ldd	r25, Y+6	; 0x06
    22f8:	9a 83       	std	Y+2, r25	; 0x02
    22fa:	89 83       	std	Y+1, r24	; 0x01
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <STM_u8_Rotate_CCW+0x43c>
    2304:	9a 83       	std	Y+2, r25	; 0x02
    2306:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	return STD_TYPES_OK;
    2308:	81 e0       	ldi	r24, 0x01	; 1
}
    230a:	e8 96       	adiw	r28, 0x38	; 56
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <STM_u8_STOP>:

u8 STM_u8_STOP()
{
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	2e 97       	sbiw	r28, 0x0e	; 14
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
	// STOP STEPPER MOTOR
	DIO_u8SetPinValue(STM_PORT,STM_C1,DIO_u8_HIGH);
    2330:	83 e0       	ldi	r24, 0x03	; 3
    2332:	64 e0       	ldi	r22, 0x04	; 4
    2334:	41 e0       	ldi	r20, 0x01	; 1
    2336:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C2,DIO_u8_HIGH);
    233a:	83 e0       	ldi	r24, 0x03	; 3
    233c:	65 e0       	ldi	r22, 0x05	; 5
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C3,DIO_u8_HIGH);
    2344:	83 e0       	ldi	r24, 0x03	; 3
    2346:	66 e0       	ldi	r22, 0x06	; 6
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STM_PORT,STM_C4,DIO_u8_HIGH);
    234e:	83 e0       	ldi	r24, 0x03	; 3
    2350:	67 e0       	ldi	r22, 0x07	; 7
    2352:	41 e0       	ldi	r20, 0x01	; 1
    2354:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	a0 e2       	ldi	r26, 0x20	; 32
    235e:	b1 e4       	ldi	r27, 0x41	; 65
    2360:	8b 87       	std	Y+11, r24	; 0x0b
    2362:	9c 87       	std	Y+12, r25	; 0x0c
    2364:	ad 87       	std	Y+13, r26	; 0x0d
    2366:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2368:	6b 85       	ldd	r22, Y+11	; 0x0b
    236a:	7c 85       	ldd	r23, Y+12	; 0x0c
    236c:	8d 85       	ldd	r24, Y+13	; 0x0d
    236e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	4a ef       	ldi	r20, 0xFA	; 250
    2376:	54 e4       	ldi	r21, 0x44	; 68
    2378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	8f 83       	std	Y+7, r24	; 0x07
    2382:	98 87       	std	Y+8, r25	; 0x08
    2384:	a9 87       	std	Y+9, r26	; 0x09
    2386:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2388:	6f 81       	ldd	r22, Y+7	; 0x07
    238a:	78 85       	ldd	r23, Y+8	; 0x08
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e8       	ldi	r20, 0x80	; 128
    2396:	5f e3       	ldi	r21, 0x3F	; 63
    2398:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    239c:	88 23       	and	r24, r24
    239e:	2c f4       	brge	.+10     	; 0x23aa <STM_u8_STOP+0x8e>
		__ticks = 1;
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
    23a8:	3f c0       	rjmp	.+126    	; 0x2428 <STM_u8_STOP+0x10c>
	else if (__tmp > 65535)
    23aa:	6f 81       	ldd	r22, Y+7	; 0x07
    23ac:	78 85       	ldd	r23, Y+8	; 0x08
    23ae:	89 85       	ldd	r24, Y+9	; 0x09
    23b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	3f ef       	ldi	r19, 0xFF	; 255
    23b6:	4f e7       	ldi	r20, 0x7F	; 127
    23b8:	57 e4       	ldi	r21, 0x47	; 71
    23ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23be:	18 16       	cp	r1, r24
    23c0:	4c f5       	brge	.+82     	; 0x2414 <STM_u8_STOP+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e2       	ldi	r20, 0x20	; 32
    23d0:	51 e4       	ldi	r21, 0x41	; 65
    23d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	9e 83       	std	Y+6, r25	; 0x06
    23e8:	8d 83       	std	Y+5, r24	; 0x05
    23ea:	0f c0       	rjmp	.+30     	; 0x240a <STM_u8_STOP+0xee>
    23ec:	88 ec       	ldi	r24, 0xC8	; 200
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	9c 83       	std	Y+4, r25	; 0x04
    23f2:	8b 83       	std	Y+3, r24	; 0x03
    23f4:	8b 81       	ldd	r24, Y+3	; 0x03
    23f6:	9c 81       	ldd	r25, Y+4	; 0x04
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <STM_u8_STOP+0xdc>
    23fc:	9c 83       	std	Y+4, r25	; 0x04
    23fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	9e 83       	std	Y+6, r25	; 0x06
    2408:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240a:	8d 81       	ldd	r24, Y+5	; 0x05
    240c:	9e 81       	ldd	r25, Y+6	; 0x06
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	69 f7       	brne	.-38     	; 0x23ec <STM_u8_STOP+0xd0>
    2412:	14 c0       	rjmp	.+40     	; 0x243c <STM_u8_STOP+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2414:	6f 81       	ldd	r22, Y+7	; 0x07
    2416:	78 85       	ldd	r23, Y+8	; 0x08
    2418:	89 85       	ldd	r24, Y+9	; 0x09
    241a:	9a 85       	ldd	r25, Y+10	; 0x0a
    241c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	9e 83       	std	Y+6, r25	; 0x06
    2426:	8d 83       	std	Y+5, r24	; 0x05
    2428:	8d 81       	ldd	r24, Y+5	; 0x05
    242a:	9e 81       	ldd	r25, Y+6	; 0x06
    242c:	9a 83       	std	Y+2, r25	; 0x02
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	9a 81       	ldd	r25, Y+2	; 0x02
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <STM_u8_STOP+0x118>
    2438:	9a 83       	std	Y+2, r25	; 0x02
    243a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	return STD_TYPES_OK;
    243c:	81 e0       	ldi	r24, 0x01	; 1
}
    243e:	2e 96       	adiw	r28, 0x0e	; 14
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	cd bf       	out	0x3d, r28	; 61
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_voidInit(void)
{
    2450:	0f 93       	push	r16
    2452:	1f 93       	push	r17
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	cc 54       	subi	r28, 0x4C	; 76
    245e:	d0 40       	sbci	r29, 0x00	; 0
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	fe 01       	movw	r30, r28
    246c:	e7 5b       	subi	r30, 0xB7	; 183
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	ac e0       	ldi	r26, 0x0C	; 12
    2476:	b2 e4       	ldi	r27, 0x42	; 66
    2478:	80 83       	st	Z, r24
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	a2 83       	std	Z+2, r26	; 0x02
    247e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2480:	8e 01       	movw	r16, r28
    2482:	0b 5b       	subi	r16, 0xBB	; 187
    2484:	1f 4f       	sbci	r17, 0xFF	; 255
    2486:	fe 01       	movw	r30, r28
    2488:	e7 5b       	subi	r30, 0xB7	; 183
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	60 81       	ld	r22, Z
    248e:	71 81       	ldd	r23, Z+1	; 0x01
    2490:	82 81       	ldd	r24, Z+2	; 0x02
    2492:	93 81       	ldd	r25, Z+3	; 0x03
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	4a ef       	ldi	r20, 0xFA	; 250
    249a:	54 e4       	ldi	r21, 0x44	; 68
    249c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	f8 01       	movw	r30, r16
    24a6:	80 83       	st	Z, r24
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	a2 83       	std	Z+2, r26	; 0x02
    24ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ae:	fe 01       	movw	r30, r28
    24b0:	eb 5b       	subi	r30, 0xBB	; 187
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	60 81       	ld	r22, Z
    24b6:	71 81       	ldd	r23, Z+1	; 0x01
    24b8:	82 81       	ldd	r24, Z+2	; 0x02
    24ba:	93 81       	ldd	r25, Z+3	; 0x03
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e8       	ldi	r20, 0x80	; 128
    24c2:	5f e3       	ldi	r21, 0x3F	; 63
    24c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24c8:	88 23       	and	r24, r24
    24ca:	44 f4       	brge	.+16     	; 0x24dc <LCD_voidInit+0x8c>
		__ticks = 1;
    24cc:	fe 01       	movw	r30, r28
    24ce:	ed 5b       	subi	r30, 0xBD	; 189
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	80 83       	st	Z, r24
    24da:	64 c0       	rjmp	.+200    	; 0x25a4 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    24dc:	fe 01       	movw	r30, r28
    24de:	eb 5b       	subi	r30, 0xBB	; 187
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	60 81       	ld	r22, Z
    24e4:	71 81       	ldd	r23, Z+1	; 0x01
    24e6:	82 81       	ldd	r24, Z+2	; 0x02
    24e8:	93 81       	ldd	r25, Z+3	; 0x03
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	57 e4       	ldi	r21, 0x47	; 71
    24f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	0c f0       	brlt	.+2      	; 0x24fc <LCD_voidInit+0xac>
    24fa:	43 c0       	rjmp	.+134    	; 0x2582 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fc:	fe 01       	movw	r30, r28
    24fe:	e7 5b       	subi	r30, 0xB7	; 183
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	60 81       	ld	r22, Z
    2504:	71 81       	ldd	r23, Z+1	; 0x01
    2506:	82 81       	ldd	r24, Z+2	; 0x02
    2508:	93 81       	ldd	r25, Z+3	; 0x03
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e2       	ldi	r20, 0x20	; 32
    2510:	51 e4       	ldi	r21, 0x41	; 65
    2512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	8e 01       	movw	r16, r28
    251c:	0d 5b       	subi	r16, 0xBD	; 189
    251e:	1f 4f       	sbci	r17, 0xFF	; 255
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	f8 01       	movw	r30, r16
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	80 83       	st	Z, r24
    2532:	1f c0       	rjmp	.+62     	; 0x2572 <LCD_voidInit+0x122>
    2534:	fe 01       	movw	r30, r28
    2536:	ef 5b       	subi	r30, 0xBF	; 191
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	88 ec       	ldi	r24, 0xC8	; 200
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	80 83       	st	Z, r24
    2542:	fe 01       	movw	r30, r28
    2544:	ef 5b       	subi	r30, 0xBF	; 191
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <LCD_voidInit+0xfc>
    2550:	fe 01       	movw	r30, r28
    2552:	ef 5b       	subi	r30, 0xBF	; 191
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255a:	de 01       	movw	r26, r28
    255c:	ad 5b       	subi	r26, 0xBD	; 189
    255e:	bf 4f       	sbci	r27, 0xFF	; 255
    2560:	fe 01       	movw	r30, r28
    2562:	ed 5b       	subi	r30, 0xBD	; 189
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	91 81       	ldd	r25, Z+1	; 0x01
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	11 96       	adiw	r26, 0x01	; 1
    256e:	9c 93       	st	X, r25
    2570:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2572:	fe 01       	movw	r30, r28
    2574:	ed 5b       	subi	r30, 0xBD	; 189
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	80 81       	ld	r24, Z
    257a:	91 81       	ldd	r25, Z+1	; 0x01
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	d1 f6       	brne	.-76     	; 0x2534 <LCD_voidInit+0xe4>
    2580:	24 c0       	rjmp	.+72     	; 0x25ca <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2582:	8e 01       	movw	r16, r28
    2584:	0d 5b       	subi	r16, 0xBD	; 189
    2586:	1f 4f       	sbci	r17, 0xFF	; 255
    2588:	fe 01       	movw	r30, r28
    258a:	eb 5b       	subi	r30, 0xBB	; 187
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	60 81       	ld	r22, Z
    2590:	71 81       	ldd	r23, Z+1	; 0x01
    2592:	82 81       	ldd	r24, Z+2	; 0x02
    2594:	93 81       	ldd	r25, Z+3	; 0x03
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	f8 01       	movw	r30, r16
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	80 83       	st	Z, r24
    25a4:	fe 01       	movw	r30, r28
    25a6:	ed 5b       	subi	r30, 0xBD	; 189
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	80 81       	ld	r24, Z
    25ac:	91 81       	ldd	r25, Z+1	; 0x01
    25ae:	fe 01       	movw	r30, r28
    25b0:	ff 96       	adiw	r30, 0x3f	; 63
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	80 83       	st	Z, r24
    25b6:	fe 01       	movw	r30, r28
    25b8:	ff 96       	adiw	r30, 0x3f	; 63
    25ba:	80 81       	ld	r24, Z
    25bc:	91 81       	ldd	r25, Z+1	; 0x01
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <LCD_voidInit+0x16e>
    25c2:	fe 01       	movw	r30, r28
    25c4:	ff 96       	adiw	r30, 0x3f	; 63
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	80 83       	st	Z, r24
	_delay_ms(35);
	/* Function Set Cmnd */
	LCD_voidSendCmnd(0b00111000);
    25ca:	88 e3       	ldi	r24, 0x38	; 56
    25cc:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	a0 e2       	ldi	r26, 0x20	; 32
    25d6:	b2 e4       	ldi	r27, 0x42	; 66
    25d8:	8b af       	std	Y+59, r24	; 0x3b
    25da:	9c af       	std	Y+60, r25	; 0x3c
    25dc:	ad af       	std	Y+61, r26	; 0x3d
    25de:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25e0:	6b ad       	ldd	r22, Y+59	; 0x3b
    25e2:	7c ad       	ldd	r23, Y+60	; 0x3c
    25e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    25e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    25e8:	2b ea       	ldi	r18, 0xAB	; 171
    25ea:	3a ea       	ldi	r19, 0xAA	; 170
    25ec:	4a e2       	ldi	r20, 0x2A	; 42
    25ee:	50 e4       	ldi	r21, 0x40	; 64
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	8f ab       	std	Y+55, r24	; 0x37
    25fa:	98 af       	std	Y+56, r25	; 0x38
    25fc:	a9 af       	std	Y+57, r26	; 0x39
    25fe:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2600:	6f a9       	ldd	r22, Y+55	; 0x37
    2602:	78 ad       	ldd	r23, Y+56	; 0x38
    2604:	89 ad       	ldd	r24, Y+57	; 0x39
    2606:	9a ad       	ldd	r25, Y+58	; 0x3a
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	1c f4       	brge	.+6      	; 0x261e <LCD_voidInit+0x1ce>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	8e ab       	std	Y+54, r24	; 0x36
    261c:	91 c0       	rjmp	.+290    	; 0x2740 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    261e:	6f a9       	ldd	r22, Y+55	; 0x37
    2620:	78 ad       	ldd	r23, Y+56	; 0x38
    2622:	89 ad       	ldd	r24, Y+57	; 0x39
    2624:	9a ad       	ldd	r25, Y+58	; 0x3a
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	4f e7       	ldi	r20, 0x7F	; 127
    262c:	53 e4       	ldi	r21, 0x43	; 67
    262e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2632:	18 16       	cp	r1, r24
    2634:	0c f0       	brlt	.+2      	; 0x2638 <LCD_voidInit+0x1e8>
    2636:	7b c0       	rjmp	.+246    	; 0x272e <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    2638:	6b ad       	ldd	r22, Y+59	; 0x3b
    263a:	7c ad       	ldd	r23, Y+60	; 0x3c
    263c:	8d ad       	ldd	r24, Y+61	; 0x3d
    263e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	4a e7       	ldi	r20, 0x7A	; 122
    2646:	54 e4       	ldi	r21, 0x44	; 68
    2648:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	8a ab       	std	Y+50, r24	; 0x32
    2652:	9b ab       	std	Y+51, r25	; 0x33
    2654:	ac ab       	std	Y+52, r26	; 0x34
    2656:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2658:	6a a9       	ldd	r22, Y+50	; 0x32
    265a:	7b a9       	ldd	r23, Y+51	; 0x33
    265c:	8c a9       	ldd	r24, Y+52	; 0x34
    265e:	9d a9       	ldd	r25, Y+53	; 0x35
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	4a ef       	ldi	r20, 0xFA	; 250
    2666:	54 e4       	ldi	r21, 0x44	; 68
    2668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	8e a7       	std	Y+46, r24	; 0x2e
    2672:	9f a7       	std	Y+47, r25	; 0x2f
    2674:	a8 ab       	std	Y+48, r26	; 0x30
    2676:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2678:	6e a5       	ldd	r22, Y+46	; 0x2e
    267a:	7f a5       	ldd	r23, Y+47	; 0x2f
    267c:	88 a9       	ldd	r24, Y+48	; 0x30
    267e:	99 a9       	ldd	r25, Y+49	; 0x31
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e8       	ldi	r20, 0x80	; 128
    2686:	5f e3       	ldi	r21, 0x3F	; 63
    2688:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    268c:	88 23       	and	r24, r24
    268e:	2c f4       	brge	.+10     	; 0x269a <LCD_voidInit+0x24a>
		__ticks = 1;
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	9d a7       	std	Y+45, r25	; 0x2d
    2696:	8c a7       	std	Y+44, r24	; 0x2c
    2698:	3f c0       	rjmp	.+126    	; 0x2718 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    269a:	6e a5       	ldd	r22, Y+46	; 0x2e
    269c:	7f a5       	ldd	r23, Y+47	; 0x2f
    269e:	88 a9       	ldd	r24, Y+48	; 0x30
    26a0:	99 a9       	ldd	r25, Y+49	; 0x31
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	3f ef       	ldi	r19, 0xFF	; 255
    26a6:	4f e7       	ldi	r20, 0x7F	; 127
    26a8:	57 e4       	ldi	r21, 0x47	; 71
    26aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26ae:	18 16       	cp	r1, r24
    26b0:	4c f5       	brge	.+82     	; 0x2704 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b2:	6a a9       	ldd	r22, Y+50	; 0x32
    26b4:	7b a9       	ldd	r23, Y+51	; 0x33
    26b6:	8c a9       	ldd	r24, Y+52	; 0x34
    26b8:	9d a9       	ldd	r25, Y+53	; 0x35
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e2       	ldi	r20, 0x20	; 32
    26c0:	51 e4       	ldi	r21, 0x41	; 65
    26c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	bc 01       	movw	r22, r24
    26cc:	cd 01       	movw	r24, r26
    26ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9d a7       	std	Y+45, r25	; 0x2d
    26d8:	8c a7       	std	Y+44, r24	; 0x2c
    26da:	0f c0       	rjmp	.+30     	; 0x26fa <LCD_voidInit+0x2aa>
    26dc:	88 ec       	ldi	r24, 0xC8	; 200
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	9b a7       	std	Y+43, r25	; 0x2b
    26e2:	8a a7       	std	Y+42, r24	; 0x2a
    26e4:	8a a5       	ldd	r24, Y+42	; 0x2a
    26e6:	9b a5       	ldd	r25, Y+43	; 0x2b
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <LCD_voidInit+0x298>
    26ec:	9b a7       	std	Y+43, r25	; 0x2b
    26ee:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f0:	8c a5       	ldd	r24, Y+44	; 0x2c
    26f2:	9d a5       	ldd	r25, Y+45	; 0x2d
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	9d a7       	std	Y+45, r25	; 0x2d
    26f8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fa:	8c a5       	ldd	r24, Y+44	; 0x2c
    26fc:	9d a5       	ldd	r25, Y+45	; 0x2d
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	69 f7       	brne	.-38     	; 0x26dc <LCD_voidInit+0x28c>
    2702:	24 c0       	rjmp	.+72     	; 0x274c <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2704:	6e a5       	ldd	r22, Y+46	; 0x2e
    2706:	7f a5       	ldd	r23, Y+47	; 0x2f
    2708:	88 a9       	ldd	r24, Y+48	; 0x30
    270a:	99 a9       	ldd	r25, Y+49	; 0x31
    270c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	9d a7       	std	Y+45, r25	; 0x2d
    2716:	8c a7       	std	Y+44, r24	; 0x2c
    2718:	8c a5       	ldd	r24, Y+44	; 0x2c
    271a:	9d a5       	ldd	r25, Y+45	; 0x2d
    271c:	99 a7       	std	Y+41, r25	; 0x29
    271e:	88 a7       	std	Y+40, r24	; 0x28
    2720:	88 a5       	ldd	r24, Y+40	; 0x28
    2722:	99 a5       	ldd	r25, Y+41	; 0x29
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	f1 f7       	brne	.-4      	; 0x2724 <LCD_voidInit+0x2d4>
    2728:	99 a7       	std	Y+41, r25	; 0x29
    272a:	88 a7       	std	Y+40, r24	; 0x28
    272c:	0f c0       	rjmp	.+30     	; 0x274c <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    272e:	6f a9       	ldd	r22, Y+55	; 0x37
    2730:	78 ad       	ldd	r23, Y+56	; 0x38
    2732:	89 ad       	ldd	r24, Y+57	; 0x39
    2734:	9a ad       	ldd	r25, Y+58	; 0x3a
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	8e ab       	std	Y+54, r24	; 0x36
    2740:	8e a9       	ldd	r24, Y+54	; 0x36
    2742:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2744:	8f a1       	ldd	r24, Y+39	; 0x27
    2746:	8a 95       	dec	r24
    2748:	f1 f7       	brne	.-4      	; 0x2746 <LCD_voidInit+0x2f6>
    274a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmnd(0b00001111);
    274c:	8f e0       	ldi	r24, 0x0F	; 15
    274e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	a0 e2       	ldi	r26, 0x20	; 32
    2758:	b2 e4       	ldi	r27, 0x42	; 66
    275a:	8b a3       	std	Y+35, r24	; 0x23
    275c:	9c a3       	std	Y+36, r25	; 0x24
    275e:	ad a3       	std	Y+37, r26	; 0x25
    2760:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2762:	6b a1       	ldd	r22, Y+35	; 0x23
    2764:	7c a1       	ldd	r23, Y+36	; 0x24
    2766:	8d a1       	ldd	r24, Y+37	; 0x25
    2768:	9e a1       	ldd	r25, Y+38	; 0x26
    276a:	2b ea       	ldi	r18, 0xAB	; 171
    276c:	3a ea       	ldi	r19, 0xAA	; 170
    276e:	4a e2       	ldi	r20, 0x2A	; 42
    2770:	50 e4       	ldi	r21, 0x40	; 64
    2772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	8f 8f       	std	Y+31, r24	; 0x1f
    277c:	98 a3       	std	Y+32, r25	; 0x20
    277e:	a9 a3       	std	Y+33, r26	; 0x21
    2780:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2782:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2784:	78 a1       	ldd	r23, Y+32	; 0x20
    2786:	89 a1       	ldd	r24, Y+33	; 0x21
    2788:	9a a1       	ldd	r25, Y+34	; 0x22
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e8       	ldi	r20, 0x80	; 128
    2790:	5f e3       	ldi	r21, 0x3F	; 63
    2792:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2796:	88 23       	and	r24, r24
    2798:	1c f4       	brge	.+6      	; 0x27a0 <LCD_voidInit+0x350>
		__ticks = 1;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	8e 8f       	std	Y+30, r24	; 0x1e
    279e:	91 c0       	rjmp	.+290    	; 0x28c2 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    27a0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    27a2:	78 a1       	ldd	r23, Y+32	; 0x20
    27a4:	89 a1       	ldd	r24, Y+33	; 0x21
    27a6:	9a a1       	ldd	r25, Y+34	; 0x22
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	4f e7       	ldi	r20, 0x7F	; 127
    27ae:	53 e4       	ldi	r21, 0x43	; 67
    27b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b4:	18 16       	cp	r1, r24
    27b6:	0c f0       	brlt	.+2      	; 0x27ba <LCD_voidInit+0x36a>
    27b8:	7b c0       	rjmp	.+246    	; 0x28b0 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    27ba:	6b a1       	ldd	r22, Y+35	; 0x23
    27bc:	7c a1       	ldd	r23, Y+36	; 0x24
    27be:	8d a1       	ldd	r24, Y+37	; 0x25
    27c0:	9e a1       	ldd	r25, Y+38	; 0x26
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	4a e7       	ldi	r20, 0x7A	; 122
    27c8:	54 e4       	ldi	r21, 0x44	; 68
    27ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	8a 8f       	std	Y+26, r24	; 0x1a
    27d4:	9b 8f       	std	Y+27, r25	; 0x1b
    27d6:	ac 8f       	std	Y+28, r26	; 0x1c
    27d8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27da:	6a 8d       	ldd	r22, Y+26	; 0x1a
    27dc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    27de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27e0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	4a ef       	ldi	r20, 0xFA	; 250
    27e8:	54 e4       	ldi	r21, 0x44	; 68
    27ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	8e 8b       	std	Y+22, r24	; 0x16
    27f4:	9f 8b       	std	Y+23, r25	; 0x17
    27f6:	a8 8f       	std	Y+24, r26	; 0x18
    27f8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    27fa:	6e 89       	ldd	r22, Y+22	; 0x16
    27fc:	7f 89       	ldd	r23, Y+23	; 0x17
    27fe:	88 8d       	ldd	r24, Y+24	; 0x18
    2800:	99 8d       	ldd	r25, Y+25	; 0x19
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	40 e8       	ldi	r20, 0x80	; 128
    2808:	5f e3       	ldi	r21, 0x3F	; 63
    280a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    280e:	88 23       	and	r24, r24
    2810:	2c f4       	brge	.+10     	; 0x281c <LCD_voidInit+0x3cc>
		__ticks = 1;
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	9d 8b       	std	Y+21, r25	; 0x15
    2818:	8c 8b       	std	Y+20, r24	; 0x14
    281a:	3f c0       	rjmp	.+126    	; 0x289a <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    281c:	6e 89       	ldd	r22, Y+22	; 0x16
    281e:	7f 89       	ldd	r23, Y+23	; 0x17
    2820:	88 8d       	ldd	r24, Y+24	; 0x18
    2822:	99 8d       	ldd	r25, Y+25	; 0x19
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	3f ef       	ldi	r19, 0xFF	; 255
    2828:	4f e7       	ldi	r20, 0x7F	; 127
    282a:	57 e4       	ldi	r21, 0x47	; 71
    282c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2830:	18 16       	cp	r1, r24
    2832:	4c f5       	brge	.+82     	; 0x2886 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2834:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2836:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2838:	8c 8d       	ldd	r24, Y+28	; 0x1c
    283a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e2       	ldi	r20, 0x20	; 32
    2842:	51 e4       	ldi	r21, 0x41	; 65
    2844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	bc 01       	movw	r22, r24
    284e:	cd 01       	movw	r24, r26
    2850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	9d 8b       	std	Y+21, r25	; 0x15
    285a:	8c 8b       	std	Y+20, r24	; 0x14
    285c:	0f c0       	rjmp	.+30     	; 0x287c <LCD_voidInit+0x42c>
    285e:	88 ec       	ldi	r24, 0xC8	; 200
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	9b 8b       	std	Y+19, r25	; 0x13
    2864:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2866:	8a 89       	ldd	r24, Y+18	; 0x12
    2868:	9b 89       	ldd	r25, Y+19	; 0x13
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <LCD_voidInit+0x41a>
    286e:	9b 8b       	std	Y+19, r25	; 0x13
    2870:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2872:	8c 89       	ldd	r24, Y+20	; 0x14
    2874:	9d 89       	ldd	r25, Y+21	; 0x15
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	9d 8b       	std	Y+21, r25	; 0x15
    287a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287c:	8c 89       	ldd	r24, Y+20	; 0x14
    287e:	9d 89       	ldd	r25, Y+21	; 0x15
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	69 f7       	brne	.-38     	; 0x285e <LCD_voidInit+0x40e>
    2884:	24 c0       	rjmp	.+72     	; 0x28ce <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2886:	6e 89       	ldd	r22, Y+22	; 0x16
    2888:	7f 89       	ldd	r23, Y+23	; 0x17
    288a:	88 8d       	ldd	r24, Y+24	; 0x18
    288c:	99 8d       	ldd	r25, Y+25	; 0x19
    288e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	9d 8b       	std	Y+21, r25	; 0x15
    2898:	8c 8b       	std	Y+20, r24	; 0x14
    289a:	8c 89       	ldd	r24, Y+20	; 0x14
    289c:	9d 89       	ldd	r25, Y+21	; 0x15
    289e:	99 8b       	std	Y+17, r25	; 0x11
    28a0:	88 8b       	std	Y+16, r24	; 0x10
    28a2:	88 89       	ldd	r24, Y+16	; 0x10
    28a4:	99 89       	ldd	r25, Y+17	; 0x11
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <LCD_voidInit+0x456>
    28aa:	99 8b       	std	Y+17, r25	; 0x11
    28ac:	88 8b       	std	Y+16, r24	; 0x10
    28ae:	0f c0       	rjmp	.+30     	; 0x28ce <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28b0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    28b2:	78 a1       	ldd	r23, Y+32	; 0x20
    28b4:	89 a1       	ldd	r24, Y+33	; 0x21
    28b6:	9a a1       	ldd	r25, Y+34	; 0x22
    28b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	8e 8f       	std	Y+30, r24	; 0x1e
    28c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28c4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c8:	8a 95       	dec	r24
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <LCD_voidInit+0x478>
    28cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmnd(0b00000001);
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	a0 e0       	ldi	r26, 0x00	; 0
    28da:	b0 e4       	ldi	r27, 0x40	; 64
    28dc:	8b 87       	std	Y+11, r24	; 0x0b
    28de:	9c 87       	std	Y+12, r25	; 0x0c
    28e0:	ad 87       	std	Y+13, r26	; 0x0d
    28e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	4a ef       	ldi	r20, 0xFA	; 250
    28f2:	54 e4       	ldi	r21, 0x44	; 68
    28f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	8f 83       	std	Y+7, r24	; 0x07
    28fe:	98 87       	std	Y+8, r25	; 0x08
    2900:	a9 87       	std	Y+9, r26	; 0x09
    2902:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2904:	6f 81       	ldd	r22, Y+7	; 0x07
    2906:	78 85       	ldd	r23, Y+8	; 0x08
    2908:	89 85       	ldd	r24, Y+9	; 0x09
    290a:	9a 85       	ldd	r25, Y+10	; 0x0a
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e8       	ldi	r20, 0x80	; 128
    2912:	5f e3       	ldi	r21, 0x3F	; 63
    2914:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2918:	88 23       	and	r24, r24
    291a:	2c f4       	brge	.+10     	; 0x2926 <LCD_voidInit+0x4d6>
		__ticks = 1;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	9e 83       	std	Y+6, r25	; 0x06
    2922:	8d 83       	std	Y+5, r24	; 0x05
    2924:	3f c0       	rjmp	.+126    	; 0x29a4 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    2926:	6f 81       	ldd	r22, Y+7	; 0x07
    2928:	78 85       	ldd	r23, Y+8	; 0x08
    292a:	89 85       	ldd	r24, Y+9	; 0x09
    292c:	9a 85       	ldd	r25, Y+10	; 0x0a
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	3f ef       	ldi	r19, 0xFF	; 255
    2932:	4f e7       	ldi	r20, 0x7F	; 127
    2934:	57 e4       	ldi	r21, 0x47	; 71
    2936:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    293a:	18 16       	cp	r1, r24
    293c:	4c f5       	brge	.+82     	; 0x2990 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2940:	7c 85       	ldd	r23, Y+12	; 0x0c
    2942:	8d 85       	ldd	r24, Y+13	; 0x0d
    2944:	9e 85       	ldd	r25, Y+14	; 0x0e
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e2       	ldi	r20, 0x20	; 32
    294c:	51 e4       	ldi	r21, 0x41	; 65
    294e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	bc 01       	movw	r22, r24
    2958:	cd 01       	movw	r24, r26
    295a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	9e 83       	std	Y+6, r25	; 0x06
    2964:	8d 83       	std	Y+5, r24	; 0x05
    2966:	0f c0       	rjmp	.+30     	; 0x2986 <LCD_voidInit+0x536>
    2968:	88 ec       	ldi	r24, 0xC8	; 200
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	9c 83       	std	Y+4, r25	; 0x04
    296e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	9c 81       	ldd	r25, Y+4	; 0x04
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <LCD_voidInit+0x524>
    2978:	9c 83       	std	Y+4, r25	; 0x04
    297a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297c:	8d 81       	ldd	r24, Y+5	; 0x05
    297e:	9e 81       	ldd	r25, Y+6	; 0x06
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	9e 83       	std	Y+6, r25	; 0x06
    2984:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2986:	8d 81       	ldd	r24, Y+5	; 0x05
    2988:	9e 81       	ldd	r25, Y+6	; 0x06
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	69 f7       	brne	.-38     	; 0x2968 <LCD_voidInit+0x518>
    298e:	14 c0       	rjmp	.+40     	; 0x29b8 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2990:	6f 81       	ldd	r22, Y+7	; 0x07
    2992:	78 85       	ldd	r23, Y+8	; 0x08
    2994:	89 85       	ldd	r24, Y+9	; 0x09
    2996:	9a 85       	ldd	r25, Y+10	; 0x0a
    2998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	9e 83       	std	Y+6, r25	; 0x06
    29a2:	8d 83       	std	Y+5, r24	; 0x05
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05
    29a6:	9e 81       	ldd	r25, Y+6	; 0x06
    29a8:	9a 83       	std	Y+2, r25	; 0x02
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	9a 81       	ldd	r25, Y+2	; 0x02
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <LCD_voidInit+0x560>
    29b4:	9a 83       	std	Y+2, r25	; 0x02
    29b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmnd(0b00000110);
    29b8:	86 e0       	ldi	r24, 0x06	; 6
    29ba:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
}
    29be:	c4 5b       	subi	r28, 0xB4	; 180
    29c0:	df 4f       	sbci	r29, 0xFF	; 255
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	cf 91       	pop	r28
    29ce:	df 91       	pop	r29
    29d0:	1f 91       	pop	r17
    29d2:	0f 91       	pop	r16
    29d4:	08 95       	ret

000029d6 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	69 97       	sbiw	r28, 0x19	; 25
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
    29ea:	89 8f       	std	Y+25, r24	; 0x19
		//  Rs = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rs_PIN ,DIO_u8_LOW); // portA, Pin0 ,LOW
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	60 e0       	ldi	r22, 0x00	; 0
    29f0:	40 e0       	ldi	r20, 0x00	; 0
    29f2:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
		//  Rw = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rw_PIN ,DIO_u8_LOW); // portA, Pin1 ,LOW
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	61 e0       	ldi	r22, 0x01	; 1
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
		/* Write Cmnd */
		DIO_u8SetPortValue(LCD_u8_DATA_PORT , Copy_u8Cmnd); // Port D
    2a00:	82 e0       	ldi	r24, 0x02	; 2
    2a02:	69 8d       	ldd	r22, Y+25	; 0x19
    2a04:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_u8SetPortValue>
		// E = 1
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_HIGH); // portA, Pin2 ,HIGH
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	62 e0       	ldi	r22, 0x02	; 2
    2a0c:	41 e0       	ldi	r20, 0x01	; 1
    2a0e:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	a0 e8       	ldi	r26, 0x80	; 128
    2a18:	bf e3       	ldi	r27, 0x3F	; 63
    2a1a:	8d 8b       	std	Y+21, r24	; 0x15
    2a1c:	9e 8b       	std	Y+22, r25	; 0x16
    2a1e:	af 8b       	std	Y+23, r26	; 0x17
    2a20:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a22:	6d 89       	ldd	r22, Y+21	; 0x15
    2a24:	7e 89       	ldd	r23, Y+22	; 0x16
    2a26:	8f 89       	ldd	r24, Y+23	; 0x17
    2a28:	98 8d       	ldd	r25, Y+24	; 0x18
    2a2a:	2b ea       	ldi	r18, 0xAB	; 171
    2a2c:	3a ea       	ldi	r19, 0xAA	; 170
    2a2e:	4a e2       	ldi	r20, 0x2A	; 42
    2a30:	50 e4       	ldi	r21, 0x40	; 64
    2a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	89 8b       	std	Y+17, r24	; 0x11
    2a3c:	9a 8b       	std	Y+18, r25	; 0x12
    2a3e:	ab 8b       	std	Y+19, r26	; 0x13
    2a40:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a42:	69 89       	ldd	r22, Y+17	; 0x11
    2a44:	7a 89       	ldd	r23, Y+18	; 0x12
    2a46:	8b 89       	ldd	r24, Y+19	; 0x13
    2a48:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	40 e8       	ldi	r20, 0x80	; 128
    2a50:	5f e3       	ldi	r21, 0x3F	; 63
    2a52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a56:	88 23       	and	r24, r24
    2a58:	1c f4       	brge	.+6      	; 0x2a60 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	88 8b       	std	Y+16, r24	; 0x10
    2a5e:	91 c0       	rjmp	.+290    	; 0x2b82 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    2a60:	69 89       	ldd	r22, Y+17	; 0x11
    2a62:	7a 89       	ldd	r23, Y+18	; 0x12
    2a64:	8b 89       	ldd	r24, Y+19	; 0x13
    2a66:	9c 89       	ldd	r25, Y+20	; 0x14
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	4f e7       	ldi	r20, 0x7F	; 127
    2a6e:	53 e4       	ldi	r21, 0x43	; 67
    2a70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a74:	18 16       	cp	r1, r24
    2a76:	0c f0       	brlt	.+2      	; 0x2a7a <LCD_voidSendCmnd+0xa4>
    2a78:	7b c0       	rjmp	.+246    	; 0x2b70 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2a7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a80:	98 8d       	ldd	r25, Y+24	; 0x18
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	4a e7       	ldi	r20, 0x7A	; 122
    2a88:	54 e4       	ldi	r21, 0x44	; 68
    2a8a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	8c 87       	std	Y+12, r24	; 0x0c
    2a94:	9d 87       	std	Y+13, r25	; 0x0d
    2a96:	ae 87       	std	Y+14, r26	; 0x0e
    2a98:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a9c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a9e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2aa0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	4a ef       	ldi	r20, 0xFA	; 250
    2aa8:	54 e4       	ldi	r21, 0x44	; 68
    2aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	88 87       	std	Y+8, r24	; 0x08
    2ab4:	99 87       	std	Y+9, r25	; 0x09
    2ab6:	aa 87       	std	Y+10, r26	; 0x0a
    2ab8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2aba:	68 85       	ldd	r22, Y+8	; 0x08
    2abc:	79 85       	ldd	r23, Y+9	; 0x09
    2abe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ac0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e8       	ldi	r20, 0x80	; 128
    2ac8:	5f e3       	ldi	r21, 0x3F	; 63
    2aca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ace:	88 23       	and	r24, r24
    2ad0:	2c f4       	brge	.+10     	; 0x2adc <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	9f 83       	std	Y+7, r25	; 0x07
    2ad8:	8e 83       	std	Y+6, r24	; 0x06
    2ada:	3f c0       	rjmp	.+126    	; 0x2b5a <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    2adc:	68 85       	ldd	r22, Y+8	; 0x08
    2ade:	79 85       	ldd	r23, Y+9	; 0x09
    2ae0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ae2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	3f ef       	ldi	r19, 0xFF	; 255
    2ae8:	4f e7       	ldi	r20, 0x7F	; 127
    2aea:	57 e4       	ldi	r21, 0x47	; 71
    2aec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2af0:	18 16       	cp	r1, r24
    2af2:	4c f5       	brge	.+82     	; 0x2b46 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af4:	6c 85       	ldd	r22, Y+12	; 0x0c
    2af6:	7d 85       	ldd	r23, Y+13	; 0x0d
    2af8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2afa:	9f 85       	ldd	r25, Y+15	; 0x0f
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e2       	ldi	r20, 0x20	; 32
    2b02:	51 e4       	ldi	r21, 0x41	; 65
    2b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	bc 01       	movw	r22, r24
    2b0e:	cd 01       	movw	r24, r26
    2b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	9f 83       	std	Y+7, r25	; 0x07
    2b1a:	8e 83       	std	Y+6, r24	; 0x06
    2b1c:	0f c0       	rjmp	.+30     	; 0x2b3c <LCD_voidSendCmnd+0x166>
    2b1e:	88 ec       	ldi	r24, 0xC8	; 200
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	9d 83       	std	Y+5, r25	; 0x05
    2b24:	8c 83       	std	Y+4, r24	; 0x04
    2b26:	8c 81       	ldd	r24, Y+4	; 0x04
    2b28:	9d 81       	ldd	r25, Y+5	; 0x05
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <LCD_voidSendCmnd+0x154>
    2b2e:	9d 83       	std	Y+5, r25	; 0x05
    2b30:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b32:	8e 81       	ldd	r24, Y+6	; 0x06
    2b34:	9f 81       	ldd	r25, Y+7	; 0x07
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	9f 83       	std	Y+7, r25	; 0x07
    2b3a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b3e:	9f 81       	ldd	r25, Y+7	; 0x07
    2b40:	00 97       	sbiw	r24, 0x00	; 0
    2b42:	69 f7       	brne	.-38     	; 0x2b1e <LCD_voidSendCmnd+0x148>
    2b44:	24 c0       	rjmp	.+72     	; 0x2b8e <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b46:	68 85       	ldd	r22, Y+8	; 0x08
    2b48:	79 85       	ldd	r23, Y+9	; 0x09
    2b4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	9f 83       	std	Y+7, r25	; 0x07
    2b58:	8e 83       	std	Y+6, r24	; 0x06
    2b5a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b5c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b5e:	9b 83       	std	Y+3, r25	; 0x03
    2b60:	8a 83       	std	Y+2, r24	; 0x02
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	9b 81       	ldd	r25, Y+3	; 0x03
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <LCD_voidSendCmnd+0x190>
    2b6a:	9b 83       	std	Y+3, r25	; 0x03
    2b6c:	8a 83       	std	Y+2, r24	; 0x02
    2b6e:	0f c0       	rjmp	.+30     	; 0x2b8e <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b70:	69 89       	ldd	r22, Y+17	; 0x11
    2b72:	7a 89       	ldd	r23, Y+18	; 0x12
    2b74:	8b 89       	ldd	r24, Y+19	; 0x13
    2b76:	9c 89       	ldd	r25, Y+20	; 0x14
    2b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	88 8b       	std	Y+16, r24	; 0x10
    2b82:	88 89       	ldd	r24, Y+16	; 0x10
    2b84:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	8a 95       	dec	r24
    2b8a:	f1 f7       	brne	.-4      	; 0x2b88 <LCD_voidSendCmnd+0x1b2>
    2b8c:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		// E = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_LOW); // portA, Pin2 ,LOW
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	62 e0       	ldi	r22, 0x02	; 2
    2b92:	40 e0       	ldi	r20, 0x00	; 0
    2b94:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
}
    2b98:	69 96       	adiw	r28, 0x19	; 25
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
    2bb2:	69 97       	sbiw	r28, 0x19	; 25
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	f8 94       	cli
    2bb8:	de bf       	out	0x3e, r29	; 62
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	cd bf       	out	0x3d, r28	; 61
    2bbe:	89 8f       	std	Y+25, r24	; 0x19
		// STEP 1 Rs = 1
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rs_PIN ,DIO_u8_HIGH); // portA, Pin0 , HIGH
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	60 e0       	ldi	r22, 0x00	; 0
    2bc4:	41 e0       	ldi	r20, 0x01	; 1
    2bc6:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
		// step 2 Rw = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_Rw_PIN ,DIO_u8_LOW); // portA, Pin1 , LOW
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	61 e0       	ldi	r22, 0x01	; 1
    2bce:	40 e0       	ldi	r20, 0x00	; 0
    2bd0:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
		/* Write Char */
		DIO_u8SetPortValue(LCD_u8_DATA_PORT , Copy_u8Char); // Port D
    2bd4:	82 e0       	ldi	r24, 0x02	; 2
    2bd6:	69 8d       	ldd	r22, Y+25	; 0x19
    2bd8:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_u8SetPortValue>
		// E = 1
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_HIGH); // portA, Pin2 , HIGH
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	62 e0       	ldi	r22, 0x02	; 2
    2be0:	41 e0       	ldi	r20, 0x01	; 1
    2be2:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	a0 e8       	ldi	r26, 0x80	; 128
    2bec:	bf e3       	ldi	r27, 0x3F	; 63
    2bee:	8d 8b       	std	Y+21, r24	; 0x15
    2bf0:	9e 8b       	std	Y+22, r25	; 0x16
    2bf2:	af 8b       	std	Y+23, r26	; 0x17
    2bf4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bf6:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf8:	7e 89       	ldd	r23, Y+22	; 0x16
    2bfa:	8f 89       	ldd	r24, Y+23	; 0x17
    2bfc:	98 8d       	ldd	r25, Y+24	; 0x18
    2bfe:	2b ea       	ldi	r18, 0xAB	; 171
    2c00:	3a ea       	ldi	r19, 0xAA	; 170
    2c02:	4a e2       	ldi	r20, 0x2A	; 42
    2c04:	50 e4       	ldi	r21, 0x40	; 64
    2c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	89 8b       	std	Y+17, r24	; 0x11
    2c10:	9a 8b       	std	Y+18, r25	; 0x12
    2c12:	ab 8b       	std	Y+19, r26	; 0x13
    2c14:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c16:	69 89       	ldd	r22, Y+17	; 0x11
    2c18:	7a 89       	ldd	r23, Y+18	; 0x12
    2c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	40 e8       	ldi	r20, 0x80	; 128
    2c24:	5f e3       	ldi	r21, 0x3F	; 63
    2c26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c2a:	88 23       	and	r24, r24
    2c2c:	1c f4       	brge	.+6      	; 0x2c34 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	88 8b       	std	Y+16, r24	; 0x10
    2c32:	91 c0       	rjmp	.+290    	; 0x2d56 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2c34:	69 89       	ldd	r22, Y+17	; 0x11
    2c36:	7a 89       	ldd	r23, Y+18	; 0x12
    2c38:	8b 89       	ldd	r24, Y+19	; 0x13
    2c3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	4f e7       	ldi	r20, 0x7F	; 127
    2c42:	53 e4       	ldi	r21, 0x43	; 67
    2c44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c48:	18 16       	cp	r1, r24
    2c4a:	0c f0       	brlt	.+2      	; 0x2c4e <LCD_voidSendChar+0xa4>
    2c4c:	7b c0       	rjmp	.+246    	; 0x2d44 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c50:	7e 89       	ldd	r23, Y+22	; 0x16
    2c52:	8f 89       	ldd	r24, Y+23	; 0x17
    2c54:	98 8d       	ldd	r25, Y+24	; 0x18
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	4a e7       	ldi	r20, 0x7A	; 122
    2c5c:	54 e4       	ldi	r21, 0x44	; 68
    2c5e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	8c 87       	std	Y+12, r24	; 0x0c
    2c68:	9d 87       	std	Y+13, r25	; 0x0d
    2c6a:	ae 87       	std	Y+14, r26	; 0x0e
    2c6c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c70:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c72:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c74:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	4a ef       	ldi	r20, 0xFA	; 250
    2c7c:	54 e4       	ldi	r21, 0x44	; 68
    2c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	88 87       	std	Y+8, r24	; 0x08
    2c88:	99 87       	std	Y+9, r25	; 0x09
    2c8a:	aa 87       	std	Y+10, r26	; 0x0a
    2c8c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c8e:	68 85       	ldd	r22, Y+8	; 0x08
    2c90:	79 85       	ldd	r23, Y+9	; 0x09
    2c92:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c94:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e8       	ldi	r20, 0x80	; 128
    2c9c:	5f e3       	ldi	r21, 0x3F	; 63
    2c9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ca2:	88 23       	and	r24, r24
    2ca4:	2c f4       	brge	.+10     	; 0x2cb0 <LCD_voidSendChar+0x106>
		__ticks = 1;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	9f 83       	std	Y+7, r25	; 0x07
    2cac:	8e 83       	std	Y+6, r24	; 0x06
    2cae:	3f c0       	rjmp	.+126    	; 0x2d2e <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2cb0:	68 85       	ldd	r22, Y+8	; 0x08
    2cb2:	79 85       	ldd	r23, Y+9	; 0x09
    2cb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	3f ef       	ldi	r19, 0xFF	; 255
    2cbc:	4f e7       	ldi	r20, 0x7F	; 127
    2cbe:	57 e4       	ldi	r21, 0x47	; 71
    2cc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc4:	18 16       	cp	r1, r24
    2cc6:	4c f5       	brge	.+82     	; 0x2d1a <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cca:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ccc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cce:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e2       	ldi	r20, 0x20	; 32
    2cd6:	51 e4       	ldi	r21, 0x41	; 65
    2cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	bc 01       	movw	r22, r24
    2ce2:	cd 01       	movw	r24, r26
    2ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	9f 83       	std	Y+7, r25	; 0x07
    2cee:	8e 83       	std	Y+6, r24	; 0x06
    2cf0:	0f c0       	rjmp	.+30     	; 0x2d10 <LCD_voidSendChar+0x166>
    2cf2:	88 ec       	ldi	r24, 0xC8	; 200
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	9d 83       	std	Y+5, r25	; 0x05
    2cf8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2cfc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <LCD_voidSendChar+0x154>
    2d02:	9d 83       	std	Y+5, r25	; 0x05
    2d04:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d06:	8e 81       	ldd	r24, Y+6	; 0x06
    2d08:	9f 81       	ldd	r25, Y+7	; 0x07
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	9f 83       	std	Y+7, r25	; 0x07
    2d0e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d10:	8e 81       	ldd	r24, Y+6	; 0x06
    2d12:	9f 81       	ldd	r25, Y+7	; 0x07
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	69 f7       	brne	.-38     	; 0x2cf2 <LCD_voidSendChar+0x148>
    2d18:	24 c0       	rjmp	.+72     	; 0x2d62 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1a:	68 85       	ldd	r22, Y+8	; 0x08
    2d1c:	79 85       	ldd	r23, Y+9	; 0x09
    2d1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d20:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	9f 83       	std	Y+7, r25	; 0x07
    2d2c:	8e 83       	std	Y+6, r24	; 0x06
    2d2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d30:	9f 81       	ldd	r25, Y+7	; 0x07
    2d32:	9b 83       	std	Y+3, r25	; 0x03
    2d34:	8a 83       	std	Y+2, r24	; 0x02
    2d36:	8a 81       	ldd	r24, Y+2	; 0x02
    2d38:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	f1 f7       	brne	.-4      	; 0x2d3a <LCD_voidSendChar+0x190>
    2d3e:	9b 83       	std	Y+3, r25	; 0x03
    2d40:	8a 83       	std	Y+2, r24	; 0x02
    2d42:	0f c0       	rjmp	.+30     	; 0x2d62 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d44:	69 89       	ldd	r22, Y+17	; 0x11
    2d46:	7a 89       	ldd	r23, Y+18	; 0x12
    2d48:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	88 8b       	std	Y+16, r24	; 0x10
    2d56:	88 89       	ldd	r24, Y+16	; 0x10
    2d58:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	8a 95       	dec	r24
    2d5e:	f1 f7       	brne	.-4      	; 0x2d5c <LCD_voidSendChar+0x1b2>
    2d60:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		// E = 0
		DIO_u8SetPinValue(LCD_u8_CONTROLE_PORT , LCD_u8_E_PIN ,DIO_u8_LOW); // portA, Pin2 , LOW
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	62 e0       	ldi	r22, 0x02	; 2
    2d66:	40 e0       	ldi	r20, 0x00	; 0
    2d68:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
}
    2d6c:	69 96       	adiw	r28, 0x19	; 25
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	08 95       	ret

00002d7e <LCD_u8GoToXY>:

u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	00 d0       	rcall	.+0      	; 0x2d84 <LCD_u8GoToXY+0x6>
    2d84:	00 d0       	rcall	.+0      	; 0x2d86 <LCD_u8GoToXY+0x8>
    2d86:	0f 92       	push	r0
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	8a 83       	std	Y+2, r24	; 0x02
    2d8e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    2d94:	8b 81       	ldd	r24, Y+3	; 0x03
    2d96:	88 32       	cpi	r24, 0x28	; 40
    2d98:	e0 f4       	brcc	.+56     	; 0x2dd2 <LCD_u8GoToXY+0x54>
	{
		switch (Copy_u8LineNum)
    2d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9c:	28 2f       	mov	r18, r24
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	3d 83       	std	Y+5, r19	; 0x05
    2da2:	2c 83       	std	Y+4, r18	; 0x04
    2da4:	8c 81       	ldd	r24, Y+4	; 0x04
    2da6:	9d 81       	ldd	r25, Y+5	; 0x05
    2da8:	81 30       	cpi	r24, 0x01	; 1
    2daa:	91 05       	cpc	r25, r1
    2dac:	31 f0       	breq	.+12     	; 0x2dba <LCD_u8GoToXY+0x3c>
    2dae:	2c 81       	ldd	r18, Y+4	; 0x04
    2db0:	3d 81       	ldd	r19, Y+5	; 0x05
    2db2:	22 30       	cpi	r18, 0x02	; 2
    2db4:	31 05       	cpc	r19, r1
    2db6:	31 f0       	breq	.+12     	; 0x2dc4 <LCD_u8GoToXY+0x46>
    2db8:	0a c0       	rjmp	.+20     	; 0x2dce <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1 : LCD_voidSendCmnd(0x80+Copy_u8Location);break;
    2dba:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbc:	80 58       	subi	r24, 0x80	; 128
    2dbe:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    2dc2:	08 c0       	rjmp	.+16     	; 0x2dd4 <LCD_u8GoToXY+0x56>
			case LCD_u8_LINE2 : LCD_voidSendCmnd(0xc0+Copy_u8Location);break;
    2dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc6:	80 54       	subi	r24, 0x40	; 64
    2dc8:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    2dcc:	03 c0       	rjmp	.+6      	; 0x2dd4 <LCD_u8GoToXY+0x56>
			default : Local_u8ErrorState = STD_TYPES_NOK;
    2dce:	19 82       	std	Y+1, r1	; 0x01
    2dd0:	01 c0       	rjmp	.+2      	; 0x2dd4 <LCD_u8GoToXY+0x56>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2dd2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	08 95       	ret

00002de6 <LCD_SendString>:

u8 LCD_SendString(u8 * Copy_pu8_String){
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	00 d0       	rcall	.+0      	; 0x2dec <LCD_SendString+0x6>
    2dec:	0f 92       	push	r0
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
    2df2:	9b 83       	std	Y+3, r25	; 0x03
    2df4:	8a 83       	std	Y+2, r24	; 0x02
    for(u8 i=0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    2df6:	19 82       	std	Y+1, r1	; 0x01
    2df8:	0e c0       	rjmp	.+28     	; 0x2e16 <LCD_SendString+0x30>
    	LCD_voidSendChar(Copy_pu8_String[i]);
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	28 2f       	mov	r18, r24
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	8a 81       	ldd	r24, Y+2	; 0x02
    2e02:	9b 81       	ldd	r25, Y+3	; 0x03
    2e04:	fc 01       	movw	r30, r24
    2e06:	e2 0f       	add	r30, r18
    2e08:	f3 1f       	adc	r31, r19
    2e0a:	80 81       	ld	r24, Z
    2e0c:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_voidSendChar>
	}
	return Local_u8ErrorState;
}

u8 LCD_SendString(u8 * Copy_pu8_String){
    for(u8 i=0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	8f 5f       	subi	r24, 0xFF	; 255
    2e14:	89 83       	std	Y+1, r24	; 0x01
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	28 2f       	mov	r18, r24
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e20:	fc 01       	movw	r30, r24
    2e22:	e2 0f       	add	r30, r18
    2e24:	f3 1f       	adc	r31, r19
    2e26:	80 81       	ld	r24, Z
    2e28:	88 23       	and	r24, r24
    2e2a:	39 f7       	brne	.-50     	; 0x2dfa <LCD_SendString+0x14>
    	LCD_voidSendChar(Copy_pu8_String[i]);
    }
    return STD_TYPES_OK;
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
}
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};


u8 KPD_u8GetKeyState(u8 * Copy_pu8ReturnedKey)
{
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62
    2e42:	65 97       	sbiw	r28, 0x15	; 21
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	f8 94       	cli
    2e48:	de bf       	out	0x3e, r29	; 62
    2e4a:	0f be       	out	0x3f, r0	; 63
    2e4c:	cd bf       	out	0x3d, r28	; 61
    2e4e:	9d 8b       	std	Y+21, r25	; 0x15
    2e50:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
    2e56:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey != NULL)
    2e58:	8c 89       	ldd	r24, Y+20	; 0x14
    2e5a:	9d 89       	ldd	r25, Y+21	; 0x15
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	09 f4       	brne	.+2      	; 0x2e62 <KPD_u8GetKeyState+0x28>
    2e60:	f0 c0       	rjmp	.+480    	; 0x3042 <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    2e62:	ec 89       	ldd	r30, Y+20	; 0x14
    2e64:	fd 89       	ldd	r31, Y+21	; 0x15
    2e66:	8f ef       	ldi	r24, 0xFF	; 255
    2e68:	80 83       	st	Z, r24
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    2e6a:	19 8a       	std	Y+17, r1	; 0x11
    2e6c:	e5 c0       	rjmp	.+458    	; 0x3038 <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_R_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    2e6e:	89 89       	ldd	r24, Y+17	; 0x11
    2e70:	88 2f       	mov	r24, r24
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	fc 01       	movw	r30, r24
    2e76:	e3 5d       	subi	r30, 0xD3	; 211
    2e78:	fe 4f       	sbci	r31, 0xFE	; 254
    2e7a:	90 81       	ld	r25, Z
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	69 2f       	mov	r22, r25
    2e80:	40 e0       	ldi	r20, 0x00	; 0
    2e82:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
			/* Check Which Input Pin Has Zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    2e86:	18 8a       	std	Y+16, r1	; 0x10
    2e88:	c1 c0       	rjmp	.+386    	; 0x300c <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    2e8a:	88 89       	ldd	r24, Y+16	; 0x10
    2e8c:	88 2f       	mov	r24, r24
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	fc 01       	movw	r30, r24
    2e92:	ef 5c       	subi	r30, 0xCF	; 207
    2e94:	fe 4f       	sbci	r31, 0xFE	; 254
    2e96:	90 81       	ld	r25, Z
    2e98:	9e 01       	movw	r18, r28
    2e9a:	2d 5e       	subi	r18, 0xED	; 237
    2e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	69 2f       	mov	r22, r25
    2ea2:	a9 01       	movw	r20, r18
    2ea4:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)/* Switch is Pressed */
    2ea8:	8b 89       	ldd	r24, Y+19	; 0x13
    2eaa:	88 23       	and	r24, r24
    2eac:	09 f0       	breq	.+2      	; 0x2eb0 <KPD_u8GetKeyState+0x76>
    2eae:	ab c0       	rjmp	.+342    	; 0x3006 <KPD_u8GetKeyState+0x1cc>
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	a0 ea       	ldi	r26, 0xA0	; 160
    2eb6:	b1 e4       	ldi	r27, 0x41	; 65
    2eb8:	8b 87       	std	Y+11, r24	; 0x0b
    2eba:	9c 87       	std	Y+12, r25	; 0x0c
    2ebc:	ad 87       	std	Y+13, r26	; 0x0d
    2ebe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	4a ef       	ldi	r20, 0xFA	; 250
    2ece:	54 e4       	ldi	r21, 0x44	; 68
    2ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	8f 83       	std	Y+7, r24	; 0x07
    2eda:	98 87       	std	Y+8, r25	; 0x08
    2edc:	a9 87       	std	Y+9, r26	; 0x09
    2ede:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee2:	78 85       	ldd	r23, Y+8	; 0x08
    2ee4:	89 85       	ldd	r24, Y+9	; 0x09
    2ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	40 e8       	ldi	r20, 0x80	; 128
    2eee:	5f e3       	ldi	r21, 0x3F	; 63
    2ef0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ef4:	88 23       	and	r24, r24
    2ef6:	2c f4       	brge	.+10     	; 0x2f02 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	9e 83       	std	Y+6, r25	; 0x06
    2efe:	8d 83       	std	Y+5, r24	; 0x05
    2f00:	3f c0       	rjmp	.+126    	; 0x2f80 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    2f02:	6f 81       	ldd	r22, Y+7	; 0x07
    2f04:	78 85       	ldd	r23, Y+8	; 0x08
    2f06:	89 85       	ldd	r24, Y+9	; 0x09
    2f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	3f ef       	ldi	r19, 0xFF	; 255
    2f0e:	4f e7       	ldi	r20, 0x7F	; 127
    2f10:	57 e4       	ldi	r21, 0x47	; 71
    2f12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f16:	18 16       	cp	r1, r24
    2f18:	4c f5       	brge	.+82     	; 0x2f6c <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	40 e2       	ldi	r20, 0x20	; 32
    2f28:	51 e4       	ldi	r21, 0x41	; 65
    2f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	bc 01       	movw	r22, r24
    2f34:	cd 01       	movw	r24, r26
    2f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	9e 83       	std	Y+6, r25	; 0x06
    2f40:	8d 83       	std	Y+5, r24	; 0x05
    2f42:	0f c0       	rjmp	.+30     	; 0x2f62 <KPD_u8GetKeyState+0x128>
    2f44:	88 ec       	ldi	r24, 0xC8	; 200
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	9c 83       	std	Y+4, r25	; 0x04
    2f4a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f50:	01 97       	sbiw	r24, 0x01	; 1
    2f52:	f1 f7       	brne	.-4      	; 0x2f50 <KPD_u8GetKeyState+0x116>
    2f54:	9c 83       	std	Y+4, r25	; 0x04
    2f56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f58:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	9e 83       	std	Y+6, r25	; 0x06
    2f60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f62:	8d 81       	ldd	r24, Y+5	; 0x05
    2f64:	9e 81       	ldd	r25, Y+6	; 0x06
    2f66:	00 97       	sbiw	r24, 0x00	; 0
    2f68:	69 f7       	brne	.-38     	; 0x2f44 <KPD_u8GetKeyState+0x10a>
    2f6a:	14 c0       	rjmp	.+40     	; 0x2f94 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f6e:	78 85       	ldd	r23, Y+8	; 0x08
    2f70:	89 85       	ldd	r24, Y+9	; 0x09
    2f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	9e 83       	std	Y+6, r25	; 0x06
    2f7e:	8d 83       	std	Y+5, r24	; 0x05
    2f80:	8d 81       	ldd	r24, Y+5	; 0x05
    2f82:	9e 81       	ldd	r25, Y+6	; 0x06
    2f84:	9a 83       	std	Y+2, r25	; 0x02
    2f86:	89 83       	std	Y+1, r24	; 0x01
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <KPD_u8GetKeyState+0x152>
    2f90:	9a 83       	std	Y+2, r25	; 0x02
    2f92:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    2f94:	88 89       	ldd	r24, Y+16	; 0x10
    2f96:	88 2f       	mov	r24, r24
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	ef 5c       	subi	r30, 0xCF	; 207
    2f9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa0:	90 81       	ld	r25, Z
    2fa2:	9e 01       	movw	r18, r28
    2fa4:	2d 5e       	subi	r18, 0xED	; 237
    2fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	69 2f       	mov	r22, r25
    2fac:	a9 01       	movw	r20, r18
    2fae:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_u8GetPinValue>
    2fb2:	0f c0       	rjmp	.+30     	; 0x2fd2 <KPD_u8GetKeyState+0x198>
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    2fb4:	88 89       	ldd	r24, Y+16	; 0x10
    2fb6:	88 2f       	mov	r24, r24
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	fc 01       	movw	r30, r24
    2fbc:	ef 5c       	subi	r30, 0xCF	; 207
    2fbe:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc0:	90 81       	ld	r25, Z
    2fc2:	9e 01       	movw	r18, r28
    2fc4:	2d 5e       	subi	r18, 0xED	; 237
    2fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	69 2f       	mov	r22, r25
    2fcc:	a9 01       	movw	r20, r18
    2fce:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_u8GetPinValue>
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
    2fd2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd4:	88 23       	and	r24, r24
    2fd6:	71 f3       	breq	.-36     	; 0x2fb4 <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_C_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    2fd8:	89 89       	ldd	r24, Y+17	; 0x11
    2fda:	48 2f       	mov	r20, r24
    2fdc:	50 e0       	ldi	r21, 0x00	; 0
    2fde:	88 89       	ldd	r24, Y+16	; 0x10
    2fe0:	28 2f       	mov	r18, r24
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	ca 01       	movw	r24, r20
    2fe6:	88 0f       	add	r24, r24
    2fe8:	99 1f       	adc	r25, r25
    2fea:	88 0f       	add	r24, r24
    2fec:	99 1f       	adc	r25, r25
    2fee:	82 0f       	add	r24, r18
    2ff0:	93 1f       	adc	r25, r19
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	e3 5e       	subi	r30, 0xE3	; 227
    2ff6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ff8:	80 81       	ld	r24, Z
    2ffa:	ec 89       	ldd	r30, Y+20	; 0x14
    2ffc:	fd 89       	ldd	r31, Y+21	; 0x15
    2ffe:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	8f 87       	std	Y+15, r24	; 0x0f
    3004:	07 c0       	rjmp	.+14     	; 0x3014 <KPD_u8GetKeyState+0x1da>
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
		{
			DIO_u8SetPinValue(KPD_u8_R_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
			/* Check Which Input Pin Has Zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    3006:	88 89       	ldd	r24, Y+16	; 0x10
    3008:	8f 5f       	subi	r24, 0xFF	; 255
    300a:	88 8b       	std	Y+16, r24	; 0x10
    300c:	88 89       	ldd	r24, Y+16	; 0x10
    300e:	84 30       	cpi	r24, 0x04	; 4
    3010:	08 f4       	brcc	.+2      	; 0x3014 <KPD_u8GetKeyState+0x1da>
    3012:	3b cf       	rjmp	.-394    	; 0x2e8a <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;						
				}
			}
			/* Deactivate Row */
			DIO_u8SetPinValue(KPD_u8_R_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    3014:	89 89       	ldd	r24, Y+17	; 0x11
    3016:	88 2f       	mov	r24, r24
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	fc 01       	movw	r30, r24
    301c:	e3 5d       	subi	r30, 0xD3	; 211
    301e:	fe 4f       	sbci	r31, 0xFE	; 254
    3020:	90 81       	ld	r25, Z
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	69 2f       	mov	r22, r25
    3026:	41 e0       	ldi	r20, 0x01	; 1
    3028:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
			if(Local_u8Flag == 1)
    302c:	8f 85       	ldd	r24, Y+15	; 0x0f
    302e:	81 30       	cpi	r24, 0x01	; 1
    3030:	49 f0       	breq	.+18     	; 0x3044 <KPD_u8GetKeyState+0x20a>
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    3032:	89 89       	ldd	r24, Y+17	; 0x11
    3034:	8f 5f       	subi	r24, 0xFF	; 255
    3036:	89 8b       	std	Y+17, r24	; 0x11
    3038:	89 89       	ldd	r24, Y+17	; 0x11
    303a:	84 30       	cpi	r24, 0x04	; 4
    303c:	08 f4       	brcc	.+2      	; 0x3040 <KPD_u8GetKeyState+0x206>
    303e:	17 cf       	rjmp	.-466    	; 0x2e6e <KPD_u8GetKeyState+0x34>
    3040:	01 c0       	rjmp	.+2      	; 0x3044 <KPD_u8GetKeyState+0x20a>
			}
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3042:	1a 8a       	std	Y+18, r1	; 0x12
	}
	return Local_u8ErrorState;
    3044:	8a 89       	ldd	r24, Y+18	; 0x12
}
    3046:	65 96       	adiw	r28, 0x15	; 21
    3048:	0f b6       	in	r0, 0x3f	; 63
    304a:	f8 94       	cli
    304c:	de bf       	out	0x3e, r29	; 62
    304e:	0f be       	out	0x3f, r0	; 63
    3050:	cd bf       	out	0x3d, r28	; 61
    3052:	cf 91       	pop	r28
    3054:	df 91       	pop	r29
    3056:	08 95       	ret

00003058 <DCM_u8_ROTATE_CW>:
#include "DCM_interface.h"
#include "DCM_private.h"
#include "DCM_config.h"

u8 DCM_u8_ROTATE_CW()
{
    3058:	df 93       	push	r29
    305a:	cf 93       	push	r28
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_IN1_PORT,MOTOR_IN1_PIN,DIO_u8_HIGH);
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	64 e0       	ldi	r22, 0x04	; 4
    3064:	41 e0       	ldi	r20, 0x01	; 1
    3066:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_IN2_PORT,MOTOR_IN2_PIN,DIO_u8_LOW);
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	65 e0       	ldi	r22, 0x05	; 5
    306e:	40 e0       	ldi	r20, 0x00	; 0
    3070:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    3074:	81 e0       	ldi	r24, 0x01	; 1
}
    3076:	cf 91       	pop	r28
    3078:	df 91       	pop	r29
    307a:	08 95       	ret

0000307c <DCM_u8_ROTATE_CCW>:

u8 DCM_u8_ROTATE_CCW()
{
    307c:	df 93       	push	r29
    307e:	cf 93       	push	r28
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_IN1_PORT,MOTOR_IN1_PIN,DIO_u8_LOW);
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	64 e0       	ldi	r22, 0x04	; 4
    3088:	40 e0       	ldi	r20, 0x00	; 0
    308a:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_IN2_PORT,MOTOR_IN2_PIN,DIO_u8_HIGH);
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	65 e0       	ldi	r22, 0x05	; 5
    3092:	41 e0       	ldi	r20, 0x01	; 1
    3094:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    3098:	81 e0       	ldi	r24, 0x01	; 1
}
    309a:	cf 91       	pop	r28
    309c:	df 91       	pop	r29
    309e:	08 95       	ret

000030a0 <DCM_u8_ROTATE_STOP>:

u8 DCM_u8_ROTATE_STOP()
{
    30a0:	df 93       	push	r29
    30a2:	cf 93       	push	r28
    30a4:	cd b7       	in	r28, 0x3d	; 61
    30a6:	de b7       	in	r29, 0x3e	; 62
		DIO_u8SetPinValue(MOTOR_IN1_PORT,MOTOR_IN1_PIN,DIO_u8_LOW);
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	64 e0       	ldi	r22, 0x04	; 4
    30ac:	40 e0       	ldi	r20, 0x00	; 0
    30ae:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(MOTOR_IN2_PORT,MOTOR_IN2_PIN,DIO_u8_LOW);
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	65 e0       	ldi	r22, 0x05	; 5
    30b6:	40 e0       	ldi	r20, 0x00	; 0
    30b8:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>

		return STD_TYPES_OK;
    30bc:	81 e0       	ldi	r24, 0x01	; 1

}
    30be:	cf 91       	pop	r28
    30c0:	df 91       	pop	r29
    30c2:	08 95       	ret

000030c4 <DCM_u8_H_ROTATE_CW>:


/********************* FOR HARDWARE PART **********************/

u8 DCM_u8_H_ROTATE_CW()
{
    30c4:	df 93       	push	r29
    30c6:	cf 93       	push	r28
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CW_PIN,DIO_u8_HIGH);
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	64 e0       	ldi	r22, 0x04	; 4
    30d0:	41 e0       	ldi	r20, 0x01	; 1
    30d2:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CW_PIN,DIO_u8_HIGH);
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	65 e0       	ldi	r22, 0x05	; 5
    30da:	41 e0       	ldi	r20, 0x01	; 1
    30dc:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CCW_PIN,DIO_u8_LOW);
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	66 e0       	ldi	r22, 0x06	; 6
    30e4:	40 e0       	ldi	r20, 0x00	; 0
    30e6:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CCW_PIN,DIO_u8_LOW);
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	67 e0       	ldi	r22, 0x07	; 7
    30ee:	40 e0       	ldi	r20, 0x00	; 0
    30f0:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    30f4:	81 e0       	ldi	r24, 0x01	; 1
}
    30f6:	cf 91       	pop	r28
    30f8:	df 91       	pop	r29
    30fa:	08 95       	ret

000030fc <DCM_u8_H_ROTATE_CCW>:

u8 DCM_u8_H_ROTATE_CCW()
{
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CW_PIN,DIO_u8_LOW);
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	64 e0       	ldi	r22, 0x04	; 4
    3108:	40 e0       	ldi	r20, 0x00	; 0
    310a:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CW_PIN,DIO_u8_LOW);
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	65 e0       	ldi	r22, 0x05	; 5
    3112:	40 e0       	ldi	r20, 0x00	; 0
    3114:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
    DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CCW_PIN,DIO_u8_HIGH);
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	66 e0       	ldi	r22, 0x06	; 6
    311c:	41 e0       	ldi	r20, 0x01	; 1
    311e:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CCW_PIN,DIO_u8_HIGH);
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	67 e0       	ldi	r22, 0x07	; 7
    3126:	41 e0       	ldi	r20, 0x01	; 1
    3128:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    312c:	81 e0       	ldi	r24, 0x01	; 1
}
    312e:	cf 91       	pop	r28
    3130:	df 91       	pop	r29
    3132:	08 95       	ret

00003134 <DCM_u8_H_ROTATE_STOP>:

u8 DCM_u8_H_ROTATE_STOP()
{
    3134:	df 93       	push	r29
    3136:	cf 93       	push	r28
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CW_PIN,DIO_u8_LOW);
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	64 e0       	ldi	r22, 0x04	; 4
    3140:	40 e0       	ldi	r20, 0x00	; 0
    3142:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CW_PIN,DIO_u8_LOW);
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	65 e0       	ldi	r22, 0x05	; 5
    314a:	40 e0       	ldi	r20, 0x00	; 0
    314c:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR1_CCW_PIN,DIO_u8_LOW);
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	66 e0       	ldi	r22, 0x06	; 6
    3154:	40 e0       	ldi	r20, 0x00	; 0
    3156:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_H_PORT,MOTOR_TR2_CCW_PIN,DIO_u8_LOW);
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	67 e0       	ldi	r22, 0x07	; 7
    315e:	40 e0       	ldi	r20, 0x00	; 0
    3160:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPinValue>

	return STD_TYPES_OK;
    3164:	81 e0       	ldi	r24, 0x01	; 1
}
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	08 95       	ret

0000316c <Get_User_Option>:

u8 globalState = 0;

//TAKE OPTION FROM USER
void Get_User_Option(u8 *number)
{
    316c:	df 93       	push	r29
    316e:	cf 93       	push	r28
    3170:	00 d0       	rcall	.+0      	; 0x3172 <Get_User_Option+0x6>
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
    3176:	9a 83       	std	Y+2, r25	; 0x02
    3178:	89 83       	std	Y+1, r24	; 0x01
	while(505){
		KPD_u8GetKeyState(number);
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	9a 81       	ldd	r25, Y+2	; 0x02
    317e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <KPD_u8GetKeyState>
		if(*number == '1' || *number == '2' || *number == '3'){
    3182:	e9 81       	ldd	r30, Y+1	; 0x01
    3184:	fa 81       	ldd	r31, Y+2	; 0x02
    3186:	80 81       	ld	r24, Z
    3188:	81 33       	cpi	r24, 0x31	; 49
    318a:	51 f0       	breq	.+20     	; 0x31a0 <Get_User_Option+0x34>
    318c:	e9 81       	ldd	r30, Y+1	; 0x01
    318e:	fa 81       	ldd	r31, Y+2	; 0x02
    3190:	80 81       	ld	r24, Z
    3192:	82 33       	cpi	r24, 0x32	; 50
    3194:	29 f0       	breq	.+10     	; 0x31a0 <Get_User_Option+0x34>
    3196:	e9 81       	ldd	r30, Y+1	; 0x01
    3198:	fa 81       	ldd	r31, Y+2	; 0x02
    319a:	80 81       	ld	r24, Z
    319c:	83 33       	cpi	r24, 0x33	; 51
    319e:	69 f7       	brne	.-38     	; 0x317a <Get_User_Option+0xe>
			break;
		}
	}
}
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	cf 91       	pop	r28
    31a6:	df 91       	pop	r29
    31a8:	08 95       	ret

000031aa <System_ON>:

void System_ON(void){
    31aa:	df 93       	push	r29
    31ac:	cf 93       	push	r28
    31ae:	0f 92       	push	r0
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
		u8 INT_State = 1;
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8GetPinValue(DIO_u8_PORTD,DIO_u8_PIN2,&INT_State);
    31b8:	83 e0       	ldi	r24, 0x03	; 3
    31ba:	62 e0       	ldi	r22, 0x02	; 2
    31bc:	9e 01       	movw	r18, r28
    31be:	2f 5f       	subi	r18, 0xFF	; 255
    31c0:	3f 4f       	sbci	r19, 0xFF	; 255
    31c2:	a9 01       	movw	r20, r18
    31c4:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_u8GetPinValue>
		if(INT_State == DIO_u8_LOW){
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	88 23       	and	r24, r24
    31cc:	19 f4       	brne	.+6      	; 0x31d4 <System_ON+0x2a>
			globalState = 1;
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	80 93 3c 01 	sts	0x013C, r24
		}
}
    31d4:	0f 90       	pop	r0
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <main>:


u8 main(void)
{
    31dc:	0f 93       	push	r16
    31de:	1f 93       	push	r17
    31e0:	df 93       	push	r29
    31e2:	cf 93       	push	r28
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    31e8:	cc 5d       	subi	r28, 0xDC	; 220
    31ea:	d0 40       	sbci	r29, 0x00	; 0
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	de bf       	out	0x3e, r29	; 62
    31f2:	0f be       	out	0x3f, r0	; 63
    31f4:	cd bf       	out	0x3d, r28	; 61
	//CLEAR SCREEEN
	LCD_voidSendCmnd(0x01);
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    31fc:	fe 01       	movw	r30, r28
    31fe:	e1 53       	subi	r30, 0x31	; 49
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a0 e0       	ldi	r26, 0x00	; 0
    3208:	b0 e4       	ldi	r27, 0x40	; 64
    320a:	80 83       	st	Z, r24
    320c:	91 83       	std	Z+1, r25	; 0x01
    320e:	a2 83       	std	Z+2, r26	; 0x02
    3210:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3212:	8e 01       	movw	r16, r28
    3214:	05 53       	subi	r16, 0x35	; 53
    3216:	1f 4f       	sbci	r17, 0xFF	; 255
    3218:	fe 01       	movw	r30, r28
    321a:	e1 53       	subi	r30, 0x31	; 49
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	60 81       	ld	r22, Z
    3220:	71 81       	ldd	r23, Z+1	; 0x01
    3222:	82 81       	ldd	r24, Z+2	; 0x02
    3224:	93 81       	ldd	r25, Z+3	; 0x03
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	4a ef       	ldi	r20, 0xFA	; 250
    322c:	54 e4       	ldi	r21, 0x44	; 68
    322e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	f8 01       	movw	r30, r16
    3238:	80 83       	st	Z, r24
    323a:	91 83       	std	Z+1, r25	; 0x01
    323c:	a2 83       	std	Z+2, r26	; 0x02
    323e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3240:	fe 01       	movw	r30, r28
    3242:	e5 53       	subi	r30, 0x35	; 53
    3244:	ff 4f       	sbci	r31, 0xFF	; 255
    3246:	60 81       	ld	r22, Z
    3248:	71 81       	ldd	r23, Z+1	; 0x01
    324a:	82 81       	ldd	r24, Z+2	; 0x02
    324c:	93 81       	ldd	r25, Z+3	; 0x03
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	40 e8       	ldi	r20, 0x80	; 128
    3254:	5f e3       	ldi	r21, 0x3F	; 63
    3256:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    325a:	88 23       	and	r24, r24
    325c:	44 f4       	brge	.+16     	; 0x326e <main+0x92>
		__ticks = 1;
    325e:	fe 01       	movw	r30, r28
    3260:	e7 53       	subi	r30, 0x37	; 55
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	91 83       	std	Z+1, r25	; 0x01
    326a:	80 83       	st	Z, r24
    326c:	64 c0       	rjmp	.+200    	; 0x3336 <main+0x15a>
	else if (__tmp > 65535)
    326e:	fe 01       	movw	r30, r28
    3270:	e5 53       	subi	r30, 0x35	; 53
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	60 81       	ld	r22, Z
    3276:	71 81       	ldd	r23, Z+1	; 0x01
    3278:	82 81       	ldd	r24, Z+2	; 0x02
    327a:	93 81       	ldd	r25, Z+3	; 0x03
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	3f ef       	ldi	r19, 0xFF	; 255
    3280:	4f e7       	ldi	r20, 0x7F	; 127
    3282:	57 e4       	ldi	r21, 0x47	; 71
    3284:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3288:	18 16       	cp	r1, r24
    328a:	0c f0       	brlt	.+2      	; 0x328e <main+0xb2>
    328c:	43 c0       	rjmp	.+134    	; 0x3314 <main+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328e:	fe 01       	movw	r30, r28
    3290:	e1 53       	subi	r30, 0x31	; 49
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	60 81       	ld	r22, Z
    3296:	71 81       	ldd	r23, Z+1	; 0x01
    3298:	82 81       	ldd	r24, Z+2	; 0x02
    329a:	93 81       	ldd	r25, Z+3	; 0x03
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	40 e2       	ldi	r20, 0x20	; 32
    32a2:	51 e4       	ldi	r21, 0x41	; 65
    32a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	8e 01       	movw	r16, r28
    32ae:	07 53       	subi	r16, 0x37	; 55
    32b0:	1f 4f       	sbci	r17, 0xFF	; 255
    32b2:	bc 01       	movw	r22, r24
    32b4:	cd 01       	movw	r24, r26
    32b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	f8 01       	movw	r30, r16
    32c0:	91 83       	std	Z+1, r25	; 0x01
    32c2:	80 83       	st	Z, r24
    32c4:	1f c0       	rjmp	.+62     	; 0x3304 <main+0x128>
    32c6:	fe 01       	movw	r30, r28
    32c8:	e9 53       	subi	r30, 0x39	; 57
    32ca:	ff 4f       	sbci	r31, 0xFF	; 255
    32cc:	88 ec       	ldi	r24, 0xC8	; 200
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	91 83       	std	Z+1, r25	; 0x01
    32d2:	80 83       	st	Z, r24
    32d4:	fe 01       	movw	r30, r28
    32d6:	e9 53       	subi	r30, 0x39	; 57
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	80 81       	ld	r24, Z
    32dc:	91 81       	ldd	r25, Z+1	; 0x01
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <main+0x102>
    32e2:	fe 01       	movw	r30, r28
    32e4:	e9 53       	subi	r30, 0x39	; 57
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	91 83       	std	Z+1, r25	; 0x01
    32ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ec:	de 01       	movw	r26, r28
    32ee:	a7 53       	subi	r26, 0x37	; 55
    32f0:	bf 4f       	sbci	r27, 0xFF	; 255
    32f2:	fe 01       	movw	r30, r28
    32f4:	e7 53       	subi	r30, 0x37	; 55
    32f6:	ff 4f       	sbci	r31, 0xFF	; 255
    32f8:	80 81       	ld	r24, Z
    32fa:	91 81       	ldd	r25, Z+1	; 0x01
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	11 96       	adiw	r26, 0x01	; 1
    3300:	9c 93       	st	X, r25
    3302:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3304:	fe 01       	movw	r30, r28
    3306:	e7 53       	subi	r30, 0x37	; 55
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	80 81       	ld	r24, Z
    330c:	91 81       	ldd	r25, Z+1	; 0x01
    330e:	00 97       	sbiw	r24, 0x00	; 0
    3310:	d1 f6       	brne	.-76     	; 0x32c6 <main+0xea>
    3312:	27 c0       	rjmp	.+78     	; 0x3362 <main+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3314:	8e 01       	movw	r16, r28
    3316:	07 53       	subi	r16, 0x37	; 55
    3318:	1f 4f       	sbci	r17, 0xFF	; 255
    331a:	fe 01       	movw	r30, r28
    331c:	e5 53       	subi	r30, 0x35	; 53
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	60 81       	ld	r22, Z
    3322:	71 81       	ldd	r23, Z+1	; 0x01
    3324:	82 81       	ldd	r24, Z+2	; 0x02
    3326:	93 81       	ldd	r25, Z+3	; 0x03
    3328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332c:	dc 01       	movw	r26, r24
    332e:	cb 01       	movw	r24, r22
    3330:	f8 01       	movw	r30, r16
    3332:	91 83       	std	Z+1, r25	; 0x01
    3334:	80 83       	st	Z, r24
    3336:	de 01       	movw	r26, r28
    3338:	ab 53       	subi	r26, 0x3B	; 59
    333a:	bf 4f       	sbci	r27, 0xFF	; 255
    333c:	fe 01       	movw	r30, r28
    333e:	e7 53       	subi	r30, 0x37	; 55
    3340:	ff 4f       	sbci	r31, 0xFF	; 255
    3342:	80 81       	ld	r24, Z
    3344:	91 81       	ldd	r25, Z+1	; 0x01
    3346:	8d 93       	st	X+, r24
    3348:	9c 93       	st	X, r25
    334a:	fe 01       	movw	r30, r28
    334c:	eb 53       	subi	r30, 0x3B	; 59
    334e:	ff 4f       	sbci	r31, 0xFF	; 255
    3350:	80 81       	ld	r24, Z
    3352:	91 81       	ldd	r25, Z+1	; 0x01
    3354:	01 97       	sbiw	r24, 0x01	; 1
    3356:	f1 f7       	brne	.-4      	; 0x3354 <main+0x178>
    3358:	fe 01       	movw	r30, r28
    335a:	eb 53       	subi	r30, 0x3B	; 59
    335c:	ff 4f       	sbci	r31, 0xFF	; 255
    335e:	91 83       	std	Z+1, r25	; 0x01
    3360:	80 83       	st	Z, r24
	_delay_ms(2);

	u8 password_is = 0;
    3362:	fe 01       	movw	r30, r28
    3364:	e9 52       	subi	r30, 0x29	; 41
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	10 82       	st	Z, r1
	u8 counter = 0;
    336a:	fe 01       	movw	r30, r28
    336c:	ea 52       	subi	r30, 0x2A	; 42
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	10 82       	st	Z, r1
	u8 index = 0;
    3372:	fe 01       	movw	r30, r28
    3374:	eb 52       	subi	r30, 0x2B	; 43
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	10 82       	st	Z, r1
	u8 Local_u8key;
	u8 pressed_keys[pass_L];
	u8 number;

	// initialization of DIO
	DIO_voidInit();
    337a:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidInit>
	// initialization of LCD
	LCD_voidInit();
    337e:	0e 94 28 12 	call	0x2450	; 0x2450 <LCD_voidInit>
	//initialization of Global Interrupt
	GI_voidGlobalEnable();
    3382:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GI_voidGlobalEnable>
	//Set CallBack Function
	EXTI_u8EXTISetCallBack(EXTI_u8_INT0,&System_ON);
    3386:	25 ed       	ldi	r18, 0xD5	; 213
    3388:	38 e1       	ldi	r19, 0x18	; 24
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	b9 01       	movw	r22, r18
    338e:	0e 94 fa 07 	call	0xff4	; 0xff4 <EXTI_u8EXTISetCallBack>
	//Initialization of EXTI
	EXTI_u8Enable(EXTI_u8_INT0,EXTI_u8_ANY_LOGICAL_CHANGE);
    3392:	80 e0       	ldi	r24, 0x00	; 0
    3394:	62 e0       	ldi	r22, 0x02	; 2
    3396:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <EXTI_u8Enable>

	LCD_SendString("PRESS THE BUTTON");
    339a:	80 e6       	ldi	r24, 0x60	; 96
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>
	LCD_u8GoToXY(LCD_u8_LINE2,0);
    33a2:	82 e0       	ldi	r24, 0x02	; 2
    33a4:	60 e0       	ldi	r22, 0x00	; 0
    33a6:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_u8GoToXY>
	LCD_SendString("TO START");
    33aa:	81 e7       	ldi	r24, 0x71	; 113
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>

	while(1){
		if(globalState == 1){
    33b2:	80 91 3c 01 	lds	r24, 0x013C
    33b6:	81 30       	cpi	r24, 0x01	; 1
    33b8:	e1 f7       	brne	.-8      	; 0x33b2 <main+0x1d6>
		}
	}


	//CLEAR SCREEEN
	LCD_voidSendCmnd(0x01);
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    33c0:	fe 01       	movw	r30, r28
    33c2:	ef 53       	subi	r30, 0x3F	; 63
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	a0 e0       	ldi	r26, 0x00	; 0
    33cc:	b0 e4       	ldi	r27, 0x40	; 64
    33ce:	80 83       	st	Z, r24
    33d0:	91 83       	std	Z+1, r25	; 0x01
    33d2:	a2 83       	std	Z+2, r26	; 0x02
    33d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d6:	8e 01       	movw	r16, r28
    33d8:	03 54       	subi	r16, 0x43	; 67
    33da:	1f 4f       	sbci	r17, 0xFF	; 255
    33dc:	fe 01       	movw	r30, r28
    33de:	ef 53       	subi	r30, 0x3F	; 63
    33e0:	ff 4f       	sbci	r31, 0xFF	; 255
    33e2:	60 81       	ld	r22, Z
    33e4:	71 81       	ldd	r23, Z+1	; 0x01
    33e6:	82 81       	ldd	r24, Z+2	; 0x02
    33e8:	93 81       	ldd	r25, Z+3	; 0x03
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	4a ef       	ldi	r20, 0xFA	; 250
    33f0:	54 e4       	ldi	r21, 0x44	; 68
    33f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	f8 01       	movw	r30, r16
    33fc:	80 83       	st	Z, r24
    33fe:	91 83       	std	Z+1, r25	; 0x01
    3400:	a2 83       	std	Z+2, r26	; 0x02
    3402:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3404:	fe 01       	movw	r30, r28
    3406:	e3 54       	subi	r30, 0x43	; 67
    3408:	ff 4f       	sbci	r31, 0xFF	; 255
    340a:	60 81       	ld	r22, Z
    340c:	71 81       	ldd	r23, Z+1	; 0x01
    340e:	82 81       	ldd	r24, Z+2	; 0x02
    3410:	93 81       	ldd	r25, Z+3	; 0x03
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	40 e8       	ldi	r20, 0x80	; 128
    3418:	5f e3       	ldi	r21, 0x3F	; 63
    341a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    341e:	88 23       	and	r24, r24
    3420:	44 f4       	brge	.+16     	; 0x3432 <main+0x256>
		__ticks = 1;
    3422:	fe 01       	movw	r30, r28
    3424:	e5 54       	subi	r30, 0x45	; 69
    3426:	ff 4f       	sbci	r31, 0xFF	; 255
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	91 83       	std	Z+1, r25	; 0x01
    342e:	80 83       	st	Z, r24
    3430:	64 c0       	rjmp	.+200    	; 0x34fa <main+0x31e>
	else if (__tmp > 65535)
    3432:	fe 01       	movw	r30, r28
    3434:	e3 54       	subi	r30, 0x43	; 67
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	60 81       	ld	r22, Z
    343a:	71 81       	ldd	r23, Z+1	; 0x01
    343c:	82 81       	ldd	r24, Z+2	; 0x02
    343e:	93 81       	ldd	r25, Z+3	; 0x03
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	3f ef       	ldi	r19, 0xFF	; 255
    3444:	4f e7       	ldi	r20, 0x7F	; 127
    3446:	57 e4       	ldi	r21, 0x47	; 71
    3448:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    344c:	18 16       	cp	r1, r24
    344e:	0c f0       	brlt	.+2      	; 0x3452 <main+0x276>
    3450:	43 c0       	rjmp	.+134    	; 0x34d8 <main+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3452:	fe 01       	movw	r30, r28
    3454:	ef 53       	subi	r30, 0x3F	; 63
    3456:	ff 4f       	sbci	r31, 0xFF	; 255
    3458:	60 81       	ld	r22, Z
    345a:	71 81       	ldd	r23, Z+1	; 0x01
    345c:	82 81       	ldd	r24, Z+2	; 0x02
    345e:	93 81       	ldd	r25, Z+3	; 0x03
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	40 e2       	ldi	r20, 0x20	; 32
    3466:	51 e4       	ldi	r21, 0x41	; 65
    3468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	8e 01       	movw	r16, r28
    3472:	05 54       	subi	r16, 0x45	; 69
    3474:	1f 4f       	sbci	r17, 0xFF	; 255
    3476:	bc 01       	movw	r22, r24
    3478:	cd 01       	movw	r24, r26
    347a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	f8 01       	movw	r30, r16
    3484:	91 83       	std	Z+1, r25	; 0x01
    3486:	80 83       	st	Z, r24
    3488:	1f c0       	rjmp	.+62     	; 0x34c8 <main+0x2ec>
    348a:	fe 01       	movw	r30, r28
    348c:	e7 54       	subi	r30, 0x47	; 71
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	88 ec       	ldi	r24, 0xC8	; 200
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	91 83       	std	Z+1, r25	; 0x01
    3496:	80 83       	st	Z, r24
    3498:	fe 01       	movw	r30, r28
    349a:	e7 54       	subi	r30, 0x47	; 71
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	80 81       	ld	r24, Z
    34a0:	91 81       	ldd	r25, Z+1	; 0x01
    34a2:	01 97       	sbiw	r24, 0x01	; 1
    34a4:	f1 f7       	brne	.-4      	; 0x34a2 <main+0x2c6>
    34a6:	fe 01       	movw	r30, r28
    34a8:	e7 54       	subi	r30, 0x47	; 71
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	91 83       	std	Z+1, r25	; 0x01
    34ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b0:	de 01       	movw	r26, r28
    34b2:	a5 54       	subi	r26, 0x45	; 69
    34b4:	bf 4f       	sbci	r27, 0xFF	; 255
    34b6:	fe 01       	movw	r30, r28
    34b8:	e5 54       	subi	r30, 0x45	; 69
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	80 81       	ld	r24, Z
    34be:	91 81       	ldd	r25, Z+1	; 0x01
    34c0:	01 97       	sbiw	r24, 0x01	; 1
    34c2:	11 96       	adiw	r26, 0x01	; 1
    34c4:	9c 93       	st	X, r25
    34c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c8:	fe 01       	movw	r30, r28
    34ca:	e5 54       	subi	r30, 0x45	; 69
    34cc:	ff 4f       	sbci	r31, 0xFF	; 255
    34ce:	80 81       	ld	r24, Z
    34d0:	91 81       	ldd	r25, Z+1	; 0x01
    34d2:	00 97       	sbiw	r24, 0x00	; 0
    34d4:	d1 f6       	brne	.-76     	; 0x348a <main+0x2ae>
    34d6:	27 c0       	rjmp	.+78     	; 0x3526 <main+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d8:	8e 01       	movw	r16, r28
    34da:	05 54       	subi	r16, 0x45	; 69
    34dc:	1f 4f       	sbci	r17, 0xFF	; 255
    34de:	fe 01       	movw	r30, r28
    34e0:	e3 54       	subi	r30, 0x43	; 67
    34e2:	ff 4f       	sbci	r31, 0xFF	; 255
    34e4:	60 81       	ld	r22, Z
    34e6:	71 81       	ldd	r23, Z+1	; 0x01
    34e8:	82 81       	ldd	r24, Z+2	; 0x02
    34ea:	93 81       	ldd	r25, Z+3	; 0x03
    34ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	f8 01       	movw	r30, r16
    34f6:	91 83       	std	Z+1, r25	; 0x01
    34f8:	80 83       	st	Z, r24
    34fa:	de 01       	movw	r26, r28
    34fc:	a9 54       	subi	r26, 0x49	; 73
    34fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3500:	fe 01       	movw	r30, r28
    3502:	e5 54       	subi	r30, 0x45	; 69
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	80 81       	ld	r24, Z
    3508:	91 81       	ldd	r25, Z+1	; 0x01
    350a:	8d 93       	st	X+, r24
    350c:	9c 93       	st	X, r25
    350e:	fe 01       	movw	r30, r28
    3510:	e9 54       	subi	r30, 0x49	; 73
    3512:	ff 4f       	sbci	r31, 0xFF	; 255
    3514:	80 81       	ld	r24, Z
    3516:	91 81       	ldd	r25, Z+1	; 0x01
    3518:	01 97       	sbiw	r24, 0x01	; 1
    351a:	f1 f7       	brne	.-4      	; 0x3518 <main+0x33c>
    351c:	fe 01       	movw	r30, r28
    351e:	e9 54       	subi	r30, 0x49	; 73
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	91 83       	std	Z+1, r25	; 0x01
    3524:	80 83       	st	Z, r24
	_delay_ms(2);
	LCD_u8GoToXY(LCD_u8_LINE1,0);
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	60 e0       	ldi	r22, 0x00	; 0
    352a:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_u8GoToXY>
	LCD_SendString("ENTER YOUR PASS");
    352e:	8a e7       	ldi	r24, 0x7A	; 122
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>
	LCD_u8GoToXY(LCD_u8_LINE2,0);
    3536:	82 e0       	ldi	r24, 0x02	; 2
    3538:	60 e0       	ldi	r22, 0x00	; 0
    353a:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_u8GoToXY>


	while(505)
	{
		KPD_u8GetKeyState(&Local_u8key);
    353e:	ce 01       	movw	r24, r28
    3540:	88 52       	subi	r24, 0x28	; 40
    3542:	9f 4f       	sbci	r25, 0xFF	; 255
    3544:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <KPD_u8GetKeyState>
		if(Local_u8key != NO_KEY_PRESSED)
    3548:	fe 01       	movw	r30, r28
    354a:	e8 52       	subi	r30, 0x28	; 40
    354c:	ff 4f       	sbci	r31, 0xFF	; 255
    354e:	80 81       	ld	r24, Z
    3550:	8f 3f       	cpi	r24, 0xFF	; 255
    3552:	31 f1       	breq	.+76     	; 0x35a0 <main+0x3c4>
		{
			LCD_voidSendChar('*');
    3554:	8a e2       	ldi	r24, 0x2A	; 42
    3556:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_voidSendChar>
			counter++;
    355a:	de 01       	movw	r26, r28
    355c:	aa 52       	subi	r26, 0x2A	; 42
    355e:	bf 4f       	sbci	r27, 0xFF	; 255
    3560:	fe 01       	movw	r30, r28
    3562:	ea 52       	subi	r30, 0x2A	; 42
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	80 81       	ld	r24, Z
    3568:	8f 5f       	subi	r24, 0xFF	; 255
    356a:	8c 93       	st	X, r24
			pressed_keys[index] = Local_u8key;
    356c:	fe 01       	movw	r30, r28
    356e:	eb 52       	subi	r30, 0x2B	; 43
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	80 81       	ld	r24, Z
    3574:	28 2f       	mov	r18, r24
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	fe 01       	movw	r30, r28
    357a:	e8 52       	subi	r30, 0x28	; 40
    357c:	ff 4f       	sbci	r31, 0xFF	; 255
    357e:	40 81       	ld	r20, Z
    3580:	ce 01       	movw	r24, r28
    3582:	87 52       	subi	r24, 0x27	; 39
    3584:	9f 4f       	sbci	r25, 0xFF	; 255
    3586:	fc 01       	movw	r30, r24
    3588:	e2 0f       	add	r30, r18
    358a:	f3 1f       	adc	r31, r19
    358c:	40 83       	st	Z, r20
			index++;
    358e:	de 01       	movw	r26, r28
    3590:	ab 52       	subi	r26, 0x2B	; 43
    3592:	bf 4f       	sbci	r27, 0xFF	; 255
    3594:	fe 01       	movw	r30, r28
    3596:	eb 52       	subi	r30, 0x2B	; 43
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	80 81       	ld	r24, Z
    359c:	8f 5f       	subi	r24, 0xFF	; 255
    359e:	8c 93       	st	X, r24
		}
		if(counter == pass_L)
    35a0:	fe 01       	movw	r30, r28
    35a2:	ea 52       	subi	r30, 0x2A	; 42
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	80 81       	ld	r24, Z
    35a8:	83 30       	cpi	r24, 0x03	; 3
    35aa:	49 f6       	brne	.-110    	; 0x353e <main+0x362>
		{
			for(int x = 0 ; x < pass_L ; x++ ){
    35ac:	fe 01       	movw	r30, r28
    35ae:	ed 52       	subi	r30, 0x2D	; 45
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	11 82       	std	Z+1, r1	; 0x01
    35b4:	10 82       	st	Z, r1
    35b6:	29 c0       	rjmp	.+82     	; 0x360a <main+0x42e>
				if(pass[x] != pressed_keys[x])
    35b8:	fe 01       	movw	r30, r28
    35ba:	ed 52       	subi	r30, 0x2D	; 45
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	80 81       	ld	r24, Z
    35c0:	91 81       	ldd	r25, Z+1	; 0x01
    35c2:	fc 01       	movw	r30, r24
    35c4:	ef 5e       	subi	r30, 0xEF	; 239
    35c6:	fe 4f       	sbci	r31, 0xFE	; 254
    35c8:	40 81       	ld	r20, Z
    35ca:	fe 01       	movw	r30, r28
    35cc:	ed 52       	subi	r30, 0x2D	; 45
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	20 81       	ld	r18, Z
    35d2:	31 81       	ldd	r19, Z+1	; 0x01
    35d4:	ce 01       	movw	r24, r28
    35d6:	87 52       	subi	r24, 0x27	; 39
    35d8:	9f 4f       	sbci	r25, 0xFF	; 255
    35da:	fc 01       	movw	r30, r24
    35dc:	e2 0f       	add	r30, r18
    35de:	f3 1f       	adc	r31, r19
    35e0:	80 81       	ld	r24, Z
    35e2:	48 17       	cp	r20, r24
    35e4:	31 f0       	breq	.+12     	; 0x35f2 <main+0x416>
				{
					password_is = WRONG;
    35e6:	fe 01       	movw	r30, r28
    35e8:	e9 52       	subi	r30, 0x29	; 41
    35ea:	ff 4f       	sbci	r31, 0xFF	; 255
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	80 83       	st	Z, r24
    35f0:	14 c0       	rjmp	.+40     	; 0x361a <main+0x43e>
			pressed_keys[index] = Local_u8key;
			index++;
		}
		if(counter == pass_L)
		{
			for(int x = 0 ; x < pass_L ; x++ ){
    35f2:	de 01       	movw	r26, r28
    35f4:	ad 52       	subi	r26, 0x2D	; 45
    35f6:	bf 4f       	sbci	r27, 0xFF	; 255
    35f8:	fe 01       	movw	r30, r28
    35fa:	ed 52       	subi	r30, 0x2D	; 45
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	80 81       	ld	r24, Z
    3600:	91 81       	ldd	r25, Z+1	; 0x01
    3602:	01 96       	adiw	r24, 0x01	; 1
    3604:	11 96       	adiw	r26, 0x01	; 1
    3606:	9c 93       	st	X, r25
    3608:	8e 93       	st	-X, r24
    360a:	fe 01       	movw	r30, r28
    360c:	ed 52       	subi	r30, 0x2D	; 45
    360e:	ff 4f       	sbci	r31, 0xFF	; 255
    3610:	80 81       	ld	r24, Z
    3612:	91 81       	ldd	r25, Z+1	; 0x01
    3614:	83 30       	cpi	r24, 0x03	; 3
    3616:	91 05       	cpc	r25, r1
    3618:	7c f2       	brlt	.-98     	; 0x35b8 <main+0x3dc>
				{
					password_is = WRONG;
					break;
				}
			}
			if(password_is) // WRONG
    361a:	fe 01       	movw	r30, r28
    361c:	e9 52       	subi	r30, 0x29	; 41
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	80 81       	ld	r24, Z
    3622:	88 23       	and	r24, r24
    3624:	09 f4       	brne	.+2      	; 0x3628 <main+0x44c>
    3626:	48 c2       	rjmp	.+1168   	; 0x3ab8 <main+0x8dc>
			{
				index =0;
    3628:	fe 01       	movw	r30, r28
    362a:	eb 52       	subi	r30, 0x2B	; 43
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	10 82       	st	Z, r1
				counter=0;
    3630:	fe 01       	movw	r30, r28
    3632:	ea 52       	subi	r30, 0x2A	; 42
    3634:	ff 4f       	sbci	r31, 0xFF	; 255
    3636:	10 82       	st	Z, r1
				password_is =0;
    3638:	fe 01       	movw	r30, r28
    363a:	e9 52       	subi	r30, 0x29	; 41
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	10 82       	st	Z, r1
				// CLEAR SCREEEN
				LCD_voidSendCmnd(0x01);
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    3646:	fe 01       	movw	r30, r28
    3648:	ed 54       	subi	r30, 0x4D	; 77
    364a:	ff 4f       	sbci	r31, 0xFF	; 255
    364c:	80 e0       	ldi	r24, 0x00	; 0
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	a0 e0       	ldi	r26, 0x00	; 0
    3652:	b0 e4       	ldi	r27, 0x40	; 64
    3654:	80 83       	st	Z, r24
    3656:	91 83       	std	Z+1, r25	; 0x01
    3658:	a2 83       	std	Z+2, r26	; 0x02
    365a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    365c:	8e 01       	movw	r16, r28
    365e:	01 55       	subi	r16, 0x51	; 81
    3660:	1f 4f       	sbci	r17, 0xFF	; 255
    3662:	fe 01       	movw	r30, r28
    3664:	ed 54       	subi	r30, 0x4D	; 77
    3666:	ff 4f       	sbci	r31, 0xFF	; 255
    3668:	60 81       	ld	r22, Z
    366a:	71 81       	ldd	r23, Z+1	; 0x01
    366c:	82 81       	ldd	r24, Z+2	; 0x02
    366e:	93 81       	ldd	r25, Z+3	; 0x03
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	4a ef       	ldi	r20, 0xFA	; 250
    3676:	54 e4       	ldi	r21, 0x44	; 68
    3678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	f8 01       	movw	r30, r16
    3682:	80 83       	st	Z, r24
    3684:	91 83       	std	Z+1, r25	; 0x01
    3686:	a2 83       	std	Z+2, r26	; 0x02
    3688:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    368a:	fe 01       	movw	r30, r28
    368c:	e1 55       	subi	r30, 0x51	; 81
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	60 81       	ld	r22, Z
    3692:	71 81       	ldd	r23, Z+1	; 0x01
    3694:	82 81       	ldd	r24, Z+2	; 0x02
    3696:	93 81       	ldd	r25, Z+3	; 0x03
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	40 e8       	ldi	r20, 0x80	; 128
    369e:	5f e3       	ldi	r21, 0x3F	; 63
    36a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36a4:	88 23       	and	r24, r24
    36a6:	44 f4       	brge	.+16     	; 0x36b8 <main+0x4dc>
		__ticks = 1;
    36a8:	fe 01       	movw	r30, r28
    36aa:	e3 55       	subi	r30, 0x53	; 83
    36ac:	ff 4f       	sbci	r31, 0xFF	; 255
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	91 83       	std	Z+1, r25	; 0x01
    36b4:	80 83       	st	Z, r24
    36b6:	64 c0       	rjmp	.+200    	; 0x3780 <main+0x5a4>
	else if (__tmp > 65535)
    36b8:	fe 01       	movw	r30, r28
    36ba:	e1 55       	subi	r30, 0x51	; 81
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	60 81       	ld	r22, Z
    36c0:	71 81       	ldd	r23, Z+1	; 0x01
    36c2:	82 81       	ldd	r24, Z+2	; 0x02
    36c4:	93 81       	ldd	r25, Z+3	; 0x03
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	3f ef       	ldi	r19, 0xFF	; 255
    36ca:	4f e7       	ldi	r20, 0x7F	; 127
    36cc:	57 e4       	ldi	r21, 0x47	; 71
    36ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36d2:	18 16       	cp	r1, r24
    36d4:	0c f0       	brlt	.+2      	; 0x36d8 <main+0x4fc>
    36d6:	43 c0       	rjmp	.+134    	; 0x375e <main+0x582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d8:	fe 01       	movw	r30, r28
    36da:	ed 54       	subi	r30, 0x4D	; 77
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	60 81       	ld	r22, Z
    36e0:	71 81       	ldd	r23, Z+1	; 0x01
    36e2:	82 81       	ldd	r24, Z+2	; 0x02
    36e4:	93 81       	ldd	r25, Z+3	; 0x03
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	40 e2       	ldi	r20, 0x20	; 32
    36ec:	51 e4       	ldi	r21, 0x41	; 65
    36ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	8e 01       	movw	r16, r28
    36f8:	03 55       	subi	r16, 0x53	; 83
    36fa:	1f 4f       	sbci	r17, 0xFF	; 255
    36fc:	bc 01       	movw	r22, r24
    36fe:	cd 01       	movw	r24, r26
    3700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	f8 01       	movw	r30, r16
    370a:	91 83       	std	Z+1, r25	; 0x01
    370c:	80 83       	st	Z, r24
    370e:	1f c0       	rjmp	.+62     	; 0x374e <main+0x572>
    3710:	fe 01       	movw	r30, r28
    3712:	e5 55       	subi	r30, 0x55	; 85
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	88 ec       	ldi	r24, 0xC8	; 200
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	91 83       	std	Z+1, r25	; 0x01
    371c:	80 83       	st	Z, r24
    371e:	fe 01       	movw	r30, r28
    3720:	e5 55       	subi	r30, 0x55	; 85
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	80 81       	ld	r24, Z
    3726:	91 81       	ldd	r25, Z+1	; 0x01
    3728:	01 97       	sbiw	r24, 0x01	; 1
    372a:	f1 f7       	brne	.-4      	; 0x3728 <main+0x54c>
    372c:	fe 01       	movw	r30, r28
    372e:	e5 55       	subi	r30, 0x55	; 85
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	91 83       	std	Z+1, r25	; 0x01
    3734:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3736:	de 01       	movw	r26, r28
    3738:	a3 55       	subi	r26, 0x53	; 83
    373a:	bf 4f       	sbci	r27, 0xFF	; 255
    373c:	fe 01       	movw	r30, r28
    373e:	e3 55       	subi	r30, 0x53	; 83
    3740:	ff 4f       	sbci	r31, 0xFF	; 255
    3742:	80 81       	ld	r24, Z
    3744:	91 81       	ldd	r25, Z+1	; 0x01
    3746:	01 97       	sbiw	r24, 0x01	; 1
    3748:	11 96       	adiw	r26, 0x01	; 1
    374a:	9c 93       	st	X, r25
    374c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    374e:	fe 01       	movw	r30, r28
    3750:	e3 55       	subi	r30, 0x53	; 83
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	80 81       	ld	r24, Z
    3756:	91 81       	ldd	r25, Z+1	; 0x01
    3758:	00 97       	sbiw	r24, 0x00	; 0
    375a:	d1 f6       	brne	.-76     	; 0x3710 <main+0x534>
    375c:	27 c0       	rjmp	.+78     	; 0x37ac <main+0x5d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    375e:	8e 01       	movw	r16, r28
    3760:	03 55       	subi	r16, 0x53	; 83
    3762:	1f 4f       	sbci	r17, 0xFF	; 255
    3764:	fe 01       	movw	r30, r28
    3766:	e1 55       	subi	r30, 0x51	; 81
    3768:	ff 4f       	sbci	r31, 0xFF	; 255
    376a:	60 81       	ld	r22, Z
    376c:	71 81       	ldd	r23, Z+1	; 0x01
    376e:	82 81       	ldd	r24, Z+2	; 0x02
    3770:	93 81       	ldd	r25, Z+3	; 0x03
    3772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	f8 01       	movw	r30, r16
    377c:	91 83       	std	Z+1, r25	; 0x01
    377e:	80 83       	st	Z, r24
    3780:	de 01       	movw	r26, r28
    3782:	a7 55       	subi	r26, 0x57	; 87
    3784:	bf 4f       	sbci	r27, 0xFF	; 255
    3786:	fe 01       	movw	r30, r28
    3788:	e3 55       	subi	r30, 0x53	; 83
    378a:	ff 4f       	sbci	r31, 0xFF	; 255
    378c:	80 81       	ld	r24, Z
    378e:	91 81       	ldd	r25, Z+1	; 0x01
    3790:	8d 93       	st	X+, r24
    3792:	9c 93       	st	X, r25
    3794:	fe 01       	movw	r30, r28
    3796:	e7 55       	subi	r30, 0x57	; 87
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	80 81       	ld	r24, Z
    379c:	91 81       	ldd	r25, Z+1	; 0x01
    379e:	01 97       	sbiw	r24, 0x01	; 1
    37a0:	f1 f7       	brne	.-4      	; 0x379e <main+0x5c2>
    37a2:	fe 01       	movw	r30, r28
    37a4:	e7 55       	subi	r30, 0x57	; 87
    37a6:	ff 4f       	sbci	r31, 0xFF	; 255
    37a8:	91 83       	std	Z+1, r25	; 0x01
    37aa:	80 83       	st	Z, r24
				 _delay_ms(2);
				LCD_u8GoToXY(LCD_u8_LINE1,0);
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	60 e0       	ldi	r22, 0x00	; 0
    37b0:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_u8GoToXY>
				LCD_SendString("Wrong Password");
    37b4:	8a e8       	ldi	r24, 0x8A	; 138
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>
				LCD_u8GoToXY(LCD_u8_LINE2,0);
    37bc:	82 e0       	ldi	r24, 0x02	; 2
    37be:	60 e0       	ldi	r22, 0x00	; 0
    37c0:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_u8GoToXY>
				LCD_SendString("Try Again");
    37c4:	89 e9       	ldi	r24, 0x99	; 153
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>
    37cc:	fe 01       	movw	r30, r28
    37ce:	eb 55       	subi	r30, 0x5B	; 91
    37d0:	ff 4f       	sbci	r31, 0xFF	; 255
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	90 e4       	ldi	r25, 0x40	; 64
    37d6:	ac e1       	ldi	r26, 0x1C	; 28
    37d8:	b5 e4       	ldi	r27, 0x45	; 69
    37da:	80 83       	st	Z, r24
    37dc:	91 83       	std	Z+1, r25	; 0x01
    37de:	a2 83       	std	Z+2, r26	; 0x02
    37e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e2:	8e 01       	movw	r16, r28
    37e4:	0f 55       	subi	r16, 0x5F	; 95
    37e6:	1f 4f       	sbci	r17, 0xFF	; 255
    37e8:	fe 01       	movw	r30, r28
    37ea:	eb 55       	subi	r30, 0x5B	; 91
    37ec:	ff 4f       	sbci	r31, 0xFF	; 255
    37ee:	60 81       	ld	r22, Z
    37f0:	71 81       	ldd	r23, Z+1	; 0x01
    37f2:	82 81       	ldd	r24, Z+2	; 0x02
    37f4:	93 81       	ldd	r25, Z+3	; 0x03
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	4a ef       	ldi	r20, 0xFA	; 250
    37fc:	54 e4       	ldi	r21, 0x44	; 68
    37fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3802:	dc 01       	movw	r26, r24
    3804:	cb 01       	movw	r24, r22
    3806:	f8 01       	movw	r30, r16
    3808:	80 83       	st	Z, r24
    380a:	91 83       	std	Z+1, r25	; 0x01
    380c:	a2 83       	std	Z+2, r26	; 0x02
    380e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3810:	fe 01       	movw	r30, r28
    3812:	ef 55       	subi	r30, 0x5F	; 95
    3814:	ff 4f       	sbci	r31, 0xFF	; 255
    3816:	60 81       	ld	r22, Z
    3818:	71 81       	ldd	r23, Z+1	; 0x01
    381a:	82 81       	ldd	r24, Z+2	; 0x02
    381c:	93 81       	ldd	r25, Z+3	; 0x03
    381e:	20 e0       	ldi	r18, 0x00	; 0
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	40 e8       	ldi	r20, 0x80	; 128
    3824:	5f e3       	ldi	r21, 0x3F	; 63
    3826:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    382a:	88 23       	and	r24, r24
    382c:	44 f4       	brge	.+16     	; 0x383e <main+0x662>
		__ticks = 1;
    382e:	fe 01       	movw	r30, r28
    3830:	e1 56       	subi	r30, 0x61	; 97
    3832:	ff 4f       	sbci	r31, 0xFF	; 255
    3834:	81 e0       	ldi	r24, 0x01	; 1
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	91 83       	std	Z+1, r25	; 0x01
    383a:	80 83       	st	Z, r24
    383c:	64 c0       	rjmp	.+200    	; 0x3906 <main+0x72a>
	else if (__tmp > 65535)
    383e:	fe 01       	movw	r30, r28
    3840:	ef 55       	subi	r30, 0x5F	; 95
    3842:	ff 4f       	sbci	r31, 0xFF	; 255
    3844:	60 81       	ld	r22, Z
    3846:	71 81       	ldd	r23, Z+1	; 0x01
    3848:	82 81       	ldd	r24, Z+2	; 0x02
    384a:	93 81       	ldd	r25, Z+3	; 0x03
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	3f ef       	ldi	r19, 0xFF	; 255
    3850:	4f e7       	ldi	r20, 0x7F	; 127
    3852:	57 e4       	ldi	r21, 0x47	; 71
    3854:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3858:	18 16       	cp	r1, r24
    385a:	0c f0       	brlt	.+2      	; 0x385e <main+0x682>
    385c:	43 c0       	rjmp	.+134    	; 0x38e4 <main+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    385e:	fe 01       	movw	r30, r28
    3860:	eb 55       	subi	r30, 0x5B	; 91
    3862:	ff 4f       	sbci	r31, 0xFF	; 255
    3864:	60 81       	ld	r22, Z
    3866:	71 81       	ldd	r23, Z+1	; 0x01
    3868:	82 81       	ldd	r24, Z+2	; 0x02
    386a:	93 81       	ldd	r25, Z+3	; 0x03
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	40 e2       	ldi	r20, 0x20	; 32
    3872:	51 e4       	ldi	r21, 0x41	; 65
    3874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	8e 01       	movw	r16, r28
    387e:	01 56       	subi	r16, 0x61	; 97
    3880:	1f 4f       	sbci	r17, 0xFF	; 255
    3882:	bc 01       	movw	r22, r24
    3884:	cd 01       	movw	r24, r26
    3886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388a:	dc 01       	movw	r26, r24
    388c:	cb 01       	movw	r24, r22
    388e:	f8 01       	movw	r30, r16
    3890:	91 83       	std	Z+1, r25	; 0x01
    3892:	80 83       	st	Z, r24
    3894:	1f c0       	rjmp	.+62     	; 0x38d4 <main+0x6f8>
    3896:	fe 01       	movw	r30, r28
    3898:	e3 56       	subi	r30, 0x63	; 99
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	88 ec       	ldi	r24, 0xC8	; 200
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	91 83       	std	Z+1, r25	; 0x01
    38a2:	80 83       	st	Z, r24
    38a4:	fe 01       	movw	r30, r28
    38a6:	e3 56       	subi	r30, 0x63	; 99
    38a8:	ff 4f       	sbci	r31, 0xFF	; 255
    38aa:	80 81       	ld	r24, Z
    38ac:	91 81       	ldd	r25, Z+1	; 0x01
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	f1 f7       	brne	.-4      	; 0x38ae <main+0x6d2>
    38b2:	fe 01       	movw	r30, r28
    38b4:	e3 56       	subi	r30, 0x63	; 99
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	91 83       	std	Z+1, r25	; 0x01
    38ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38bc:	de 01       	movw	r26, r28
    38be:	a1 56       	subi	r26, 0x61	; 97
    38c0:	bf 4f       	sbci	r27, 0xFF	; 255
    38c2:	fe 01       	movw	r30, r28
    38c4:	e1 56       	subi	r30, 0x61	; 97
    38c6:	ff 4f       	sbci	r31, 0xFF	; 255
    38c8:	80 81       	ld	r24, Z
    38ca:	91 81       	ldd	r25, Z+1	; 0x01
    38cc:	01 97       	sbiw	r24, 0x01	; 1
    38ce:	11 96       	adiw	r26, 0x01	; 1
    38d0:	9c 93       	st	X, r25
    38d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38d4:	fe 01       	movw	r30, r28
    38d6:	e1 56       	subi	r30, 0x61	; 97
    38d8:	ff 4f       	sbci	r31, 0xFF	; 255
    38da:	80 81       	ld	r24, Z
    38dc:	91 81       	ldd	r25, Z+1	; 0x01
    38de:	00 97       	sbiw	r24, 0x00	; 0
    38e0:	d1 f6       	brne	.-76     	; 0x3896 <main+0x6ba>
    38e2:	27 c0       	rjmp	.+78     	; 0x3932 <main+0x756>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38e4:	8e 01       	movw	r16, r28
    38e6:	01 56       	subi	r16, 0x61	; 97
    38e8:	1f 4f       	sbci	r17, 0xFF	; 255
    38ea:	fe 01       	movw	r30, r28
    38ec:	ef 55       	subi	r30, 0x5F	; 95
    38ee:	ff 4f       	sbci	r31, 0xFF	; 255
    38f0:	60 81       	ld	r22, Z
    38f2:	71 81       	ldd	r23, Z+1	; 0x01
    38f4:	82 81       	ldd	r24, Z+2	; 0x02
    38f6:	93 81       	ldd	r25, Z+3	; 0x03
    38f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fc:	dc 01       	movw	r26, r24
    38fe:	cb 01       	movw	r24, r22
    3900:	f8 01       	movw	r30, r16
    3902:	91 83       	std	Z+1, r25	; 0x01
    3904:	80 83       	st	Z, r24
    3906:	de 01       	movw	r26, r28
    3908:	a5 56       	subi	r26, 0x65	; 101
    390a:	bf 4f       	sbci	r27, 0xFF	; 255
    390c:	fe 01       	movw	r30, r28
    390e:	e1 56       	subi	r30, 0x61	; 97
    3910:	ff 4f       	sbci	r31, 0xFF	; 255
    3912:	80 81       	ld	r24, Z
    3914:	91 81       	ldd	r25, Z+1	; 0x01
    3916:	8d 93       	st	X+, r24
    3918:	9c 93       	st	X, r25
    391a:	fe 01       	movw	r30, r28
    391c:	e5 56       	subi	r30, 0x65	; 101
    391e:	ff 4f       	sbci	r31, 0xFF	; 255
    3920:	80 81       	ld	r24, Z
    3922:	91 81       	ldd	r25, Z+1	; 0x01
    3924:	01 97       	sbiw	r24, 0x01	; 1
    3926:	f1 f7       	brne	.-4      	; 0x3924 <main+0x748>
    3928:	fe 01       	movw	r30, r28
    392a:	e5 56       	subi	r30, 0x65	; 101
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	91 83       	std	Z+1, r25	; 0x01
    3930:	80 83       	st	Z, r24
				_delay_ms(2500);
				// CLEAR SCREEEN
				LCD_voidSendCmnd(0x01);
    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    3938:	fe 01       	movw	r30, r28
    393a:	e9 56       	subi	r30, 0x69	; 105
    393c:	ff 4f       	sbci	r31, 0xFF	; 255
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	a0 e0       	ldi	r26, 0x00	; 0
    3944:	b0 e4       	ldi	r27, 0x40	; 64
    3946:	80 83       	st	Z, r24
    3948:	91 83       	std	Z+1, r25	; 0x01
    394a:	a2 83       	std	Z+2, r26	; 0x02
    394c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    394e:	8e 01       	movw	r16, r28
    3950:	0d 56       	subi	r16, 0x6D	; 109
    3952:	1f 4f       	sbci	r17, 0xFF	; 255
    3954:	fe 01       	movw	r30, r28
    3956:	e9 56       	subi	r30, 0x69	; 105
    3958:	ff 4f       	sbci	r31, 0xFF	; 255
    395a:	60 81       	ld	r22, Z
    395c:	71 81       	ldd	r23, Z+1	; 0x01
    395e:	82 81       	ldd	r24, Z+2	; 0x02
    3960:	93 81       	ldd	r25, Z+3	; 0x03
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	4a ef       	ldi	r20, 0xFA	; 250
    3968:	54 e4       	ldi	r21, 0x44	; 68
    396a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396e:	dc 01       	movw	r26, r24
    3970:	cb 01       	movw	r24, r22
    3972:	f8 01       	movw	r30, r16
    3974:	80 83       	st	Z, r24
    3976:	91 83       	std	Z+1, r25	; 0x01
    3978:	a2 83       	std	Z+2, r26	; 0x02
    397a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    397c:	fe 01       	movw	r30, r28
    397e:	ed 56       	subi	r30, 0x6D	; 109
    3980:	ff 4f       	sbci	r31, 0xFF	; 255
    3982:	60 81       	ld	r22, Z
    3984:	71 81       	ldd	r23, Z+1	; 0x01
    3986:	82 81       	ldd	r24, Z+2	; 0x02
    3988:	93 81       	ldd	r25, Z+3	; 0x03
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	40 e8       	ldi	r20, 0x80	; 128
    3990:	5f e3       	ldi	r21, 0x3F	; 63
    3992:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3996:	88 23       	and	r24, r24
    3998:	44 f4       	brge	.+16     	; 0x39aa <main+0x7ce>
		__ticks = 1;
    399a:	fe 01       	movw	r30, r28
    399c:	ef 56       	subi	r30, 0x6F	; 111
    399e:	ff 4f       	sbci	r31, 0xFF	; 255
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	91 83       	std	Z+1, r25	; 0x01
    39a6:	80 83       	st	Z, r24
    39a8:	64 c0       	rjmp	.+200    	; 0x3a72 <main+0x896>
	else if (__tmp > 65535)
    39aa:	fe 01       	movw	r30, r28
    39ac:	ed 56       	subi	r30, 0x6D	; 109
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	60 81       	ld	r22, Z
    39b2:	71 81       	ldd	r23, Z+1	; 0x01
    39b4:	82 81       	ldd	r24, Z+2	; 0x02
    39b6:	93 81       	ldd	r25, Z+3	; 0x03
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	3f ef       	ldi	r19, 0xFF	; 255
    39bc:	4f e7       	ldi	r20, 0x7F	; 127
    39be:	57 e4       	ldi	r21, 0x47	; 71
    39c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39c4:	18 16       	cp	r1, r24
    39c6:	0c f0       	brlt	.+2      	; 0x39ca <main+0x7ee>
    39c8:	43 c0       	rjmp	.+134    	; 0x3a50 <main+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ca:	fe 01       	movw	r30, r28
    39cc:	e9 56       	subi	r30, 0x69	; 105
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	60 81       	ld	r22, Z
    39d2:	71 81       	ldd	r23, Z+1	; 0x01
    39d4:	82 81       	ldd	r24, Z+2	; 0x02
    39d6:	93 81       	ldd	r25, Z+3	; 0x03
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	40 e2       	ldi	r20, 0x20	; 32
    39de:	51 e4       	ldi	r21, 0x41	; 65
    39e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	8e 01       	movw	r16, r28
    39ea:	0f 56       	subi	r16, 0x6F	; 111
    39ec:	1f 4f       	sbci	r17, 0xFF	; 255
    39ee:	bc 01       	movw	r22, r24
    39f0:	cd 01       	movw	r24, r26
    39f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	f8 01       	movw	r30, r16
    39fc:	91 83       	std	Z+1, r25	; 0x01
    39fe:	80 83       	st	Z, r24
    3a00:	1f c0       	rjmp	.+62     	; 0x3a40 <main+0x864>
    3a02:	fe 01       	movw	r30, r28
    3a04:	e1 57       	subi	r30, 0x71	; 113
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	88 ec       	ldi	r24, 0xC8	; 200
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	91 83       	std	Z+1, r25	; 0x01
    3a0e:	80 83       	st	Z, r24
    3a10:	fe 01       	movw	r30, r28
    3a12:	e1 57       	subi	r30, 0x71	; 113
    3a14:	ff 4f       	sbci	r31, 0xFF	; 255
    3a16:	80 81       	ld	r24, Z
    3a18:	91 81       	ldd	r25, Z+1	; 0x01
    3a1a:	01 97       	sbiw	r24, 0x01	; 1
    3a1c:	f1 f7       	brne	.-4      	; 0x3a1a <main+0x83e>
    3a1e:	fe 01       	movw	r30, r28
    3a20:	e1 57       	subi	r30, 0x71	; 113
    3a22:	ff 4f       	sbci	r31, 0xFF	; 255
    3a24:	91 83       	std	Z+1, r25	; 0x01
    3a26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a28:	de 01       	movw	r26, r28
    3a2a:	af 56       	subi	r26, 0x6F	; 111
    3a2c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a2e:	fe 01       	movw	r30, r28
    3a30:	ef 56       	subi	r30, 0x6F	; 111
    3a32:	ff 4f       	sbci	r31, 0xFF	; 255
    3a34:	80 81       	ld	r24, Z
    3a36:	91 81       	ldd	r25, Z+1	; 0x01
    3a38:	01 97       	sbiw	r24, 0x01	; 1
    3a3a:	11 96       	adiw	r26, 0x01	; 1
    3a3c:	9c 93       	st	X, r25
    3a3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a40:	fe 01       	movw	r30, r28
    3a42:	ef 56       	subi	r30, 0x6F	; 111
    3a44:	ff 4f       	sbci	r31, 0xFF	; 255
    3a46:	80 81       	ld	r24, Z
    3a48:	91 81       	ldd	r25, Z+1	; 0x01
    3a4a:	00 97       	sbiw	r24, 0x00	; 0
    3a4c:	d1 f6       	brne	.-76     	; 0x3a02 <main+0x826>
    3a4e:	27 c0       	rjmp	.+78     	; 0x3a9e <main+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a50:	8e 01       	movw	r16, r28
    3a52:	0f 56       	subi	r16, 0x6F	; 111
    3a54:	1f 4f       	sbci	r17, 0xFF	; 255
    3a56:	fe 01       	movw	r30, r28
    3a58:	ed 56       	subi	r30, 0x6D	; 109
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	60 81       	ld	r22, Z
    3a5e:	71 81       	ldd	r23, Z+1	; 0x01
    3a60:	82 81       	ldd	r24, Z+2	; 0x02
    3a62:	93 81       	ldd	r25, Z+3	; 0x03
    3a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	f8 01       	movw	r30, r16
    3a6e:	91 83       	std	Z+1, r25	; 0x01
    3a70:	80 83       	st	Z, r24
    3a72:	de 01       	movw	r26, r28
    3a74:	a3 57       	subi	r26, 0x73	; 115
    3a76:	bf 4f       	sbci	r27, 0xFF	; 255
    3a78:	fe 01       	movw	r30, r28
    3a7a:	ef 56       	subi	r30, 0x6F	; 111
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	80 81       	ld	r24, Z
    3a80:	91 81       	ldd	r25, Z+1	; 0x01
    3a82:	8d 93       	st	X+, r24
    3a84:	9c 93       	st	X, r25
    3a86:	fe 01       	movw	r30, r28
    3a88:	e3 57       	subi	r30, 0x73	; 115
    3a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8c:	80 81       	ld	r24, Z
    3a8e:	91 81       	ldd	r25, Z+1	; 0x01
    3a90:	01 97       	sbiw	r24, 0x01	; 1
    3a92:	f1 f7       	brne	.-4      	; 0x3a90 <main+0x8b4>
    3a94:	fe 01       	movw	r30, r28
    3a96:	e3 57       	subi	r30, 0x73	; 115
    3a98:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9a:	91 83       	std	Z+1, r25	; 0x01
    3a9c:	80 83       	st	Z, r24
				 _delay_ms(2);
				LCD_u8GoToXY(LCD_u8_LINE1,0);
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	60 e0       	ldi	r22, 0x00	; 0
    3aa2:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_u8GoToXY>
				LCD_SendString("ENTER YOUR PASS");
    3aa6:	8a e7       	ldi	r24, 0x7A	; 122
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>
				LCD_u8GoToXY(LCD_u8_LINE2,0);
    3aae:	82 e0       	ldi	r24, 0x02	; 2
    3ab0:	60 e0       	ldi	r22, 0x00	; 0
    3ab2:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_u8GoToXY>
    3ab6:	43 cd       	rjmp	.-1402   	; 0x353e <main+0x362>

			}
			else // CORRECT
			{
				// CLEAR SCREEEN
				LCD_voidSendCmnd(0x01);
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    3abe:	fe 01       	movw	r30, r28
    3ac0:	e7 57       	subi	r30, 0x77	; 119
    3ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	a0 e0       	ldi	r26, 0x00	; 0
    3aca:	b0 e4       	ldi	r27, 0x40	; 64
    3acc:	80 83       	st	Z, r24
    3ace:	91 83       	std	Z+1, r25	; 0x01
    3ad0:	a2 83       	std	Z+2, r26	; 0x02
    3ad2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad4:	8e 01       	movw	r16, r28
    3ad6:	0b 57       	subi	r16, 0x7B	; 123
    3ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    3ada:	fe 01       	movw	r30, r28
    3adc:	e7 57       	subi	r30, 0x77	; 119
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	60 81       	ld	r22, Z
    3ae2:	71 81       	ldd	r23, Z+1	; 0x01
    3ae4:	82 81       	ldd	r24, Z+2	; 0x02
    3ae6:	93 81       	ldd	r25, Z+3	; 0x03
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	4a ef       	ldi	r20, 0xFA	; 250
    3aee:	54 e4       	ldi	r21, 0x44	; 68
    3af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af4:	dc 01       	movw	r26, r24
    3af6:	cb 01       	movw	r24, r22
    3af8:	f8 01       	movw	r30, r16
    3afa:	80 83       	st	Z, r24
    3afc:	91 83       	std	Z+1, r25	; 0x01
    3afe:	a2 83       	std	Z+2, r26	; 0x02
    3b00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b02:	fe 01       	movw	r30, r28
    3b04:	eb 57       	subi	r30, 0x7B	; 123
    3b06:	ff 4f       	sbci	r31, 0xFF	; 255
    3b08:	60 81       	ld	r22, Z
    3b0a:	71 81       	ldd	r23, Z+1	; 0x01
    3b0c:	82 81       	ldd	r24, Z+2	; 0x02
    3b0e:	93 81       	ldd	r25, Z+3	; 0x03
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	40 e8       	ldi	r20, 0x80	; 128
    3b16:	5f e3       	ldi	r21, 0x3F	; 63
    3b18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b1c:	88 23       	and	r24, r24
    3b1e:	44 f4       	brge	.+16     	; 0x3b30 <main+0x954>
		__ticks = 1;
    3b20:	fe 01       	movw	r30, r28
    3b22:	ed 57       	subi	r30, 0x7D	; 125
    3b24:	ff 4f       	sbci	r31, 0xFF	; 255
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	91 83       	std	Z+1, r25	; 0x01
    3b2c:	80 83       	st	Z, r24
    3b2e:	64 c0       	rjmp	.+200    	; 0x3bf8 <main+0xa1c>
	else if (__tmp > 65535)
    3b30:	fe 01       	movw	r30, r28
    3b32:	eb 57       	subi	r30, 0x7B	; 123
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	60 81       	ld	r22, Z
    3b38:	71 81       	ldd	r23, Z+1	; 0x01
    3b3a:	82 81       	ldd	r24, Z+2	; 0x02
    3b3c:	93 81       	ldd	r25, Z+3	; 0x03
    3b3e:	20 e0       	ldi	r18, 0x00	; 0
    3b40:	3f ef       	ldi	r19, 0xFF	; 255
    3b42:	4f e7       	ldi	r20, 0x7F	; 127
    3b44:	57 e4       	ldi	r21, 0x47	; 71
    3b46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b4a:	18 16       	cp	r1, r24
    3b4c:	0c f0       	brlt	.+2      	; 0x3b50 <main+0x974>
    3b4e:	43 c0       	rjmp	.+134    	; 0x3bd6 <main+0x9fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b50:	fe 01       	movw	r30, r28
    3b52:	e7 57       	subi	r30, 0x77	; 119
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	60 81       	ld	r22, Z
    3b58:	71 81       	ldd	r23, Z+1	; 0x01
    3b5a:	82 81       	ldd	r24, Z+2	; 0x02
    3b5c:	93 81       	ldd	r25, Z+3	; 0x03
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	40 e2       	ldi	r20, 0x20	; 32
    3b64:	51 e4       	ldi	r21, 0x41	; 65
    3b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	8e 01       	movw	r16, r28
    3b70:	0d 57       	subi	r16, 0x7D	; 125
    3b72:	1f 4f       	sbci	r17, 0xFF	; 255
    3b74:	bc 01       	movw	r22, r24
    3b76:	cd 01       	movw	r24, r26
    3b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	f8 01       	movw	r30, r16
    3b82:	91 83       	std	Z+1, r25	; 0x01
    3b84:	80 83       	st	Z, r24
    3b86:	1f c0       	rjmp	.+62     	; 0x3bc6 <main+0x9ea>
    3b88:	fe 01       	movw	r30, r28
    3b8a:	ef 57       	subi	r30, 0x7F	; 127
    3b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8e:	88 ec       	ldi	r24, 0xC8	; 200
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	91 83       	std	Z+1, r25	; 0x01
    3b94:	80 83       	st	Z, r24
    3b96:	fe 01       	movw	r30, r28
    3b98:	ef 57       	subi	r30, 0x7F	; 127
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	80 81       	ld	r24, Z
    3b9e:	91 81       	ldd	r25, Z+1	; 0x01
    3ba0:	01 97       	sbiw	r24, 0x01	; 1
    3ba2:	f1 f7       	brne	.-4      	; 0x3ba0 <main+0x9c4>
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	ef 57       	subi	r30, 0x7F	; 127
    3ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    3baa:	91 83       	std	Z+1, r25	; 0x01
    3bac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bae:	de 01       	movw	r26, r28
    3bb0:	ad 57       	subi	r26, 0x7D	; 125
    3bb2:	bf 4f       	sbci	r27, 0xFF	; 255
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	ed 57       	subi	r30, 0x7D	; 125
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	80 81       	ld	r24, Z
    3bbc:	91 81       	ldd	r25, Z+1	; 0x01
    3bbe:	01 97       	sbiw	r24, 0x01	; 1
    3bc0:	11 96       	adiw	r26, 0x01	; 1
    3bc2:	9c 93       	st	X, r25
    3bc4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	ed 57       	subi	r30, 0x7D	; 125
    3bca:	ff 4f       	sbci	r31, 0xFF	; 255
    3bcc:	80 81       	ld	r24, Z
    3bce:	91 81       	ldd	r25, Z+1	; 0x01
    3bd0:	00 97       	sbiw	r24, 0x00	; 0
    3bd2:	d1 f6       	brne	.-76     	; 0x3b88 <main+0x9ac>
    3bd4:	27 c0       	rjmp	.+78     	; 0x3c24 <main+0xa48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd6:	8e 01       	movw	r16, r28
    3bd8:	0d 57       	subi	r16, 0x7D	; 125
    3bda:	1f 4f       	sbci	r17, 0xFF	; 255
    3bdc:	fe 01       	movw	r30, r28
    3bde:	eb 57       	subi	r30, 0x7B	; 123
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	60 81       	ld	r22, Z
    3be4:	71 81       	ldd	r23, Z+1	; 0x01
    3be6:	82 81       	ldd	r24, Z+2	; 0x02
    3be8:	93 81       	ldd	r25, Z+3	; 0x03
    3bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bee:	dc 01       	movw	r26, r24
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	f8 01       	movw	r30, r16
    3bf4:	91 83       	std	Z+1, r25	; 0x01
    3bf6:	80 83       	st	Z, r24
    3bf8:	de 01       	movw	r26, r28
    3bfa:	a1 58       	subi	r26, 0x81	; 129
    3bfc:	bf 4f       	sbci	r27, 0xFF	; 255
    3bfe:	fe 01       	movw	r30, r28
    3c00:	ed 57       	subi	r30, 0x7D	; 125
    3c02:	ff 4f       	sbci	r31, 0xFF	; 255
    3c04:	80 81       	ld	r24, Z
    3c06:	91 81       	ldd	r25, Z+1	; 0x01
    3c08:	8d 93       	st	X+, r24
    3c0a:	9c 93       	st	X, r25
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	e1 58       	subi	r30, 0x81	; 129
    3c10:	ff 4f       	sbci	r31, 0xFF	; 255
    3c12:	80 81       	ld	r24, Z
    3c14:	91 81       	ldd	r25, Z+1	; 0x01
    3c16:	01 97       	sbiw	r24, 0x01	; 1
    3c18:	f1 f7       	brne	.-4      	; 0x3c16 <main+0xa3a>
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	e1 58       	subi	r30, 0x81	; 129
    3c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c20:	91 83       	std	Z+1, r25	; 0x01
    3c22:	80 83       	st	Z, r24
				 _delay_ms(2);
				LCD_u8GoToXY(LCD_u8_LINE1,0);
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	60 e0       	ldi	r22, 0x00	; 0
    3c28:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_u8GoToXY>
				LCD_SendString("CORRECT PASSWORD");
    3c2c:	83 ea       	ldi	r24, 0xA3	; 163
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>
    3c34:	fe 01       	movw	r30, r28
    3c36:	e5 58       	subi	r30, 0x85	; 133
    3c38:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3a:	80 e0       	ldi	r24, 0x00	; 0
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	a8 ec       	ldi	r26, 0xC8	; 200
    3c40:	b2 e4       	ldi	r27, 0x42	; 66
    3c42:	80 83       	st	Z, r24
    3c44:	91 83       	std	Z+1, r25	; 0x01
    3c46:	a2 83       	std	Z+2, r26	; 0x02
    3c48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c4a:	8e 01       	movw	r16, r28
    3c4c:	09 58       	subi	r16, 0x89	; 137
    3c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c50:	fe 01       	movw	r30, r28
    3c52:	e5 58       	subi	r30, 0x85	; 133
    3c54:	ff 4f       	sbci	r31, 0xFF	; 255
    3c56:	60 81       	ld	r22, Z
    3c58:	71 81       	ldd	r23, Z+1	; 0x01
    3c5a:	82 81       	ldd	r24, Z+2	; 0x02
    3c5c:	93 81       	ldd	r25, Z+3	; 0x03
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	4a ef       	ldi	r20, 0xFA	; 250
    3c64:	54 e4       	ldi	r21, 0x44	; 68
    3c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	f8 01       	movw	r30, r16
    3c70:	80 83       	st	Z, r24
    3c72:	91 83       	std	Z+1, r25	; 0x01
    3c74:	a2 83       	std	Z+2, r26	; 0x02
    3c76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c78:	fe 01       	movw	r30, r28
    3c7a:	e9 58       	subi	r30, 0x89	; 137
    3c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7e:	60 81       	ld	r22, Z
    3c80:	71 81       	ldd	r23, Z+1	; 0x01
    3c82:	82 81       	ldd	r24, Z+2	; 0x02
    3c84:	93 81       	ldd	r25, Z+3	; 0x03
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	40 e8       	ldi	r20, 0x80	; 128
    3c8c:	5f e3       	ldi	r21, 0x3F	; 63
    3c8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c92:	88 23       	and	r24, r24
    3c94:	44 f4       	brge	.+16     	; 0x3ca6 <main+0xaca>
		__ticks = 1;
    3c96:	fe 01       	movw	r30, r28
    3c98:	eb 58       	subi	r30, 0x8B	; 139
    3c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	91 83       	std	Z+1, r25	; 0x01
    3ca2:	80 83       	st	Z, r24
    3ca4:	64 c0       	rjmp	.+200    	; 0x3d6e <main+0xb92>
	else if (__tmp > 65535)
    3ca6:	fe 01       	movw	r30, r28
    3ca8:	e9 58       	subi	r30, 0x89	; 137
    3caa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cac:	60 81       	ld	r22, Z
    3cae:	71 81       	ldd	r23, Z+1	; 0x01
    3cb0:	82 81       	ldd	r24, Z+2	; 0x02
    3cb2:	93 81       	ldd	r25, Z+3	; 0x03
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	3f ef       	ldi	r19, 0xFF	; 255
    3cb8:	4f e7       	ldi	r20, 0x7F	; 127
    3cba:	57 e4       	ldi	r21, 0x47	; 71
    3cbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cc0:	18 16       	cp	r1, r24
    3cc2:	0c f0       	brlt	.+2      	; 0x3cc6 <main+0xaea>
    3cc4:	43 c0       	rjmp	.+134    	; 0x3d4c <main+0xb70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cc6:	fe 01       	movw	r30, r28
    3cc8:	e5 58       	subi	r30, 0x85	; 133
    3cca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ccc:	60 81       	ld	r22, Z
    3cce:	71 81       	ldd	r23, Z+1	; 0x01
    3cd0:	82 81       	ldd	r24, Z+2	; 0x02
    3cd2:	93 81       	ldd	r25, Z+3	; 0x03
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	40 e2       	ldi	r20, 0x20	; 32
    3cda:	51 e4       	ldi	r21, 0x41	; 65
    3cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	cb 01       	movw	r24, r22
    3ce4:	8e 01       	movw	r16, r28
    3ce6:	0b 58       	subi	r16, 0x8B	; 139
    3ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cea:	bc 01       	movw	r22, r24
    3cec:	cd 01       	movw	r24, r26
    3cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf2:	dc 01       	movw	r26, r24
    3cf4:	cb 01       	movw	r24, r22
    3cf6:	f8 01       	movw	r30, r16
    3cf8:	91 83       	std	Z+1, r25	; 0x01
    3cfa:	80 83       	st	Z, r24
    3cfc:	1f c0       	rjmp	.+62     	; 0x3d3c <main+0xb60>
    3cfe:	fe 01       	movw	r30, r28
    3d00:	ed 58       	subi	r30, 0x8D	; 141
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	88 ec       	ldi	r24, 0xC8	; 200
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	91 83       	std	Z+1, r25	; 0x01
    3d0a:	80 83       	st	Z, r24
    3d0c:	fe 01       	movw	r30, r28
    3d0e:	ed 58       	subi	r30, 0x8D	; 141
    3d10:	ff 4f       	sbci	r31, 0xFF	; 255
    3d12:	80 81       	ld	r24, Z
    3d14:	91 81       	ldd	r25, Z+1	; 0x01
    3d16:	01 97       	sbiw	r24, 0x01	; 1
    3d18:	f1 f7       	brne	.-4      	; 0x3d16 <main+0xb3a>
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	ed 58       	subi	r30, 0x8D	; 141
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	91 83       	std	Z+1, r25	; 0x01
    3d22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d24:	de 01       	movw	r26, r28
    3d26:	ab 58       	subi	r26, 0x8B	; 139
    3d28:	bf 4f       	sbci	r27, 0xFF	; 255
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	eb 58       	subi	r30, 0x8B	; 139
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	80 81       	ld	r24, Z
    3d32:	91 81       	ldd	r25, Z+1	; 0x01
    3d34:	01 97       	sbiw	r24, 0x01	; 1
    3d36:	11 96       	adiw	r26, 0x01	; 1
    3d38:	9c 93       	st	X, r25
    3d3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d3c:	fe 01       	movw	r30, r28
    3d3e:	eb 58       	subi	r30, 0x8B	; 139
    3d40:	ff 4f       	sbci	r31, 0xFF	; 255
    3d42:	80 81       	ld	r24, Z
    3d44:	91 81       	ldd	r25, Z+1	; 0x01
    3d46:	00 97       	sbiw	r24, 0x00	; 0
    3d48:	d1 f6       	brne	.-76     	; 0x3cfe <main+0xb22>
    3d4a:	27 c0       	rjmp	.+78     	; 0x3d9a <main+0xbbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d4c:	8e 01       	movw	r16, r28
    3d4e:	0b 58       	subi	r16, 0x8B	; 139
    3d50:	1f 4f       	sbci	r17, 0xFF	; 255
    3d52:	fe 01       	movw	r30, r28
    3d54:	e9 58       	subi	r30, 0x89	; 137
    3d56:	ff 4f       	sbci	r31, 0xFF	; 255
    3d58:	60 81       	ld	r22, Z
    3d5a:	71 81       	ldd	r23, Z+1	; 0x01
    3d5c:	82 81       	ldd	r24, Z+2	; 0x02
    3d5e:	93 81       	ldd	r25, Z+3	; 0x03
    3d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d64:	dc 01       	movw	r26, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	f8 01       	movw	r30, r16
    3d6a:	91 83       	std	Z+1, r25	; 0x01
    3d6c:	80 83       	st	Z, r24
    3d6e:	de 01       	movw	r26, r28
    3d70:	af 58       	subi	r26, 0x8F	; 143
    3d72:	bf 4f       	sbci	r27, 0xFF	; 255
    3d74:	fe 01       	movw	r30, r28
    3d76:	eb 58       	subi	r30, 0x8B	; 139
    3d78:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7a:	80 81       	ld	r24, Z
    3d7c:	91 81       	ldd	r25, Z+1	; 0x01
    3d7e:	8d 93       	st	X+, r24
    3d80:	9c 93       	st	X, r25
    3d82:	fe 01       	movw	r30, r28
    3d84:	ef 58       	subi	r30, 0x8F	; 143
    3d86:	ff 4f       	sbci	r31, 0xFF	; 255
    3d88:	80 81       	ld	r24, Z
    3d8a:	91 81       	ldd	r25, Z+1	; 0x01
    3d8c:	01 97       	sbiw	r24, 0x01	; 1
    3d8e:	f1 f7       	brne	.-4      	; 0x3d8c <main+0xbb0>
    3d90:	fe 01       	movw	r30, r28
    3d92:	ef 58       	subi	r30, 0x8F	; 143
    3d94:	ff 4f       	sbci	r31, 0xFF	; 255
    3d96:	91 83       	std	Z+1, r25	; 0x01
    3d98:	80 83       	st	Z, r24
				_delay_ms(100);
				// CLEAR SCREEEN
				LCD_voidSendCmnd(0x01);
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    3da0:	fe 01       	movw	r30, r28
    3da2:	e3 59       	subi	r30, 0x93	; 147
    3da4:	ff 4f       	sbci	r31, 0xFF	; 255
    3da6:	80 e0       	ldi	r24, 0x00	; 0
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	a0 e0       	ldi	r26, 0x00	; 0
    3dac:	b0 e4       	ldi	r27, 0x40	; 64
    3dae:	80 83       	st	Z, r24
    3db0:	91 83       	std	Z+1, r25	; 0x01
    3db2:	a2 83       	std	Z+2, r26	; 0x02
    3db4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3db6:	8e 01       	movw	r16, r28
    3db8:	07 59       	subi	r16, 0x97	; 151
    3dba:	1f 4f       	sbci	r17, 0xFF	; 255
    3dbc:	fe 01       	movw	r30, r28
    3dbe:	e3 59       	subi	r30, 0x93	; 147
    3dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc2:	60 81       	ld	r22, Z
    3dc4:	71 81       	ldd	r23, Z+1	; 0x01
    3dc6:	82 81       	ldd	r24, Z+2	; 0x02
    3dc8:	93 81       	ldd	r25, Z+3	; 0x03
    3dca:	20 e0       	ldi	r18, 0x00	; 0
    3dcc:	30 e0       	ldi	r19, 0x00	; 0
    3dce:	4a ef       	ldi	r20, 0xFA	; 250
    3dd0:	54 e4       	ldi	r21, 0x44	; 68
    3dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd6:	dc 01       	movw	r26, r24
    3dd8:	cb 01       	movw	r24, r22
    3dda:	f8 01       	movw	r30, r16
    3ddc:	80 83       	st	Z, r24
    3dde:	91 83       	std	Z+1, r25	; 0x01
    3de0:	a2 83       	std	Z+2, r26	; 0x02
    3de2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3de4:	fe 01       	movw	r30, r28
    3de6:	e7 59       	subi	r30, 0x97	; 151
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	60 81       	ld	r22, Z
    3dec:	71 81       	ldd	r23, Z+1	; 0x01
    3dee:	82 81       	ldd	r24, Z+2	; 0x02
    3df0:	93 81       	ldd	r25, Z+3	; 0x03
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	30 e0       	ldi	r19, 0x00	; 0
    3df6:	40 e8       	ldi	r20, 0x80	; 128
    3df8:	5f e3       	ldi	r21, 0x3F	; 63
    3dfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dfe:	88 23       	and	r24, r24
    3e00:	44 f4       	brge	.+16     	; 0x3e12 <main+0xc36>
		__ticks = 1;
    3e02:	fe 01       	movw	r30, r28
    3e04:	e9 59       	subi	r30, 0x99	; 153
    3e06:	ff 4f       	sbci	r31, 0xFF	; 255
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	91 83       	std	Z+1, r25	; 0x01
    3e0e:	80 83       	st	Z, r24
    3e10:	64 c0       	rjmp	.+200    	; 0x3eda <main+0xcfe>
	else if (__tmp > 65535)
    3e12:	fe 01       	movw	r30, r28
    3e14:	e7 59       	subi	r30, 0x97	; 151
    3e16:	ff 4f       	sbci	r31, 0xFF	; 255
    3e18:	60 81       	ld	r22, Z
    3e1a:	71 81       	ldd	r23, Z+1	; 0x01
    3e1c:	82 81       	ldd	r24, Z+2	; 0x02
    3e1e:	93 81       	ldd	r25, Z+3	; 0x03
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	3f ef       	ldi	r19, 0xFF	; 255
    3e24:	4f e7       	ldi	r20, 0x7F	; 127
    3e26:	57 e4       	ldi	r21, 0x47	; 71
    3e28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e2c:	18 16       	cp	r1, r24
    3e2e:	0c f0       	brlt	.+2      	; 0x3e32 <main+0xc56>
    3e30:	43 c0       	rjmp	.+134    	; 0x3eb8 <main+0xcdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e32:	fe 01       	movw	r30, r28
    3e34:	e3 59       	subi	r30, 0x93	; 147
    3e36:	ff 4f       	sbci	r31, 0xFF	; 255
    3e38:	60 81       	ld	r22, Z
    3e3a:	71 81       	ldd	r23, Z+1	; 0x01
    3e3c:	82 81       	ldd	r24, Z+2	; 0x02
    3e3e:	93 81       	ldd	r25, Z+3	; 0x03
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	40 e2       	ldi	r20, 0x20	; 32
    3e46:	51 e4       	ldi	r21, 0x41	; 65
    3e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4c:	dc 01       	movw	r26, r24
    3e4e:	cb 01       	movw	r24, r22
    3e50:	8e 01       	movw	r16, r28
    3e52:	09 59       	subi	r16, 0x99	; 153
    3e54:	1f 4f       	sbci	r17, 0xFF	; 255
    3e56:	bc 01       	movw	r22, r24
    3e58:	cd 01       	movw	r24, r26
    3e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e5e:	dc 01       	movw	r26, r24
    3e60:	cb 01       	movw	r24, r22
    3e62:	f8 01       	movw	r30, r16
    3e64:	91 83       	std	Z+1, r25	; 0x01
    3e66:	80 83       	st	Z, r24
    3e68:	1f c0       	rjmp	.+62     	; 0x3ea8 <main+0xccc>
    3e6a:	fe 01       	movw	r30, r28
    3e6c:	eb 59       	subi	r30, 0x9B	; 155
    3e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e70:	88 ec       	ldi	r24, 0xC8	; 200
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	91 83       	std	Z+1, r25	; 0x01
    3e76:	80 83       	st	Z, r24
    3e78:	fe 01       	movw	r30, r28
    3e7a:	eb 59       	subi	r30, 0x9B	; 155
    3e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7e:	80 81       	ld	r24, Z
    3e80:	91 81       	ldd	r25, Z+1	; 0x01
    3e82:	01 97       	sbiw	r24, 0x01	; 1
    3e84:	f1 f7       	brne	.-4      	; 0x3e82 <main+0xca6>
    3e86:	fe 01       	movw	r30, r28
    3e88:	eb 59       	subi	r30, 0x9B	; 155
    3e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8c:	91 83       	std	Z+1, r25	; 0x01
    3e8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e90:	de 01       	movw	r26, r28
    3e92:	a9 59       	subi	r26, 0x99	; 153
    3e94:	bf 4f       	sbci	r27, 0xFF	; 255
    3e96:	fe 01       	movw	r30, r28
    3e98:	e9 59       	subi	r30, 0x99	; 153
    3e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9c:	80 81       	ld	r24, Z
    3e9e:	91 81       	ldd	r25, Z+1	; 0x01
    3ea0:	01 97       	sbiw	r24, 0x01	; 1
    3ea2:	11 96       	adiw	r26, 0x01	; 1
    3ea4:	9c 93       	st	X, r25
    3ea6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	e9 59       	subi	r30, 0x99	; 153
    3eac:	ff 4f       	sbci	r31, 0xFF	; 255
    3eae:	80 81       	ld	r24, Z
    3eb0:	91 81       	ldd	r25, Z+1	; 0x01
    3eb2:	00 97       	sbiw	r24, 0x00	; 0
    3eb4:	d1 f6       	brne	.-76     	; 0x3e6a <main+0xc8e>
    3eb6:	27 c0       	rjmp	.+78     	; 0x3f06 <main+0xd2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eb8:	8e 01       	movw	r16, r28
    3eba:	09 59       	subi	r16, 0x99	; 153
    3ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ebe:	fe 01       	movw	r30, r28
    3ec0:	e7 59       	subi	r30, 0x97	; 151
    3ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec4:	60 81       	ld	r22, Z
    3ec6:	71 81       	ldd	r23, Z+1	; 0x01
    3ec8:	82 81       	ldd	r24, Z+2	; 0x02
    3eca:	93 81       	ldd	r25, Z+3	; 0x03
    3ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	f8 01       	movw	r30, r16
    3ed6:	91 83       	std	Z+1, r25	; 0x01
    3ed8:	80 83       	st	Z, r24
    3eda:	de 01       	movw	r26, r28
    3edc:	ad 59       	subi	r26, 0x9D	; 157
    3ede:	bf 4f       	sbci	r27, 0xFF	; 255
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	e9 59       	subi	r30, 0x99	; 153
    3ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee6:	80 81       	ld	r24, Z
    3ee8:	91 81       	ldd	r25, Z+1	; 0x01
    3eea:	8d 93       	st	X+, r24
    3eec:	9c 93       	st	X, r25
    3eee:	fe 01       	movw	r30, r28
    3ef0:	ed 59       	subi	r30, 0x9D	; 157
    3ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef4:	80 81       	ld	r24, Z
    3ef6:	91 81       	ldd	r25, Z+1	; 0x01
    3ef8:	01 97       	sbiw	r24, 0x01	; 1
    3efa:	f1 f7       	brne	.-4      	; 0x3ef8 <main+0xd1c>
    3efc:	fe 01       	movw	r30, r28
    3efe:	ed 59       	subi	r30, 0x9D	; 157
    3f00:	ff 4f       	sbci	r31, 0xFF	; 255
    3f02:	91 83       	std	Z+1, r25	; 0x01
    3f04:	80 83       	st	Z, r24
				 _delay_ms(2);
				LCD_u8GoToXY(LCD_u8_LINE1,0);
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	60 e0       	ldi	r22, 0x00	; 0
    3f0a:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_u8GoToXY>
				LCD_SendString("WELCOME TO MOTOR");
    3f0e:	84 eb       	ldi	r24, 0xB4	; 180
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>
				LCD_u8GoToXY(LCD_u8_LINE2,2);
    3f16:	82 e0       	ldi	r24, 0x02	; 2
    3f18:	62 e0       	ldi	r22, 0x02	; 2
    3f1a:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_u8GoToXY>
				LCD_SendString("DASHBOARD");
    3f1e:	85 ec       	ldi	r24, 0xC5	; 197
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>
    3f26:	fe 01       	movw	r30, r28
    3f28:	e1 5a       	subi	r30, 0xA1	; 161
    3f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	a8 ec       	ldi	r26, 0xC8	; 200
    3f32:	b2 e4       	ldi	r27, 0x42	; 66
    3f34:	80 83       	st	Z, r24
    3f36:	91 83       	std	Z+1, r25	; 0x01
    3f38:	a2 83       	std	Z+2, r26	; 0x02
    3f3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f3c:	8e 01       	movw	r16, r28
    3f3e:	05 5a       	subi	r16, 0xA5	; 165
    3f40:	1f 4f       	sbci	r17, 0xFF	; 255
    3f42:	fe 01       	movw	r30, r28
    3f44:	e1 5a       	subi	r30, 0xA1	; 161
    3f46:	ff 4f       	sbci	r31, 0xFF	; 255
    3f48:	60 81       	ld	r22, Z
    3f4a:	71 81       	ldd	r23, Z+1	; 0x01
    3f4c:	82 81       	ldd	r24, Z+2	; 0x02
    3f4e:	93 81       	ldd	r25, Z+3	; 0x03
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	4a ef       	ldi	r20, 0xFA	; 250
    3f56:	54 e4       	ldi	r21, 0x44	; 68
    3f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f5c:	dc 01       	movw	r26, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	f8 01       	movw	r30, r16
    3f62:	80 83       	st	Z, r24
    3f64:	91 83       	std	Z+1, r25	; 0x01
    3f66:	a2 83       	std	Z+2, r26	; 0x02
    3f68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	e5 5a       	subi	r30, 0xA5	; 165
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	60 81       	ld	r22, Z
    3f72:	71 81       	ldd	r23, Z+1	; 0x01
    3f74:	82 81       	ldd	r24, Z+2	; 0x02
    3f76:	93 81       	ldd	r25, Z+3	; 0x03
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	40 e8       	ldi	r20, 0x80	; 128
    3f7e:	5f e3       	ldi	r21, 0x3F	; 63
    3f80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f84:	88 23       	and	r24, r24
    3f86:	44 f4       	brge	.+16     	; 0x3f98 <main+0xdbc>
		__ticks = 1;
    3f88:	fe 01       	movw	r30, r28
    3f8a:	e7 5a       	subi	r30, 0xA7	; 167
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	81 e0       	ldi	r24, 0x01	; 1
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	91 83       	std	Z+1, r25	; 0x01
    3f94:	80 83       	st	Z, r24
    3f96:	64 c0       	rjmp	.+200    	; 0x4060 <main+0xe84>
	else if (__tmp > 65535)
    3f98:	fe 01       	movw	r30, r28
    3f9a:	e5 5a       	subi	r30, 0xA5	; 165
    3f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9e:	60 81       	ld	r22, Z
    3fa0:	71 81       	ldd	r23, Z+1	; 0x01
    3fa2:	82 81       	ldd	r24, Z+2	; 0x02
    3fa4:	93 81       	ldd	r25, Z+3	; 0x03
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	3f ef       	ldi	r19, 0xFF	; 255
    3faa:	4f e7       	ldi	r20, 0x7F	; 127
    3fac:	57 e4       	ldi	r21, 0x47	; 71
    3fae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fb2:	18 16       	cp	r1, r24
    3fb4:	0c f0       	brlt	.+2      	; 0x3fb8 <main+0xddc>
    3fb6:	43 c0       	rjmp	.+134    	; 0x403e <main+0xe62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fb8:	fe 01       	movw	r30, r28
    3fba:	e1 5a       	subi	r30, 0xA1	; 161
    3fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbe:	60 81       	ld	r22, Z
    3fc0:	71 81       	ldd	r23, Z+1	; 0x01
    3fc2:	82 81       	ldd	r24, Z+2	; 0x02
    3fc4:	93 81       	ldd	r25, Z+3	; 0x03
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	40 e2       	ldi	r20, 0x20	; 32
    3fcc:	51 e4       	ldi	r21, 0x41	; 65
    3fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	cb 01       	movw	r24, r22
    3fd6:	8e 01       	movw	r16, r28
    3fd8:	07 5a       	subi	r16, 0xA7	; 167
    3fda:	1f 4f       	sbci	r17, 0xFF	; 255
    3fdc:	bc 01       	movw	r22, r24
    3fde:	cd 01       	movw	r24, r26
    3fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	cb 01       	movw	r24, r22
    3fe8:	f8 01       	movw	r30, r16
    3fea:	91 83       	std	Z+1, r25	; 0x01
    3fec:	80 83       	st	Z, r24
    3fee:	1f c0       	rjmp	.+62     	; 0x402e <main+0xe52>
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	e9 5a       	subi	r30, 0xA9	; 169
    3ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff6:	88 ec       	ldi	r24, 0xC8	; 200
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	91 83       	std	Z+1, r25	; 0x01
    3ffc:	80 83       	st	Z, r24
    3ffe:	fe 01       	movw	r30, r28
    4000:	e9 5a       	subi	r30, 0xA9	; 169
    4002:	ff 4f       	sbci	r31, 0xFF	; 255
    4004:	80 81       	ld	r24, Z
    4006:	91 81       	ldd	r25, Z+1	; 0x01
    4008:	01 97       	sbiw	r24, 0x01	; 1
    400a:	f1 f7       	brne	.-4      	; 0x4008 <main+0xe2c>
    400c:	fe 01       	movw	r30, r28
    400e:	e9 5a       	subi	r30, 0xA9	; 169
    4010:	ff 4f       	sbci	r31, 0xFF	; 255
    4012:	91 83       	std	Z+1, r25	; 0x01
    4014:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4016:	de 01       	movw	r26, r28
    4018:	a7 5a       	subi	r26, 0xA7	; 167
    401a:	bf 4f       	sbci	r27, 0xFF	; 255
    401c:	fe 01       	movw	r30, r28
    401e:	e7 5a       	subi	r30, 0xA7	; 167
    4020:	ff 4f       	sbci	r31, 0xFF	; 255
    4022:	80 81       	ld	r24, Z
    4024:	91 81       	ldd	r25, Z+1	; 0x01
    4026:	01 97       	sbiw	r24, 0x01	; 1
    4028:	11 96       	adiw	r26, 0x01	; 1
    402a:	9c 93       	st	X, r25
    402c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    402e:	fe 01       	movw	r30, r28
    4030:	e7 5a       	subi	r30, 0xA7	; 167
    4032:	ff 4f       	sbci	r31, 0xFF	; 255
    4034:	80 81       	ld	r24, Z
    4036:	91 81       	ldd	r25, Z+1	; 0x01
    4038:	00 97       	sbiw	r24, 0x00	; 0
    403a:	d1 f6       	brne	.-76     	; 0x3ff0 <main+0xe14>
    403c:	27 c0       	rjmp	.+78     	; 0x408c <main+0xeb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    403e:	8e 01       	movw	r16, r28
    4040:	07 5a       	subi	r16, 0xA7	; 167
    4042:	1f 4f       	sbci	r17, 0xFF	; 255
    4044:	fe 01       	movw	r30, r28
    4046:	e5 5a       	subi	r30, 0xA5	; 165
    4048:	ff 4f       	sbci	r31, 0xFF	; 255
    404a:	60 81       	ld	r22, Z
    404c:	71 81       	ldd	r23, Z+1	; 0x01
    404e:	82 81       	ldd	r24, Z+2	; 0x02
    4050:	93 81       	ldd	r25, Z+3	; 0x03
    4052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4056:	dc 01       	movw	r26, r24
    4058:	cb 01       	movw	r24, r22
    405a:	f8 01       	movw	r30, r16
    405c:	91 83       	std	Z+1, r25	; 0x01
    405e:	80 83       	st	Z, r24
    4060:	de 01       	movw	r26, r28
    4062:	ab 5a       	subi	r26, 0xAB	; 171
    4064:	bf 4f       	sbci	r27, 0xFF	; 255
    4066:	fe 01       	movw	r30, r28
    4068:	e7 5a       	subi	r30, 0xA7	; 167
    406a:	ff 4f       	sbci	r31, 0xFF	; 255
    406c:	80 81       	ld	r24, Z
    406e:	91 81       	ldd	r25, Z+1	; 0x01
    4070:	8d 93       	st	X+, r24
    4072:	9c 93       	st	X, r25
    4074:	fe 01       	movw	r30, r28
    4076:	eb 5a       	subi	r30, 0xAB	; 171
    4078:	ff 4f       	sbci	r31, 0xFF	; 255
    407a:	80 81       	ld	r24, Z
    407c:	91 81       	ldd	r25, Z+1	; 0x01
    407e:	01 97       	sbiw	r24, 0x01	; 1
    4080:	f1 f7       	brne	.-4      	; 0x407e <main+0xea2>
    4082:	fe 01       	movw	r30, r28
    4084:	eb 5a       	subi	r30, 0xAB	; 171
    4086:	ff 4f       	sbci	r31, 0xFF	; 255
    4088:	91 83       	std	Z+1, r25	; 0x01
    408a:	80 83       	st	Z, r24
				_delay_ms(100);
				// CLEAR SCREEEN
				LCD_voidSendCmnd(0x01);
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    4092:	fe 01       	movw	r30, r28
    4094:	ef 5a       	subi	r30, 0xAF	; 175
    4096:	ff 4f       	sbci	r31, 0xFF	; 255
    4098:	80 e0       	ldi	r24, 0x00	; 0
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	a0 e0       	ldi	r26, 0x00	; 0
    409e:	b0 e4       	ldi	r27, 0x40	; 64
    40a0:	80 83       	st	Z, r24
    40a2:	91 83       	std	Z+1, r25	; 0x01
    40a4:	a2 83       	std	Z+2, r26	; 0x02
    40a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40a8:	8e 01       	movw	r16, r28
    40aa:	03 5b       	subi	r16, 0xB3	; 179
    40ac:	1f 4f       	sbci	r17, 0xFF	; 255
    40ae:	fe 01       	movw	r30, r28
    40b0:	ef 5a       	subi	r30, 0xAF	; 175
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	60 81       	ld	r22, Z
    40b6:	71 81       	ldd	r23, Z+1	; 0x01
    40b8:	82 81       	ldd	r24, Z+2	; 0x02
    40ba:	93 81       	ldd	r25, Z+3	; 0x03
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	4a ef       	ldi	r20, 0xFA	; 250
    40c2:	54 e4       	ldi	r21, 0x44	; 68
    40c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c8:	dc 01       	movw	r26, r24
    40ca:	cb 01       	movw	r24, r22
    40cc:	f8 01       	movw	r30, r16
    40ce:	80 83       	st	Z, r24
    40d0:	91 83       	std	Z+1, r25	; 0x01
    40d2:	a2 83       	std	Z+2, r26	; 0x02
    40d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40d6:	fe 01       	movw	r30, r28
    40d8:	e3 5b       	subi	r30, 0xB3	; 179
    40da:	ff 4f       	sbci	r31, 0xFF	; 255
    40dc:	60 81       	ld	r22, Z
    40de:	71 81       	ldd	r23, Z+1	; 0x01
    40e0:	82 81       	ldd	r24, Z+2	; 0x02
    40e2:	93 81       	ldd	r25, Z+3	; 0x03
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	40 e8       	ldi	r20, 0x80	; 128
    40ea:	5f e3       	ldi	r21, 0x3F	; 63
    40ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40f0:	88 23       	and	r24, r24
    40f2:	44 f4       	brge	.+16     	; 0x4104 <main+0xf28>
		__ticks = 1;
    40f4:	fe 01       	movw	r30, r28
    40f6:	e5 5b       	subi	r30, 0xB5	; 181
    40f8:	ff 4f       	sbci	r31, 0xFF	; 255
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	91 83       	std	Z+1, r25	; 0x01
    4100:	80 83       	st	Z, r24
    4102:	64 c0       	rjmp	.+200    	; 0x41cc <main+0xff0>
	else if (__tmp > 65535)
    4104:	fe 01       	movw	r30, r28
    4106:	e3 5b       	subi	r30, 0xB3	; 179
    4108:	ff 4f       	sbci	r31, 0xFF	; 255
    410a:	60 81       	ld	r22, Z
    410c:	71 81       	ldd	r23, Z+1	; 0x01
    410e:	82 81       	ldd	r24, Z+2	; 0x02
    4110:	93 81       	ldd	r25, Z+3	; 0x03
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	3f ef       	ldi	r19, 0xFF	; 255
    4116:	4f e7       	ldi	r20, 0x7F	; 127
    4118:	57 e4       	ldi	r21, 0x47	; 71
    411a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    411e:	18 16       	cp	r1, r24
    4120:	0c f0       	brlt	.+2      	; 0x4124 <main+0xf48>
    4122:	43 c0       	rjmp	.+134    	; 0x41aa <main+0xfce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4124:	fe 01       	movw	r30, r28
    4126:	ef 5a       	subi	r30, 0xAF	; 175
    4128:	ff 4f       	sbci	r31, 0xFF	; 255
    412a:	60 81       	ld	r22, Z
    412c:	71 81       	ldd	r23, Z+1	; 0x01
    412e:	82 81       	ldd	r24, Z+2	; 0x02
    4130:	93 81       	ldd	r25, Z+3	; 0x03
    4132:	20 e0       	ldi	r18, 0x00	; 0
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	40 e2       	ldi	r20, 0x20	; 32
    4138:	51 e4       	ldi	r21, 0x41	; 65
    413a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    413e:	dc 01       	movw	r26, r24
    4140:	cb 01       	movw	r24, r22
    4142:	8e 01       	movw	r16, r28
    4144:	05 5b       	subi	r16, 0xB5	; 181
    4146:	1f 4f       	sbci	r17, 0xFF	; 255
    4148:	bc 01       	movw	r22, r24
    414a:	cd 01       	movw	r24, r26
    414c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	f8 01       	movw	r30, r16
    4156:	91 83       	std	Z+1, r25	; 0x01
    4158:	80 83       	st	Z, r24
    415a:	1f c0       	rjmp	.+62     	; 0x419a <main+0xfbe>
    415c:	fe 01       	movw	r30, r28
    415e:	e7 5b       	subi	r30, 0xB7	; 183
    4160:	ff 4f       	sbci	r31, 0xFF	; 255
    4162:	88 ec       	ldi	r24, 0xC8	; 200
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	91 83       	std	Z+1, r25	; 0x01
    4168:	80 83       	st	Z, r24
    416a:	fe 01       	movw	r30, r28
    416c:	e7 5b       	subi	r30, 0xB7	; 183
    416e:	ff 4f       	sbci	r31, 0xFF	; 255
    4170:	80 81       	ld	r24, Z
    4172:	91 81       	ldd	r25, Z+1	; 0x01
    4174:	01 97       	sbiw	r24, 0x01	; 1
    4176:	f1 f7       	brne	.-4      	; 0x4174 <main+0xf98>
    4178:	fe 01       	movw	r30, r28
    417a:	e7 5b       	subi	r30, 0xB7	; 183
    417c:	ff 4f       	sbci	r31, 0xFF	; 255
    417e:	91 83       	std	Z+1, r25	; 0x01
    4180:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4182:	de 01       	movw	r26, r28
    4184:	a5 5b       	subi	r26, 0xB5	; 181
    4186:	bf 4f       	sbci	r27, 0xFF	; 255
    4188:	fe 01       	movw	r30, r28
    418a:	e5 5b       	subi	r30, 0xB5	; 181
    418c:	ff 4f       	sbci	r31, 0xFF	; 255
    418e:	80 81       	ld	r24, Z
    4190:	91 81       	ldd	r25, Z+1	; 0x01
    4192:	01 97       	sbiw	r24, 0x01	; 1
    4194:	11 96       	adiw	r26, 0x01	; 1
    4196:	9c 93       	st	X, r25
    4198:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    419a:	fe 01       	movw	r30, r28
    419c:	e5 5b       	subi	r30, 0xB5	; 181
    419e:	ff 4f       	sbci	r31, 0xFF	; 255
    41a0:	80 81       	ld	r24, Z
    41a2:	91 81       	ldd	r25, Z+1	; 0x01
    41a4:	00 97       	sbiw	r24, 0x00	; 0
    41a6:	d1 f6       	brne	.-76     	; 0x415c <main+0xf80>
    41a8:	27 c0       	rjmp	.+78     	; 0x41f8 <main+0x101c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41aa:	8e 01       	movw	r16, r28
    41ac:	05 5b       	subi	r16, 0xB5	; 181
    41ae:	1f 4f       	sbci	r17, 0xFF	; 255
    41b0:	fe 01       	movw	r30, r28
    41b2:	e3 5b       	subi	r30, 0xB3	; 179
    41b4:	ff 4f       	sbci	r31, 0xFF	; 255
    41b6:	60 81       	ld	r22, Z
    41b8:	71 81       	ldd	r23, Z+1	; 0x01
    41ba:	82 81       	ldd	r24, Z+2	; 0x02
    41bc:	93 81       	ldd	r25, Z+3	; 0x03
    41be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c2:	dc 01       	movw	r26, r24
    41c4:	cb 01       	movw	r24, r22
    41c6:	f8 01       	movw	r30, r16
    41c8:	91 83       	std	Z+1, r25	; 0x01
    41ca:	80 83       	st	Z, r24
    41cc:	de 01       	movw	r26, r28
    41ce:	a9 5b       	subi	r26, 0xB9	; 185
    41d0:	bf 4f       	sbci	r27, 0xFF	; 255
    41d2:	fe 01       	movw	r30, r28
    41d4:	e5 5b       	subi	r30, 0xB5	; 181
    41d6:	ff 4f       	sbci	r31, 0xFF	; 255
    41d8:	80 81       	ld	r24, Z
    41da:	91 81       	ldd	r25, Z+1	; 0x01
    41dc:	8d 93       	st	X+, r24
    41de:	9c 93       	st	X, r25
    41e0:	fe 01       	movw	r30, r28
    41e2:	e9 5b       	subi	r30, 0xB9	; 185
    41e4:	ff 4f       	sbci	r31, 0xFF	; 255
    41e6:	80 81       	ld	r24, Z
    41e8:	91 81       	ldd	r25, Z+1	; 0x01
    41ea:	01 97       	sbiw	r24, 0x01	; 1
    41ec:	f1 f7       	brne	.-4      	; 0x41ea <main+0x100e>
    41ee:	fe 01       	movw	r30, r28
    41f0:	e9 5b       	subi	r30, 0xB9	; 185
    41f2:	ff 4f       	sbci	r31, 0xFF	; 255
    41f4:	91 83       	std	Z+1, r25	; 0x01
    41f6:	80 83       	st	Z, r24
				 _delay_ms(2);
				LCD_u8GoToXY(LCD_u8_LINE1,0);
    41f8:	81 e0       	ldi	r24, 0x01	; 1
    41fa:	60 e0       	ldi	r22, 0x00	; 0
    41fc:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_u8GoToXY>
				LCD_SendString("1-DC MOTOR 3-EXT");
    4200:	8f ec       	ldi	r24, 0xCF	; 207
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>
				LCD_u8GoToXY(LCD_u8_LINE2,0);
    4208:	82 e0       	ldi	r24, 0x02	; 2
    420a:	60 e0       	ldi	r22, 0x00	; 0
    420c:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_u8GoToXY>
				LCD_SendString("2-STR MOTOR");
    4210:	80 ee       	ldi	r24, 0xE0	; 224
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>


				Get_User_Option(&number);
    4218:	ce 01       	movw	r24, r28
    421a:	84 52       	subi	r24, 0x24	; 36
    421c:	9f 4f       	sbci	r25, 0xFF	; 255
    421e:	0e 94 b6 18 	call	0x316c	; 0x316c <Get_User_Option>
				if(number == '1') // DC Motor
    4222:	fe 01       	movw	r30, r28
    4224:	e4 52       	subi	r30, 0x24	; 36
    4226:	ff 4f       	sbci	r31, 0xFF	; 255
    4228:	80 81       	ld	r24, Z
    422a:	81 33       	cpi	r24, 0x31	; 49
    422c:	09 f0       	breq	.+2      	; 0x4230 <main+0x1054>
    422e:	1e c1       	rjmp	.+572    	; 0x446c <main+0x1290>
				{
					// CLEAR SCREEEN
					LCD_voidSendCmnd(0x01);
    4230:	81 e0       	ldi	r24, 0x01	; 1
    4232:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    4236:	fe 01       	movw	r30, r28
    4238:	ed 5b       	subi	r30, 0xBD	; 189
    423a:	ff 4f       	sbci	r31, 0xFF	; 255
    423c:	80 e0       	ldi	r24, 0x00	; 0
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	a0 e0       	ldi	r26, 0x00	; 0
    4242:	b0 e4       	ldi	r27, 0x40	; 64
    4244:	80 83       	st	Z, r24
    4246:	91 83       	std	Z+1, r25	; 0x01
    4248:	a2 83       	std	Z+2, r26	; 0x02
    424a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    424c:	8e 01       	movw	r16, r28
    424e:	01 5c       	subi	r16, 0xC1	; 193
    4250:	1f 4f       	sbci	r17, 0xFF	; 255
    4252:	fe 01       	movw	r30, r28
    4254:	ed 5b       	subi	r30, 0xBD	; 189
    4256:	ff 4f       	sbci	r31, 0xFF	; 255
    4258:	60 81       	ld	r22, Z
    425a:	71 81       	ldd	r23, Z+1	; 0x01
    425c:	82 81       	ldd	r24, Z+2	; 0x02
    425e:	93 81       	ldd	r25, Z+3	; 0x03
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	4a ef       	ldi	r20, 0xFA	; 250
    4266:	54 e4       	ldi	r21, 0x44	; 68
    4268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    426c:	dc 01       	movw	r26, r24
    426e:	cb 01       	movw	r24, r22
    4270:	f8 01       	movw	r30, r16
    4272:	80 83       	st	Z, r24
    4274:	91 83       	std	Z+1, r25	; 0x01
    4276:	a2 83       	std	Z+2, r26	; 0x02
    4278:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    427a:	fe 01       	movw	r30, r28
    427c:	ff 96       	adiw	r30, 0x3f	; 63
    427e:	60 81       	ld	r22, Z
    4280:	71 81       	ldd	r23, Z+1	; 0x01
    4282:	82 81       	ldd	r24, Z+2	; 0x02
    4284:	93 81       	ldd	r25, Z+3	; 0x03
    4286:	20 e0       	ldi	r18, 0x00	; 0
    4288:	30 e0       	ldi	r19, 0x00	; 0
    428a:	40 e8       	ldi	r20, 0x80	; 128
    428c:	5f e3       	ldi	r21, 0x3F	; 63
    428e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4292:	88 23       	and	r24, r24
    4294:	2c f4       	brge	.+10     	; 0x42a0 <main+0x10c4>
		__ticks = 1;
    4296:	81 e0       	ldi	r24, 0x01	; 1
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	9e af       	std	Y+62, r25	; 0x3e
    429c:	8d af       	std	Y+61, r24	; 0x3d
    429e:	46 c0       	rjmp	.+140    	; 0x432c <main+0x1150>
	else if (__tmp > 65535)
    42a0:	fe 01       	movw	r30, r28
    42a2:	ff 96       	adiw	r30, 0x3f	; 63
    42a4:	60 81       	ld	r22, Z
    42a6:	71 81       	ldd	r23, Z+1	; 0x01
    42a8:	82 81       	ldd	r24, Z+2	; 0x02
    42aa:	93 81       	ldd	r25, Z+3	; 0x03
    42ac:	20 e0       	ldi	r18, 0x00	; 0
    42ae:	3f ef       	ldi	r19, 0xFF	; 255
    42b0:	4f e7       	ldi	r20, 0x7F	; 127
    42b2:	57 e4       	ldi	r21, 0x47	; 71
    42b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42b8:	18 16       	cp	r1, r24
    42ba:	64 f5       	brge	.+88     	; 0x4314 <main+0x1138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42bc:	fe 01       	movw	r30, r28
    42be:	ed 5b       	subi	r30, 0xBD	; 189
    42c0:	ff 4f       	sbci	r31, 0xFF	; 255
    42c2:	60 81       	ld	r22, Z
    42c4:	71 81       	ldd	r23, Z+1	; 0x01
    42c6:	82 81       	ldd	r24, Z+2	; 0x02
    42c8:	93 81       	ldd	r25, Z+3	; 0x03
    42ca:	20 e0       	ldi	r18, 0x00	; 0
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	40 e2       	ldi	r20, 0x20	; 32
    42d0:	51 e4       	ldi	r21, 0x41	; 65
    42d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d6:	dc 01       	movw	r26, r24
    42d8:	cb 01       	movw	r24, r22
    42da:	bc 01       	movw	r22, r24
    42dc:	cd 01       	movw	r24, r26
    42de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e2:	dc 01       	movw	r26, r24
    42e4:	cb 01       	movw	r24, r22
    42e6:	9e af       	std	Y+62, r25	; 0x3e
    42e8:	8d af       	std	Y+61, r24	; 0x3d
    42ea:	0f c0       	rjmp	.+30     	; 0x430a <main+0x112e>
    42ec:	88 ec       	ldi	r24, 0xC8	; 200
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	9c af       	std	Y+60, r25	; 0x3c
    42f2:	8b af       	std	Y+59, r24	; 0x3b
    42f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    42f6:	9c ad       	ldd	r25, Y+60	; 0x3c
    42f8:	01 97       	sbiw	r24, 0x01	; 1
    42fa:	f1 f7       	brne	.-4      	; 0x42f8 <main+0x111c>
    42fc:	9c af       	std	Y+60, r25	; 0x3c
    42fe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4300:	8d ad       	ldd	r24, Y+61	; 0x3d
    4302:	9e ad       	ldd	r25, Y+62	; 0x3e
    4304:	01 97       	sbiw	r24, 0x01	; 1
    4306:	9e af       	std	Y+62, r25	; 0x3e
    4308:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    430a:	8d ad       	ldd	r24, Y+61	; 0x3d
    430c:	9e ad       	ldd	r25, Y+62	; 0x3e
    430e:	00 97       	sbiw	r24, 0x00	; 0
    4310:	69 f7       	brne	.-38     	; 0x42ec <main+0x1110>
    4312:	16 c0       	rjmp	.+44     	; 0x4340 <main+0x1164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4314:	fe 01       	movw	r30, r28
    4316:	ff 96       	adiw	r30, 0x3f	; 63
    4318:	60 81       	ld	r22, Z
    431a:	71 81       	ldd	r23, Z+1	; 0x01
    431c:	82 81       	ldd	r24, Z+2	; 0x02
    431e:	93 81       	ldd	r25, Z+3	; 0x03
    4320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	9e af       	std	Y+62, r25	; 0x3e
    432a:	8d af       	std	Y+61, r24	; 0x3d
    432c:	8d ad       	ldd	r24, Y+61	; 0x3d
    432e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4330:	9a af       	std	Y+58, r25	; 0x3a
    4332:	89 af       	std	Y+57, r24	; 0x39
    4334:	89 ad       	ldd	r24, Y+57	; 0x39
    4336:	9a ad       	ldd	r25, Y+58	; 0x3a
    4338:	01 97       	sbiw	r24, 0x01	; 1
    433a:	f1 f7       	brne	.-4      	; 0x4338 <main+0x115c>
    433c:	9a af       	std	Y+58, r25	; 0x3a
    433e:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(2);
					LCD_SendString("1-CLOCK WISE");
    4340:	8c ee       	ldi	r24, 0xEC	; 236
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>
					LCD_u8GoToXY(LCD_u8_LINE2,0);
    4348:	82 e0       	ldi	r24, 0x02	; 2
    434a:	60 e0       	ldi	r22, 0x00	; 0
    434c:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_u8GoToXY>
					LCD_SendString("2-C CLOCK WISE");
    4350:	89 ef       	ldi	r24, 0xF9	; 249
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>
					Get_User_Option(&number);
    4358:	ce 01       	movw	r24, r28
    435a:	84 52       	subi	r24, 0x24	; 36
    435c:	9f 4f       	sbci	r25, 0xFF	; 255
    435e:	0e 94 b6 18 	call	0x316c	; 0x316c <Get_User_Option>
					if(number == '1'){
    4362:	fe 01       	movw	r30, r28
    4364:	e4 52       	subi	r30, 0x24	; 36
    4366:	ff 4f       	sbci	r31, 0xFF	; 255
    4368:	80 81       	ld	r24, Z
    436a:	81 33       	cpi	r24, 0x31	; 49
    436c:	19 f4       	brne	.+6      	; 0x4374 <main+0x1198>
						DCM_u8_H_ROTATE_CW();
    436e:	0e 94 62 18 	call	0x30c4	; 0x30c4 <DCM_u8_H_ROTATE_CW>
    4372:	02 c0       	rjmp	.+4      	; 0x4378 <main+0x119c>
					}
					else{
						DCM_u8_H_ROTATE_CCW();
    4374:	0e 94 7e 18 	call	0x30fc	; 0x30fc <DCM_u8_H_ROTATE_CCW>
					}
					// CLEAR SCREEEN
					LCD_voidSendCmnd(0x01);
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    437e:	80 e0       	ldi	r24, 0x00	; 0
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	a0 e0       	ldi	r26, 0x00	; 0
    4384:	b0 e4       	ldi	r27, 0x40	; 64
    4386:	8d ab       	std	Y+53, r24	; 0x35
    4388:	9e ab       	std	Y+54, r25	; 0x36
    438a:	af ab       	std	Y+55, r26	; 0x37
    438c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    438e:	6d a9       	ldd	r22, Y+53	; 0x35
    4390:	7e a9       	ldd	r23, Y+54	; 0x36
    4392:	8f a9       	ldd	r24, Y+55	; 0x37
    4394:	98 ad       	ldd	r25, Y+56	; 0x38
    4396:	20 e0       	ldi	r18, 0x00	; 0
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	4a ef       	ldi	r20, 0xFA	; 250
    439c:	54 e4       	ldi	r21, 0x44	; 68
    439e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a2:	dc 01       	movw	r26, r24
    43a4:	cb 01       	movw	r24, r22
    43a6:	89 ab       	std	Y+49, r24	; 0x31
    43a8:	9a ab       	std	Y+50, r25	; 0x32
    43aa:	ab ab       	std	Y+51, r26	; 0x33
    43ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    43ae:	69 a9       	ldd	r22, Y+49	; 0x31
    43b0:	7a a9       	ldd	r23, Y+50	; 0x32
    43b2:	8b a9       	ldd	r24, Y+51	; 0x33
    43b4:	9c a9       	ldd	r25, Y+52	; 0x34
    43b6:	20 e0       	ldi	r18, 0x00	; 0
    43b8:	30 e0       	ldi	r19, 0x00	; 0
    43ba:	40 e8       	ldi	r20, 0x80	; 128
    43bc:	5f e3       	ldi	r21, 0x3F	; 63
    43be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43c2:	88 23       	and	r24, r24
    43c4:	2c f4       	brge	.+10     	; 0x43d0 <main+0x11f4>
		__ticks = 1;
    43c6:	81 e0       	ldi	r24, 0x01	; 1
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	98 ab       	std	Y+48, r25	; 0x30
    43cc:	8f a7       	std	Y+47, r24	; 0x2f
    43ce:	3f c0       	rjmp	.+126    	; 0x444e <main+0x1272>
	else if (__tmp > 65535)
    43d0:	69 a9       	ldd	r22, Y+49	; 0x31
    43d2:	7a a9       	ldd	r23, Y+50	; 0x32
    43d4:	8b a9       	ldd	r24, Y+51	; 0x33
    43d6:	9c a9       	ldd	r25, Y+52	; 0x34
    43d8:	20 e0       	ldi	r18, 0x00	; 0
    43da:	3f ef       	ldi	r19, 0xFF	; 255
    43dc:	4f e7       	ldi	r20, 0x7F	; 127
    43de:	57 e4       	ldi	r21, 0x47	; 71
    43e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43e4:	18 16       	cp	r1, r24
    43e6:	4c f5       	brge	.+82     	; 0x443a <main+0x125e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43e8:	6d a9       	ldd	r22, Y+53	; 0x35
    43ea:	7e a9       	ldd	r23, Y+54	; 0x36
    43ec:	8f a9       	ldd	r24, Y+55	; 0x37
    43ee:	98 ad       	ldd	r25, Y+56	; 0x38
    43f0:	20 e0       	ldi	r18, 0x00	; 0
    43f2:	30 e0       	ldi	r19, 0x00	; 0
    43f4:	40 e2       	ldi	r20, 0x20	; 32
    43f6:	51 e4       	ldi	r21, 0x41	; 65
    43f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43fc:	dc 01       	movw	r26, r24
    43fe:	cb 01       	movw	r24, r22
    4400:	bc 01       	movw	r22, r24
    4402:	cd 01       	movw	r24, r26
    4404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4408:	dc 01       	movw	r26, r24
    440a:	cb 01       	movw	r24, r22
    440c:	98 ab       	std	Y+48, r25	; 0x30
    440e:	8f a7       	std	Y+47, r24	; 0x2f
    4410:	0f c0       	rjmp	.+30     	; 0x4430 <main+0x1254>
    4412:	88 ec       	ldi	r24, 0xC8	; 200
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	9e a7       	std	Y+46, r25	; 0x2e
    4418:	8d a7       	std	Y+45, r24	; 0x2d
    441a:	8d a5       	ldd	r24, Y+45	; 0x2d
    441c:	9e a5       	ldd	r25, Y+46	; 0x2e
    441e:	01 97       	sbiw	r24, 0x01	; 1
    4420:	f1 f7       	brne	.-4      	; 0x441e <main+0x1242>
    4422:	9e a7       	std	Y+46, r25	; 0x2e
    4424:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4426:	8f a5       	ldd	r24, Y+47	; 0x2f
    4428:	98 a9       	ldd	r25, Y+48	; 0x30
    442a:	01 97       	sbiw	r24, 0x01	; 1
    442c:	98 ab       	std	Y+48, r25	; 0x30
    442e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4430:	8f a5       	ldd	r24, Y+47	; 0x2f
    4432:	98 a9       	ldd	r25, Y+48	; 0x30
    4434:	00 97       	sbiw	r24, 0x00	; 0
    4436:	69 f7       	brne	.-38     	; 0x4412 <main+0x1236>
    4438:	14 c0       	rjmp	.+40     	; 0x4462 <main+0x1286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    443a:	69 a9       	ldd	r22, Y+49	; 0x31
    443c:	7a a9       	ldd	r23, Y+50	; 0x32
    443e:	8b a9       	ldd	r24, Y+51	; 0x33
    4440:	9c a9       	ldd	r25, Y+52	; 0x34
    4442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4446:	dc 01       	movw	r26, r24
    4448:	cb 01       	movw	r24, r22
    444a:	98 ab       	std	Y+48, r25	; 0x30
    444c:	8f a7       	std	Y+47, r24	; 0x2f
    444e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4450:	98 a9       	ldd	r25, Y+48	; 0x30
    4452:	9c a7       	std	Y+44, r25	; 0x2c
    4454:	8b a7       	std	Y+43, r24	; 0x2b
    4456:	8b a5       	ldd	r24, Y+43	; 0x2b
    4458:	9c a5       	ldd	r25, Y+44	; 0x2c
    445a:	01 97       	sbiw	r24, 0x01	; 1
    445c:	f1 f7       	brne	.-4      	; 0x445a <main+0x127e>
    445e:	9c a7       	std	Y+44, r25	; 0x2c
    4460:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(2);
					LCD_SendString("END TASK");
    4462:	88 e0       	ldi	r24, 0x08	; 8
    4464:	91 e0       	ldi	r25, 0x01	; 1
    4466:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>
    446a:	8b c1       	rjmp	.+790    	; 0x4782 <main+0x15a6>
					break;
				}
				else if(number == '2') // Stepper Motor
    446c:	fe 01       	movw	r30, r28
    446e:	e4 52       	subi	r30, 0x24	; 36
    4470:	ff 4f       	sbci	r31, 0xFF	; 255
    4472:	80 81       	ld	r24, Z
    4474:	82 33       	cpi	r24, 0x32	; 50
    4476:	09 f0       	breq	.+2      	; 0x447a <main+0x129e>
    4478:	0b c1       	rjmp	.+534    	; 0x4690 <main+0x14b4>
				{
					// CLEAR SCREEEN
					LCD_voidSendCmnd(0x01);
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    4480:	80 e0       	ldi	r24, 0x00	; 0
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	a0 e0       	ldi	r26, 0x00	; 0
    4486:	b0 e4       	ldi	r27, 0x40	; 64
    4488:	8f a3       	std	Y+39, r24	; 0x27
    448a:	98 a7       	std	Y+40, r25	; 0x28
    448c:	a9 a7       	std	Y+41, r26	; 0x29
    448e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4490:	6f a1       	ldd	r22, Y+39	; 0x27
    4492:	78 a5       	ldd	r23, Y+40	; 0x28
    4494:	89 a5       	ldd	r24, Y+41	; 0x29
    4496:	9a a5       	ldd	r25, Y+42	; 0x2a
    4498:	20 e0       	ldi	r18, 0x00	; 0
    449a:	30 e0       	ldi	r19, 0x00	; 0
    449c:	4a ef       	ldi	r20, 0xFA	; 250
    449e:	54 e4       	ldi	r21, 0x44	; 68
    44a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a4:	dc 01       	movw	r26, r24
    44a6:	cb 01       	movw	r24, r22
    44a8:	8b a3       	std	Y+35, r24	; 0x23
    44aa:	9c a3       	std	Y+36, r25	; 0x24
    44ac:	ad a3       	std	Y+37, r26	; 0x25
    44ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    44b0:	6b a1       	ldd	r22, Y+35	; 0x23
    44b2:	7c a1       	ldd	r23, Y+36	; 0x24
    44b4:	8d a1       	ldd	r24, Y+37	; 0x25
    44b6:	9e a1       	ldd	r25, Y+38	; 0x26
    44b8:	20 e0       	ldi	r18, 0x00	; 0
    44ba:	30 e0       	ldi	r19, 0x00	; 0
    44bc:	40 e8       	ldi	r20, 0x80	; 128
    44be:	5f e3       	ldi	r21, 0x3F	; 63
    44c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44c4:	88 23       	and	r24, r24
    44c6:	2c f4       	brge	.+10     	; 0x44d2 <main+0x12f6>
		__ticks = 1;
    44c8:	81 e0       	ldi	r24, 0x01	; 1
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	9a a3       	std	Y+34, r25	; 0x22
    44ce:	89 a3       	std	Y+33, r24	; 0x21
    44d0:	3f c0       	rjmp	.+126    	; 0x4550 <main+0x1374>
	else if (__tmp > 65535)
    44d2:	6b a1       	ldd	r22, Y+35	; 0x23
    44d4:	7c a1       	ldd	r23, Y+36	; 0x24
    44d6:	8d a1       	ldd	r24, Y+37	; 0x25
    44d8:	9e a1       	ldd	r25, Y+38	; 0x26
    44da:	20 e0       	ldi	r18, 0x00	; 0
    44dc:	3f ef       	ldi	r19, 0xFF	; 255
    44de:	4f e7       	ldi	r20, 0x7F	; 127
    44e0:	57 e4       	ldi	r21, 0x47	; 71
    44e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44e6:	18 16       	cp	r1, r24
    44e8:	4c f5       	brge	.+82     	; 0x453c <main+0x1360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44ea:	6f a1       	ldd	r22, Y+39	; 0x27
    44ec:	78 a5       	ldd	r23, Y+40	; 0x28
    44ee:	89 a5       	ldd	r24, Y+41	; 0x29
    44f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	40 e2       	ldi	r20, 0x20	; 32
    44f8:	51 e4       	ldi	r21, 0x41	; 65
    44fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44fe:	dc 01       	movw	r26, r24
    4500:	cb 01       	movw	r24, r22
    4502:	bc 01       	movw	r22, r24
    4504:	cd 01       	movw	r24, r26
    4506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    450a:	dc 01       	movw	r26, r24
    450c:	cb 01       	movw	r24, r22
    450e:	9a a3       	std	Y+34, r25	; 0x22
    4510:	89 a3       	std	Y+33, r24	; 0x21
    4512:	0f c0       	rjmp	.+30     	; 0x4532 <main+0x1356>
    4514:	88 ec       	ldi	r24, 0xC8	; 200
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	98 a3       	std	Y+32, r25	; 0x20
    451a:	8f 8f       	std	Y+31, r24	; 0x1f
    451c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    451e:	98 a1       	ldd	r25, Y+32	; 0x20
    4520:	01 97       	sbiw	r24, 0x01	; 1
    4522:	f1 f7       	brne	.-4      	; 0x4520 <main+0x1344>
    4524:	98 a3       	std	Y+32, r25	; 0x20
    4526:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4528:	89 a1       	ldd	r24, Y+33	; 0x21
    452a:	9a a1       	ldd	r25, Y+34	; 0x22
    452c:	01 97       	sbiw	r24, 0x01	; 1
    452e:	9a a3       	std	Y+34, r25	; 0x22
    4530:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4532:	89 a1       	ldd	r24, Y+33	; 0x21
    4534:	9a a1       	ldd	r25, Y+34	; 0x22
    4536:	00 97       	sbiw	r24, 0x00	; 0
    4538:	69 f7       	brne	.-38     	; 0x4514 <main+0x1338>
    453a:	14 c0       	rjmp	.+40     	; 0x4564 <main+0x1388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    453c:	6b a1       	ldd	r22, Y+35	; 0x23
    453e:	7c a1       	ldd	r23, Y+36	; 0x24
    4540:	8d a1       	ldd	r24, Y+37	; 0x25
    4542:	9e a1       	ldd	r25, Y+38	; 0x26
    4544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4548:	dc 01       	movw	r26, r24
    454a:	cb 01       	movw	r24, r22
    454c:	9a a3       	std	Y+34, r25	; 0x22
    454e:	89 a3       	std	Y+33, r24	; 0x21
    4550:	89 a1       	ldd	r24, Y+33	; 0x21
    4552:	9a a1       	ldd	r25, Y+34	; 0x22
    4554:	9e 8f       	std	Y+30, r25	; 0x1e
    4556:	8d 8f       	std	Y+29, r24	; 0x1d
    4558:	8d 8d       	ldd	r24, Y+29	; 0x1d
    455a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    455c:	01 97       	sbiw	r24, 0x01	; 1
    455e:	f1 f7       	brne	.-4      	; 0x455c <main+0x1380>
    4560:	9e 8f       	std	Y+30, r25	; 0x1e
    4562:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(2);
					LCD_SendString("1-CLOCK WISE");
    4564:	8c ee       	ldi	r24, 0xEC	; 236
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>
					LCD_u8GoToXY(LCD_u8_LINE2,0);
    456c:	82 e0       	ldi	r24, 0x02	; 2
    456e:	60 e0       	ldi	r22, 0x00	; 0
    4570:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_u8GoToXY>
					LCD_SendString("2-C CLOCK WISE");
    4574:	89 ef       	ldi	r24, 0xF9	; 249
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>
					Get_User_Option(&number);
    457c:	ce 01       	movw	r24, r28
    457e:	84 52       	subi	r24, 0x24	; 36
    4580:	9f 4f       	sbci	r25, 0xFF	; 255
    4582:	0e 94 b6 18 	call	0x316c	; 0x316c <Get_User_Option>
					if(number == 1){STM_u8_Rotate_CW();}
    4586:	fe 01       	movw	r30, r28
    4588:	e4 52       	subi	r30, 0x24	; 36
    458a:	ff 4f       	sbci	r31, 0xFF	; 255
    458c:	80 81       	ld	r24, Z
    458e:	81 30       	cpi	r24, 0x01	; 1
    4590:	19 f4       	brne	.+6      	; 0x4598 <main+0x13bc>
    4592:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <STM_u8_Rotate_CW>
    4596:	02 c0       	rjmp	.+4      	; 0x459c <main+0x13c0>
					else{STM_u8_Rotate_CCW();}
    4598:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <STM_u8_Rotate_CCW>
					// CLEAR SCREEEN
					LCD_voidSendCmnd(0x01);
    459c:	81 e0       	ldi	r24, 0x01	; 1
    459e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    45a2:	80 e0       	ldi	r24, 0x00	; 0
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	a0 e0       	ldi	r26, 0x00	; 0
    45a8:	b0 e4       	ldi	r27, 0x40	; 64
    45aa:	89 8f       	std	Y+25, r24	; 0x19
    45ac:	9a 8f       	std	Y+26, r25	; 0x1a
    45ae:	ab 8f       	std	Y+27, r26	; 0x1b
    45b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45b2:	69 8d       	ldd	r22, Y+25	; 0x19
    45b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45ba:	20 e0       	ldi	r18, 0x00	; 0
    45bc:	30 e0       	ldi	r19, 0x00	; 0
    45be:	4a ef       	ldi	r20, 0xFA	; 250
    45c0:	54 e4       	ldi	r21, 0x44	; 68
    45c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45c6:	dc 01       	movw	r26, r24
    45c8:	cb 01       	movw	r24, r22
    45ca:	8d 8b       	std	Y+21, r24	; 0x15
    45cc:	9e 8b       	std	Y+22, r25	; 0x16
    45ce:	af 8b       	std	Y+23, r26	; 0x17
    45d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45d2:	6d 89       	ldd	r22, Y+21	; 0x15
    45d4:	7e 89       	ldd	r23, Y+22	; 0x16
    45d6:	8f 89       	ldd	r24, Y+23	; 0x17
    45d8:	98 8d       	ldd	r25, Y+24	; 0x18
    45da:	20 e0       	ldi	r18, 0x00	; 0
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	40 e8       	ldi	r20, 0x80	; 128
    45e0:	5f e3       	ldi	r21, 0x3F	; 63
    45e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45e6:	88 23       	and	r24, r24
    45e8:	2c f4       	brge	.+10     	; 0x45f4 <main+0x1418>
		__ticks = 1;
    45ea:	81 e0       	ldi	r24, 0x01	; 1
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	9c 8b       	std	Y+20, r25	; 0x14
    45f0:	8b 8b       	std	Y+19, r24	; 0x13
    45f2:	3f c0       	rjmp	.+126    	; 0x4672 <main+0x1496>
	else if (__tmp > 65535)
    45f4:	6d 89       	ldd	r22, Y+21	; 0x15
    45f6:	7e 89       	ldd	r23, Y+22	; 0x16
    45f8:	8f 89       	ldd	r24, Y+23	; 0x17
    45fa:	98 8d       	ldd	r25, Y+24	; 0x18
    45fc:	20 e0       	ldi	r18, 0x00	; 0
    45fe:	3f ef       	ldi	r19, 0xFF	; 255
    4600:	4f e7       	ldi	r20, 0x7F	; 127
    4602:	57 e4       	ldi	r21, 0x47	; 71
    4604:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4608:	18 16       	cp	r1, r24
    460a:	4c f5       	brge	.+82     	; 0x465e <main+0x1482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    460c:	69 8d       	ldd	r22, Y+25	; 0x19
    460e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4610:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4612:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	30 e0       	ldi	r19, 0x00	; 0
    4618:	40 e2       	ldi	r20, 0x20	; 32
    461a:	51 e4       	ldi	r21, 0x41	; 65
    461c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4620:	dc 01       	movw	r26, r24
    4622:	cb 01       	movw	r24, r22
    4624:	bc 01       	movw	r22, r24
    4626:	cd 01       	movw	r24, r26
    4628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    462c:	dc 01       	movw	r26, r24
    462e:	cb 01       	movw	r24, r22
    4630:	9c 8b       	std	Y+20, r25	; 0x14
    4632:	8b 8b       	std	Y+19, r24	; 0x13
    4634:	0f c0       	rjmp	.+30     	; 0x4654 <main+0x1478>
    4636:	88 ec       	ldi	r24, 0xC8	; 200
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	9a 8b       	std	Y+18, r25	; 0x12
    463c:	89 8b       	std	Y+17, r24	; 0x11
    463e:	89 89       	ldd	r24, Y+17	; 0x11
    4640:	9a 89       	ldd	r25, Y+18	; 0x12
    4642:	01 97       	sbiw	r24, 0x01	; 1
    4644:	f1 f7       	brne	.-4      	; 0x4642 <main+0x1466>
    4646:	9a 8b       	std	Y+18, r25	; 0x12
    4648:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    464a:	8b 89       	ldd	r24, Y+19	; 0x13
    464c:	9c 89       	ldd	r25, Y+20	; 0x14
    464e:	01 97       	sbiw	r24, 0x01	; 1
    4650:	9c 8b       	std	Y+20, r25	; 0x14
    4652:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4654:	8b 89       	ldd	r24, Y+19	; 0x13
    4656:	9c 89       	ldd	r25, Y+20	; 0x14
    4658:	00 97       	sbiw	r24, 0x00	; 0
    465a:	69 f7       	brne	.-38     	; 0x4636 <main+0x145a>
    465c:	14 c0       	rjmp	.+40     	; 0x4686 <main+0x14aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    465e:	6d 89       	ldd	r22, Y+21	; 0x15
    4660:	7e 89       	ldd	r23, Y+22	; 0x16
    4662:	8f 89       	ldd	r24, Y+23	; 0x17
    4664:	98 8d       	ldd	r25, Y+24	; 0x18
    4666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    466a:	dc 01       	movw	r26, r24
    466c:	cb 01       	movw	r24, r22
    466e:	9c 8b       	std	Y+20, r25	; 0x14
    4670:	8b 8b       	std	Y+19, r24	; 0x13
    4672:	8b 89       	ldd	r24, Y+19	; 0x13
    4674:	9c 89       	ldd	r25, Y+20	; 0x14
    4676:	98 8b       	std	Y+16, r25	; 0x10
    4678:	8f 87       	std	Y+15, r24	; 0x0f
    467a:	8f 85       	ldd	r24, Y+15	; 0x0f
    467c:	98 89       	ldd	r25, Y+16	; 0x10
    467e:	01 97       	sbiw	r24, 0x01	; 1
    4680:	f1 f7       	brne	.-4      	; 0x467e <main+0x14a2>
    4682:	98 8b       	std	Y+16, r25	; 0x10
    4684:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(2);
					LCD_SendString("END TASK");
    4686:	88 e0       	ldi	r24, 0x08	; 8
    4688:	91 e0       	ldi	r25, 0x01	; 1
    468a:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>
    468e:	79 c0       	rjmp	.+242    	; 0x4782 <main+0x15a6>
					break;

				}
				else{
					// CLEAR SCREEEN
					LCD_voidSendCmnd(0x01);
    4690:	81 e0       	ldi	r24, 0x01	; 1
    4692:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_voidSendCmnd>
    4696:	80 e0       	ldi	r24, 0x00	; 0
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	a0 e0       	ldi	r26, 0x00	; 0
    469c:	b0 e4       	ldi	r27, 0x40	; 64
    469e:	8b 87       	std	Y+11, r24	; 0x0b
    46a0:	9c 87       	std	Y+12, r25	; 0x0c
    46a2:	ad 87       	std	Y+13, r26	; 0x0d
    46a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    46a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    46aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    46ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ae:	20 e0       	ldi	r18, 0x00	; 0
    46b0:	30 e0       	ldi	r19, 0x00	; 0
    46b2:	4a ef       	ldi	r20, 0xFA	; 250
    46b4:	54 e4       	ldi	r21, 0x44	; 68
    46b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ba:	dc 01       	movw	r26, r24
    46bc:	cb 01       	movw	r24, r22
    46be:	8f 83       	std	Y+7, r24	; 0x07
    46c0:	98 87       	std	Y+8, r25	; 0x08
    46c2:	a9 87       	std	Y+9, r26	; 0x09
    46c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46c6:	6f 81       	ldd	r22, Y+7	; 0x07
    46c8:	78 85       	ldd	r23, Y+8	; 0x08
    46ca:	89 85       	ldd	r24, Y+9	; 0x09
    46cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	30 e0       	ldi	r19, 0x00	; 0
    46d2:	40 e8       	ldi	r20, 0x80	; 128
    46d4:	5f e3       	ldi	r21, 0x3F	; 63
    46d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46da:	88 23       	and	r24, r24
    46dc:	2c f4       	brge	.+10     	; 0x46e8 <main+0x150c>
		__ticks = 1;
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	90 e0       	ldi	r25, 0x00	; 0
    46e2:	9e 83       	std	Y+6, r25	; 0x06
    46e4:	8d 83       	std	Y+5, r24	; 0x05
    46e6:	3f c0       	rjmp	.+126    	; 0x4766 <main+0x158a>
	else if (__tmp > 65535)
    46e8:	6f 81       	ldd	r22, Y+7	; 0x07
    46ea:	78 85       	ldd	r23, Y+8	; 0x08
    46ec:	89 85       	ldd	r24, Y+9	; 0x09
    46ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    46f0:	20 e0       	ldi	r18, 0x00	; 0
    46f2:	3f ef       	ldi	r19, 0xFF	; 255
    46f4:	4f e7       	ldi	r20, 0x7F	; 127
    46f6:	57 e4       	ldi	r21, 0x47	; 71
    46f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46fc:	18 16       	cp	r1, r24
    46fe:	4c f5       	brge	.+82     	; 0x4752 <main+0x1576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4700:	6b 85       	ldd	r22, Y+11	; 0x0b
    4702:	7c 85       	ldd	r23, Y+12	; 0x0c
    4704:	8d 85       	ldd	r24, Y+13	; 0x0d
    4706:	9e 85       	ldd	r25, Y+14	; 0x0e
    4708:	20 e0       	ldi	r18, 0x00	; 0
    470a:	30 e0       	ldi	r19, 0x00	; 0
    470c:	40 e2       	ldi	r20, 0x20	; 32
    470e:	51 e4       	ldi	r21, 0x41	; 65
    4710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4714:	dc 01       	movw	r26, r24
    4716:	cb 01       	movw	r24, r22
    4718:	bc 01       	movw	r22, r24
    471a:	cd 01       	movw	r24, r26
    471c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4720:	dc 01       	movw	r26, r24
    4722:	cb 01       	movw	r24, r22
    4724:	9e 83       	std	Y+6, r25	; 0x06
    4726:	8d 83       	std	Y+5, r24	; 0x05
    4728:	0f c0       	rjmp	.+30     	; 0x4748 <main+0x156c>
    472a:	88 ec       	ldi	r24, 0xC8	; 200
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	9c 83       	std	Y+4, r25	; 0x04
    4730:	8b 83       	std	Y+3, r24	; 0x03
    4732:	8b 81       	ldd	r24, Y+3	; 0x03
    4734:	9c 81       	ldd	r25, Y+4	; 0x04
    4736:	01 97       	sbiw	r24, 0x01	; 1
    4738:	f1 f7       	brne	.-4      	; 0x4736 <main+0x155a>
    473a:	9c 83       	std	Y+4, r25	; 0x04
    473c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    473e:	8d 81       	ldd	r24, Y+5	; 0x05
    4740:	9e 81       	ldd	r25, Y+6	; 0x06
    4742:	01 97       	sbiw	r24, 0x01	; 1
    4744:	9e 83       	std	Y+6, r25	; 0x06
    4746:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4748:	8d 81       	ldd	r24, Y+5	; 0x05
    474a:	9e 81       	ldd	r25, Y+6	; 0x06
    474c:	00 97       	sbiw	r24, 0x00	; 0
    474e:	69 f7       	brne	.-38     	; 0x472a <main+0x154e>
    4750:	14 c0       	rjmp	.+40     	; 0x477a <main+0x159e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4752:	6f 81       	ldd	r22, Y+7	; 0x07
    4754:	78 85       	ldd	r23, Y+8	; 0x08
    4756:	89 85       	ldd	r24, Y+9	; 0x09
    4758:	9a 85       	ldd	r25, Y+10	; 0x0a
    475a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    475e:	dc 01       	movw	r26, r24
    4760:	cb 01       	movw	r24, r22
    4762:	9e 83       	std	Y+6, r25	; 0x06
    4764:	8d 83       	std	Y+5, r24	; 0x05
    4766:	8d 81       	ldd	r24, Y+5	; 0x05
    4768:	9e 81       	ldd	r25, Y+6	; 0x06
    476a:	9a 83       	std	Y+2, r25	; 0x02
    476c:	89 83       	std	Y+1, r24	; 0x01
    476e:	89 81       	ldd	r24, Y+1	; 0x01
    4770:	9a 81       	ldd	r25, Y+2	; 0x02
    4772:	01 97       	sbiw	r24, 0x01	; 1
    4774:	f1 f7       	brne	.-4      	; 0x4772 <main+0x1596>
    4776:	9a 83       	std	Y+2, r25	; 0x02
    4778:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(2);
					LCD_SendString("END TASK");
    477a:	88 e0       	ldi	r24, 0x08	; 8
    477c:	91 e0       	ldi	r25, 0x01	; 1
    477e:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LCD_SendString>
				}
			}
		}
	}

	return 0;
    4782:	80 e0       	ldi	r24, 0x00	; 0
}
    4784:	c4 52       	subi	r28, 0x24	; 36
    4786:	df 4f       	sbci	r29, 0xFF	; 255
    4788:	0f b6       	in	r0, 0x3f	; 63
    478a:	f8 94       	cli
    478c:	de bf       	out	0x3e, r29	; 62
    478e:	0f be       	out	0x3f, r0	; 63
    4790:	cd bf       	out	0x3d, r28	; 61
    4792:	cf 91       	pop	r28
    4794:	df 91       	pop	r29
    4796:	1f 91       	pop	r17
    4798:	0f 91       	pop	r16
    479a:	08 95       	ret

0000479c <__prologue_saves__>:
    479c:	2f 92       	push	r2
    479e:	3f 92       	push	r3
    47a0:	4f 92       	push	r4
    47a2:	5f 92       	push	r5
    47a4:	6f 92       	push	r6
    47a6:	7f 92       	push	r7
    47a8:	8f 92       	push	r8
    47aa:	9f 92       	push	r9
    47ac:	af 92       	push	r10
    47ae:	bf 92       	push	r11
    47b0:	cf 92       	push	r12
    47b2:	df 92       	push	r13
    47b4:	ef 92       	push	r14
    47b6:	ff 92       	push	r15
    47b8:	0f 93       	push	r16
    47ba:	1f 93       	push	r17
    47bc:	cf 93       	push	r28
    47be:	df 93       	push	r29
    47c0:	cd b7       	in	r28, 0x3d	; 61
    47c2:	de b7       	in	r29, 0x3e	; 62
    47c4:	ca 1b       	sub	r28, r26
    47c6:	db 0b       	sbc	r29, r27
    47c8:	0f b6       	in	r0, 0x3f	; 63
    47ca:	f8 94       	cli
    47cc:	de bf       	out	0x3e, r29	; 62
    47ce:	0f be       	out	0x3f, r0	; 63
    47d0:	cd bf       	out	0x3d, r28	; 61
    47d2:	09 94       	ijmp

000047d4 <__epilogue_restores__>:
    47d4:	2a 88       	ldd	r2, Y+18	; 0x12
    47d6:	39 88       	ldd	r3, Y+17	; 0x11
    47d8:	48 88       	ldd	r4, Y+16	; 0x10
    47da:	5f 84       	ldd	r5, Y+15	; 0x0f
    47dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    47de:	7d 84       	ldd	r7, Y+13	; 0x0d
    47e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    47e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    47e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    47e6:	b9 84       	ldd	r11, Y+9	; 0x09
    47e8:	c8 84       	ldd	r12, Y+8	; 0x08
    47ea:	df 80       	ldd	r13, Y+7	; 0x07
    47ec:	ee 80       	ldd	r14, Y+6	; 0x06
    47ee:	fd 80       	ldd	r15, Y+5	; 0x05
    47f0:	0c 81       	ldd	r16, Y+4	; 0x04
    47f2:	1b 81       	ldd	r17, Y+3	; 0x03
    47f4:	aa 81       	ldd	r26, Y+2	; 0x02
    47f6:	b9 81       	ldd	r27, Y+1	; 0x01
    47f8:	ce 0f       	add	r28, r30
    47fa:	d1 1d       	adc	r29, r1
    47fc:	0f b6       	in	r0, 0x3f	; 63
    47fe:	f8 94       	cli
    4800:	de bf       	out	0x3e, r29	; 62
    4802:	0f be       	out	0x3f, r0	; 63
    4804:	cd bf       	out	0x3d, r28	; 61
    4806:	ed 01       	movw	r28, r26
    4808:	08 95       	ret

0000480a <_exit>:
    480a:	f8 94       	cli

0000480c <__stop_program>:
    480c:	ff cf       	rjmp	.-2      	; 0x480c <__stop_program>
